ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C22_infer_design1_no_eyetracking_2015_Oct_16_1837
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x93]\x15\x0f$\xfaM@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Oct_16_1837
p66
sVparticipant
p67
VC22
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F0.36684933834476396
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F13.783240980643313
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P12'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F9.1010000000000009
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F0.95999999999999908
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x1a\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V35-raisins.png
p102
sg21
F2
sg69
Vn
sa(dp103
g63
g64
sg20
F6.101
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F0.33999999999999941
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'#\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p109
sg21
F1.1000000000000001
sg69
Vn
sa(dp110
g63
g64
sg20
F4.1340000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F1.4400000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\x0b\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p116
sg21
F1.3
sg69
Vn
sa(dp117
g63
g64
sg20
F2.6840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F1.7600000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\x19\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p123
sg21
F1.3
sg69
Vn
sa(dp124
g63
g64
sg20
F1.617
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F1.7
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x17\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p130
sg21
F1.7
sg69
Vn
sa(dp131
g63
g64
sg20
F3.617
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0.95999999999999908
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x08\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p137
sg21
F2
sg69
Vn
sa(dp138
g63
g64
sg20
F2.3010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.97999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'&\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V50-polo.png
p144
sg21
F1.7
sg69
Vn
sa(dp145
g63
g64
sg20
F2.4169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F1.0199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\r\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p151
sg21
F1.7
sg69
Vn
sa(dp152
g63
g64
sg20
F3.0009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F1.4199999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x15\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V29-beans.png
p158
sg21
F1.7
sg69
Vn
sa(dp159
g63
g64
sg20
F2.5670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0.91999999999999948
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x12\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p165
sg21
F1.5
sg69
Vn
sa(dp166
g63
g64
sg20
F3.4510000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F0.33999999999999853
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\x18\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p172
sg21
F2
sg69
Vn
sa(dp173
g63
g64
sg20
F2.1840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0.93999999999999928
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S"'\x00\x00\x00"
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V51-mars.png
p179
sg21
F1.7
sg69
Vn
sa(dp180
g63
g64
sg20
F2.601
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0.37999999999999901
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x14\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p186
sg21
F1.5
sg69
Vn
sa(dp187
g63
g64
sg20
F3.0840000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0.37999999999999878
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\x1d\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V40-sardines.png
p193
sg21
F1.8
sg69
Vn
sa(dp194
g63
g64
sg20
F2.6669999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F0.29999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'"\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p200
sg21
F1.3999999999999999
sg69
Vn
sa(dp201
g63
g64
sg20
F5.5010000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F1.6199999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\x0c\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V18-mms.png
p207
sg21
F1.7
sg69
Vn
sa(dp208
g63
g64
sg20
F1.9510000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F1.3799999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\t\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p214
sg21
F1.6000000000000001
sg69
Vn
sa(dp215
g63
g64
sg20
F3.6509999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F1.5800000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x1f\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p221
sg21
F1.1000000000000001
sg69
Vn
sa(dp222
g63
g64
sg20
F2.7669999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F0.25999999999999912
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x07\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p228
sg21
F1.3
sg69
Vn
sa(dp229
g63
g64
sg20
F2.5510000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F0.29999999999999916
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\x06\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V7-olives.png
p235
sg21
F1.3
sg69
Vn
sa(dp236
g63
g64
sg20
F2.9169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F0.75999999999999979
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x03\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V4-corn.png
p242
sg21
F1.1000000000000001
sg69
Vn
sa(dp243
g63
g64
sg20
F2.7669999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0.75999999999999979
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x04\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p249
sg21
F1
sg69
Vn
sa(dp250
g63
g64
sg20
F2.9169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F0.87999999999999923
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'\x01\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p256
sg21
F1.7
sg69
Vn
sa(dp257
g63
g64
sg20
F1.851
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F1.3999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\x1e\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p263
sg21
F1.3999999999999999
sg69
Vn
sa(dp264
g63
g64
sg20
F2.1339999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0.75999999999999934
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x1b\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p270
sg21
F1.3999999999999999
sg69
Vn
sa(dp271
g63
g64
sg20
F2.0169999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F0.79999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x02\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p277
sg21
F1.3999999999999999
sg69
Vn
sa(dp278
g63
g64
sg20
F4.0839999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F0.71999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x0f\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p284
sg21
F1.8
sg69
Vn
sa(dp285
g63
g64
sg20
F1.2170000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F1.3999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'\x13\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p291
sg21
F1.3999999999999999
sg69
Vn
sa(dp292
g63
g64
sg20
F2.8170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0.99999999999999978
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'$\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V48-twix.png
p298
sg21
F1.2
sg69
Vn
sa(dp299
g63
g64
sg20
F1.417
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F1.2
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x1c\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p305
sg21
F1.2
sg69
Vn
sa(dp306
g63
g64
sg20
F3.2010000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F0.79999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S' \x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p312
sg21
F1.3999999999999999
sg69
Vn
sa(dp313
g63
g64
sg20
F1.851
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F1.1999999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'\x11\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p319
sg21
F1.5
sg69
Vn
sa(dp320
g63
g64
sg20
F4.0339999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F1.0199999999999991
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'!\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V44-crunch.png
p326
sg21
F2
sg69
Vn
sa(dp327
g63
g64
sg20
F2.351
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F1.2199999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x10\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V22-daim.png
p333
sg21
F1.7
sg69
Vn
sa(dp334
g63
g64
sg20
F2.617
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F1.3399999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\x0e\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p340
sg21
F1.8
sg69
Vn
sa(dp341
g63
g64
sg20
F1.9510000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F1.0599999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'%\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p347
sg21
F1.7
sg69
Vn
sa(dp348
g63
g64
sg20
F8.6669999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F1.0999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'\x16\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p354
sg21
F1.5
sg69
Vn
sa(dp355
g63
g64
sg20
F1.7170000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F1.2200000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'\n\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p361
sg21
F1
sg69
Vn
sa(dp362
g63
g64
sg20
F2.3010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F1.6000000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x05\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p368
sg21
F1.1000000000000001
sg69
Vn
sa(dp369
g63
g64
sg20
F1.585
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F1.1000000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x00\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p375
sg21
F1.1000000000000001
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F4.91670667539438
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'40-sardines.png'
p380
sg26
F4.5
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'right'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F3.4333216063096188
sg27
F2.9510000000000001
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p389
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'left'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F1.3833727528617601
sg27
F1.117
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'7-olives.png'
p398
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'right'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F1.5833668798441067
sg27
F1.3009999999999999
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'51-mars.png'
p407
sg26
F5.799999999999998
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'left'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F1.050044646319293
sg27
F1.7669999999999999
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p416
sg26
F3.9000000000000004
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'right'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F2.0666906528967957
sg27
F2.4670000000000001
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'31-hobnobs.png'
p425
sg26
F5.2000000000000002
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'left'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F1.3832729686218954
sg27
F1.3340000000000001
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p434
sg26
F3.3999999999999999
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'left'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F1.9333806215581717
sg27
F1.2010000000000001
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p443
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'right'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F1.216753032298584
sg27
F1.167
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p452
sg26
F2.7999999999999998
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'right'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F1.4000680813587678
sg27
F0.61699999999999999
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'46-pistachios.png'
p461
sg26
F5.5999999999999988
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'right'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F3.3334752170158026
sg27
F1.8340000000000001
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'4-corn.png'
p470
sg26
F2.5999999999999992
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F1.9334444834712485
sg27
F2.0840000000000001
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p479
sg26
F3.5
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'left'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.316847456699179
sg27
F0.95099999999999996
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'5-pineapple.png'
p488
sg26
F4.5
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'left'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.5499579765819362
sg27
F2.0169999999999999
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p497
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'right'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F1.3000951086360146
sg27
F1.2669999999999999
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'48-twix.png'
p506
sg26
F2.399999999999999
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'left'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F2.333449558213033
sg27
F1.117
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'49-yorkie.png'
p515
sg26
F2.7999999999999998
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'left'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F1.5168113633153553
sg27
F0.65100000000000002
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p524
sg26
F3.2999999999999998
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'right'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.700037461851025
sg27
F1.0169999999999999
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p533
sg26
F4.7000000000000011
sg28
F3
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'right'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F1.9334054250721238
sg27
F2.6339999999999999
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p542
sg26
F1.9999999999999991
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F2.8168463163056003
sg27
F1.0669999999999999
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'18-mms.png'
p551
sg26
F4.6000000000000014
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'left'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F1.166698407556396
sg27
F1.7509999999999999
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p560
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'right'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F2.1001605670935533
sg27
F1.401
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p569
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'left'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.0836126341673662
sg27
F1.101
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p578
sg26
F5.799999999999998
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'left'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F1.9665862500769435
sg27
F1.7170000000000001
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p587
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'left'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F1.2667081579020305
sg27
F1.1839999999999999
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'25-kitkat.png'
p596
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'right'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F1.4167443083060789
sg27
F1.0840000000000001
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p605
sg26
F4.2000000000000002
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'right'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F1.1000493789433676
sg27
F1.1339999999999999
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p614
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'right'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F1.3668328026687959
sg27
F1.2669999999999999
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p623
sg26
F1.8999999999999992
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'right'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F1.6166529059446475
sg27
F1.1180000000000001
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p632
sg26
F3.9000000000000008
sg28
F3
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'right'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.216723382127384
sg27
F2.0009999999999999
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p641
sg26
F4
sg28
F4
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'left'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F2.0997163846877811
sg27
F0.66700000000000004
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'22-daim.png'
p650
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'left'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F1.766722127696994
sg27
F1.367
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'29-beans.png'
p659
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'left'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F3.2666559850040358
sg27
F2.5670000000000002
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p668
sg26
F3.9000000000000008
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'left'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F7.4499219972349238
sg27
F0.95099999999999996
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'38-maltesers.png'
p677
sg26
F4.2000000000000002
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'right'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F1.1664475214711274
sg27
F0.98399999999999999
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'35-raisins.png'
p686
sg26
F2.1999999999999984
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'right'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F1.9166904248195351
sg27
F1.2010000000000001
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'50-polo.png'
p695
sg26
F4
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'right'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.9000213253166294
sg27
F1.8839999999999999
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'44-crunch.png'
p704
sg26
F3.2999999999999998
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'right'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F1.2001546370593132
sg27
F0.71799999999999997
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p713
sg26
F5.2000000000000002
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'right'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F1.4333851831215725
sg27
F1.0509999999999999
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p722
sg26
F3.8999999999999999
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'left'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F1.2832808943385317
sg27
F0.83399999999999996
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p731
sg26
F4.8000000000000016
sg28
F3
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'left'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F1.6667882133733656
sg27
F2.2170000000000001
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F277.8758207966348
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F5.2167182503653748
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p743
sg82
S'37-nakd_cashew_cookie.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'9-yu_mango_pieces.png'
p748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\n\x10\x121\x19\x02\x84\x88'
tRp753
sa(dp754
g63
g64
sg81
S'12-topic.png'
p755
sg82
S'39-mackerel.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'39-mackerel.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\n\x10\x121!\x02Q\xc0'
tRp764
sa(dp765
g63
g64
sg81
S'11-snickers.png'
p766
sg82
S'54-frubes_yogurt.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'54-frubes_yogurt.png'
p771
sg33
g771
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\n\x10\x121)\x05vp'
tRp775
sa(dp776
g63
g64
sg81
S'32-hovis_crackers.png'
p777
sg82
S'32-hovis_crackers.png'
p778
sg56
Vr
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\n\x10\x1210\x00\x88\xb8'
tRp786
sa(dp787
g63
g64
sg81
S'52-aero_mousse.png'
p788
sg82
S'14-discos_salt_vinegar.png'
p789
sg56
Vr
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p792
I0
sg83
S'14-discos_salt_vinegar.png'
p793
sg33
g793
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p794
sS'practice_loop.thisIndex'
p795
g59
(g98
S'\x04\x00\x00\x00'
tRp796
sg34
g752
(S'\x07\xdf\n\x10\x1217\x085\x90'
tRp797
sa(dp798
g63
g64
sg81
g766
sg82
S'11-snickers.png'
p799
sg56
Vr
sS'practice_loop.thisN'
p800
I5
sS'practice_loop.thisTrialN'
p801
I5
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p802
I0
sg83
g771
sg33
g771
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p803
sS'practice_loop.thisIndex'
p804
g59
(g98
S'\x05\x00\x00\x00'
tRp805
sg34
g752
(S'\x07\xdf\n\x10\x122\x02\x08\xc20'
tRp806
sa(dp807
g63
g64
sg81
S'53-cheestrings.png'
p808
sg82
S'53-cheestrings.png'
p809
sg56
Vr
sS'practice_loop.thisN'
p810
I6
sS'practice_loop.thisTrialN'
p811
I6
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p812
I0
sg83
S'47-picnic.png'
p813
sg33
g813
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p814
sS'practice_loop.thisIndex'
p815
g59
(g98
S'\x06\x00\x00\x00'
tRp816
sg34
g752
(S'\x07\xdf\n\x10\x122\t\x08\x1a8'
tRp817
sa(dp818
g63
g64
sg81
g743
sg82
S'9-yu_mango_pieces.png'
p819
sg56
Vr
sS'practice_loop.thisN'
p820
I7
sS'practice_loop.thisTrialN'
p821
I7
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p822
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p823
sS'practice_loop.thisIndex'
p824
g59
(g98
S'\x07\x00\x00\x00'
tRp825
sg34
g752
(S'\x07\xdf\n\x10\x122\x0f\x0ec\x98'
tRp826
sa(dp827
g63
g64
sg81
S'15-walnut_whip.png'
p828
sg82
S'15-walnut_whip.png'
p829
sg56
Vr
sS'practice_loop.thisN'
p830
I8
sS'practice_loop.thisTrialN'
p831
I8
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p832
I0
sg83
S'28-maple_pecan.png'
p833
sg33
g833
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p834
sS'practice_loop.thisIndex'
p835
g59
(g98
S'\x08\x00\x00\x00'
tRp836
sg34
g752
(S'\x07\xdf\n\x10\x122\x16\x00.\xe0'
tRp837
sa(dp838
g63
g64
sg81
g808
sg82
S'47-picnic.png'
p839
sg56
Vr
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p842
I0
sg83
g813
sg33
g813
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S'\x07\xdf\n\x10\x122\x1c\x08\xd5\xb8'
tRp846
sa(dp847
g63
g64
sg81
g755
sg82
S'12-topic.png'
p848
sg56
Vr
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g760
sg33
g760
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\n\x10\x122#\x0c\xb5\xe8'
tRp855
sa(dp856
g63
g64
sg81
g828
sg82
S'28-maple_pecan.png'
p857
sg56
Vr
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g833
sg33
g828
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\n\x10\x122)\r\xc3p'
tRp864
sa(dp865
g63
g64
sg81
g777
sg82
S'24-food_doctor_apple_walnut_bar.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\n\x10\x1221\x03S\x90'
tRp873
sa(dp874
g63
g64
sg81
g788
sg82
S'52-aero_mousse.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\n\x10\x1228\x0b\xf6\x80'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F34.433013985759317
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'23-crunchie_redo.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'left'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'33-ambrosia_rice.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'33-ambrosia_rice.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
S'23-crunchie_redo.png'
p907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
g899
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F1.75012002618314
sg34
g752
(S'\x07\xdf\n\x10\x123.\x03\x99\xe0'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'43-mrporky_pork_crackles_redo.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'right'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'18-mms.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'18-mms.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p925
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F1.2001041747462295
sg34
g752
(S'\x07\xdf\n\x10\x1235\x00U\xf0'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'29-beans.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'left'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'46-pistachios.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'46-pistachios.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p942
I0
sg909
S'29-beans.png'
p943
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vn
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.3168594308081083
sg34
g752
(S'\x07\xdf\n\x10\x123;\x03\xc0\xf0'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'4-corn.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'left'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
S'10-bounty_redo.png'
p953
sg63
g64
sS'trial_loop.thisIndex'
p954
g59
(g98
S'\x03\x00\x00\x00'
tRp955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p956
I0
sg903
S'10-bounty_redo.png'
p957
sS'block_loop.thisRepN'
p958
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p959
I0
sg909
S'4-corn.png'
p960
sg55
g11
sS'block_loop.thisTrial'
p961
Nsg69
Vn
sS'block_loop.thisTrialN'
p962
I0
sg39
F1.9334923799033277
sg34
g752
(S'\x07\xdf\n\x10\x124\x05\t\x18 '
tRp963
sa(dp964
S'trial_loop.thisTrialN'
p965
I4
sg894
S'48-twix.png'
p966
sS'block_loop.thisIndex'
p967
g888
sg38
S'left'
p968
sg58
g62
sS'trial_loop.thisN'
p969
I4
sg33
S'48-twix.png'
p970
sg63
g64
sS'trial_loop.thisIndex'
p971
g59
(g98
S'\x04\x00\x00\x00'
tRp972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p973
I0
sg903
S'50-polo.png'
p974
sS'block_loop.thisRepN'
p975
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p976
I0
sg909
S'50-polo.png'
p977
sg55
g11
sS'block_loop.thisTrial'
p978
Nsg69
Vn
sS'block_loop.thisTrialN'
p979
I0
sg39
F1.2002056695673673
sg34
g752
(S'\x07\xdf\n\x10\x124\x0c\x08\xae\xa8'
tRp980
sa(dp981
S'trial_loop.thisTrialN'
p982
I5
sg894
S'46-pistachios.png'
p983
sS'block_loop.thisIndex'
p984
g888
sg38
S'left'
p985
sg58
g62
sS'trial_loop.thisN'
p986
I5
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p987
g59
(g98
S'\x05\x00\x00\x00'
tRp988
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p989
I0
sg903
S'29-beans.png'
p990
sS'block_loop.thisRepN'
p991
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p992
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p993
Nsg69
Vn
sS'block_loop.thisTrialN'
p994
I0
sg39
F1.166792204741796
sg34
g752
(S'\x07\xdf\n\x10\x124\x12\x0cX('
tRp995
sa(dp996
S'trial_loop.thisTrialN'
p997
I6
sg894
S'26-walkers_smoky_bacon.png'
p998
sS'block_loop.thisIndex'
p999
g888
sg38
S'left'
p1000
sg58
g62
sS'trial_loop.thisN'
p1001
I6
sg33
S'44-crunch.png'
p1002
sg63
g64
sS'trial_loop.thisIndex'
p1003
g59
(g98
S'\x06\x00\x00\x00'
tRp1004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1005
I0
sg903
S'44-crunch.png'
p1006
sS'block_loop.thisRepN'
p1007
I0
sg906
g1002
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1008
I0
sg909
S'26-walkers_smoky_bacon.png'
p1009
sg55
g11
sS'block_loop.thisTrial'
p1010
Nsg69
Vn
sS'block_loop.thisTrialN'
p1011
I0
sg39
F1.1834171140799299
sg34
g752
(S'\x07\xdf\n\x10\x124\x19\x00\x07\xd0'
tRp1012
sa(dp1013
S'trial_loop.thisTrialN'
p1014
I7
sg894
S'1-treacle_cookies.png'
p1015
sS'block_loop.thisIndex'
p1016
g888
sg38
S'left'
p1017
sg58
g62
sS'trial_loop.thisN'
p1018
I7
sg33
S'21-nakd_banana_crunch.png'
p1019
sg63
g64
sS'trial_loop.thisIndex'
p1020
g59
(g98
S'\x07\x00\x00\x00'
tRp1021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1022
I0
sg903
S'21-nakd_banana_crunch.png'
p1023
sS'block_loop.thisRepN'
p1024
I0
sg906
S'1-treacle_cookies.png'
p1025
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1026
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p1027
Nsg69
Vn
sS'block_loop.thisTrialN'
p1028
I0
sg39
F1.3834266363446659
sg34
g752
(S'\x07\xdf\n\x10\x124\x1f\x0388'
tRp1029
sa(dp1030
S'trial_loop.thisTrialN'
p1031
I8
sg894
S'18-mms.png'
p1032
sS'block_loop.thisIndex'
p1033
g888
sg38
S'left'
p1034
sg58
g62
sS'trial_loop.thisN'
p1035
I8
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1036
g59
(g98
S'\x08\x00\x00\x00'
tRp1037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1038
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1039
sS'block_loop.thisRepN'
p1040
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1041
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p1042
Nsg69
Vn
sS'block_loop.thisTrialN'
p1043
I0
sg39
F1.3835153017680568
sg34
g752
(S'\x07\xdf\n\x10\x124%\t\xbc0'
tRp1044
sa(dp1045
S'trial_loop.thisTrialN'
p1046
I9
sg894
S'8-liquorice_catherine_wheels.png'
p1047
sS'block_loop.thisIndex'
p1048
g888
sg38
S'right'
p1049
sg58
g62
sS'trial_loop.thisN'
p1050
I9
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1051
sg63
g64
sS'trial_loop.thisIndex'
p1052
g59
(g98
S'\t\x00\x00\x00'
tRp1053
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1054
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1055
sS'block_loop.thisRepN'
p1056
I0
sg906
g1051
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1057
I0
sg909
S'8-liquorice_catherine_wheels.png'
p1058
sg55
g11
sS'block_loop.thisTrial'
p1059
Nsg69
Vn
sS'block_loop.thisTrialN'
p1060
I0
sg39
F1.2169765489925339
sg34
g752
(S'\x07\xdf\n\x10\x124,\x00\xc3P'
tRp1061
sa(dp1062
S'trial_loop.thisTrialN'
p1063
I10
sg894
S'49-yorkie.png'
p1064
sS'block_loop.thisIndex'
p1065
g888
sg38
S'left'
p1066
sg58
g62
sS'trial_loop.thisN'
p1067
I10
sg33
S'49-yorkie.png'
p1068
sg63
g64
sS'trial_loop.thisIndex'
p1069
g59
(g98
S'\n\x00\x00\x00'
tRp1070
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1071
I0
sg903
S'35-raisins.png'
p1072
sS'block_loop.thisRepN'
p1073
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1074
I0
sg909
S'35-raisins.png'
p1075
sg55
g11
sS'block_loop.thisTrial'
p1076
Nsg69
Vn
sS'block_loop.thisTrialN'
p1077
I0
sg39
F1.3668396450193541
sg34
g752
(S'\x07\xdf\n\x10\x1242\x04\xa7h'
tRp1078
sa(dp1079
S'trial_loop.thisTrialN'
p1080
I11
sg894
S'7-olives.png'
p1081
sS'block_loop.thisIndex'
p1082
g888
sg38
S'right'
p1083
sg58
g62
sS'trial_loop.thisN'
p1084
I11
sg33
S'22-daim.png'
p1085
sg63
g64
sS'trial_loop.thisIndex'
p1086
g59
(g98
S'\x0b\x00\x00\x00'
tRp1087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1088
I0
sg903
S'22-daim.png'
p1089
sS'block_loop.thisRepN'
p1090
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1091
I0
sg909
S'7-olives.png'
p1092
sg55
g11
sS'block_loop.thisTrial'
p1093
Nsg69
Vn
sS'block_loop.thisTrialN'
p1094
I0
sg39
F1.1501940945963725
sg34
g752
(S'\x07\xdf\n\x10\x1248\n\xb2H'
tRp1095
sa(dp1096
S'trial_loop.thisTrialN'
p1097
I12
sg894
S'2-steamed_puddings.png'
p1098
sS'block_loop.thisIndex'
p1099
g888
sg38
S'left'
p1100
sg58
g62
sS'trial_loop.thisN'
p1101
I12
sg33
S'2-steamed_puddings.png'
p1102
sg63
g64
sS'trial_loop.thisIndex'
p1103
g59
(g98
S'\x0c\x00\x00\x00'
tRp1104
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1105
I0
sg903
S'20-fruit_pastilles.png'
p1106
sS'block_loop.thisRepN'
p1107
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1108
I0
sg909
S'20-fruit_pastilles.png'
p1109
sg55
g11
sS'block_loop.thisTrial'
p1110
Nsg69
Vn
sS'block_loop.thisTrialN'
p1111
I0
sg39
F1.9667287989832403
sg34
g752
(S'\x07\xdf\n\x10\x125\x02\ri\x98'
tRp1112
sa(dp1113
S'trial_loop.thisTrialN'
p1114
I13
sg894
S'35-raisins.png'
p1115
sS'block_loop.thisIndex'
p1116
g888
sg38
S'right'
p1117
sg58
g62
sS'trial_loop.thisN'
p1118
I13
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p1119
g59
(g98
S'\r\x00\x00\x00'
tRp1120
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1121
I0
sg903
S'49-yorkie.png'
p1122
sS'block_loop.thisRepN'
p1123
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1124
I0
sg909
g1075
sg55
g11
sS'block_loop.thisTrial'
p1125
Nsg69
Vn
sS'block_loop.thisTrialN'
p1126
I0
sg39
F1.250216959440877
sg34
g752
(S'\x07\xdf\n\x10\x125\t\ry8'
tRp1127
sa(dp1128
S'trial_loop.thisTrialN'
p1129
I14
sg894
S'40-sardines.png'
p1130
sS'block_loop.thisIndex'
p1131
g888
sg38
S'left'
p1132
sg58
g62
sS'trial_loop.thisN'
p1133
I14
sg33
S'5-pineapple.png'
p1134
sg63
g64
sS'trial_loop.thisIndex'
p1135
g59
(g98
S'\x0e\x00\x00\x00'
tRp1136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1137
I0
sg903
S'5-pineapple.png'
p1138
sS'block_loop.thisRepN'
p1139
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1140
I0
sg909
S'40-sardines.png'
p1141
sg55
g11
sS'block_loop.thisTrial'
p1142
Nsg69
Vn
sS'block_loop.thisTrialN'
p1143
I0
sg39
F2.1169063579072827
sg34
g752
(S'\x07\xdf\n\x10\x125\x10\x02\x98\x10'
tRp1144
sa(dp1145
S'trial_loop.thisTrialN'
p1146
I15
sg894
g1015
sS'block_loop.thisIndex'
p1147
g888
sg38
S'right'
p1148
sg58
g62
sS'trial_loop.thisN'
p1149
I15
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p1150
g59
(g98
S'\x0f\x00\x00\x00'
tRp1151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1152
I0
sg903
g1023
sS'block_loop.thisRepN'
p1153
I0
sg906
g1025
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1154
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p1155
Nsg69
Vn
sS'block_loop.thisTrialN'
p1156
I0
sg39
F1.7834074777711066
sg34
g752
(S'\x07\xdf\n\x10\x125\x17\x04\xcex'
tRp1157
sa(dp1158
S'trial_loop.thisTrialN'
p1159
I16
sg894
S'33-ambrosia_rice.png'
p1160
sS'block_loop.thisIndex'
p1161
g888
sg38
S'right'
p1162
sg58
g62
sS'trial_loop.thisN'
p1163
I16
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1164
g59
(g98
S'\x10\x00\x00\x00'
tRp1165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1166
I0
sg903
S'23-crunchie_redo.png'
p1167
sS'block_loop.thisRepN'
p1168
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1169
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1170
Nsg69
Vn
sS'block_loop.thisTrialN'
p1171
I0
sg39
F1.1835140473413048
sg34
g752
(S'\x07\xdf\n\x10\x125\x1e\x02\x03\xa0'
tRp1172
sa(dp1173
S'trial_loop.thisTrialN'
p1174
I17
sg894
g966
sS'block_loop.thisIndex'
p1175
g888
sg38
S'left'
p1176
sg58
g62
sS'trial_loop.thisN'
p1177
I17
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1178
g59
(g98
S'\x11\x00\x00\x00'
tRp1179
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1180
I0
sg903
g974
sS'block_loop.thisRepN'
p1181
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1182
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p1183
Nsg69
Vn
sS'block_loop.thisTrialN'
p1184
I0
sg39
F1.433415688592504
sg34
g752
(S'\x07\xdf\n\x10\x125$\x05r\x88'
tRp1185
sa(dp1186
S'trial_loop.thisTrialN'
p1187
I18
sg894
S'3-ellas_strawberries_apples.png'
p1188
sS'block_loop.thisIndex'
p1189
g888
sg38
S'right'
p1190
sg58
g62
sS'trial_loop.thisN'
p1191
I18
sg33
S'13-mccoys_steak_crisps.png'
p1192
sg63
g64
sS'trial_loop.thisIndex'
p1193
g59
(g98
S'\x12\x00\x00\x00'
tRp1194
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1195
I0
sg903
S'13-mccoys_steak_crisps.png'
p1196
sS'block_loop.thisRepN'
p1197
I0
sg906
S'3-ellas_strawberries_apples.png'
p1198
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1199
I0
sg909
g1192
sg55
g11
sS'block_loop.thisTrial'
p1200
Nsg69
Vn
sS'block_loop.thisTrialN'
p1201
I0
sg39
F1.5167589053162374
sg34
g752
(S'\x07\xdf\n\x10\x125*\x0co\x98'
tRp1202
sa(dp1203
S'trial_loop.thisTrialN'
p1204
I19
sg894
g1032
sS'block_loop.thisIndex'
p1205
g888
sg38
S'left'
p1206
sg58
g62
sS'trial_loop.thisN'
p1207
I19
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1208
g59
(g98
S'\x13\x00\x00\x00'
tRp1209
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1210
I0
sg903
g1039
sS'block_loop.thisRepN'
p1211
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1212
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p1213
Nsg69
Vn
sS'block_loop.thisTrialN'
p1214
I0
sg39
F1.6001793835530407
sg34
g752
(S'\x07\xdf\n\x10\x1251\x05\x99\x98'
tRp1215
sa(dp1216
S'trial_loop.thisTrialN'
p1217
I20
sg894
S'36-fig_rolls.png'
p1218
sS'block_loop.thisIndex'
p1219
g888
sg38
S'right'
p1220
sg58
g62
sS'trial_loop.thisN'
p1221
I20
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p1222
sg63
g64
sS'trial_loop.thisIndex'
p1223
g59
(g98
S'\x14\x00\x00\x00'
tRp1224
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1225
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1226
sS'block_loop.thisRepN'
p1227
I0
sg906
S'36-fig_rolls.png'
p1228
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1229
I0
sg909
g1222
sg55
g11
sS'block_loop.thisTrial'
p1230
Nsg69
Vn
sS'block_loop.thisTrialN'
p1231
I0
sg39
F1.1667614141770173
sg34
g752
(S'\x07\xdf\n\x10\x1257\x0f6\x88'
tRp1232
sa(dp1233
S'trial_loop.thisTrialN'
p1234
I21
sg894
S'42-mrkipling_lemon_slices.png'
p1235
sS'block_loop.thisIndex'
p1236
g888
sg38
S'left'
p1237
sg58
g62
sS'trial_loop.thisN'
p1238
I21
sg33
S'42-mrkipling_lemon_slices.png'
p1239
sg63
g64
sS'trial_loop.thisIndex'
p1240
g59
(g98
S'\x15\x00\x00\x00'
tRp1241
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1242
I0
sg903
S'16-skips_prawn.png'
p1243
sS'block_loop.thisRepN'
p1244
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1245
I0
sg909
S'16-skips_prawn.png'
p1246
sg55
g11
sS'block_loop.thisTrial'
p1247
Nsg69
Vn
sS'block_loop.thisTrialN'
p1248
I0
sg39
F1.4333216063096188
sg34
g752
(S'\x07\xdf\n\x10\x126\x02\x03$\xb0'
tRp1249
sa(dp1250
S'trial_loop.thisTrialN'
p1251
I22
sg894
g1032
sS'block_loop.thisIndex'
p1252
g888
sg38
S'left'
p1253
sg58
g62
sS'trial_loop.thisN'
p1254
I22
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1255
g59
(g98
S'\x16\x00\x00\x00'
tRp1256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1257
I0
sg903
g1039
sS'block_loop.thisRepN'
p1258
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1259
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p1260
Nsg69
Vn
sS'block_loop.thisTrialN'
p1261
I0
sg39
F0.83349232288674102
sg34
g752
(S'\x07\xdf\n\x10\x126\x08\n!\xc0'
tRp1262
sa(dp1263
S'trial_loop.thisTrialN'
p1264
I23
sg894
S'20-fruit_pastilles.png'
p1265
sS'block_loop.thisIndex'
p1266
g888
sg38
S'right'
p1267
sg58
g62
sS'trial_loop.thisN'
p1268
I23
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p1269
g59
(g98
S'\x17\x00\x00\x00'
tRp1270
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1271
I0
sg903
S'2-steamed_puddings.png'
p1272
sS'block_loop.thisRepN'
p1273
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1274
I0
sg909
g1109
sg55
g11
sS'block_loop.thisTrial'
p1275
Nsg69
Vn
sS'block_loop.thisTrialN'
p1276
I0
sg39
F1.0501407242845744
sg34
g752
(S'\x07\xdf\n\x10\x126\x0e\x08\x16P'
tRp1277
sa(dp1278
S'trial_loop.thisTrialN'
p1279
I24
sg894
g1235
sS'block_loop.thisIndex'
p1280
g888
sg38
S'left'
p1281
sg58
g62
sS'trial_loop.thisN'
p1282
I24
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p1283
g59
(g98
S'\x18\x00\x00\x00'
tRp1284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1285
I0
sg903
g1243
sS'block_loop.thisRepN'
p1286
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1287
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p1288
Nsg69
Vn
sS'block_loop.thisTrialN'
p1289
I0
sg39
F1.4004176112903224
sg34
g752
(S'\x07\xdf\n\x10\x126\x14\t^p'
tRp1290
sa(dp1291
S'trial_loop.thisTrialN'
p1292
I25
sg894
g1098
sS'block_loop.thisIndex'
p1293
g888
sg38
S'left'
p1294
sg58
g62
sS'trial_loop.thisN'
p1295
I25
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p1296
g59
(g98
S'\x19\x00\x00\x00'
tRp1297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1298
I0
sg903
g1106
sS'block_loop.thisRepN'
p1299
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1300
I0
sg909
g1109
sg55
g11
sS'block_loop.thisTrial'
p1301
Nsg69
Vn
sS'block_loop.thisTrialN'
p1302
I0
sg39
F0.95019341036459082
sg34
g752
(S'\x07\xdf\n\x10\x126\x1b\x00\xde\xa8'
tRp1303
sa(dp1304
S'trial_loop.thisTrialN'
p1305
I26
sg894
g1160
sS'block_loop.thisIndex'
p1306
g888
sg38
S'left'
p1307
sg58
g62
sS'trial_loop.thisN'
p1308
I26
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1309
g59
(g98
S'\x1a\x00\x00\x00'
tRp1310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1311
I0
sg903
g1167
sS'block_loop.thisRepN'
p1312
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1313
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1314
Nsg69
Vn
sS'block_loop.thisTrialN'
p1315
I0
sg39
F1.5834609621269919
sg34
g752
(S'\x07\xdf\n\x10\x126!\x00}\x00'
tRp1316
sa(dp1317
S'trial_loop.thisTrialN'
p1318
I27
sg894
S'51-mars.png'
p1319
sS'block_loop.thisIndex'
p1320
g888
sg38
S'left'
p1321
sg58
g62
sS'trial_loop.thisN'
p1322
I27
sg33
S'51-mars.png'
p1323
sg63
g64
sS'trial_loop.thisIndex'
p1324
g59
(g98
S'\x1b\x00\x00\x00'
tRp1325
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1326
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p1327
sS'block_loop.thisRepN'
p1328
I0
sg906
g1323
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1329
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p1330
sg55
g11
sS'block_loop.thisTrial'
p1331
Nsg69
Vn
sS'block_loop.thisTrialN'
p1332
I0
sg39
F1.5501030913728755
sg34
g752
(S"\x07\xdf\n\x10\x126'\t\xdbp"
tRp1333
sa(dp1334
S'trial_loop.thisTrialN'
p1335
I28
sg894
S'22-daim.png'
p1336
sS'block_loop.thisIndex'
p1337
g888
sg38
S'left'
p1338
sg58
g62
sS'trial_loop.thisN'
p1339
I28
sg33
g1085
sg63
g64
sS'trial_loop.thisIndex'
p1340
g59
(g98
S'\x1c\x00\x00\x00'
tRp1341
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1342
I0
sg903
S'7-olives.png'
p1343
sS'block_loop.thisRepN'
p1344
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1345
I0
sg909
g1092
sg55
g11
sS'block_loop.thisTrial'
p1346
Nsg69
Vn
sS'block_loop.thisTrialN'
p1347
I0
sg39
F1.1000294220975775
sg34
g752
(S'\x07\xdf\n\x10\x126.\x03~\x88'
tRp1348
sa(dp1349
S'trial_loop.thisTrialN'
p1350
I29
sg894
g1218
sS'block_loop.thisIndex'
p1351
g888
sg38
S'right'
p1352
sg58
g62
sS'trial_loop.thisN'
p1353
I29
sg33
g1228
sg63
g64
sS'trial_loop.thisIndex'
p1354
g59
(g98
S'\x1d\x00\x00\x00'
tRp1355
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1356
I0
sg903
g1226
sS'block_loop.thisRepN'
p1357
I0
sg906
g1228
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1358
I0
sg909
g1222
sg55
g11
sS'block_loop.thisTrial'
p1359
Nsg69
Vn
sS'block_loop.thisTrialN'
p1360
I0
sg39
F0.95059938966005575
sg34
g752
(S'\x07\xdf\n\x10\x1264\x05~@'
tRp1361
sa(dp1362
S'trial_loop.thisTrialN'
p1363
I30
sg894
S'50-polo.png'
p1364
sS'block_loop.thisIndex'
p1365
g888
sg38
S'right'
p1366
sg58
g62
sS'trial_loop.thisN'
p1367
I30
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p1368
g59
(g98
S'\x1e\x00\x00\x00'
tRp1369
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1370
I0
sg903
S'48-twix.png'
p1371
sS'block_loop.thisRepN'
p1372
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1373
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p1374
Nsg69
Vn
sS'block_loop.thisTrialN'
p1375
I0
sg39
F1.3335427851998247
sg34
g752
(S'\x07\xdf\n\x10\x126:\x05W0'
tRp1376
sa(dp1377
S'trial_loop.thisTrialN'
p1378
I31
sg894
S'41-peanuts_redo.png'
p1379
sS'block_loop.thisIndex'
p1380
g888
sg38
S'left'
p1381
sg58
g62
sS'trial_loop.thisN'
p1382
I31
sg33
S'41-peanuts_redo.png'
p1383
sg63
g64
sS'trial_loop.thisIndex'
p1384
g59
(g98
S'\x1f\x00\x00\x00'
tRp1385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1386
I0
sg903
S'45-chewy_nougat_redo.png'
p1387
sS'block_loop.thisRepN'
p1388
I0
sg906
S'45-chewy_nougat_redo.png'
p1389
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1390
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p1391
Nsg69
Vn
sS'block_loop.thisTrialN'
p1392
I0
sg39
F1.4168221400141192
sg34
g752
(S'\x07\xdf\n\x10\x127\x04\n\xe8\xf8'
tRp1393
sa(dp1394
S'trial_loop.thisTrialN'
p1395
I32
sg894
g1319
sS'block_loop.thisIndex'
p1396
g888
sg38
S'left'
p1397
sg58
g62
sS'trial_loop.thisN'
p1398
I32
sg33
g1323
sg63
g64
sS'trial_loop.thisIndex'
p1399
g59
(g98
S' \x00\x00\x00'
tRp1400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1401
I0
sg903
g1327
sS'block_loop.thisRepN'
p1402
I0
sg906
g1323
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1403
I0
sg909
g1330
sg55
g11
sS'block_loop.thisTrial'
p1404
Nsg69
Vn
sS'block_loop.thisTrialN'
p1405
I0
sg39
F1.0000975034527073
sg34
g752
(S'\x07\xdf\n\x10\x127\x0b\x02\xa7\xb0'
tRp1406
sa(dp1407
S'trial_loop.thisTrialN'
p1408
I33
sg894
S'45-chewy_nougat_redo.png'
p1409
sS'block_loop.thisIndex'
p1410
g888
sg38
S'right'
p1411
sg58
g62
sS'trial_loop.thisN'
p1412
I33
sg33
g1389
sg63
g64
sS'trial_loop.thisIndex'
p1413
g59
(g98
S'!\x00\x00\x00'
tRp1414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1415
I0
sg903
S'41-peanuts_redo.png'
p1416
sS'block_loop.thisRepN'
p1417
I0
sg906
g1389
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1418
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p1419
Nsg69
Vn
sS'block_loop.thisTrialN'
p1420
I0
sg39
F1.0001730543808662
sg34
g752
(S'\x07\xdf\n\x10\x127\x11\x02\xf9\xb8'
tRp1421
sa(dp1422
S'trial_loop.thisTrialN'
p1423
I34
sg894
g1098
sS'block_loop.thisIndex'
p1424
g888
sg38
S'left'
p1425
sg58
g62
sS'trial_loop.thisN'
p1426
I34
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p1427
g59
(g98
S'"\x00\x00\x00'
tRp1428
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1429
I0
sg903
g1106
sS'block_loop.thisRepN'
p1430
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1431
I0
sg909
g1109
sg55
g11
sS'block_loop.thisTrial'
p1432
Nsg69
Vn
sS'block_loop.thisTrialN'
p1433
I0
sg39
F1.0005545152635023
sg34
g752
(S'\x07\xdf\n\x10\x127\x17\x03\x8a@'
tRp1434
sa(dp1435
S'trial_loop.thisTrialN'
p1436
I35
sg894
S'13-mccoys_steak_crisps.png'
p1437
sS'block_loop.thisIndex'
p1438
g888
sg38
S'left'
p1439
sg58
g62
sS'trial_loop.thisN'
p1440
I35
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p1441
g59
(g98
S'#\x00\x00\x00'
tRp1442
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1443
I0
sg903
S'3-ellas_strawberries_apples.png'
p1444
sS'block_loop.thisRepN'
p1445
I0
sg906
g1198
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1446
I0
sg909
g1192
sg55
g11
sS'block_loop.thisTrial'
p1447
Nsg69
Vn
sS'block_loop.thisTrialN'
p1448
I0
sg39
F0.90017527814052301
sg34
g752
(S'\x07\xdf\n\x10\x127\x1d\x04\x1e\xb0'
tRp1449
sa(dp1450
S'trial_loop.thisTrialN'
p1451
I36
sg894
S'27-hartleys_raspberries_jelly.png'
p1452
sS'block_loop.thisIndex'
p1453
g888
sg38
S'right'
p1454
sg58
g62
sS'trial_loop.thisN'
p1455
I36
sg33
g1323
sg63
g64
sS'trial_loop.thisIndex'
p1456
g59
(g98
S'$\x00\x00\x00'
tRp1457
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1458
I0
sg903
S'51-mars.png'
p1459
sS'block_loop.thisRepN'
p1460
I0
sg906
g1323
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1461
I0
sg909
g1330
sg55
g11
sS'block_loop.thisTrial'
p1462
Nsg69
Vn
sS'block_loop.thisTrialN'
p1463
I0
sg39
F0.86680172700653202
sg34
g752
(S'\x07\xdf\n\x10\x127#\x03\x05p'
tRp1464
sa(dp1465
S'trial_loop.thisTrialN'
p1466
I37
sg894
g1265
sS'block_loop.thisIndex'
p1467
g888
sg38
S'right'
p1468
sg58
g62
sS'trial_loop.thisN'
p1469
I37
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p1470
g59
(g98
S'%\x00\x00\x00'
tRp1471
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1472
I0
sg903
g1272
sS'block_loop.thisRepN'
p1473
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1474
I0
sg909
g1109
sg55
g11
sS'block_loop.thisTrial'
p1475
Nsg69
Vn
sS'block_loop.thisTrialN'
p1476
I0
sg39
F0.73342669336489053
sg34
g752
(S'\x07\xdf\n\x10\x127)\x01o0'
tRp1477
sa(dp1478
S'trial_loop.thisTrialN'
p1479
I38
sg894
g966
sS'block_loop.thisIndex'
p1480
g888
sg38
S'left'
p1481
sg58
g62
sS'trial_loop.thisN'
p1482
I38
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1483
g59
(g98
S'&\x00\x00\x00'
tRp1484
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1485
I0
sg903
g974
sS'block_loop.thisRepN'
p1486
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1487
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p1488
Nsg69
Vn
sS'block_loop.thisTrialN'
p1489
I0
sg39
F1.1834866779463482
sg34
g752
(S'\x07\xdf\n\x10\x127.\r6\xd0'
tRp1490
sa(dp1491
S'trial_loop.thisTrialN'
p1492
I39
sg894
g1218
sS'block_loop.thisIndex'
p1493
g888
sg38
S'right'
p1494
sg58
g62
sS'trial_loop.thisN'
p1495
I39
sg33
g1222
sg63
g64
sS'trial_loop.thisIndex'
p1496
g59
(g98
S"'\x00\x00\x00"
tRp1497
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1498
I0
sg903
g1226
sS'block_loop.thisRepN'
p1499
I0
sg906
g1228
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1500
I0
sg909
g1222
sg55
g11
sS'block_loop.thisTrial'
p1501
Nsg69
Vn
sS'block_loop.thisTrialN'
p1502
I0
sg39
F1.0335326357198937
sg34
g752
(S'\x07\xdf\n\x10\x1275\x01$\xf8'
tRp1503
sa(dp1504
S'trial_loop.thisTrialN'
p1505
I40
sg894
S'25-kitkat.png'
p1506
sS'block_loop.thisIndex'
p1507
g888
sg38
S'right'
p1508
sg58
g62
sS'trial_loop.thisN'
p1509
I40
sg33
S'31-hobnobs.png'
p1510
sg63
g64
sS'trial_loop.thisIndex'
p1511
g59
(g98
S'(\x00\x00\x00'
tRp1512
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1513
I0
sg903
S'31-hobnobs.png'
p1514
sS'block_loop.thisRepN'
p1515
I0
sg906
g1510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1516
I0
sg909
S'25-kitkat.png'
p1517
sg55
g11
sS'block_loop.thisTrial'
p1518
Nsg69
Vn
sS'block_loop.thisTrialN'
p1519
I0
sg39
F1.2334224169026129
sg34
g752
(S'\x07\xdf\n\x10\x127;\x022\x80'
tRp1520
sa(dp1521
S'trial_loop.thisTrialN'
p1522
I41
sg894
S'38-maltesers.png'
p1523
sS'block_loop.thisIndex'
p1524
g888
sg38
S'right'
p1525
sg58
g62
sS'trial_loop.thisN'
p1526
I41
sg33
S'38-maltesers.png'
p1527
sg63
g64
sS'trial_loop.thisIndex'
p1528
g59
(g98
S')\x00\x00\x00'
tRp1529
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1530
I0
sg903
S'6-sour_patch_kids.png'
p1531
sS'block_loop.thisRepN'
p1532
I0
sg906
g1527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1533
I0
sg909
S'6-sour_patch_kids.png'
p1534
sg55
g11
sS'block_loop.thisTrial'
p1535
Nsg69
Vn
sS'block_loop.thisTrialN'
p1536
I0
sg39
F1.2999331730679842
sg34
g752
(S'\x07\xdf\n\x10\x128\x05\x06U\x18'
tRp1537
sa(dp1538
S'trial_loop.thisTrialN'
p1539
I42
sg894
g1015
sS'block_loop.thisIndex'
p1540
g888
sg38
S'right'
p1541
sg58
g62
sS'trial_loop.thisN'
p1542
I42
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p1543
g59
(g98
S'*\x00\x00\x00'
tRp1544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1545
I0
sg903
g1023
sS'block_loop.thisRepN'
p1546
I0
sg906
g1025
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1547
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p1548
Nsg69
Vn
sS'block_loop.thisTrialN'
p1549
I0
sg39
F1.5334505275459378
sg34
g752
(S'\x07\xdf\n\x10\x128\x0b\x0bm\xc8'
tRp1550
sa(dp1551
S'trial_loop.thisTrialN'
p1552
I43
sg894
g983
sS'block_loop.thisIndex'
p1553
g888
sg38
S'left'
p1554
sg58
g62
sS'trial_loop.thisN'
p1555
I43
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1556
g59
(g98
S'+\x00\x00\x00'
tRp1557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1558
I0
sg903
g990
sS'block_loop.thisRepN'
p1559
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1560
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1561
Nsg69
Vn
sS'block_loop.thisTrialN'
p1562
I0
sg39
F2.3834192238064134
sg34
g752
(S'\x07\xdf\n\x10\x128\x12\x04\xd2`'
tRp1563
sa(dp1564
S'trial_loop.thisTrialN'
p1565
I44
sg894
g1098
sS'block_loop.thisIndex'
p1566
g888
sg38
S'left'
p1567
sg58
g62
sS'trial_loop.thisN'
p1568
I44
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p1569
g59
(g98
S',\x00\x00\x00'
tRp1570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1571
I0
sg903
g1106
sS'block_loop.thisRepN'
p1572
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1573
I0
sg909
g1109
sg55
g11
sS'block_loop.thisTrial'
p1574
Nsg69
Vn
sS'block_loop.thisTrialN'
p1575
I0
sg39
F0.76691200284767547
sg34
g752
(S'\x07\xdf\n\x10\x128\x19\x0b\x13\xf0'
tRp1576
sa(dp1577
S'trial_loop.thisTrialN'
p1578
I45
sg894
S'44-crunch.png'
p1579
sS'block_loop.thisIndex'
p1580
g888
sg38
S'right'
p1581
sg58
g62
sS'trial_loop.thisN'
p1582
I45
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p1583
g59
(g98
S'-\x00\x00\x00'
tRp1584
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1585
I0
sg903
S'26-walkers_smoky_bacon.png'
p1586
sS'block_loop.thisRepN'
p1587
I0
sg906
g1002
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1588
I0
sg909
g1009
sg55
g11
sS'block_loop.thisTrial'
p1589
Nsg69
Vn
sS'block_loop.thisTrialN'
p1590
I0
sg39
F1.4668553824194532
sg34
g752
(S'\x07\xdf\n\x10\x128\x1f\x08\x12h'
tRp1591
sa(dp1592
S'trial_loop.thisTrialN'
p1593
I46
sg894
S'31-hobnobs.png'
p1594
sS'block_loop.thisIndex'
p1595
g888
sg38
S'left'
p1596
sg58
g62
sS'trial_loop.thisN'
p1597
I46
sg33
g1510
sg63
g64
sS'trial_loop.thisIndex'
p1598
g59
(g98
S'.\x00\x00\x00'
tRp1599
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1600
I0
sg903
S'25-kitkat.png'
p1601
sS'block_loop.thisRepN'
p1602
I0
sg906
g1510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1603
I0
sg909
g1517
sg55
g11
sS'block_loop.thisTrial'
p1604
Nsg69
Vn
sS'block_loop.thisTrialN'
p1605
I0
sg39
F1.4001824055885663
sg34
g752
(S'\x07\xdf\n\x10\x128&\x00\x88\xb8'
tRp1606
sa(dp1607
S'trial_loop.thisTrialN'
p1608
I47
sg894
S'16-skips_prawn.png'
p1609
sS'block_loop.thisIndex'
p1610
g888
sg38
S'right'
p1611
sg58
g62
sS'trial_loop.thisN'
p1612
I47
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p1613
g59
(g98
S'/\x00\x00\x00'
tRp1614
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1615
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1616
sS'block_loop.thisRepN'
p1617
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1618
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p1619
Nsg69
Vn
sS'block_loop.thisTrialN'
p1620
I0
sg39
F1.1999801571946591
sg34
g752
(S'\x07\xdf\n\x10\x128,\x07\x0c\xb0'
tRp1621
sa(dp1622
S'trial_loop.thisTrialN'
p1623
I48
sg894
S'21-nakd_banana_crunch.png'
p1624
sS'block_loop.thisIndex'
p1625
g888
sg38
S'right'
p1626
sg58
g62
sS'trial_loop.thisN'
p1627
I48
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p1628
g59
(g98
S'0\x00\x00\x00'
tRp1629
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1630
I0
sg903
S'1-treacle_cookies.png'
p1631
sS'block_loop.thisRepN'
p1632
I0
sg906
g1025
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1633
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p1634
Nsg69
Vn
sS'block_loop.thisTrialN'
p1635
I0
sg39
F0.90011141623108415
sg34
g752
(S'\x07\xdf\n\x10\x1282\n\xb60'
tRp1636
sa(dp1637
S'trial_loop.thisTrialN'
p1638
I49
sg894
g1098
sS'block_loop.thisIndex'
p1639
g888
sg38
S'left'
p1640
sg58
g62
sS'trial_loop.thisN'
p1641
I49
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p1642
g59
(g98
S'1\x00\x00\x00'
tRp1643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1644
I0
sg903
g1106
sS'block_loop.thisRepN'
p1645
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1646
I0
sg909
g1109
sg55
g11
sS'block_loop.thisTrial'
p1647
Nsg69
Vn
sS'block_loop.thisTrialN'
p1648
I0
sg39
F0.88391329833029886
sg34
g752
(S'\x07\xdf\n\x10\x1288\t\x9c\xf0'
tRp1649
sa(dp1650
S'trial_loop.thisTrialN'
p1651
I50
sg894
g1506
sS'block_loop.thisIndex'
p1652
g888
sg38
S'right'
p1653
sg58
g62
sS'trial_loop.thisN'
p1654
I50
sg33
g1510
sg63
g64
sS'trial_loop.thisIndex'
p1655
g59
(g98
S'2\x00\x00\x00'
tRp1656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1657
I0
sg903
g1514
sS'block_loop.thisRepN'
p1658
I0
sg906
g1510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1659
I0
sg909
g1517
sg55
g11
sS'block_loop.thisTrial'
p1660
Nsg69
Vn
sS'block_loop.thisTrialN'
p1661
I0
sg39
F1.000189019854588
sg34
g752
(S'\x07\xdf\n\x10\x129\x02\x08E0'
tRp1662
sa(dp1663
S'trial_loop.thisTrialN'
p1664
I51
sg894
g1579
sS'block_loop.thisIndex'
p1665
g888
sg38
S'left'
p1666
sg58
g62
sS'trial_loop.thisN'
p1667
I51
sg33
g1009
sg63
g64
sS'trial_loop.thisIndex'
p1668
g59
(g98
S'3\x00\x00\x00'
tRp1669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1670
I0
sg903
g1586
sS'block_loop.thisRepN'
p1671
I0
sg906
g1002
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1672
I0
sg909
g1009
sg55
g11
sS'block_loop.thisTrial'
p1673
Nsg69
Vn
sS'block_loop.thisTrialN'
p1674
I0
sg39
F1.516756624536356
sg34
g752
(S'\x07\xdf\n\x10\x129\x08\x08\xd5\xb8'
tRp1675
sa(dp1676
S'trial_loop.thisTrialN'
p1677
I52
sg894
S'19-caramello_redo.png'
p1678
sS'block_loop.thisIndex'
p1679
g888
sg38
S'left'
p1680
sg58
g62
sS'trial_loop.thisN'
p1681
I52
sg33
S'30-spaghetti_hoops.png'
p1682
sg63
g64
sS'trial_loop.thisIndex'
p1683
g59
(g98
S'4\x00\x00\x00'
tRp1684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1685
I0
sg903
S'30-spaghetti_hoops.png'
p1686
sS'block_loop.thisRepN'
p1687
I0
sg906
S'19-caramello_redo.png'
p1688
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1689
I0
sg909
g1682
sg55
g11
sS'block_loop.thisTrial'
p1690
Nsg69
Vn
sS'block_loop.thisTrialN'
p1691
I0
sg39
F1.8001900462077174
sg34
g752
(S'\x07\xdf\n\x10\x129\x0f\x01\xff\xb8'
tRp1692
sa(dp1693
S'trial_loop.thisTrialN'
p1694
I53
sg894
g1188
sS'block_loop.thisIndex'
p1695
g888
sg38
S'right'
p1696
sg58
g62
sS'trial_loop.thisN'
p1697
I53
sg33
g1198
sg63
g64
sS'trial_loop.thisIndex'
p1698
g59
(g98
S'5\x00\x00\x00'
tRp1699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1700
I0
sg903
g1196
sS'block_loop.thisRepN'
p1701
I0
sg906
g1198
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1702
I0
sg909
g1192
sg55
g11
sS'block_loop.thisTrial'
p1703
Nsg69
Vn
sS'block_loop.thisTrialN'
p1704
I0
sg39
F1.3335196922780597
sg34
g752
(S'\x07\xdf\n\x10\x129\x15\x0e\xb5\xa0'
tRp1705
sa(dp1706
S'trial_loop.thisTrialN'
p1707
I54
sg894
g1047
sS'block_loop.thisIndex'
p1708
g888
sg38
S'right'
p1709
sg58
g62
sS'trial_loop.thisN'
p1710
I54
sg33
g1051
sg63
g64
sS'trial_loop.thisIndex'
p1711
g59
(g98
S'6\x00\x00\x00'
tRp1712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1713
I0
sg903
g1055
sS'block_loop.thisRepN'
p1714
I0
sg906
g1051
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1715
I0
sg909
g1058
sg55
g11
sS'block_loop.thisTrial'
p1716
Nsg69
Vn
sS'block_loop.thisTrialN'
p1717
I0
sg39
F1.2168827518107719
sg34
g752
(S'\x07\xdf\n\x10\x129\x1c\x05\x05('
tRp1718
sa(dp1719
S'trial_loop.thisTrialN'
p1720
I55
sg894
g915
sS'block_loop.thisIndex'
p1721
g888
sg38
S'right'
p1722
sg58
g62
sS'trial_loop.thisN'
p1723
I55
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1724
g59
(g98
S'7\x00\x00\x00'
tRp1725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1726
I0
sg903
g923
sS'block_loop.thisRepN'
p1727
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1728
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p1729
Nsg69
Vn
sS'block_loop.thisTrialN'
p1730
I0
sg39
F1.2001255570794456
sg34
g752
(S'\x07\xdf\n\x10\x129"\x08\xed('
tRp1731
sa(dp1732
S'trial_loop.thisTrialN'
p1733
I56
sg894
S'30-spaghetti_hoops.png'
p1734
sS'block_loop.thisIndex'
p1735
g888
sg38
S'left'
p1736
sg58
g62
sS'trial_loop.thisN'
p1737
I56
sg33
g1688
sg63
g64
sS'trial_loop.thisIndex'
p1738
g59
(g98
S'8\x00\x00\x00'
tRp1739
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1740
I0
sg903
S'19-caramello_redo.png'
p1741
sS'block_loop.thisRepN'
p1742
I0
sg906
g1688
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1743
I0
sg909
g1682
sg55
g11
sS'block_loop.thisTrial'
p1744
Nsg69
Vn
sS'block_loop.thisTrialN'
p1745
I0
sg39
F1.2500758360220061
sg34
g752
(S'\x07\xdf\n\x10\x129(\x0cX('
tRp1746
sa(dp1747
S'trial_loop.thisTrialN'
p1748
I57
sg894
g998
sS'block_loop.thisIndex'
p1749
g888
sg38
S'right'
p1750
sg58
g62
sS'trial_loop.thisN'
p1751
I57
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p1752
g59
(g98
S'9\x00\x00\x00'
tRp1753
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1754
I0
sg903
g1006
sS'block_loop.thisRepN'
p1755
I0
sg906
g1002
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1756
I0
sg909
g1009
sg55
g11
sS'block_loop.thisTrial'
p1757
Nsg69
Vn
sS'block_loop.thisTrialN'
p1758
I0
sg39
F1.7834605059688329
sg34
g752
(S'\x07\xdf\n\x10\x129/\x01w\x00'
tRp1759
sa(dp1760
S'trial_loop.thisTrialN'
p1761
I58
sg894
S'5-pineapple.png'
p1762
sS'block_loop.thisIndex'
p1763
g888
sg38
S'right'
p1764
sg58
g62
sS'trial_loop.thisN'
p1765
I58
sg33
g1134
sg63
g64
sS'trial_loop.thisIndex'
p1766
g59
(g98
S':\x00\x00\x00'
tRp1767
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1768
I0
sg903
S'40-sardines.png'
p1769
sS'block_loop.thisRepN'
p1770
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1771
I0
sg909
g1141
sg55
g11
sS'block_loop.thisTrial'
p1772
Nsg69
Vn
sS'block_loop.thisTrialN'
p1773
I0
sg39
F1.4667564534756821
sg34
g752
(S'\x07\xdf\n\x10\x1295\r\xeeh'
tRp1774
sa(dp1775
S'trial_loop.thisTrialN'
p1776
I59
sg894
g1336
sS'block_loop.thisIndex'
p1777
g888
sg38
S'left'
p1778
sg58
g62
sS'trial_loop.thisN'
p1779
I59
sg33
g1092
sg63
g64
sS'trial_loop.thisIndex'
p1780
g59
(g98
S';\x00\x00\x00'
tRp1781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1782
I0
sg903
g1343
sS'block_loop.thisRepN'
p1783
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1784
I0
sg909
g1092
sg55
g11
sS'block_loop.thisTrial'
p1785
Nsg69
Vn
sS'block_loop.thisTrialN'
p1786
I0
sg39
F1.2335452940606046
sg34
g752
(S'\x07\xdf\n\x10\x12:\x00\x06`\xd0'
tRp1787
sa(dp1788
S'trial_loop.thisTrialN'
p1789
I60
sg894
g1364
sS'block_loop.thisIndex'
p1790
g888
sg38
S'right'
p1791
sg58
g62
sS'trial_loop.thisN'
p1792
I60
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1793
g59
(g98
S'<\x00\x00\x00'
tRp1794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1795
I0
sg903
g1371
sS'block_loop.thisRepN'
p1796
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1797
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p1798
Nsg69
Vn
sS'block_loop.thisTrialN'
p1799
I0
sg39
F1.0667690547961683
sg34
g752
(S'\x07\xdf\n\x10\x12:\x06\nH\xd0'
tRp1800
sa(dp1801
S'trial_loop.thisTrialN'
p1802
I61
sg894
g1081
sS'block_loop.thisIndex'
p1803
g888
sg38
S'right'
p1804
sg58
g62
sS'trial_loop.thisN'
p1805
I61
sg33
g1092
sg63
g64
sS'trial_loop.thisIndex'
p1806
g59
(g98
S'=\x00\x00\x00'
tRp1807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1808
I0
sg903
g1089
sS'block_loop.thisRepN'
p1809
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1810
I0
sg909
g1092
sg55
g11
sS'block_loop.thisTrial'
p1811
Nsg69
Vn
sS'block_loop.thisTrialN'
p1812
I0
sg39
F1.1668683258612873
sg34
g752
(S'\x07\xdf\n\x10\x12:\x0c\x0b\xcfp'
tRp1813
sa(dp1814
S'trial_loop.thisTrialN'
p1815
I62
sg894
g1594
sS'block_loop.thisIndex'
p1816
g888
sg38
S'left'
p1817
sg58
g62
sS'trial_loop.thisN'
p1818
I62
sg33
g1510
sg63
g64
sS'trial_loop.thisIndex'
p1819
g59
(g98
S'>\x00\x00\x00'
tRp1820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1821
I0
sg903
g1601
sS'block_loop.thisRepN'
p1822
I0
sg906
g1510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1823
I0
sg909
g1517
sg55
g11
sS'block_loop.thisTrial'
p1824
Nsg69
Vn
sS'block_loop.thisTrialN'
p1825
I0
sg39
F1.1335164421616355
sg34
g752
(S'\x07\xdf\n\x10\x12:\x12\x0e\xfb\xf0'
tRp1826
sa(dp1827
S'trial_loop.thisTrialN'
p1828
I63
sg894
g1624
sS'block_loop.thisIndex'
p1829
g888
sg38
S'right'
p1830
sg58
g62
sS'trial_loop.thisN'
p1831
I63
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p1832
g59
(g98
S'?\x00\x00\x00'
tRp1833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1834
I0
sg903
g1631
sS'block_loop.thisRepN'
p1835
I0
sg906
g1025
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1836
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p1837
Nsg69
Vn
sS'block_loop.thisTrialN'
p1838
I0
sg39
F1.0000980736513156
sg34
g752
(S'\x07\xdf\n\x10\x12:\x19\x022\x80'
tRp1839
sa(dp1840
S'trial_loop.thisTrialN'
p1841
I64
sg894
S'6-sour_patch_kids.png'
p1842
sS'block_loop.thisIndex'
p1843
g888
sg38
S'left'
p1844
sg58
g62
sS'trial_loop.thisN'
p1845
I64
sg33
g1534
sg63
g64
sS'trial_loop.thisIndex'
p1846
g59
(g98
S'@\x00\x00\x00'
tRp1847
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1848
I0
sg903
S'38-maltesers.png'
p1849
sS'block_loop.thisRepN'
p1850
I0
sg906
g1527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1851
I0
sg909
g1534
sg55
g11
sS'block_loop.thisTrial'
p1852
Nsg69
Vn
sS'block_loop.thisTrialN'
p1853
I0
sg39
F1.3665970267720695
sg34
g752
(S'\x07\xdf\n\x10\x12:\x1f\x02\xc6\xf0'
tRp1854
sa(dp1855
S'trial_loop.thisTrialN'
p1856
I65
sg894
g895
sS'block_loop.thisIndex'
p1857
g888
sg38
S'left'
p1858
sg58
g62
sS'trial_loop.thisN'
p1859
I65
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1860
g59
(g98
S'A\x00\x00\x00'
tRp1861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1862
I0
sg903
g904
sS'block_loop.thisRepN'
p1863
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1864
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1865
Nsg69
Vn
sS'block_loop.thisTrialN'
p1866
I0
sg39
F1.5167457908173674
sg34
g752
(S'\x07\xdf\n\x10\x12:%\x08\xd1\xd0'
tRp1867
sa(dp1868
S'trial_loop.thisTrialN'
p1869
I66
sg894
g932
sS'block_loop.thisIndex'
p1870
g888
sg38
S'right'
p1871
sg58
g62
sS'trial_loop.thisN'
p1872
I66
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1873
g59
(g98
S'B\x00\x00\x00'
tRp1874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1875
I0
sg903
g940
sS'block_loop.thisRepN'
p1876
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1877
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1878
Nsg69
Vn
sS'block_loop.thisTrialN'
p1879
I0
sg39
F1.5834179123557988
sg34
g752
(S'\x07\xdf\n\x10\x12:,\x01\xfb\xd0'
tRp1880
sa(dp1881
S'trial_loop.thisTrialN'
p1882
I67
sg894
g1452
sS'block_loop.thisIndex'
p1883
g888
sg38
S'right'
p1884
sg58
g62
sS'trial_loop.thisN'
p1885
I67
sg33
g1323
sg63
g64
sS'trial_loop.thisIndex'
p1886
g59
(g98
S'C\x00\x00\x00'
tRp1887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1888
I0
sg903
g1459
sS'block_loop.thisRepN'
p1889
I0
sg906
g1323
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1890
I0
sg909
g1330
sg55
g11
sS'block_loop.thisTrial'
p1891
Nsg69
Vn
sS'block_loop.thisTrialN'
p1892
I0
sg39
F1.066855724537163
sg34
g752
(S'\x07\xdf\n\x10\x12:2\x0bZ@'
tRp1893
sa(dp1894
S'trial_loop.thisTrialN'
p1895
I68
sg894
g1734
sS'block_loop.thisIndex'
p1896
g888
sg38
S'right'
p1897
sg58
g62
sS'trial_loop.thisN'
p1898
I68
sg33
g1682
sg63
g64
sS'trial_loop.thisIndex'
p1899
g59
(g98
S'D\x00\x00\x00'
tRp1900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1901
I0
sg903
g1741
sS'block_loop.thisRepN'
p1902
I0
sg906
g1688
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1903
I0
sg909
g1682
sg55
g11
sS'block_loop.thisTrial'
p1904
Nsg69
Vn
sS'block_loop.thisTrialN'
p1905
I0
sg39
F1.0001029203122016
sg34
g752
(S'\x07\xdf\n\x10\x12:8\x0c\xe0\xe0'
tRp1906
sa(dp1907
S'trial_loop.thisTrialN'
p1908
I69
sg894
g1015
sS'block_loop.thisIndex'
p1909
g888
sg38
S'left'
p1910
sg58
g62
sS'trial_loop.thisN'
p1911
I69
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p1912
g59
(g98
S'E\x00\x00\x00'
tRp1913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1914
I0
sg903
g1023
sS'block_loop.thisRepN'
p1915
I0
sg906
g1025
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1916
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p1917
Nsg69
Vn
sS'block_loop.thisTrialN'
p1918
I0
sg39
F0.95010873630963033
sg34
g752
(S'\x07\xdf\n\x10\x12;\x02\rqh'
tRp1919
sa(dp1920
S'trial_loop.thisTrialN'
p1921
I70
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1922
sS'block_loop.thisIndex'
p1923
g888
sg38
S'left'
p1924
sg58
g62
sS'trial_loop.thisN'
p1925
I70
sg33
g1222
sg63
g64
sS'trial_loop.thisIndex'
p1926
g59
(g98
S'F\x00\x00\x00'
tRp1927
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1928
I0
sg903
S'36-fig_rolls.png'
p1929
sS'block_loop.thisRepN'
p1930
I0
sg906
g1228
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1931
I0
sg909
g1222
sg55
g11
sS'block_loop.thisTrial'
p1932
Nsg69
Vn
sS'block_loop.thisTrialN'
p1933
I0
sg39
F0.96684312321303878
sg34
g752
(S'\x07\xdf\n\x10\x12;\x08\rJX'
tRp1934
sa(dp1935
S'trial_loop.thisTrialN'
p1936
I71
sg894
g1379
sS'block_loop.thisIndex'
p1937
g888
sg38
S'left'
p1938
sg58
g62
sS'trial_loop.thisN'
p1939
I71
sg33
g1389
sg63
g64
sS'trial_loop.thisIndex'
p1940
g59
(g98
S'G\x00\x00\x00'
tRp1941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1942
I0
sg903
g1387
sS'block_loop.thisRepN'
p1943
I0
sg906
g1389
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1944
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p1945
Nsg69
Vn
sS'block_loop.thisTrialN'
p1946
I0
sg39
F0.96688816867026617
sg34
g752
(S"\x07\xdf\n\x10\x12;\x0e\r'0"
tRp1947
sa(dp1948
S'trial_loop.thisTrialN'
p1949
I72
sg894
g1235
sS'block_loop.thisIndex'
p1950
g888
sg38
S'left'
p1951
sg58
g62
sS'trial_loop.thisN'
p1952
I72
sg33
g1246
sg63
g64
sS'trial_loop.thisIndex'
p1953
g59
(g98
S'H\x00\x00\x00'
tRp1954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1955
I0
sg903
g1243
sS'block_loop.thisRepN'
p1956
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1957
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p1958
Nsg69
Vn
sS'block_loop.thisTrialN'
p1959
I0
sg39
F1.0333957887633005
sg34
g752
(S'\x07\xdf\n\x10\x12;\x14\r>\xa0'
tRp1960
sa(dp1961
S'trial_loop.thisTrialN'
p1962
I73
sg894
g1842
sS'block_loop.thisIndex'
p1963
g888
sg38
S'left'
p1964
sg58
g62
sS'trial_loop.thisN'
p1965
I73
sg33
g1527
sg63
g64
sS'trial_loop.thisIndex'
p1966
g59
(g98
S'I\x00\x00\x00'
tRp1967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1968
I0
sg903
g1849
sS'block_loop.thisRepN'
p1969
I0
sg906
g1527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1970
I0
sg909
g1534
sg55
g11
sS'block_loop.thisTrial'
p1971
Nsg69
Vn
sS'block_loop.thisTrialN'
p1972
I0
sg39
F0.89984256898242165
sg34
g752
(S'\x07\xdf\n\x10\x12;\x1a\x0eH@'
tRp1973
sa(dp1974
S'trial_loop.thisTrialN'
p1975
I74
sg894
g1336
sS'block_loop.thisIndex'
p1976
g888
sg38
S'left'
p1977
sg58
g62
sS'trial_loop.thisN'
p1978
I74
sg33
g1085
sg63
g64
sS'trial_loop.thisIndex'
p1979
g59
(g98
S'J\x00\x00\x00'
tRp1980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1981
I0
sg903
g1343
sS'block_loop.thisRepN'
p1982
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1983
I0
sg909
g1092
sg55
g11
sS'block_loop.thisTrial'
p1984
Nsg69
Vn
sS'block_loop.thisTrialN'
p1985
I0
sg39
F1.100377241436945
sg34
g752
(S'\x07\xdf\n\x10\x12; \r/\x00'
tRp1986
sa(dp1987
S'trial_loop.thisTrialN'
p1988
I75
sg894
g1922
sS'block_loop.thisIndex'
p1989
g888
sg38
S'left'
p1990
sg58
g62
sS'trial_loop.thisN'
p1991
I75
sg33
g1228
sg63
g64
sS'trial_loop.thisIndex'
p1992
g59
(g98
S'K\x00\x00\x00'
tRp1993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1994
I0
sg903
g1929
sS'block_loop.thisRepN'
p1995
I0
sg906
g1228
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1996
I0
sg909
g1222
sg55
g11
sS'block_loop.thisTrial'
p1997
Nsg69
Vn
sS'block_loop.thisTrialN'
p1998
I0
sg39
F1.3167542297087493
sg34
g752
(S'\x07\xdf\n\x10\x12;&\x0f.\xb8'
tRp1999
sa(dp2000
S'trial_loop.thisTrialN'
p2001
I76
sg894
g1678
sS'block_loop.thisIndex'
p2002
g888
sg38
S'left'
p2003
sg58
g62
sS'trial_loop.thisN'
p2004
I76
sg33
g1688
sg63
g64
sS'trial_loop.thisIndex'
p2005
g59
(g98
S'L\x00\x00\x00'
tRp2006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2007
I0
sg903
g1686
sS'block_loop.thisRepN'
p2008
I0
sg906
g1688
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2009
I0
sg909
g1682
sg55
g11
sS'block_loop.thisTrial'
p2010
Nsg69
Vn
sS'block_loop.thisTrialN'
p2011
I0
sg39
F1.2001292633540288
sg34
g752
(S'\x07\xdf\n\x10\x12;-\x05?\xc0'
tRp2012
sa(dp2013
S'trial_loop.thisTrialN'
p2014
I77
sg894
g966
sS'block_loop.thisIndex'
p2015
g888
sg38
S'left'
p2016
sg58
g62
sS'trial_loop.thisN'
p2017
I77
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2018
g59
(g98
S'M\x00\x00\x00'
tRp2019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2020
I0
sg903
g974
sS'block_loop.thisRepN'
p2021
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2022
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2023
Nsg69
Vn
sS'block_loop.thisTrialN'
p2024
I0
sg39
F1.0501874803303508
sg34
g752
(S'\x07\xdf\n\x10\x12;3\x08\xe9@'
tRp2025
sa(dp2026
S'trial_loop.thisTrialN'
p2027
I78
sg894
g1064
sS'block_loop.thisIndex'
p2028
g888
sg38
S'left'
p2029
sg58
g62
sS'trial_loop.thisN'
p2030
I78
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p2031
g59
(g98
S'N\x00\x00\x00'
tRp2032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2033
I0
sg903
g1072
sS'block_loop.thisRepN'
p2034
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2035
I0
sg909
g1075
sg55
g11
sS'block_loop.thisTrial'
p2036
Nsg69
Vn
sS'block_loop.thisTrialN'
p2037
I0
sg39
F1.3000939682424359
sg34
g752
(S'\x07\xdf\n\x10\x12;9\n1`'
tRp2038
sa(dp2039
S'trial_loop.thisTrialN'
p2040
I79
sg894
g949
sS'block_loop.thisIndex'
p2041
g888
sg38
S'left'
p2042
sg58
g62
sS'trial_loop.thisN'
p2043
I79
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2044
g59
(g98
S'O\x00\x00\x00'
tRp2045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2046
I0
sg903
g957
sS'block_loop.thisRepN'
p2047
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2048
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2049
Nsg69
Vn
sS'block_loop.thisTrialN'
p2050
I0
sg39
F1.3002077222736261
sg34
g752
(S'\x07\xdf\n\x10\x13\x00\x04\x00\x07\xd0'
tRp2051
sa(dp2052
S'trial_loop.thisTrialN'
p2053
I80
sg894
g1922
sS'block_loop.thisIndex'
p2054
g888
sg38
S'right'
p2055
sg58
g62
sS'trial_loop.thisN'
p2056
I80
sg33
g1228
sg63
g64
sS'trial_loop.thisIndex'
p2057
g59
(g98
S'P\x00\x00\x00'
tRp2058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2059
I0
sg903
g1929
sS'block_loop.thisRepN'
p2060
I0
sg906
g1228
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2061
I0
sg909
g1222
sg55
g11
sS'block_loop.thisTrial'
p2062
Nsg69
Vn
sS'block_loop.thisTrialN'
p2063
I0
sg39
F1.9833574145959574
sg34
g752
(S'\x07\xdf\n\x10\x13\x00\n\x05\x1c\x98'
tRp2064
sa(dp2065
S'trial_loop.thisTrialN'
p2066
I81
sg894
g1437
sS'block_loop.thisIndex'
p2067
g888
sg38
S'left'
p2068
sg58
g62
sS'trial_loop.thisN'
p2069
I81
sg33
g1198
sg63
g64
sS'trial_loop.thisIndex'
p2070
g59
(g98
S'Q\x00\x00\x00'
tRp2071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2072
I0
sg903
g1444
sS'block_loop.thisRepN'
p2073
I0
sg906
g1198
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2074
I0
sg909
g1192
sg55
g11
sS'block_loop.thisTrial'
p2075
Nsg69
Vn
sS'block_loop.thisTrialN'
p2076
I0
sg39
F0.86687613753747428
sg34
g752
(S'\x07\xdf\n\x10\x13\x00\x11\x050 '
tRp2077
sa(dp2078
S'trial_loop.thisTrialN'
p2079
I82
sg894
g1130
sS'block_loop.thisIndex'
p2080
g888
sg38
S'left'
p2081
sg58
g62
sS'trial_loop.thisN'
p2082
I82
sg33
g1134
sg63
g64
sS'trial_loop.thisIndex'
p2083
g59
(g98
S'R\x00\x00\x00'
tRp2084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2085
I0
sg903
g1138
sS'block_loop.thisRepN'
p2086
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2087
I0
sg909
g1141
sg55
g11
sS'block_loop.thisTrial'
p2088
Nsg69
Vn
sS'block_loop.thisTrialN'
p2089
I0
sg39
F1.2001286931554205
sg34
g752
(S'\x07\xdf\n\x10\x13\x00\x17\x03\xd8`'
tRp2090
sa(dp2091
S'trial_loop.thisTrialN'
p2092
I83
sg894
g895
sS'block_loop.thisIndex'
p2093
g888
sg38
S'left'
p2094
sg58
g62
sS'trial_loop.thisN'
p2095
I83
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2096
g59
(g98
S'S\x00\x00\x00'
tRp2097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2098
I0
sg903
g904
sS'block_loop.thisRepN'
p2099
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2100
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2101
Nsg69
Vn
sS'block_loop.thisTrialN'
p2102
I0
sg39
F1.166798761991231
sg34
g752
(S'\x07\xdf\n\x10\x13\x00\x1d\x07GH'
tRp2103
sa(dp2104
S'trial_loop.thisTrialN'
p2105
I84
sg894
g1409
sS'block_loop.thisIndex'
p2106
g888
sg38
S'right'
p2107
sg58
g62
sS'trial_loop.thisN'
p2108
I84
sg33
g1389
sg63
g64
sS'trial_loop.thisIndex'
p2109
g59
(g98
S'T\x00\x00\x00'
tRp2110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2111
I0
sg903
g1416
sS'block_loop.thisRepN'
p2112
I0
sg906
g1389
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2113
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p2114
Nsg69
Vn
sS'block_loop.thisTrialN'
p2115
I0
sg39
F2.4501415225604433
sg34
g752
(S'\x07\xdf\n\x10\x13\x00#\ns\xc8'
tRp2116
sa(dp2117
S'trial_loop.thisTrialN'
p2118
I85
sg894
g1762
sS'block_loop.thisIndex'
p2119
g888
sg38
S'left'
p2120
sg58
g62
sS'trial_loop.thisN'
p2121
I85
sg33
g1134
sg63
g64
sS'trial_loop.thisIndex'
p2122
g59
(g98
S'U\x00\x00\x00'
tRp2123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2124
I0
sg903
g1769
sS'block_loop.thisRepN'
p2125
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2126
I0
sg909
g1141
sg55
g11
sS'block_loop.thisTrial'
p2127
Nsg69
Vn
sS'block_loop.thisTrialN'
p2128
I0
sg39
F1.5000846740513225
sg34
g752
(S'\x07\xdf\n\x10\x13\x00+\x02i0'
tRp2129
sa(dp2130
S'trial_loop.thisTrialN'
p2131
I86
sg894
g895
sS'block_loop.thisIndex'
p2132
g888
sg38
S'right'
p2133
sg58
g62
sS'trial_loop.thisN'
p2134
I86
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2135
g59
(g98
S'V\x00\x00\x00'
tRp2136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2137
I0
sg903
g904
sS'block_loop.thisRepN'
p2138
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2139
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2140
Nsg69
Vn
sS'block_loop.thisTrialN'
p2141
I0
sg39
F2.1334463080966088
sg34
g752
(S'\x07\xdf\n\x10\x13\x001\n\x96\xf0'
tRp2142
sa(dp2143
S'trial_loop.thisTrialN'
p2144
I87
sg894
g1506
sS'block_loop.thisIndex'
p2145
g888
sg38
S'right'
p2146
sg58
g62
sS'trial_loop.thisN'
p2147
I87
sg33
g1510
sg63
g64
sS'trial_loop.thisIndex'
p2148
g59
(g98
S'W\x00\x00\x00'
tRp2149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2150
I0
sg903
g1514
sS'block_loop.thisRepN'
p2151
I0
sg906
g1510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2152
I0
sg909
g1517
sg55
g11
sS'block_loop.thisTrial'
p2153
Nsg69
Vn
sS'block_loop.thisTrialN'
p2154
I0
sg39
F1.1167535454769677
sg34
g752
(S'\x07\xdf\n\x10\x13\x008\rFp'
tRp2155
sa(dp2156
S'trial_loop.thisTrialN'
p2157
I88
sg894
g1437
sS'block_loop.thisIndex'
p2158
g888
sg38
S'left'
p2159
sg58
g62
sS'trial_loop.thisN'
p2160
I88
sg33
g1198
sg63
g64
sS'trial_loop.thisIndex'
p2161
g59
(g98
S'X\x00\x00\x00'
tRp2162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2163
I0
sg903
g1444
sS'block_loop.thisRepN'
p2164
I0
sg906
g1198
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2165
I0
sg909
g1192
sg55
g11
sS'block_loop.thisTrial'
p2166
Nsg69
Vn
sS'block_loop.thisTrialN'
p2167
I0
sg39
F0.91675799299991922
sg34
g752
(S'\x07\xdf\n\x10\x13\x01\x03\x00Bh'
tRp2168
sa(dp2169
S'trial_loop.thisTrialN'
p2170
I89
sg894
g1523
sS'block_loop.thisIndex'
p2171
g888
sg38
S'right'
p2172
sg58
g62
sS'trial_loop.thisN'
p2173
I89
sg33
g1527
sg63
g64
sS'trial_loop.thisIndex'
p2174
g59
(g98
S'Y\x00\x00\x00'
tRp2175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2176
I0
sg903
g1531
sS'block_loop.thisRepN'
p2177
I0
sg906
g1527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2178
I0
sg909
g1534
sg55
g11
sS'block_loop.thisTrial'
p2179
Nsg69
Vn
sS'block_loop.thisTrialN'
p2180
I0
sg39
F1.1999200015525275
sg34
g752
(S'\x07\xdf\n\x10\x13\x01\x08\x0e\xa6\x00'
tRp2181
sa(dp2182
S'trial_loop.thisTrialN'
p2183
I90
sg894
g1081
sS'block_loop.thisIndex'
p2184
g888
sg38
S'right'
p2185
sg58
g62
sS'trial_loop.thisN'
p2186
I90
sg33
g1085
sg63
g64
sS'trial_loop.thisIndex'
p2187
g59
(g98
S'Z\x00\x00\x00'
tRp2188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2189
I0
sg903
g1089
sS'block_loop.thisRepN'
p2190
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2191
I0
sg909
g1092
sg55
g11
sS'block_loop.thisTrial'
p2192
Nsg69
Vn
sS'block_loop.thisTrialN'
p2193
I0
sg39
F0.95014465863641817
sg34
g752
(S'\x07\xdf\n\x10\x13\x01\x0f\x03\r@'
tRp2194
sa(dp2195
S'trial_loop.thisTrialN'
p2196
I91
sg894
g1115
sS'block_loop.thisIndex'
p2197
g888
sg38
S'right'
p2198
sg58
g62
sS'trial_loop.thisN'
p2199
I91
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p2200
g59
(g98
S'[\x00\x00\x00'
tRp2201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2202
I0
sg903
g1122
sS'block_loop.thisRepN'
p2203
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2204
I0
sg909
g1075
sg55
g11
sS'block_loop.thisTrial'
p2205
Nsg69
Vn
sS'block_loop.thisTrialN'
p2206
I0
sg39
F0.93352944262369419
sg34
g752
(S'\x07\xdf\n\x10\x13\x01\x15\x02\xab\x98'
tRp2207
sa(dp2208
S'trial_loop.thisTrialN'
p2209
I92
sg894
g1047
sS'block_loop.thisIndex'
p2210
g888
sg38
S'right'
p2211
sg58
g62
sS'trial_loop.thisN'
p2212
I92
sg33
g1051
sg63
g64
sS'trial_loop.thisIndex'
p2213
g59
(g98
S'\\\x00\x00\x00'
tRp2214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2215
I0
sg903
g1055
sS'block_loop.thisRepN'
p2216
I0
sg906
g1051
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2217
I0
sg909
g1058
sg55
g11
sS'block_loop.thisTrial'
p2218
Nsg69
Vn
sS'block_loop.thisTrialN'
p2219
I0
sg39
F1.1668150125660759
sg34
g752
(S'\x07\xdf\n\x10\x13\x01\x1b\x02I\xf0'
tRp2220
sa(dp2221
S'trial_loop.thisTrialN'
p2222
I93
sg894
g1762
sS'block_loop.thisIndex'
p2223
g888
sg38
S'left'
p2224
sg58
g62
sS'trial_loop.thisN'
p2225
I93
sg33
g1134
sg63
g64
sS'trial_loop.thisIndex'
p2226
g59
(g98
S']\x00\x00\x00'
tRp2227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2228
I0
sg903
g1769
sS'block_loop.thisRepN'
p2229
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2230
I0
sg909
g1141
sg55
g11
sS'block_loop.thisTrial'
p2231
Nsg69
Vn
sS'block_loop.thisTrialN'
p2232
I0
sg39
F1.6335093147172302
sg34
g752
(S'\x07\xdf\n\x10\x13\x01!\x05;\xd8'
tRp2233
sa(dp2234
S'trial_loop.thisTrialN'
p2235
I94
sg894
g1609
sS'block_loop.thisIndex'
p2236
g888
sg38
S'right'
p2237
sg58
g62
sS'trial_loop.thisN'
p2238
I94
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p2239
g59
(g98
S'^\x00\x00\x00'
tRp2240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2241
I0
sg903
g1616
sS'block_loop.thisRepN'
p2242
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2243
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p2244
Nsg69
Vn
sS'block_loop.thisTrialN'
p2245
I0
sg39
F0.98383352796008694
sg34
g752
(S'\x07\xdf\n\x10\x13\x01(\x00N '
tRp2246
sa(dp2247
S'trial_loop.thisTrialN'
p2248
I95
sg894
g1762
sS'block_loop.thisIndex'
p2249
g888
sg38
S'left'
p2250
sg58
g62
sS'trial_loop.thisN'
p2251
I95
sg33
g1134
sg63
g64
sS'trial_loop.thisIndex'
p2252
g59
(g98
S'_\x00\x00\x00'
tRp2253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2254
I0
sg903
g1769
sS'block_loop.thisRepN'
p2255
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2256
I0
sg909
g1141
sg55
g11
sS'block_loop.thisTrial'
p2257
Nsg69
Vn
sS'block_loop.thisTrialN'
p2258
I0
sg39
F1.1167638090009859
sg34
g752
(S'\x07\xdf\n\x10\x13\x01.\x00e\x90'
tRp2259
sa(dp2260
S'trial_loop.thisTrialN'
p2261
I96
sg894
g1609
sS'block_loop.thisIndex'
p2262
g888
sg38
S'right'
p2263
sg58
g62
sS'trial_loop.thisN'
p2264
I96
sg33
g1246
sg63
g64
sS'trial_loop.thisIndex'
p2265
g59
(g98
S'`\x00\x00\x00'
tRp2266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2267
I0
sg903
g1616
sS'block_loop.thisRepN'
p2268
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2269
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p2270
Nsg69
Vn
sS'block_loop.thisTrialN'
p2271
I0
sg39
F0.95002463245327817
sg34
g752
(S'\x07\xdf\n\x10\x13\x014\x02\x9f\xe0'
tRp2272
sa(dp2273
S'trial_loop.thisTrialN'
p2274
I97
sg894
S'17-jacobs_mini_cheddars_redo.png'
p2275
sS'block_loop.thisIndex'
p2276
g888
sg38
S'left'
p2277
sg58
g62
sS'trial_loop.thisN'
p2278
I97
sg33
g1051
sg63
g64
sS'trial_loop.thisIndex'
p2279
g59
(g98
S'a\x00\x00\x00'
tRp2280
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2281
I0
sg903
S'8-liquorice_catherine_wheels.png'
p2282
sS'block_loop.thisRepN'
p2283
I0
sg906
g1051
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2284
I0
sg909
g1058
sg55
g11
sS'block_loop.thisTrial'
p2285
Nsg69
Vn
sS'block_loop.thisTrialN'
p2286
I0
sg39
F1.0335865192064375
sg34
g752
(S'\x07\xdf\n\x10\x13\x01:\x02|\xb8'
tRp2287
sa(dp2288
S'trial_loop.thisTrialN'
p2289
I98
sg894
g1364
sS'block_loop.thisIndex'
p2290
g888
sg38
S'right'
p2291
sg58
g62
sS'trial_loop.thisN'
p2292
I98
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2293
g59
(g98
S'b\x00\x00\x00'
tRp2294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2295
I0
sg903
g1371
sS'block_loop.thisRepN'
p2296
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2297
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2298
Nsg69
Vn
sS'block_loop.thisTrialN'
p2299
I0
sg39
F0.73343382081293385
sg34
g752
(S'\x07\xdf\n\x10\x13\x02\x04\x03\x86X'
tRp2300
sa(dp2301
S'trial_loop.thisTrialN'
p2302
I99
sg894
g1115
sS'block_loop.thisIndex'
p2303
g888
sg38
S'right'
p2304
sg58
g62
sS'trial_loop.thisN'
p2305
I99
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p2306
g59
(g98
S'c\x00\x00\x00'
tRp2307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2308
I0
sg903
g1122
sS'block_loop.thisRepN'
p2309
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2310
I0
sg909
g1075
sg55
g11
sS'block_loop.thisTrial'
p2311
Nsg69
Vn
sS'block_loop.thisTrialN'
p2312
I0
sg39
F0.91679334513173671
sg34
g752
(S'\x07\xdf\n\x10\x13\x02\n\x00\x0b\xb8'
tRp2313
sa(dp2314
S'trial_loop.thisTrialN'
p2315
I100
sg894
g1922
sS'block_loop.thisIndex'
p2316
g888
sg38
S'right'
p2317
sg58
g62
sS'trial_loop.thisN'
p2318
I100
sg33
g1228
sg63
g64
sS'trial_loop.thisIndex'
p2319
g59
(g98
S'd\x00\x00\x00'
tRp2320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2321
I0
sg903
g1929
sS'block_loop.thisRepN'
p2322
I0
sg906
g1228
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2323
I0
sg909
g1222
sg55
g11
sS'block_loop.thisTrial'
p2324
Nsg69
Vn
sS'block_loop.thisTrialN'
p2325
I0
sg39
F1.5334126095331158
sg34
g752
(S'\x07\xdf\n\x10\x13\x02\x0f\x0es8'
tRp2326
sa(dp2327
S'trial_loop.thisTrialN'
p2328
I101
sg894
g932
sS'block_loop.thisIndex'
p2329
g888
sg38
S'right'
p2330
sg58
g62
sS'trial_loop.thisN'
p2331
I101
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2332
g59
(g98
S'e\x00\x00\x00'
tRp2333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2334
I0
sg903
g940
sS'block_loop.thisRepN'
p2335
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2336
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2337
Nsg69
Vn
sS'block_loop.thisTrialN'
p2338
I0
sg39
F0.91675685260997852
sg34
g752
(S'\x07\xdf\n\x10\x13\x02\x16\x07\xd7\xd0'
tRp2339
sa(dp2340
S'trial_loop.thisTrialN'
p2341
I102
sg894
g1609
sS'block_loop.thisIndex'
p2342
g888
sg38
S'right'
p2343
sg58
g62
sS'trial_loop.thisN'
p2344
I102
sg33
g1246
sg63
g64
sS'trial_loop.thisIndex'
p2345
g59
(g98
S'f\x00\x00\x00'
tRp2346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2347
I0
sg903
g1616
sS'block_loop.thisRepN'
p2348
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2349
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p2350
Nsg69
Vn
sS'block_loop.thisTrialN'
p2351
I0
sg39
F1.3666166985203745
sg34
g752
(S'\x07\xdf\n\x10\x13\x02\x1c\x06\xfd\x10'
tRp2352
sa(dp2353
S'trial_loop.thisTrialN'
p2354
I103
sg894
g1364
sS'block_loop.thisIndex'
p2355
g888
sg38
S'right'
p2356
sg58
g62
sS'trial_loop.thisN'
p2357
I103
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2358
g59
(g98
S'g\x00\x00\x00'
tRp2359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2360
I0
sg903
g1371
sS'block_loop.thisRepN'
p2361
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2362
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2363
Nsg69
Vn
sS'block_loop.thisTrialN'
p2364
I0
sg39
F0.95019683153441292
sg34
g752
(S'\x07\xdf\n\x10\x13\x02"\r\x07\xf0'
tRp2365
sa(dp2366
S'trial_loop.thisTrialN'
p2367
I104
sg894
g1015
sS'block_loop.thisIndex'
p2368
g888
sg38
S'left'
p2369
sg58
g62
sS'trial_loop.thisN'
p2370
I104
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p2371
g59
(g98
S'h\x00\x00\x00'
tRp2372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2373
I0
sg903
g1023
sS'block_loop.thisRepN'
p2374
I0
sg906
g1025
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2375
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p2376
Nsg69
Vn
sS'block_loop.thisTrialN'
p2377
I0
sg39
F1.0835370832428453
sg34
g752
(S'\x07\xdf\n\x10\x13\x02(\x0c\xe0\xe0'
tRp2378
sa(dp2379
S'trial_loop.thisTrialN'
p2380
I105
sg894
g1409
sS'block_loop.thisIndex'
p2381
g888
sg38
S'left'
p2382
sg58
g62
sS'trial_loop.thisN'
p2383
I105
sg33
g1389
sg63
g64
sS'trial_loop.thisIndex'
p2384
g59
(g98
S'i\x00\x00\x00'
tRp2385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2386
I0
sg903
g1416
sS'block_loop.thisRepN'
p2387
I0
sg906
g1389
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2388
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p2389
Nsg69
Vn
sS'block_loop.thisTrialN'
p2390
I0
sg39
F1.4001678655986325
sg34
g752
(S'\x07\xdf\n\x10\x13\x02.\x0e\xa6\x00'
tRp2391
sa(dp2392
S'trial_loop.thisTrialN'
p2393
I106
sg894
g1319
sS'block_loop.thisIndex'
p2394
g888
sg38
S'left'
p2395
sg58
g62
sS'trial_loop.thisN'
p2396
I106
sg33
g1323
sg63
g64
sS'trial_loop.thisIndex'
p2397
g59
(g98
S'j\x00\x00\x00'
tRp2398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2399
I0
sg903
g1327
sS'block_loop.thisRepN'
p2400
I0
sg906
g1323
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2401
I0
sg909
g1330
sg55
g11
sS'block_loop.thisTrial'
p2402
Nsg69
Vn
sS'block_loop.thisTrialN'
p2403
I0
sg39
F0.96676842758097337
sg34
g752
(S'\x07\xdf\n\x10\x13\x025\x06"P'
tRp2404
sa(dp2405
S'trial_loop.thisTrialN'
p2406
I107
sg894
g983
sS'block_loop.thisIndex'
p2407
g888
sg38
S'left'
p2408
sg58
g62
sS'trial_loop.thisN'
p2409
I107
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p2410
g59
(g98
S'k\x00\x00\x00'
tRp2411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2412
I0
sg903
g990
sS'block_loop.thisRepN'
p2413
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2414
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2415
Nsg69
Vn
sS'block_loop.thisTrialN'
p2416
I0
sg39
F0.88345029946867726
sg34
g752
(S'\x07\xdf\n\x10\x13\x02;\x05\xff('
tRp2417
sa(dp2418
S'trial_loop.thisTrialN'
p2419
I108
sg894
g1336
sS'block_loop.thisIndex'
p2420
g888
sg38
S'left'
p2421
sg58
g62
sS'trial_loop.thisN'
p2422
I108
sg33
g1092
sg63
g64
sS'trial_loop.thisIndex'
p2423
g59
(g98
S'l\x00\x00\x00'
tRp2424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2425
I0
sg903
g1343
sS'block_loop.thisRepN'
p2426
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2427
I0
sg909
g1092
sg55
g11
sS'block_loop.thisTrial'
p2428
Nsg69
Vn
sS'block_loop.thisTrialN'
p2429
I0
sg39
F0.95013211433251854
sg34
g752
(S'\x07\xdf\n\x10\x13\x03\x05\x04\xa7h'
tRp2430
sa(dp2431
S'trial_loop.thisTrialN'
p2432
I109
sg894
g949
sS'block_loop.thisIndex'
p2433
g888
sg38
S'left'
p2434
sg58
g62
sS'trial_loop.thisN'
p2435
I109
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2436
g59
(g98
S'm\x00\x00\x00'
tRp2437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2438
I0
sg903
g957
sS'block_loop.thisRepN'
p2439
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2440
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2441
Nsg69
Vn
sS'block_loop.thisTrialN'
p2442
I0
sg39
F1.8671851835824782
sg34
g752
(S'\x07\xdf\n\x10\x13\x03\x0b\x04\x84@'
tRp2443
sa(dp2444
S'trial_loop.thisTrialN'
p2445
I110
sg894
g1624
sS'block_loop.thisIndex'
p2446
g888
sg38
S'right'
p2447
sg58
g62
sS'trial_loop.thisN'
p2448
I110
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p2449
g59
(g98
S'n\x00\x00\x00'
tRp2450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2451
I0
sg903
g1631
sS'block_loop.thisRepN'
p2452
I0
sg906
g1025
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2453
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p2454
Nsg69
Vn
sS'block_loop.thisTrialN'
p2455
I0
sg39
F0.933422245841939
sg34
g752
(S'\x07\xdf\n\x10\x13\x03\x12\x02\xea\x18'
tRp2456
sa(dp2457
S'trial_loop.thisTrialN'
p2458
I111
sg894
g983
sS'block_loop.thisIndex'
p2459
g888
sg38
S'left'
p2460
sg58
g62
sS'trial_loop.thisN'
p2461
I111
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2462
g59
(g98
S'o\x00\x00\x00'
tRp2463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2464
I0
sg903
g990
sS'block_loop.thisRepN'
p2465
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2466
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2467
Nsg69
Vn
sS'block_loop.thisTrialN'
p2468
I0
sg39
F0.76676175629108911
sg34
g752
(S'\x07\xdf\n\x10\x13\x03\x18\x02\x88p'
tRp2469
sa(dp2470
S'trial_loop.thisTrialN'
p2471
I112
sg894
g1922
sS'block_loop.thisIndex'
p2472
g888
sg38
S'right'
p2473
sg58
g62
sS'trial_loop.thisN'
p2474
I112
sg33
g1228
sg63
g64
sS'trial_loop.thisIndex'
p2475
g59
(g98
S'p\x00\x00\x00'
tRp2476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2477
I0
sg903
g1929
sS'block_loop.thisRepN'
p2478
I0
sg906
g1228
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2479
I0
sg909
g1222
sg55
g11
sS'block_loop.thisTrial'
p2480
Nsg69
Vn
sS'block_loop.thisTrialN'
p2481
I0
sg39
F1.0334379832420382
sg34
g752
(S'\x07\xdf\n\x10\x13\x03\x1d\x0e\xc9('
tRp2482
sa(dp2483
S'trial_loop.thisTrialN'
p2484
I113
sg894
g1678
sS'block_loop.thisIndex'
p2485
g888
sg38
S'right'
p2486
sg58
g62
sS'trial_loop.thisN'
p2487
I113
sg33
g1688
sg63
g64
sS'trial_loop.thisIndex'
p2488
g59
(g98
S'q\x00\x00\x00'
tRp2489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2490
I0
sg903
g1686
sS'block_loop.thisRepN'
p2491
I0
sg906
g1688
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2492
I0
sg909
g1682
sg55
g11
sS'block_loop.thisTrial'
p2493
Nsg69
Vn
sS'block_loop.thisTrialN'
p2494
I0
sg39
F1.7167852483544266
sg34
g752
(S'\x07\xdf\n\x10\x13\x03$\x00U\xf0'
tRp2495
sa(dp2496
S'trial_loop.thisTrialN'
p2497
I114
sg894
g1379
sS'block_loop.thisIndex'
p2498
g888
sg38
S'right'
p2499
sg58
g62
sS'trial_loop.thisN'
p2500
I114
sg33
g1383
sg63
g64
sS'trial_loop.thisIndex'
p2501
g59
(g98
S'r\x00\x00\x00'
tRp2502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2503
I0
sg903
g1387
sS'block_loop.thisRepN'
p2504
I0
sg906
g1389
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2505
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p2506
Nsg69
Vn
sS'block_loop.thisTrialN'
p2507
I0
sg39
F1.1505307951229042
sg34
g752
(S'\x07\xdf\n\x10\x13\x03*\x0b\xdb('
tRp2508
sa(dp2509
S'trial_loop.thisTrialN'
p2510
I115
sg894
g1160
sS'block_loop.thisIndex'
p2511
g888
sg38
S'left'
p2512
sg58
g62
sS'trial_loop.thisN'
p2513
I115
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p2514
g59
(g98
S's\x00\x00\x00'
tRp2515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2516
I0
sg903
g1167
sS'block_loop.thisRepN'
p2517
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2518
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2519
Nsg69
Vn
sS'block_loop.thisTrialN'
p2520
I0
sg39
F1.5334374130470678
sg34
g752
(S'\x07\xdf\n\x10\x13\x030\x0e\x8e\x90'
tRp2521
sa(dp2522
S'trial_loop.thisTrialN'
p2523
I116
sg894
g1130
sS'block_loop.thisIndex'
p2524
g888
sg38
S'right'
p2525
sg58
g62
sS'trial_loop.thisN'
p2526
I116
sg33
g1134
sg63
g64
sS'trial_loop.thisIndex'
p2527
g59
(g98
S't\x00\x00\x00'
tRp2528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2529
I0
sg903
g1138
sS'block_loop.thisRepN'
p2530
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2531
I0
sg909
g1141
sg55
g11
sS'block_loop.thisTrial'
p2532
Nsg69
Vn
sS'block_loop.thisTrialN'
p2533
I0
sg39
F1.2334674623562023
sg34
g752
(S'\x07\xdf\n\x10\x13\x037\x07\xf7\x10'
tRp2534
sa(dp2535
S'trial_loop.thisTrialN'
p2536
I117
sg894
g2275
sS'block_loop.thisIndex'
p2537
g888
sg38
S'left'
p2538
sg58
g62
sS'trial_loop.thisN'
p2539
I117
sg33
g1051
sg63
g64
sS'trial_loop.thisIndex'
p2540
g59
(g98
S'u\x00\x00\x00'
tRp2541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2542
I0
sg903
g2282
sS'block_loop.thisRepN'
p2543
I0
sg906
g1051
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2544
I0
sg909
g1058
sg55
g11
sS'block_loop.thisTrial'
p2545
Nsg69
Vn
sS'block_loop.thisTrialN'
p2546
I0
sg39
F1.0501096486186725
sg34
g752
(S'\x07\xdf\n\x10\x13\x04\x01\x0c\x19\xa8'
tRp2547
sa(dp2548
S'trial_loop.thisTrialN'
p2549
I118
sg894
g1235
sS'block_loop.thisIndex'
p2550
g888
sg38
S'left'
p2551
sg58
g62
sS'trial_loop.thisN'
p2552
I118
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p2553
g59
(g98
S'v\x00\x00\x00'
tRp2554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2555
I0
sg903
g1243
sS'block_loop.thisRepN'
p2556
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2557
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p2558
Nsg69
Vn
sS'block_loop.thisTrialN'
p2559
I0
sg39
F1.0333210931275971
sg34
g752
(S'\x07\xdf\n\x10\x13\x04\x07\ra\xc8'
tRp2560
sa(dp2561
S'trial_loop.thisTrialN'
p2562
I119
sg894
g1452
sS'block_loop.thisIndex'
p2563
g888
sg38
S'right'
p2564
sg58
g62
sS'trial_loop.thisN'
p2565
I119
sg33
g1323
sg63
g64
sS'trial_loop.thisIndex'
p2566
g59
(g98
S'w\x00\x00\x00'
tRp2567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2568
I0
sg903
g1459
sS'block_loop.thisRepN'
p2569
I0
sg906
g1323
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2570
I0
sg909
g1330
sg55
g11
sS'block_loop.thisTrial'
p2571
Nsg69
Vn
sS'block_loop.thisTrialN'
p2572
I0
sg39
F0.96687248828675365
sg34
g752
(S'\x07\xdf\n\x10\x13\x04\r\x0ekh'
tRp2573
sa(dp2574
S'trial_loop.thisTrialN'
p2575
I120
sg894
g1579
sS'block_loop.thisIndex'
p2576
g888
sg38
S'left'
p2577
sg58
g62
sS'trial_loop.thisN'
p2578
I120
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p2579
g59
(g98
S'x\x00\x00\x00'
tRp2580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2581
I0
sg903
g1586
sS'block_loop.thisRepN'
p2582
I0
sg906
g1002
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2583
I0
sg909
g1009
sg55
g11
sS'block_loop.thisTrial'
p2584
Nsg69
Vn
sS'block_loop.thisTrialN'
p2585
I0
sg39
F1.9499884250253672
sg34
g752
(S'\x07\xdf\n\x10\x13\x04\x13\x0e\x82\xd8'
tRp2586
sa(dp2587
S'trial_loop.thisTrialN'
p2588
I121
sg894
g1047
sS'block_loop.thisIndex'
p2589
g888
sg38
S'right'
p2590
sg58
g62
sS'trial_loop.thisN'
p2591
I121
sg33
g1058
sg63
g64
sS'trial_loop.thisIndex'
p2592
g59
(g98
S'y\x00\x00\x00'
tRp2593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2594
I0
sg903
g1055
sS'block_loop.thisRepN'
p2595
I0
sg906
g1051
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2596
I0
sg909
g1058
sg55
g11
sS'block_loop.thisTrial'
p2597
Nsg69
Vn
sS'block_loop.thisTrialN'
p2598
I0
sg39
F0.85019820000161417
sg34
g752
(S'\x07\xdf\n\x10\x13\x04\x1a\x0e\x1dH'
tRp2599
sa(dp2600
S'trial_loop.thisTrialN'
p2601
I122
sg894
g1594
sS'block_loop.thisIndex'
p2602
g888
sg38
S'left'
p2603
sg58
g62
sS'trial_loop.thisN'
p2604
I122
sg33
g1510
sg63
g64
sS'trial_loop.thisIndex'
p2605
g59
(g98
S'z\x00\x00\x00'
tRp2606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2607
I0
sg903
g1601
sS'block_loop.thisRepN'
p2608
I0
sg906
g1510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2609
I0
sg909
g1517
sg55
g11
sS'block_loop.thisTrial'
p2610
Nsg69
Vn
sS'block_loop.thisTrialN'
p2611
I0
sg39
F0.91685321567638312
sg34
g752
(S'\x07\xdf\n\x10\x13\x04 \x0cLp'
tRp2612
sa(dp2613
S'trial_loop.thisTrialN'
p2614
I123
sg894
g1437
sS'block_loop.thisIndex'
p2615
g888
sg38
S'left'
p2616
sg58
g62
sS'trial_loop.thisN'
p2617
I123
sg33
g1198
sg63
g64
sS'trial_loop.thisIndex'
p2618
g59
(g98
S'{\x00\x00\x00'
tRp2619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2620
I0
sg903
g1444
sS'block_loop.thisRepN'
p2621
I0
sg906
g1198
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2622
I0
sg909
g1192
sg55
g11
sS'block_loop.thisTrial'
p2623
Nsg69
Vn
sS'block_loop.thisTrialN'
p2624
I0
sg39
F0.95014408844144782
sg34
g752
(S'\x07\xdf\n\x10\x13\x04&\x0b\xacH'
tRp2625
sa(dp2626
S'trial_loop.thisTrialN'
p2627
I124
sg894
g1624
sS'block_loop.thisIndex'
p2628
g888
sg38
S'right'
p2629
sg58
g62
sS'trial_loop.thisN'
p2630
I124
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p2631
g59
(g98
S'|\x00\x00\x00'
tRp2632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2633
I0
sg903
g1631
sS'block_loop.thisRepN'
p2634
I0
sg906
g1025
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2635
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p2636
Nsg69
Vn
sS'block_loop.thisTrialN'
p2637
I0
sg39
F1.3001977438470931
sg34
g752
(S'\x07\xdf\n\x10\x13\x04,\x0bJ\xa0'
tRp2638
sa(dp2639
S'trial_loop.thisTrialN'
p2640
I125
sg894
g915
sS'block_loop.thisIndex'
p2641
g888
sg38
S'right'
p2642
sg58
g62
sS'trial_loop.thisN'
p2643
I125
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2644
g59
(g98
S'}\x00\x00\x00'
tRp2645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2646
I0
sg903
g923
sS'block_loop.thisRepN'
p2647
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2648
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2649
Nsg69
Vn
sS'block_loop.thisTrialN'
p2650
I0
sg39
F1.0168393029016443
sg34
g752
(S'\x07\xdf\n\x10\x13\x043\x01\x1d('
tRp2651
sa(dp2652
S'trial_loop.thisTrialN'
p2653
I126
sg894
g1594
sS'block_loop.thisIndex'
p2654
g888
sg38
S'left'
p2655
sg58
g62
sS'trial_loop.thisN'
p2656
I126
sg33
g1510
sg63
g64
sS'trial_loop.thisIndex'
p2657
g59
(g98
S'~\x00\x00\x00'
tRp2658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2659
I0
sg903
g1601
sS'block_loop.thisRepN'
p2660
I0
sg906
g1510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2661
I0
sg909
g1517
sg55
g11
sS'block_loop.thisTrial'
p2662
Nsg69
Vn
sS'block_loop.thisTrialN'
p2663
I0
sg39
F1.0334271495230496
sg34
g752
(S'\x07\xdf\n\x10\x13\x049\x01\xec0'
tRp2664
sa(dp2665
S'trial_loop.thisTrialN'
p2666
I127
sg894
g1579
sS'block_loop.thisIndex'
p2667
g888
sg38
S'left'
p2668
sg58
g62
sS'trial_loop.thisN'
p2669
I127
sg33
g1009
sg63
g64
sS'trial_loop.thisIndex'
p2670
g59
(g98
S'\x7f\x00\x00\x00'
tRp2671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2672
I0
sg903
g1586
sS'block_loop.thisRepN'
p2673
I0
sg906
g1002
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2674
I0
sg909
g1009
sg55
g11
sS'block_loop.thisTrial'
p2675
Nsg69
Vn
sS'block_loop.thisTrialN'
p2676
I0
sg39
F1.1335115955007495
sg34
g752
(S'\x07\xdf\n\x10\x13\x05\x03\x02\xf9\xb8'
tRp2677
sa(dp2678
S'trial_loop.thisTrialN'
p2679
I128
sg894
g2275
sS'block_loop.thisIndex'
p2680
g888
sg38
S'left'
p2681
sg58
g62
sS'trial_loop.thisN'
p2682
I128
sg33
g1051
sg63
g64
sS'trial_loop.thisIndex'
p2683
g59
(g98
S'\x80\x00\x00\x00'
tRp2684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2685
I0
sg903
g2282
sS'block_loop.thisRepN'
p2686
I0
sg906
g1051
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2687
I0
sg909
g1058
sg55
g11
sS'block_loop.thisTrial'
p2688
Nsg69
Vn
sS'block_loop.thisTrialN'
p2689
I0
sg39
F1.1834727081586607
sg34
g752
(S'\x07\xdf\n\x10\x13\x05\t\x05r\x88'
tRp2690
sa(dp2691
S'trial_loop.thisTrialN'
p2692
I129
sg894
g949
sS'block_loop.thisIndex'
p2693
g888
sg38
S'left'
p2694
sg58
g62
sS'trial_loop.thisN'
p2695
I129
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2696
g59
(g98
S'\x81\x00\x00\x00'
tRp2697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2698
I0
sg903
g957
sS'block_loop.thisRepN'
p2699
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2700
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2701
Nsg69
Vn
sS'block_loop.thisTrialN'
p2702
I0
sg39
F1.5335200914196321
sg34
g752
(S'\x07\xdf\n\x10\x13\x05\x0f\x08\xdd\x88'
tRp2703
sa(dp2704
S'trial_loop.thisTrialN'
p2705
I130
sg894
g1734
sS'block_loop.thisIndex'
p2706
g888
sg38
S'left'
p2707
sg58
g62
sS'trial_loop.thisN'
p2708
I130
sg33
g1682
sg63
g64
sS'trial_loop.thisIndex'
p2709
g59
(g98
S'\x82\x00\x00\x00'
tRp2710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2711
I0
sg903
g1741
sS'block_loop.thisRepN'
p2712
I0
sg906
g1688
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2713
I0
sg909
g1682
sg55
g11
sS'block_loop.thisTrial'
p2714
Nsg69
Vn
sS'block_loop.thisTrialN'
p2715
I0
sg39
F1.5167281147514586
sg34
g752
(S'\x07\xdf\n\x10\x13\x05\x16\x02F\x08'
tRp2716
sa(dp2717
S'trial_loop.thisTrialN'
p2718
I131
sg894
g1842
sS'block_loop.thisIndex'
p2719
g888
sg38
S'left'
p2720
sg58
g62
sS'trial_loop.thisN'
p2721
I131
sg33
g1534
sg63
g64
sS'trial_loop.thisIndex'
p2722
g59
(g98
S'\x83\x00\x00\x00'
tRp2723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2724
I0
sg903
g1849
sS'block_loop.thisRepN'
p2725
I0
sg906
g1527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2726
I0
sg909
g1534
sg55
g11
sS'block_loop.thisTrial'
p2727
Nsg69
Vn
sS'block_loop.thisTrialN'
p2728
I0
sg39
F0.93317107466282323
sg34
g752
(S'\x07\xdf\n\x10\x13\x05\x1c\n\xb2H'
tRp2729
sa(dp2730
S'trial_loop.thisTrialN'
p2731
I132
sg894
g1594
sS'block_loop.thisIndex'
p2732
g888
sg38
S'left'
p2733
sg58
g62
sS'trial_loop.thisN'
p2734
I132
sg33
g1510
sg63
g64
sS'trial_loop.thisIndex'
p2735
g59
(g98
S'\x84\x00\x00\x00'
tRp2736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2737
I0
sg903
g1601
sS'block_loop.thisRepN'
p2738
I0
sg906
g1510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2739
I0
sg909
g1517
sg55
g11
sS'block_loop.thisTrial'
p2740
Nsg69
Vn
sS'block_loop.thisTrialN'
p2741
I0
sg39
F0.7334281188523164
sg34
g752
(S'\x07\xdf\n\x10\x13\x05"\n\x12 '
tRp2742
sa(dp2743
S'trial_loop.thisTrialN'
p2744
I133
sg894
S'10-bounty_redo.png'
p2745
sS'block_loop.thisIndex'
p2746
g888
sg38
S'right'
p2747
sg58
g62
sS'trial_loop.thisN'
p2748
I133
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2749
g59
(g98
S'\x85\x00\x00\x00'
tRp2750
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2751
I0
sg903
S'4-corn.png'
p2752
sS'block_loop.thisRepN'
p2753
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F2.3334851954350597
sg34
g752
(S'\x07\xdf\n\x10\x13\x05(\x06\x97\x80'
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g1032
sS'block_loop.thisIndex'
p2760
g888
sg38
S'right'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g1039
sS'block_loop.thisRepN'
p2766
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F3.9001225350439199
sg34
g752
(S'\x07\xdf\n\x10\x13\x05/\x0c!x'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g1364
sS'block_loop.thisIndex'
p2773
g888
sg38
S'right'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g1371
sS'block_loop.thisRepN'
p2779
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F1.0668488821829669
sg34
g752
(S'\x07\xdf\n\x10\x13\x058\x0b30'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g915
sS'block_loop.thisIndex'
p2786
g888
sg38
S'right'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g923
sS'block_loop.thisRepN'
p2792
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F1.850128921236319
sg34
g752
(S'\x07\xdf\n\x10\x13\x06\x02\x0c\xb9\xd0'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g998
sS'block_loop.thisIndex'
p2799
g888
sg38
S'right'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g1006
sS'block_loop.thisRepN'
p2805
I0
sg906
g1002
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg909
g1009
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F1.5334630718498374
sg34
g752
(S'\x07\xdf\n\x10\x13\x06\t\n\xe1('
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g915
sS'block_loop.thisIndex'
p2812
g888
sg38
S'right'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g923
sS'block_loop.thisRepN'
p2818
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F1.2835123937693425
sg34
g752
(S'\x07\xdf\n\x10\x13\x06\x10\x04I\xa8'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g1523
sS'block_loop.thisIndex'
p2825
g888
sg38
S'right'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g1534
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g1531
sS'block_loop.thisRepN'
p2831
I0
sg906
g1527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg909
g1534
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F1.2332502178178402
sg34
g752
(S'\x07\xdf\n\x10\x13\x06\x16\t#\xd8'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g2745
sS'block_loop.thisIndex'
p2838
g888
sg38
S'right'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g2752
sS'block_loop.thisRepN'
p2844
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F4.2667446504274267
sg34
g752
(S'\x07\xdf\n\x10\x13\x06\x1c\r\x07\xf0'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g1409
sS'block_loop.thisIndex'
p2851
g888
sg38
S'left'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g1383
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g1416
sS'block_loop.thisRepN'
p2857
I0
sg906
g1389
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F1.1334856515968568
sg34
g752
(S'\x07\xdf\n\x10\x13\x06&\x02Q\xc0'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1452
sS'block_loop.thisIndex'
p2864
g888
sg38
S'right'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1330
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1459
sS'block_loop.thisRepN'
p2870
I0
sg906
g1323
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg909
g1330
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F0.81680127084837295
sg34
g752
(S'\x07\xdf\n\x10\x13\x06,\x05\t\x10'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g1678
sS'block_loop.thisIndex'
p2877
g888
sg38
S'right'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g1688
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g1686
sS'block_loop.thisRepN'
p2883
I0
sg906
g1688
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg909
g1682
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F1.6001722561049974
sg34
g752
(S'\x07\xdf\n\x10\x13\x062\x02\xbf '
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1218
sS'block_loop.thisIndex'
p2890
g888
sg38
S'left'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1228
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1226
sS'block_loop.thisRepN'
p2896
I0
sg906
g1228
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg909
g1222
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F1.3336152000483708
sg34
g752
(S'\x07\xdf\n\x10\x13\x068\x0c\\\x10'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g1523
sS'block_loop.thisIndex'
p2903
g888
sg38
S'right'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g1534
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g1531
sS'block_loop.thisRepN'
p2909
I0
sg906
g1527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg909
g1534
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F0.78317341245565331
sg34
g752
(S'\x07\xdf\n\x10\x13\x07\x03\x02\xa7\xb0'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1032
sS'block_loop.thisIndex'
p2916
g888
sg38
S'left'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1039
sS'block_loop.thisRepN'
p2922
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F0.80014642624155385
sg34
g752
(S'\x07\xdf\n\x10\x13\x07\x08\x0f&\xe8'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g966
sS'block_loop.thisIndex'
p2929
g888
sg38
S'left'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g974
sS'block_loop.thisRepN'
p2935
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F1.0168470005446579
sg34
g752
(S'\x07\xdf\n\x10\x13\x07\x0e\x0c\xa2`'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1265
sS'block_loop.thisIndex'
p2942
g888
sg38
S'right'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1272
sS'block_loop.thisRepN'
p2948
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg909
g1109
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F1.2167396326985909
sg34
g752
(S'\x07\xdf\n\x10\x13\x07\x14\rqh'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g1678
sS'block_loop.thisIndex'
p2955
g888
sg38
S'right'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g1688
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g1686
sS'block_loop.thisRepN'
p2961
I0
sg906
g1688
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg909
g1682
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F1.5172210488817655
sg34
g752
(S'\x07\xdf\n\x10\x13\x07\x1b\x01\xd8\xa8'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g1218
sS'block_loop.thisIndex'
p2968
g888
sg38
S'left'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g1228
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g1226
sS'block_loop.thisRepN'
p2974
I0
sg906
g1228
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg909
g1222
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F0.78343285148002906
sg34
g752
(S'\x07\xdf\n\x10\x13\x07!\nD\xe8'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1188
sS'block_loop.thisIndex'
p2981
g888
sg38
S'left'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1196
sS'block_loop.thisRepN'
p2987
I0
sg906
g1198
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg909
g1192
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F1.2168647906510159
sg34
g752
(S"\x07\xdf\n\x10\x13\x07'\x07}\xf8"
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1130
sS'block_loop.thisIndex'
p2994
g888
sg38
S'right'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1141
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1138
sS'block_loop.thisRepN'
p3000
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg909
g1141
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.2167920907013468
sg34
g752
(S'\x07\xdf\n\x10\x13\x07-\x0be\xf8'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1319
sS'block_loop.thisIndex'
p3007
g888
sg38
S'left'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1330
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1327
sS'block_loop.thisRepN'
p3013
I0
sg906
g1323
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg909
g1330
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F0.71678154208348133
sg34
g752
(S'\x07\xdf\n\x10\x13\x073\x0f\x0fx'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1081
sS'block_loop.thisIndex'
p3020
g888
sg38
S'right'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1085
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1089
sS'block_loop.thisRepN'
p3026
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg909
g1092
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F0.78346421224705409
sg34
g752
(S'\x07\xdf\n\x10\x13\x079\x0bVX'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g1506
sS'block_loop.thisIndex'
p3033
g888
sg38
S'right'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g1510
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g1514
sS'block_loop.thisRepN'
p3039
I0
sg906
g1510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg909
g1517
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F0.91681358707865002
sg34
g752
(S'\x07\xdf\n\x10\x13\x08\x03\x08\x93P'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g2745
sS'block_loop.thisIndex'
p3046
g888
sg38
S'left'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g2752
sS'block_loop.thisRepN'
p3052
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F2.4834825725411065
sg34
g752
(S'\x07\xdf\n\x10\x13\x08\t\x07\xb8\x90'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g1336
sS'block_loop.thisIndex'
p3059
g888
sg38
S'left'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1085
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g1343
sS'block_loop.thisRepN'
p3065
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg909
g1092
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F0.78348074791574618
sg34
g752
(S'\x07\xdf\n\x10\x13\x08\x11\x00a\xa8'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1842
sS'block_loop.thisIndex'
p3072
g888
sg38
S'left'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1527
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1849
sS'block_loop.thisRepN'
p3078
I0
sg906
g1527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg909
g1534
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F1.1165234715299448
sg34
g752
(S'\x07\xdf\n\x10\x13\x08\x16\x0c\xe0\xe0'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1437
sS'block_loop.thisIndex'
p3085
g888
sg38
S'right'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1198
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1444
sS'block_loop.thisRepN'
p3091
I0
sg906
g1198
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg909
g1192
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F1.383538679794583
sg34
g752
(S'\x07\xdf\n\x10\x13\x08\x1c\x0f\x1b0'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1160
sS'block_loop.thisIndex'
p3098
g888
sg38
S'left'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1167
sS'block_loop.thisRepN'
p3104
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F1.666805319240666
sg34
g752
(S'\x07\xdf\n\x10\x13\x08#\x06"P'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g1064
sS'block_loop.thisIndex'
p3111
g888
sg38
S'left'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1075
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g1072
sS'block_loop.thisRepN'
p3117
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg909
g1075
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F0.96681746440299321
sg34
g752
(S'\x07\xdf\n\x10\x13\x08*\x01\xad\xb0'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1842
sS'block_loop.thisIndex'
p3124
g888
sg38
S'left'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1527
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1849
sS'block_loop.thisRepN'
p3130
I0
sg906
g1527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg909
g1534
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F0.73320973392401356
sg34
g752
(S'\x07\xdf\n\x10\x13\x080\x01\xc5 '
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1064
sS'block_loop.thisIndex'
p3137
g888
sg38
S'left'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1072
sS'block_loop.thisRepN'
p3143
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg909
g1075
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F0.91678992396191461
sg34
g752
(S'\x07\xdf\n\x10\x13\x085\rN@'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g998
sS'block_loop.thisIndex'
p3150
g888
sg38
S'right'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g1006
sS'block_loop.thisRepN'
p3156
I0
sg906
g1002
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg909
g1009
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F1.3338461292878492
sg34
g752
(S'\x07\xdf\n\x10\x13\x08;\x0c\xae\x18'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g2745
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g2752
sS'block_loop.thisRepN'
p3169
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F1.6834293732827064
sg34
g752
(S'\x07\xdf\n\x10\x13\t\x06\x02\xfd\xa0'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g1188
sS'block_loop.thisIndex'
p3176
g888
sg38
S'left'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g1198
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g1196
sS'block_loop.thisRepN'
p3182
I0
sg906
g1198
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg909
g1192
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F1.0834760723082582
sg34
g752
(S'\x07\xdf\n\x10\x13\t\x0c\r\xcb@'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g998
sS'block_loop.thisIndex'
p3189
g888
sg38
S'right'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g1009
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1006
sS'block_loop.thisRepN'
p3195
I0
sg906
g1002
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg909
g1009
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F1.050209147768328
sg34
g752
(S'\x07\xdf\n\x10\x13\t\x13\x00N '
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1115
sS'block_loop.thisIndex'
p3202
g888
sg38
S'right'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1122
sS'block_loop.thisRepN'
p3208
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg909
g1075
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F0.9501346802135231
sg34
g752
(S'\x07\xdf\n\x10\x13\t\x19\x01\x96@'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1734
sS'block_loop.thisIndex'
p3215
g888
sg38
S'right'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1682
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1741
sS'block_loop.thisRepN'
p3221
I0
sg906
g1688
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg909
g1682
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F1.4502760887335171
sg34
g752
(S'\x07\xdf\n\x10\x13\t\x1f\x01o0'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g1081
sS'block_loop.thisIndex'
p3228
g888
sg38
S'right'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g1085
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g1089
sS'block_loop.thisRepN'
p3234
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg909
g1092
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F0.91675799299991922
sg34
g752
(S'\x07\xdf\n\x10\x13\t%\x08\xaa\xc0'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g1115
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g1122
sS'block_loop.thisRepN'
p3247
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg909
g1075
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F0.86679573995206738
sg34
g752
(S'\x07\xdf\n\x10\x13\t+\x08\n\x98'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g1762
sS'block_loop.thisIndex'
p3254
g888
sg38
S'left'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g1134
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g1769
sS'block_loop.thisRepN'
p3260
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg909
g1141
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F1.0834324523457326
sg34
g752
(S'\x07\xdf\n\x10\x13\t1\x06x@'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1064
sS'block_loop.thisIndex'
p3267
g888
sg38
S'left'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1072
sS'block_loop.thisRepN'
p3273
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg909
g1075
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F0.75009693326137494
sg34
g752
(S'\x07\xdf\n\x10\x13\t7\x089x'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g1379
sS'block_loop.thisIndex'
p3280
g888
sg38
S'right'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1389
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1387
sS'block_loop.thisRepN'
p3286
I0
sg906
g1389
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F1.266829039377626
sg34
g752
(S'\x07\xdf\n\x10\x13\n\x01\x04\xfdX'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1265
sS'block_loop.thisIndex'
p3293
g888
sg38
S'right'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1272
sS'block_loop.thisRepN'
p3299
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg909
g1109
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F0.70006369084876496
sg34
g752
(S'\x07\xdf\n\x10\x13\n\x07\t\x99\x08'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g1734
sS'block_loop.thisIndex'
p3306
g888
sg38
S'left'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g1688
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g1741
sS'block_loop.thisRepN'
p3312
I0
sg906
g1688
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg909
g1682
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F1.6834211054519983
sg34
g752
(S'\x07\xdf\n\x10\x13\n\r\x05f\xd0'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1379
sS'block_loop.thisIndex'
p3319
g888
sg38
S'right'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1389
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1387
sS'block_loop.thisRepN'
p3325
I0
sg906
g1389
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F1.2501459700870328
sg34
g752
(S'\x07\xdf\n\x10\x13\n\x14\x010\xb0'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1319
sS'block_loop.thisIndex'
p3332
g888
sg38
S'left'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1323
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1327
sS'block_loop.thisRepN'
p3338
I0
sg906
g1323
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg909
g1330
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F0.78352664866542909
sg34
g752
(S'\x07\xdf\n\x10\x13\n\x1a\x05\x91\xc8'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1160
sS'block_loop.thisIndex'
p3345
g888
sg38
S'left'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1167
sS'block_loop.thisRepN'
p3351
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F2.1172122678690357
sg34
g752
(S'\x07\xdf\n\x10\x13\n \x02\x90@'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g2275
sS'block_loop.thisIndex'
p3358
g888
sg38
S'left'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1051
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g2282
sS'block_loop.thisRepN'
p3364
I0
sg906
g1051
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg909
g1058
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F0.91678137102280743
sg34
g752
(S"\x07\xdf\n\x10\x13\n'\x05\x01@"
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g932
sS'block_loop.thisIndex'
p3371
g888
sg38
S'right'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g940
sS'block_loop.thisRepN'
p3377
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F0.95009134533756878
sg34
g752
(S'\x07\xdf\n\x10\x13\n-\x04&\x80'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g1523
sS'block_loop.thisIndex'
p3384
g888
sg38
S'right'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g1534
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g1531
sS'block_loop.thisRepN'
p3390
I0
sg906
g1527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg909
g1534
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F0.7165087034663884
sg34
g752
(S'\x07\xdf\n\x10\x13\n3\x03\xffp'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1130
sS'block_loop.thisIndex'
p3397
g888
sg38
S'right'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1134
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1138
sS'block_loop.thisRepN'
p3403
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg909
g1141
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F1.0001362767579849
sg34
g752
(S'\x07\xdf\n\x10\x13\n9\x00\x0b\xb8'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g949
sS'block_loop.thisIndex'
p3410
g888
sg38
S'right'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g957
sS'block_loop.thisRepN'
p3416
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F1.7001834319380578
sg34
g752
(S'\x07\xdf\n\x10\x13\x0b\x03\x00\x9c@'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g1452
sS'block_loop.thisIndex'
p3423
g888
sg38
S'right'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g1323
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g1459
sS'block_loop.thisRepN'
p3429
I0
sg906
g1323
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg909
g1330
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F0.71677897620247677
sg34
g752
(S'\x07\xdf\n\x10\x13\x0b\t\x0b\xe6\xe0'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g932
sS'block_loop.thisIndex'
p3436
g888
sg38
S'right'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g940
sS'block_loop.thisRepN'
p3442
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F0.70010788101353683
sg34
g752
(S'\x07\xdf\n\x10\x13\x0b\x0f\x07\xf3('
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g2275
sS'block_loop.thisIndex'
p3449
g888
sg38
S'left'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g1051
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g2282
sS'block_loop.thisRepN'
p3455
I0
sg906
g1051
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg909
g1058
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F0.850107538899465
sg34
g752
(S'\x07\xdf\n\x10\x13\x0b\x15\x03\xfb\x88'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1409
sS'block_loop.thisIndex'
p3462
g888
sg38
S'left'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g1389
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1416
sS'block_loop.thisRepN'
p3468
I0
sg906
g1389
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F1.0335027004402946
sg34
g752
(S'\x07\xdf\n\x10\x13\x0b\x1b\x02.\x98'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1188
sS'block_loop.thisIndex'
p3475
g888
sg38
S'left'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1198
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1196
sS'block_loop.thisRepN'
p3481
I0
sg906
g1198
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg909
g1192
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F1.1501413514997694
sg34
g752
(S'\x07\xdf\n\x10\x13\x0b!\x0388'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1506
sS'block_loop.thisIndex'
p3488
g888
sg38
S'right'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1517
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1514
sS'block_loop.thisRepN'
p3494
I0
sg906
g1510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg909
g1517
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F0.96657798223895952
sg34
g752
(S"\x07\xdf\n\x10\x13\x0b'\x05\xef\x88"
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g895
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g904
sS'block_loop.thisRepN'
p3507
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F1.5001838880925789
sg34
g752
(S'\x07\xdf\n\x10\x13\x0b-\x06\x06\xf8'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g1047
sS'block_loop.thisIndex'
p3514
g888
sg38
S'right'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g1051
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g1055
sS'block_loop.thisRepN'
p3520
I0
sg906
g1051
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg909
g1058
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F0.86684306619281415
sg34
g752
(S'\x07\xdf\n\x10\x13\x0b3\x0e4\xb8'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g1265
sS'block_loop.thisIndex'
p3527
g888
sg38
S'right'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g1272
sS'block_loop.thisRepN'
p3533
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg909
g1109
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F0.7167518919086433
sg34
g752
(S'\x07\xdf\n\x10\x13\x0b9\x0c\xa2`'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1579
sS'block_loop.thisIndex'
p3540
g888
sg38
S'left'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1586
sS'block_loop.thisRepN'
p3546
I0
sg906
g1002
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg909
g1009
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F1.066707758771372
sg34
g752
(S'\x07\xdf\n\x10\x13\x0c\x03\x08\xae\xa8'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g1235
sS'block_loop.thisIndex'
p3553
g888
sg38
S'left'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g1243
sS'block_loop.thisRepN'
p3559
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F0.78342971540405415
sg34
g752
(S'\x07\xdf\n\x10\x13\x0c\t\n1`'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g2745
sS'block_loop.thisIndex'
p3566
g888
sg38
S'right'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g2752
sS'block_loop.thisRepN'
p3572
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F1.3667561113543343
sg34
g752
(S'\x07\xdf\n\x10\x13\x0c\x0f\x07nX'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g1624
sS'block_loop.thisIndex'
p3579
g888
sg38
S'right'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g1631
sS'block_loop.thisRepN'
p3585
I0
sg906
g1025
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F0.70004801046889042
sg34
g752
(S'\x07\xdf\n\x10\x13\x0c\x15\ry8'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g1609
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g1616
sS'block_loop.thisRepN'
p3598
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F0.75003278625081293
sg34
g752
(S'\x07\xdf\n\x10\x13\x0c\x1b\t\x85\x80'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g983
sS'block_loop.thisIndex'
p3605
g888
sg38
S'left'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g990
sS'block_loop.thisRepN'
p3611
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F0.88342692144942703
sg34
g752
(S'\x07\xdf\n\x10\x13\x0c!\x06Ex'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F6.5171720120633836
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'40-sardines.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'right'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'5-pineapple.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'5-pineapple.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'40-sardines.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F1.4501668962693657
sg34
g752
(S'\x07\xdf\n\x10\x13\x0c2\ry8'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'22-daim.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'left'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'7-olives.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'7-olives.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
S'22-daim.png'
p3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3664
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F1.4500953367096372
sg34
g752
(S'\x07\xdf\n\x10\x13\x0c9\x05r\x88'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'30-spaghetti_hoops.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'left'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'19-caramello_redo.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'19-caramello_redo.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3680
I1
sg3646
S'30-spaghetti_hoops.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F1.9334536066016881
sg34
g752
(S'\x07\xdf\n\x10\x13\r\x03\x0c\xb2\x00'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'23-crunchie_redo.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'left'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'23-crunchie_redo.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'33-ambrosia_rice.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3697
I1
sg3646
S'33-ambrosia_rice.png'
p3698
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vn
sS'block_loop.thisTrialN'
p3700
I0
sg39
F1.9333894595911261
sg34
g752
(S'\x07\xdf\n\x10\x13\r\n\x0cH\x88'
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'43-mrporky_pork_crackles_redo.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'right'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'18-mms.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'18-mms.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3714
I1
sg3646
S'43-mrporky_pork_crackles_redo.png'
p3715
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vn
sS'block_loop.thisTrialN'
p3717
I0
sg39
F1.0168863440412679
sg34
g752
(S'\x07\xdf\n\x10\x13\r\x11\x0b\xdf\x10'
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'2-steamed_puddings.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'left'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
S'2-steamed_puddings.png'
p3725
sg63
g64
sS'trial_loop.thisIndex'
p3726
g59
(g98
S'\x05\x00\x00\x00'
tRp3727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3728
I0
sg3641
S'20-fruit_pastilles.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3731
I1
sg3646
S'20-fruit_pastilles.png'
p3732
sg55
g11
sS'block_loop.thisTrial'
p3733
Nsg69
Vn
sS'block_loop.thisTrialN'
p3734
I0
sg39
F0.70024814914359013
sg34
g752
(S'\x07\xdf\n\x10\x13\r\x17\x0co\x98'
tRp3735
sa(dp3736
S'trial_loop.thisTrialN'
p3737
I6
sg3632
S'44-crunch.png'
p3738
sS'block_loop.thisIndex'
p3739
g3626
sg38
S'left'
p3740
sg58
g62
sS'trial_loop.thisN'
p3741
I6
sg33
S'44-crunch.png'
p3742
sg63
g64
sS'trial_loop.thisIndex'
p3743
g59
(g98
S'\x06\x00\x00\x00'
tRp3744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3745
I0
sg3641
S'26-walkers_smoky_bacon.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3748
I1
sg3646
S'26-walkers_smoky_bacon.png'
p3749
sg55
g11
sS'block_loop.thisTrial'
p3750
Nsg69
Vn
sS'block_loop.thisTrialN'
p3751
I0
sg39
F0.83347265113843605
sg34
g752
(S'\x07\xdf\n\x10\x13\r\x1d\x08{\xe0'
tRp3752
sa(dp3753
S'trial_loop.thisTrialN'
p3754
I7
sg3632
S'49-yorkie.png'
p3755
sS'block_loop.thisIndex'
p3756
g3626
sg38
S'left'
p3757
sg58
g62
sS'trial_loop.thisN'
p3758
I7
sg33
S'49-yorkie.png'
p3759
sg63
g64
sS'trial_loop.thisIndex'
p3760
g59
(g98
S'\x07\x00\x00\x00'
tRp3761
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3762
I0
sg3641
S'35-raisins.png'
p3763
sS'block_loop.thisRepN'
p3764
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3765
I1
sg3646
S'35-raisins.png'
p3766
sg55
g11
sS'block_loop.thisTrial'
p3767
Nsg69
Vn
sS'block_loop.thisTrialN'
p3768
I0
sg39
F1.1501963753835298
sg34
g752
(S'\x07\xdf\n\x10\x13\r#\x06pp'
tRp3769
sa(dp3770
S'trial_loop.thisTrialN'
p3771
I8
sg3632
S'10-bounty_redo.png'
p3772
sS'block_loop.thisIndex'
p3773
g3626
sg38
S'left'
p3774
sg58
g62
sS'trial_loop.thisN'
p3775
I8
sg33
S'10-bounty_redo.png'
p3776
sg63
g64
sS'trial_loop.thisIndex'
p3777
g59
(g98
S'\x08\x00\x00\x00'
tRp3778
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3779
I0
sg3641
S'4-corn.png'
p3780
sS'block_loop.thisRepN'
p3781
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3782
I1
sg3646
S'4-corn.png'
p3783
sg55
g11
sS'block_loop.thisTrial'
p3784
Nsg69
Vn
sS'block_loop.thisTrialN'
p3785
I0
sg39
F1.3668453469726956
sg34
g752
(S'\x07\xdf\n\x10\x13\r)\t#\xd8'
tRp3786
sa(dp3787
S'trial_loop.thisTrialN'
p3788
I9
sg3632
S'42-mrkipling_lemon_slices.png'
p3789
sS'block_loop.thisIndex'
p3790
g3626
sg38
S'left'
p3791
sg58
g62
sS'trial_loop.thisN'
p3792
I9
sg33
S'16-skips_prawn.png'
p3793
sg63
g64
sS'trial_loop.thisIndex'
p3794
g59
(g98
S'\t\x00\x00\x00'
tRp3795
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3796
I0
sg3641
S'16-skips_prawn.png'
p3797
sS'block_loop.thisRepN'
p3798
I1
sg3644
S'42-mrkipling_lemon_slices.png'
p3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3800
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p3801
Nsg69
Vn
sS'block_loop.thisTrialN'
p3802
I0
sg39
F1.5333564452666906
sg34
g752
(S'\x07\xdf\n\x10\x13\r0\x00*\xf8'
tRp3803
sa(dp3804
S'trial_loop.thisTrialN'
p3805
I10
sg3632
S'19-caramello_redo.png'
p3806
sS'block_loop.thisIndex'
p3807
g3626
sg38
S'left'
p3808
sg58
g62
sS'trial_loop.thisN'
p3809
I10
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p3810
g59
(g98
S'\n\x00\x00\x00'
tRp3811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3812
I0
sg3641
S'30-spaghetti_hoops.png'
p3813
sS'block_loop.thisRepN'
p3814
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3815
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p3816
Nsg69
Vn
sS'block_loop.thisTrialN'
p3817
I0
sg39
F2.4001493342366302
sg34
g752
(S'\x07\xdf\n\x10\x13\r6\x08\xd1\xd0'
tRp3818
sa(dp3819
S'trial_loop.thisTrialN'
p3820
I11
sg3632
g3653
sS'block_loop.thisIndex'
p3821
g3626
sg38
S'left'
p3822
sg58
g62
sS'trial_loop.thisN'
p3823
I11
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p3824
g59
(g98
S'\x0b\x00\x00\x00'
tRp3825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3826
I0
sg3641
g3661
sS'block_loop.thisRepN'
p3827
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3828
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p3829
Nsg69
Vn
sS'block_loop.thisTrialN'
p3830
I0
sg39
F0.78339008680632105
sg34
g752
(S'\x07\xdf\n\x10\x13\x0e\x02\x00\x0f\xa0'
tRp3831
sa(dp3832
S'trial_loop.thisTrialN'
p3833
I12
sg3632
S'36-fig_rolls.png'
p3834
sS'block_loop.thisIndex'
p3835
g3626
sg38
S'right'
p3836
sg58
g62
sS'trial_loop.thisN'
p3837
I12
sg33
S'36-fig_rolls.png'
p3838
sg63
g64
sS'trial_loop.thisIndex'
p3839
g59
(g98
S'\x0c\x00\x00\x00'
tRp3840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3841
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p3842
sS'block_loop.thisRepN'
p3843
I1
sg3644
g3838
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3844
I1
sg3646
S'34-hula_hoops_bbq_beef_redo.png'
p3845
sg55
g11
sS'block_loop.thisTrial'
p3846
Nsg69
Vn
sS'block_loop.thisTrialN'
p3847
I0
sg39
F1.083518551888119
sg34
g752
(S'\x07\xdf\n\x10\x13\x0e\x07\x0c\x8e\xd8'
tRp3848
sa(dp3849
S'trial_loop.thisTrialN'
p3850
I13
sg3632
S'21-nakd_banana_crunch.png'
p3851
sS'block_loop.thisIndex'
p3852
g3626
sg38
S'right'
p3853
sg58
g62
sS'trial_loop.thisN'
p3854
I13
sg33
S'21-nakd_banana_crunch.png'
p3855
sg63
g64
sS'trial_loop.thisIndex'
p3856
g59
(g98
S'\r\x00\x00\x00'
tRp3857
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3858
I0
sg3641
S'1-treacle_cookies.png'
p3859
sS'block_loop.thisRepN'
p3860
I1
sg3644
S'1-treacle_cookies.png'
p3861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3862
I1
sg3646
g3855
sg55
g11
sS'block_loop.thisTrial'
p3863
Nsg69
Vn
sS'block_loop.thisTrialN'
p3864
I0
sg39
F0.68339402115816483
sg34
g752
(S'\x07\xdf\n\x10\x13\x0e\r\x0eP\x10'
tRp3865
sa(dp3866
S'trial_loop.thisTrialN'
p3867
I14
sg3632
S'38-maltesers.png'
p3868
sS'block_loop.thisIndex'
p3869
g3626
sg38
S'right'
p3870
sg58
g62
sS'trial_loop.thisN'
p3871
I14
sg33
S'38-maltesers.png'
p3872
sg63
g64
sS'trial_loop.thisIndex'
p3873
g59
(g98
S'\x0e\x00\x00\x00'
tRp3874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3875
I0
sg3641
S'6-sour_patch_kids.png'
p3876
sS'block_loop.thisRepN'
p3877
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3878
I1
sg3646
S'6-sour_patch_kids.png'
p3879
sg55
g11
sS'block_loop.thisTrial'
p3880
Nsg69
Vn
sS'block_loop.thisTrialN'
p3881
I0
sg39
F0.76661436072026845
sg34
g752
(S'\x07\xdf\n\x10\x13\x0e\x13\t\xe3@'
tRp3882
sa(dp3883
S'trial_loop.thisTrialN'
p3884
I15
sg3632
S'51-mars.png'
p3885
sS'block_loop.thisIndex'
p3886
g3626
sg38
S'left'
p3887
sg58
g62
sS'trial_loop.thisN'
p3888
I15
sg33
S'51-mars.png'
p3889
sg63
g64
sS'trial_loop.thisIndex'
p3890
g59
(g98
S'\x0f\x00\x00\x00'
tRp3891
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3892
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p3893
sS'block_loop.thisRepN'
p3894
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3895
I1
sg3646
S'27-hartleys_raspberries_jelly.png'
p3896
sg55
g11
sS'block_loop.thisTrial'
p3897
Nsg69
Vn
sS'block_loop.thisTrialN'
p3898
I0
sg39
F1.0834090743228444
sg34
g752
(S'\x07\xdf\n\x10\x13\x0e\x19\x06\xe1\xb8'
tRp3899
sa(dp3900
S'trial_loop.thisTrialN'
p3901
I16
sg3632
g3789
sS'block_loop.thisIndex'
p3902
g3626
sg38
S'left'
p3903
sg58
g62
sS'trial_loop.thisN'
p3904
I16
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p3905
g59
(g98
S'\x10\x00\x00\x00'
tRp3906
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3907
I0
sg3641
g3797
sS'block_loop.thisRepN'
p3908
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3909
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p3910
Nsg69
Vn
sS'block_loop.thisTrialN'
p3911
I0
sg39
F0.78332223352481378
sg34
g752
(S'\x07\xdf\n\x10\x13\x0e\x1f\x08\xa2\xf0'
tRp3912
sa(dp3913
S'trial_loop.thisTrialN'
p3914
I17
sg3632
S'5-pineapple.png'
p3915
sS'block_loop.thisIndex'
p3916
g3626
sg38
S'left'
p3917
sg58
g62
sS'trial_loop.thisN'
p3918
I17
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p3919
g59
(g98
S'\x11\x00\x00\x00'
tRp3920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3921
I0
sg3641
S'40-sardines.png'
p3922
sS'block_loop.thisRepN'
p3923
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3924
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3925
Nsg69
Vn
sS'block_loop.thisTrialN'
p3926
I0
sg39
F1.0001436893071514
sg34
g752
(S'\x07\xdf\n\x10\x13\x0e%\x05\xdf\xe8'
tRp3927
sa(dp3928
S'trial_loop.thisTrialN'
p3929
I18
sg3632
S'25-kitkat.png'
p3930
sS'block_loop.thisIndex'
p3931
g3626
sg38
S'right'
p3932
sg58
g62
sS'trial_loop.thisN'
p3933
I18
sg33
S'31-hobnobs.png'
p3934
sg63
g64
sS'trial_loop.thisIndex'
p3935
g59
(g98
S'\x12\x00\x00\x00'
tRp3936
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3937
I0
sg3641
S'31-hobnobs.png'
p3938
sS'block_loop.thisRepN'
p3939
I1
sg3644
g3934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3940
I1
sg3646
S'25-kitkat.png'
p3941
sg55
g11
sS'block_loop.thisTrial'
p3942
Nsg69
Vn
sS'block_loop.thisTrialN'
p3943
I0
sg39
F1.1001386145653669
sg34
g752
(S'\x07\xdf\n\x10\x13\x0e+\x06pp'
tRp3944
sa(dp3945
S'trial_loop.thisTrialN'
p3946
I19
sg3632
g3633
sS'block_loop.thisIndex'
p3947
g3626
sg38
S'right'
p3948
sg58
g62
sS'trial_loop.thisN'
p3949
I19
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p3950
g59
(g98
S'\x13\x00\x00\x00'
tRp3951
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3952
I0
sg3641
g3642
sS'block_loop.thisRepN'
p3953
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3954
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3955
Nsg69
Vn
sS'block_loop.thisTrialN'
p3956
I0
sg39
F0.85010639850224834
sg34
g752
(S'\x07\xdf\n\x10\x13\x0e1\x08p('
tRp3957
sa(dp3958
S'trial_loop.thisTrialN'
p3959
I20
sg3632
S'26-walkers_smoky_bacon.png'
p3960
sS'block_loop.thisIndex'
p3961
g3626
sg38
S'right'
p3962
sg58
g62
sS'trial_loop.thisN'
p3963
I20
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p3964
g59
(g98
S'\x14\x00\x00\x00'
tRp3965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3966
I0
sg3641
S'44-crunch.png'
p3967
sS'block_loop.thisRepN'
p3968
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3969
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p3970
Nsg69
Vn
sS'block_loop.thisTrialN'
p3971
I0
sg39
F0.66678536239487585
sg34
g752
(S'\x07\xdf\n\x10\x13\x0e7\x06\x9fP'
tRp3972
sa(dp3973
S'trial_loop.thisTrialN'
p3974
I21
sg3632
S'4-corn.png'
p3975
sS'block_loop.thisIndex'
p3976
g3626
sg38
S'right'
p3977
sg58
g62
sS'trial_loop.thisN'
p3978
I21
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p3979
g59
(g98
S'\x15\x00\x00\x00'
tRp3980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3981
I0
sg3641
S'10-bounty_redo.png'
p3982
sS'block_loop.thisRepN'
p3983
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3984
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p3985
Nsg69
Vn
sS'block_loop.thisTrialN'
p3986
I0
sg39
F1.2001301186464843
sg34
g752
(S'\x07\xdf\n\x10\x13\x0f\x01\x022\x80'
tRp3987
sa(dp3988
S'trial_loop.thisTrialN'
p3989
I22
sg3632
g3687
sS'block_loop.thisIndex'
p3990
g3626
sg38
S'right'
p3991
sg58
g62
sS'trial_loop.thisN'
p3992
I22
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p3993
g59
(g98
S'\x16\x00\x00\x00'
tRp3994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3995
I0
sg3641
g3695
sS'block_loop.thisRepN'
p3996
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3997
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p3998
Nsg69
Vn
sS'block_loop.thisTrialN'
p3999
I0
sg39
F2.2834223028621636
sg34
g752
(S'\x07\xdf\n\x10\x13\x0f\x07\x05\x9d\x80'
tRp4000
sa(dp4001
S'trial_loop.thisTrialN'
p4002
I23
sg3632
g3915
sS'block_loop.thisIndex'
p4003
g3626
sg38
S'left'
p4004
sg58
g62
sS'trial_loop.thisN'
p4005
I23
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4006
g59
(g98
S'\x17\x00\x00\x00'
tRp4007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4008
I0
sg3641
g3922
sS'block_loop.thisRepN'
p4009
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4010
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4011
Nsg69
Vn
sS'block_loop.thisTrialN'
p4012
I0
sg39
F0.95008877946384018
sg34
g752
(S'\x07\xdf\n\x10\x13\x0f\x0e\ns\xc8'
tRp4013
sa(dp4014
S'trial_loop.thisTrialN'
p4015
I24
sg3632
S'35-raisins.png'
p4016
sS'block_loop.thisIndex'
p4017
g3626
sg38
S'right'
p4018
sg58
g62
sS'trial_loop.thisN'
p4019
I24
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4020
g59
(g98
S'\x18\x00\x00\x00'
tRp4021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4022
I0
sg3641
S'49-yorkie.png'
p4023
sS'block_loop.thisRepN'
p4024
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4025
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4026
Nsg69
Vn
sS'block_loop.thisTrialN'
p4027
I0
sg39
F0.71719065745855914
sg34
g752
(S'\x07\xdf\n\x10\x13\x0f\x14\nL\xb8'
tRp4028
sa(dp4029
S'trial_loop.thisTrialN'
p4030
I25
sg3632
g3633
sS'block_loop.thisIndex'
p4031
g3626
sg38
S'right'
p4032
sg58
g62
sS'trial_loop.thisN'
p4033
I25
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4034
g59
(g98
S'\x19\x00\x00\x00'
tRp4035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4036
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4037
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4038
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4039
Nsg69
Vn
sS'block_loop.thisTrialN'
p4040
I0
sg39
F0.9835025293941726
sg34
g752
(S'\x07\xdf\n\x10\x13\x0f\x1a\x06Y\x00'
tRp4041
sa(dp4042
S'trial_loop.thisTrialN'
p4043
I26
sg3632
S'45-chewy_nougat_redo.png'
p4044
sS'block_loop.thisIndex'
p4045
g3626
sg38
S'left'
p4046
sg58
g62
sS'trial_loop.thisN'
p4047
I26
sg33
S'45-chewy_nougat_redo.png'
p4048
sg63
g64
sS'trial_loop.thisIndex'
p4049
g59
(g98
S'\x1a\x00\x00\x00'
tRp4050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4051
I0
sg3641
S'41-peanuts_redo.png'
p4052
sS'block_loop.thisRepN'
p4053
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4054
I1
sg3646
S'41-peanuts_redo.png'
p4055
sg55
g11
sS'block_loop.thisTrial'
p4056
Nsg69
Vn
sS'block_loop.thisTrialN'
p4057
I0
sg39
F1.1335207186275511
sg34
g752
(S'\x07\xdf\n\x10\x13\x0f \x06\xab\x08'
tRp4058
sa(dp4059
S'trial_loop.thisTrialN'
p4060
I27
sg3632
S'18-mms.png'
p4061
sS'block_loop.thisIndex'
p4062
g3626
sg38
S'left'
p4063
sg58
g62
sS'trial_loop.thisN'
p4064
I27
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4065
g59
(g98
S'\x1b\x00\x00\x00'
tRp4066
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4067
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p4068
sS'block_loop.thisRepN'
p4069
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4070
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4071
Nsg69
Vn
sS'block_loop.thisTrialN'
p4072
I0
sg39
F0.88344602299912367
sg34
g752
(S'\x07\xdf\n\x10\x13\x0f&\t#\xd8'
tRp4073
sa(dp4074
S'trial_loop.thisTrialN'
p4075
I28
sg3632
S'7-olives.png'
p4076
sS'block_loop.thisIndex'
p4077
g3626
sg38
S'right'
p4078
sg58
g62
sS'trial_loop.thisN'
p4079
I28
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p4080
g59
(g98
S'\x1c\x00\x00\x00'
tRp4081
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4082
I0
sg3641
S'22-daim.png'
p4083
sS'block_loop.thisRepN'
p4084
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4085
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p4086
Nsg69
Vn
sS'block_loop.thisTrialN'
p4087
I0
sg39
F0.75021781473333249
sg34
g752
(S'\x07\xdf\n\x10\x13\x0f,\x08\n\x98'
tRp4088
sa(dp4089
S'trial_loop.thisTrialN'
p4090
I29
sg3632
g3738
sS'block_loop.thisIndex'
p4091
g3626
sg38
S'right'
p4092
sg58
g62
sS'trial_loop.thisN'
p4093
I29
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4094
g59
(g98
S'\x1d\x00\x00\x00'
tRp4095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4096
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4097
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4098
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4099
Nsg69
Vn
sS'block_loop.thisTrialN'
p4100
I0
sg39
F0.9834246976824943
sg34
g752
(S'\x07\xdf\n\x10\x13\x0f2\x04\x8f\xf8'
tRp4101
sa(dp4102
S'trial_loop.thisTrialN'
p4103
I30
sg3632
S'27-hartleys_raspberries_jelly.png'
p4104
sS'block_loop.thisIndex'
p4105
g3626
sg38
S'right'
p4106
sg58
g62
sS'trial_loop.thisN'
p4107
I30
sg33
g3896
sg63
g64
sS'trial_loop.thisIndex'
p4108
g59
(g98
S'\x1e\x00\x00\x00'
tRp4109
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4110
I0
sg3641
S'51-mars.png'
p4111
sS'block_loop.thisRepN'
p4112
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4113
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p4114
Nsg69
Vn
sS'block_loop.thisTrialN'
p4115
I0
sg39
F0.70020196329278406
sg34
g752
(S'\x07\xdf\n\x10\x13\x0f8\x04\xe5\xe8'
tRp4116
sa(dp4117
S'trial_loop.thisTrialN'
p4118
I31
sg3632
g3960
sS'block_loop.thisIndex'
p4119
g3626
sg38
S'right'
p4120
sg58
g62
sS'trial_loop.thisN'
p4121
I31
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4122
g59
(g98
S'\x1f\x00\x00\x00'
tRp4123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4124
I0
sg3641
g3967
sS'block_loop.thisRepN'
p4125
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4126
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4127
Nsg69
Vn
sS'block_loop.thisTrialN'
p4128
I0
sg39
F0.76663203677890124
sg34
g752
(S'\x07\xdf\n\x10\x13\x10\x02\x00\xf20'
tRp4129
sa(dp4130
S'trial_loop.thisTrialN'
p4131
I32
sg3632
g4076
sS'block_loop.thisIndex'
p4132
g3626
sg38
S'right'
p4133
sg58
g62
sS'trial_loop.thisN'
p4134
I32
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p4135
g59
(g98
S' \x00\x00\x00'
tRp4136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4137
I0
sg3641
g4083
sS'block_loop.thisRepN'
p4138
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4139
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p4140
Nsg69
Vn
sS'block_loop.thisTrialN'
p4141
I0
sg39
F0.98347801097406773
sg34
g752
(S'\x07\xdf\n\x10\x13\x10\x07\x0c\xf4h'
tRp4142
sa(dp4143
S'trial_loop.thisTrialN'
p4144
I33
sg3632
g3885
sS'block_loop.thisIndex'
p4145
g3626
sg38
S'left'
p4146
sg58
g62
sS'trial_loop.thisN'
p4147
I33
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p4148
g59
(g98
S'!\x00\x00\x00'
tRp4149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4150
I0
sg3641
g3893
sS'block_loop.thisRepN'
p4151
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4152
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p4153
Nsg69
Vn
sS'block_loop.thisTrialN'
p4154
I0
sg39
F0.71676785738236504
sg34
g752
(S'\x07\xdf\n\x10\x13\x10\r\rJX'
tRp4155
sa(dp4156
S'trial_loop.thisTrialN'
p4157
I34
sg3632
g3868
sS'block_loop.thisIndex'
p4158
g3626
sg38
S'right'
p4159
sg58
g62
sS'trial_loop.thisN'
p4160
I34
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p4161
g59
(g98
S'"\x00\x00\x00'
tRp4162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4163
I0
sg3641
g3876
sS'block_loop.thisRepN'
p4164
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4165
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4166
Nsg69
Vn
sS'block_loop.thisTrialN'
p4167
I0
sg39
F0.91650853241299046
sg34
g752
(S'\x07\xdf\n\x10\x13\x10\x13\t\x918'
tRp4168
sa(dp4169
S'trial_loop.thisTrialN'
p4170
I35
sg3632
S'20-fruit_pastilles.png'
p4171
sS'block_loop.thisIndex'
p4172
g3626
sg38
S'right'
p4173
sg58
g62
sS'trial_loop.thisN'
p4174
I35
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4175
g59
(g98
S'#\x00\x00\x00'
tRp4176
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4177
I0
sg3641
S'2-steamed_puddings.png'
p4178
sS'block_loop.thisRepN'
p4179
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4180
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4181
Nsg69
Vn
sS'block_loop.thisTrialN'
p4182
I0
sg39
F0.71687163299066015
sg34
g752
(S'\x07\xdf\n\x10\x13\x10\x19\x08\xb6x'
tRp4183
sa(dp4184
S'trial_loop.thisTrialN'
p4185
I36
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p4186
sS'block_loop.thisIndex'
p4187
g3626
sg38
S'right'
p4188
sg58
g62
sS'trial_loop.thisN'
p4189
I36
sg33
g3845
sg63
g64
sS'trial_loop.thisIndex'
p4190
g59
(g98
S'$\x00\x00\x00'
tRp4191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4192
I0
sg3641
S'36-fig_rolls.png'
p4193
sS'block_loop.thisRepN'
p4194
I1
sg3644
g3838
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4195
I1
sg3646
g3845
sg55
g11
sS'block_loop.thisTrial'
p4196
Nsg69
Vn
sS'block_loop.thisTrialN'
p4197
I0
sg39
F0.85005394050676841
sg34
g752
(S'\x07\xdf\n\x10\x13\x10\x1f\x04\xfdX'
tRp4198
sa(dp4199
S'trial_loop.thisTrialN'
p4200
I37
sg3632
g3915
sS'block_loop.thisIndex'
p4201
g3626
sg38
S'left'
p4202
sg58
g62
sS'trial_loop.thisN'
p4203
I37
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4204
g59
(g98
S'%\x00\x00\x00'
tRp4205
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4206
I0
sg3641
g3922
sS'block_loop.thisRepN'
p4207
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4208
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4209
Nsg69
Vn
sS'block_loop.thisTrialN'
p4210
I0
sg39
F0.90013736013497692
sg34
g752
(S'\x07\xdf\n\x10\x13\x10%\x030h'
tRp4211
sa(dp4212
S'trial_loop.thisTrialN'
p4213
I38
sg3632
S'1-treacle_cookies.png'
p4214
sS'block_loop.thisIndex'
p4215
g3626
sg38
S'left'
p4216
sg58
g62
sS'trial_loop.thisN'
p4217
I38
sg33
g3855
sg63
g64
sS'trial_loop.thisIndex'
p4218
g59
(g98
S'&\x00\x00\x00'
tRp4219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4220
I0
sg3641
S'21-nakd_banana_crunch.png'
p4221
sS'block_loop.thisRepN'
p4222
I1
sg3644
g3861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4223
I1
sg3646
g3855
sg55
g11
sS'block_loop.thisTrial'
p4224
Nsg69
Vn
sS'block_loop.thisTrialN'
p4225
I0
sg39
F0.70010845120850718
sg34
g752
(S'\x07\xdf\n\x10\x13\x10+\x02\x17('
tRp4226
sa(dp4227
S'trial_loop.thisTrialN'
p4228
I39
sg3632
S'16-skips_prawn.png'
p4229
sS'block_loop.thisIndex'
p4230
g3626
sg38
S'right'
p4231
sg58
g62
sS'trial_loop.thisN'
p4232
I39
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p4233
g59
(g98
S"'\x00\x00\x00"
tRp4234
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4235
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p4236
sS'block_loop.thisRepN'
p4237
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4238
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p4239
Nsg69
Vn
sS'block_loop.thisTrialN'
p4240
I0
sg39
F0.86665376123710303
sg34
g752
(S'\x07\xdf\n\x10\x13\x100\ra\xc8'
tRp4241
sa(dp4242
S'trial_loop.thisTrialN'
p4243
I40
sg3632
S'41-peanuts_redo.png'
p4244
sS'block_loop.thisIndex'
p4245
g3626
sg38
S'right'
p4246
sg58
g62
sS'trial_loop.thisN'
p4247
I40
sg33
g4055
sg63
g64
sS'trial_loop.thisIndex'
p4248
g59
(g98
S'(\x00\x00\x00'
tRp4249
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4250
I0
sg3641
S'45-chewy_nougat_redo.png'
p4251
sS'block_loop.thisRepN'
p4252
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4253
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p4254
Nsg69
Vn
sS'block_loop.thisTrialN'
p4255
I0
sg39
F0.7335287583846366
sg34
g752
(S'\x07\xdf\n\x10\x13\x106\x0b\xcfp'
tRp4256
sa(dp4257
S'trial_loop.thisTrialN'
p4258
I41
sg3632
S'46-pistachios.png'
p4259
sS'block_loop.thisIndex'
p4260
g3626
sg38
S'left'
p4261
sg58
g62
sS'trial_loop.thisN'
p4262
I41
sg33
S'46-pistachios.png'
p4263
sg63
g64
sS'trial_loop.thisIndex'
p4264
g59
(g98
S')\x00\x00\x00'
tRp4265
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4266
I0
sg3641
S'29-beans.png'
p4267
sS'block_loop.thisRepN'
p4268
I1
sg3644
g4263
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4269
I1
sg3646
S'29-beans.png'
p4270
sg55
g11
sS'block_loop.thisTrial'
p4271
Nsg69
Vn
sS'block_loop.thisTrialN'
p4272
I0
sg39
F0.73388399027317064
sg34
g752
(S'\x07\xdf\n\x10\x13\x11\x00\x08\x1a8'
tRp4273
sa(dp4274
S'trial_loop.thisTrialN'
p4275
I42
sg3632
g4214
sS'block_loop.thisIndex'
p4276
g3626
sg38
S'left'
p4277
sg58
g62
sS'trial_loop.thisN'
p4278
I42
sg33
g3861
sg63
g64
sS'trial_loop.thisIndex'
p4279
g59
(g98
S'*\x00\x00\x00'
tRp4280
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4281
I0
sg3641
g4221
sS'block_loop.thisRepN'
p4282
I1
sg3644
g3861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4283
I1
sg3646
g3855
sg55
g11
sS'block_loop.thisTrial'
p4284
Nsg69
Vn
sS'block_loop.thisTrialN'
p4285
I0
sg39
F0.66678536239487585
sg34
g752
(S'\x07\xdf\n\x10\x13\x11\x06\x04\x9f\x98'
tRp4286
sa(dp4287
S'trial_loop.thisTrialN'
p4288
I43
sg3632
g4076
sS'block_loop.thisIndex'
p4289
g3626
sg38
S'right'
p4290
sg58
g62
sS'trial_loop.thisN'
p4291
I43
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p4292
g59
(g98
S'+\x00\x00\x00'
tRp4293
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4294
I0
sg3641
g4083
sS'block_loop.thisRepN'
p4295
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4296
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p4297
Nsg69
Vn
sS'block_loop.thisTrialN'
p4298
I0
sg39
F0.73343923766515218
sg34
g752
(S'\x07\xdf\n\x10\x13\x11\x0b\x0f6\x88'
tRp4299
sa(dp4300
S'trial_loop.thisTrialN'
p4301
I44
sg3632
g3755
sS'block_loop.thisIndex'
p4302
g3626
sg38
S'left'
p4303
sg58
g62
sS'trial_loop.thisN'
p4304
I44
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4305
g59
(g98
S',\x00\x00\x00'
tRp4306
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4307
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4308
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4309
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4310
Nsg69
Vn
sS'block_loop.thisTrialN'
p4311
I0
sg39
F1.2501257281401195
sg34
g752
(S'\x07\xdf\n\x10\x13\x11\x11\x0b\xbb\xe8'
tRp4312
sa(dp4313
S'trial_loop.thisTrialN'
p4314
I45
sg3632
g4214
sS'block_loop.thisIndex'
p4315
g3626
sg38
S'left'
p4316
sg58
g62
sS'trial_loop.thisN'
p4317
I45
sg33
g3861
sg63
g64
sS'trial_loop.thisIndex'
p4318
g59
(g98
S'-\x00\x00\x00'
tRp4319
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4320
I0
sg3641
g4221
sS'block_loop.thisRepN'
p4321
I1
sg3644
g3861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4322
I1
sg3646
g3855
sg55
g11
sS'block_loop.thisTrial'
p4323
Nsg69
Vn
sS'block_loop.thisTrialN'
p4324
I0
sg39
F0.6835414167289855
sg34
g752
(S'\x07\xdf\n\x10\x13\x11\x18\x00\xda\xc0'
tRp4325
sa(dp4326
S'trial_loop.thisTrialN'
p4327
I46
sg3632
S'8-liquorice_catherine_wheels.png'
p4328
sS'block_loop.thisIndex'
p4329
g3626
sg38
S'right'
p4330
sg58
g62
sS'trial_loop.thisN'
p4331
I46
sg33
S'17-jacobs_mini_cheddars_redo.png'
p4332
sg63
g64
sS'trial_loop.thisIndex'
p4333
g59
(g98
S'.\x00\x00\x00'
tRp4334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4335
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p4336
sS'block_loop.thisRepN'
p4337
I1
sg3644
g4332
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4338
I1
sg3646
S'8-liquorice_catherine_wheels.png'
p4339
sg55
g11
sS'block_loop.thisTrial'
p4340
Nsg69
Vn
sS'block_loop.thisTrialN'
p4341
I0
sg39
F0.83352111776912352
sg34
g752
(S'\x07\xdf\n\x10\x13\x11\x1d\x0b\xacH'
tRp4342
sa(dp4343
S'trial_loop.thisTrialN'
p4344
I47
sg3632
g3721
sS'block_loop.thisIndex'
p4345
g3626
sg38
S'left'
p4346
sg58
g62
sS'trial_loop.thisN'
p4347
I47
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4348
g59
(g98
S'/\x00\x00\x00'
tRp4349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4350
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4351
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4352
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4353
Nsg69
Vn
sS'block_loop.thisTrialN'
p4354
I0
sg39
F0.78354289924027398
sg34
g752
(S'\x07\xdf\n\x10\x13\x11#\t\xa0\xd8'
tRp4355
sa(dp4356
S'trial_loop.thisTrialN'
p4357
I48
sg3632
g3670
sS'block_loop.thisIndex'
p4358
g3626
sg38
S'left'
p4359
sg58
g62
sS'trial_loop.thisN'
p4360
I48
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4361
g59
(g98
S'0\x00\x00\x00'
tRp4362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4363
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4364
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4365
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4366
Nsg69
Vn
sS'block_loop.thisTrialN'
p4367
I0
sg39
F1.5000957928641583
sg34
g752
(S'\x07\xdf\n\x10\x13\x11)\x06\xdd\xd0'
tRp4368
sa(dp4369
S'trial_loop.thisTrialN'
p4370
I49
sg3632
g3653
sS'block_loop.thisIndex'
p4371
g3626
sg38
S'left'
p4372
sg58
g62
sS'trial_loop.thisN'
p4373
I49
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p4374
g59
(g98
S'1\x00\x00\x00'
tRp4375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4376
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4377
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4378
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p4379
Nsg69
Vn
sS'block_loop.thisTrialN'
p4380
I0
sg39
F0.78351809572632192
sg34
g752
(S'\x07\xdf\n\x10\x13\x11/\x0f\x0b\x90'
tRp4381
sa(dp4382
S'trial_loop.thisTrialN'
p4383
I50
sg3632
g4244
sS'block_loop.thisIndex'
p4384
g3626
sg38
S'right'
p4385
sg58
g62
sS'trial_loop.thisN'
p4386
I50
sg33
g4048
sg63
g64
sS'trial_loop.thisIndex'
p4387
g59
(g98
S'2\x00\x00\x00'
tRp4388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4389
I0
sg3641
g4251
sS'block_loop.thisRepN'
p4390
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4391
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p4392
Nsg69
Vn
sS'block_loop.thisTrialN'
p4393
I0
sg39
F1.2001406672643498
sg34
g752
(S'\x07\xdf\n\x10\x13\x115\x0cH\x88'
tRp4394
sa(dp4395
S'trial_loop.thisTrialN'
p4396
I51
sg3632
g3687
sS'block_loop.thisIndex'
p4397
g3626
sg38
S'left'
p4398
sg58
g62
sS'trial_loop.thisN'
p4399
I51
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4400
g59
(g98
S'3\x00\x00\x00'
tRp4401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4402
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4403
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4404
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4405
Nsg69
Vn
sS'block_loop.thisTrialN'
p4406
I0
sg39
F1.3001834889582824
sg34
g752
(S'\x07\xdf\n\x10\x13\x12\x00\x00qH'
tRp4407
sa(dp4408
S'trial_loop.thisTrialN'
p4409
I52
sg3632
g4328
sS'block_loop.thisIndex'
p4410
g3626
sg38
S'right'
p4411
sg58
g62
sS'trial_loop.thisN'
p4412
I52
sg33
g4332
sg63
g64
sS'trial_loop.thisIndex'
p4413
g59
(g98
S'4\x00\x00\x00'
tRp4414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4415
I0
sg3641
g4336
sS'block_loop.thisRepN'
p4416
I1
sg3644
g4332
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4417
I1
sg3646
g4339
sg55
g11
sS'block_loop.thisTrial'
p4418
Nsg69
Vn
sS'block_loop.thisTrialN'
p4419
I0
sg39
F0.76686980836529983
sg34
g752
(S'\x07\xdf\n\x10\x13\x12\x06\x05\x89\xf8'
tRp4420
sa(dp4421
S'trial_loop.thisTrialN'
p4422
I53
sg3632
g3653
sS'block_loop.thisIndex'
p4423
g3626
sg38
S'left'
p4424
sg58
g62
sS'trial_loop.thisN'
p4425
I53
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4426
g59
(g98
S'5\x00\x00\x00'
tRp4427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4428
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4429
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4430
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p4431
Nsg69
Vn
sS'block_loop.thisTrialN'
p4432
I0
sg39
F1.1834898140223231
sg34
g752
(S'\x07\xdf\n\x10\x13\x12\x0c\x02\x88p'
tRp4433
sa(dp4434
S'trial_loop.thisTrialN'
p4435
I54
sg3632
g3721
sS'block_loop.thisIndex'
p4436
g3626
sg38
S'left'
p4437
sg58
g62
sS'trial_loop.thisN'
p4438
I54
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4439
g59
(g98
S'6\x00\x00\x00'
tRp4440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4441
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4442
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4443
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4444
Nsg69
Vn
sS'block_loop.thisTrialN'
p4445
I0
sg39
F0.75010947756527457
sg34
g752
(S'\x07\xdf\n\x10\x13\x12\x12\x05\xf3p'
tRp4446
sa(dp4447
S'trial_loop.thisTrialN'
p4448
I55
sg3632
g4104
sS'block_loop.thisIndex'
p4449
g3626
sg38
S'right'
p4450
sg58
g62
sS'trial_loop.thisN'
p4451
I55
sg33
g3896
sg63
g64
sS'trial_loop.thisIndex'
p4452
g59
(g98
S'7\x00\x00\x00'
tRp4453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4454
I0
sg3641
g4111
sS'block_loop.thisRepN'
p4455
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4456
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p4457
Nsg69
Vn
sS'block_loop.thisTrialN'
p4458
I0
sg39
F0.68354569319490111
sg34
g752
(S'\x07\xdf\n\x10\x13\x12\x18\x02x\xd0'
tRp4459
sa(dp4460
S'trial_loop.thisTrialN'
p4461
I56
sg3632
g4186
sS'block_loop.thisIndex'
p4462
g3626
sg38
S'right'
p4463
sg58
g62
sS'trial_loop.thisN'
p4464
I56
sg33
g3838
sg63
g64
sS'trial_loop.thisIndex'
p4465
g59
(g98
S'8\x00\x00\x00'
tRp4466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4467
I0
sg3641
g4193
sS'block_loop.thisRepN'
p4468
I1
sg3644
g3838
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4469
I1
sg3646
g3845
sg55
g11
sS'block_loop.thisTrial'
p4470
Nsg69
Vn
sS'block_loop.thisTrialN'
p4471
I0
sg39
F1.0167743005949887
sg34
g752
(S'\x07\xdf\n\x10\x13\x12\x1d\r\x8c\xc0'
tRp4472
sa(dp4473
S'trial_loop.thisTrialN'
p4474
I57
sg3632
S'50-polo.png'
p4475
sS'block_loop.thisIndex'
p4476
g3626
sg38
S'right'
p4477
sg58
g62
sS'trial_loop.thisN'
p4478
I57
sg33
S'50-polo.png'
p4479
sg63
g64
sS'trial_loop.thisIndex'
p4480
g59
(g98
S'9\x00\x00\x00'
tRp4481
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4482
I0
sg3641
S'48-twix.png'
p4483
sS'block_loop.thisRepN'
p4484
I1
sg3644
S'48-twix.png'
p4485
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4486
I1
sg3646
g4479
sg55
g11
sS'block_loop.thisTrial'
p4487
Nsg69
Vn
sS'block_loop.thisTrialN'
p4488
I0
sg39
F1.1167558262604871
sg34
g752
(S'\x07\xdf\n\x10\x13\x12#\x0eW\xe0'
tRp4489
sa(dp4490
S'trial_loop.thisTrialN'
p4491
I58
sg3632
g3721
sS'block_loop.thisIndex'
p4492
g3626
sg38
S'left'
p4493
sg58
g62
sS'trial_loop.thisN'
p4494
I58
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4495
g59
(g98
S':\x00\x00\x00'
tRp4496
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4497
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4498
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4499
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4500
Nsg69
Vn
sS'block_loop.thisTrialN'
p4501
I0
sg39
F0.68346130423742579
sg34
g752
(S'\x07\xdf\n\x10\x13\x12*\x01S\xd8'
tRp4502
sa(dp4503
S'trial_loop.thisTrialN'
p4504
I59
sg3632
S'48-twix.png'
p4505
sS'block_loop.thisIndex'
p4506
g3626
sg38
S'left'
p4507
sg58
g62
sS'trial_loop.thisN'
p4508
I59
sg33
g4485
sg63
g64
sS'trial_loop.thisIndex'
p4509
g59
(g98
S';\x00\x00\x00'
tRp4510
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4511
I0
sg3641
S'50-polo.png'
p4512
sS'block_loop.thisRepN'
p4513
I1
sg3644
g4485
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4514
I1
sg3646
g4479
sg55
g11
sS'block_loop.thisTrial'
p4515
Nsg69
Vn
sS'block_loop.thisTrialN'
p4516
I0
sg39
F0.68342167564696865
sg34
g752
(S'\x07\xdf\n\x10\x13\x12/\x0c)H'
tRp4517
sa(dp4518
S'trial_loop.thisTrialN'
p4519
I60
sg3632
g3670
sS'block_loop.thisIndex'
p4520
g3626
sg38
S'left'
p4521
sg58
g62
sS'trial_loop.thisN'
p4522
I60
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p4523
g59
(g98
S'<\x00\x00\x00'
tRp4524
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4525
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4526
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4527
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4528
Nsg69
Vn
sS'block_loop.thisTrialN'
p4529
I0
sg39
F1.8167431108959136
sg34
g752
(S'\x07\xdf\n\x10\x13\x125\x07\xf7\x10'
tRp4530
sa(dp4531
S'trial_loop.thisTrialN'
p4532
I61
sg3632
g4044
sS'block_loop.thisIndex'
p4533
g3626
sg38
S'left'
p4534
sg58
g62
sS'trial_loop.thisN'
p4535
I61
sg33
g4048
sg63
g64
sS'trial_loop.thisIndex'
p4536
g59
(g98
S'=\x00\x00\x00'
tRp4537
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4538
I0
sg3641
g4052
sS'block_loop.thisRepN'
p4539
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4540
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p4541
Nsg69
Vn
sS'block_loop.thisTrialN'
p4542
I0
sg39
F1.0001328555881628
sg34
g752
(S'\x07\xdf\n\x10\x13\x13\x00\x05\xa5P'
tRp4543
sa(dp4544
S'trial_loop.thisTrialN'
p4545
I62
sg3632
S'13-mccoys_steak_crisps.png'
p4546
sS'block_loop.thisIndex'
p4547
g3626
sg38
S'right'
p4548
sg58
g62
sS'trial_loop.thisN'
p4549
I62
sg33
S'3-ellas_strawberries_apples.png'
p4550
sg63
g64
sS'trial_loop.thisIndex'
p4551
g59
(g98
S'>\x00\x00\x00'
tRp4552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4553
I0
sg3641
S'3-ellas_strawberries_apples.png'
p4554
sS'block_loop.thisRepN'
p4555
I1
sg3644
g4550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4556
I1
sg3646
S'13-mccoys_steak_crisps.png'
p4557
sg55
g11
sS'block_loop.thisTrial'
p4558
Nsg69
Vn
sS'block_loop.thisTrialN'
p4559
I0
sg39
F1.0002084065054078
sg34
g752
(S'\x07\xdf\n\x10\x13\x13\x06\x065\xd8'
tRp4560
sa(dp4561
S'trial_loop.thisTrialN'
p4562
I63
sg3632
g3670
sS'block_loop.thisIndex'
p4563
g3626
sg38
S'left'
p4564
sg58
g62
sS'trial_loop.thisN'
p4565
I63
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4566
g59
(g98
S'?\x00\x00\x00'
tRp4567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4568
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4569
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4570
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4571
Nsg69
Vn
sS'block_loop.thisTrialN'
p4572
I0
sg39
F1.3167550850048428
sg34
g752
(S'\x07\xdf\n\x10\x13\x13\x0c\x06\x8b\xc8'
tRp4573
sa(dp4574
S'trial_loop.thisTrialN'
p4575
I64
sg3632
g4546
sS'block_loop.thisIndex'
p4576
g3626
sg38
S'right'
p4577
sg58
g62
sS'trial_loop.thisN'
p4578
I64
sg33
g4550
sg63
g64
sS'trial_loop.thisIndex'
p4579
g59
(g98
S'@\x00\x00\x00'
tRp4580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4581
I0
sg3641
g4554
sS'block_loop.thisRepN'
p4582
I1
sg3644
g4550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4583
I1
sg3646
g4557
sg55
g11
sS'block_loop.thisTrial'
p4584
Nsg69
Vn
sS'block_loop.thisTrialN'
p4585
I0
sg39
F1.0501179164639325
sg34
g752
(S'\x07\xdf\n\x10\x13\x13\x12\x0b\xdf\x10'
tRp4586
sa(dp4587
S'trial_loop.thisTrialN'
p4588
I65
sg3632
g4328
sS'block_loop.thisIndex'
p4589
g3626
sg38
S'right'
p4590
sg58
g62
sS'trial_loop.thisN'
p4591
I65
sg33
g4332
sg63
g64
sS'trial_loop.thisIndex'
p4592
g59
(g98
S'A\x00\x00\x00'
tRp4593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4594
I0
sg3641
g4336
sS'block_loop.thisRepN'
p4595
I1
sg3644
g4332
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4596
I1
sg3646
g4339
sg55
g11
sS'block_loop.thisTrial'
p4597
Nsg69
Vn
sS'block_loop.thisTrialN'
p4598
I0
sg39
F0.85018480040889699
sg34
g752
(S"\x07\xdf\n\x10\x13\x13\x18\r'0"
tRp4599
sa(dp4600
S'trial_loop.thisTrialN'
p4601
I66
sg3632
g3704
sS'block_loop.thisIndex'
p4602
g3626
sg38
S'right'
p4603
sg58
g62
sS'trial_loop.thisN'
p4604
I66
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4605
g59
(g98
S'B\x00\x00\x00'
tRp4606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4607
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4608
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4609
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4610
Nsg69
Vn
sS'block_loop.thisTrialN'
p4611
I0
sg39
F0.76678941077989293
sg34
g752
(S'\x07\xdf\n\x10\x13\x13\x1e\x0b\x94\xd8'
tRp4612
sa(dp4613
S'trial_loop.thisTrialN'
p4614
I67
sg3632
g4186
sS'block_loop.thisIndex'
p4615
g3626
sg38
S'right'
p4616
sg58
g62
sS'trial_loop.thisN'
p4617
I67
sg33
g3845
sg63
g64
sS'trial_loop.thisIndex'
p4618
g59
(g98
S'C\x00\x00\x00'
tRp4619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4620
I0
sg3641
g4193
sS'block_loop.thisRepN'
p4621
I1
sg3644
g3838
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4622
I1
sg3646
g3845
sg55
g11
sS'block_loop.thisTrial'
p4623
Nsg69
Vn
sS'block_loop.thisTrialN'
p4624
I0
sg39
F0.833492322890379
sg34
g752
(S'\x07\xdf\n\x10\x13\x13$\x08X\xb8'
tRp4625
sa(dp4626
S'trial_loop.thisTrialN'
p4627
I68
sg3632
S'33-ambrosia_rice.png'
p4628
sS'block_loop.thisIndex'
p4629
g3626
sg38
S'right'
p4630
sg58
g62
sS'trial_loop.thisN'
p4631
I68
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4632
g59
(g98
S'D\x00\x00\x00'
tRp4633
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4634
I0
sg3641
S'23-crunchie_redo.png'
p4635
sS'block_loop.thisRepN'
p4636
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4637
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4638
Nsg69
Vn
sS'block_loop.thisTrialN'
p4639
I0
sg39
F1.650121109560132
sg34
g752
(S'\x07\xdf\n\x10\x13\x13*\x06I`'
tRp4640
sa(dp4641
S'trial_loop.thisTrialN'
p4642
I69
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p4643
sS'block_loop.thisIndex'
p4644
g3626
sg38
S'left'
p4645
sg58
g62
sS'trial_loop.thisN'
p4646
I69
sg33
g4332
sg63
g64
sS'trial_loop.thisIndex'
p4647
g59
(g98
S'E\x00\x00\x00'
tRp4648
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4649
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p4650
sS'block_loop.thisRepN'
p4651
I1
sg3644
g4332
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4652
I1
sg3646
g4339
sg55
g11
sS'block_loop.thisTrial'
p4653
Nsg69
Vn
sS'block_loop.thisTrialN'
p4654
I0
sg39
F0.81681096417742083
sg34
g752
(S'\x07\xdf\n\x10\x13\x131\x01\x9a('
tRp4655
sa(dp4656
S'trial_loop.thisTrialN'
p4657
I70
sg3632
g3885
sS'block_loop.thisIndex'
p4658
g3626
sg38
S'left'
p4659
sg58
g62
sS'trial_loop.thisN'
p4660
I70
sg33
g3896
sg63
g64
sS'trial_loop.thisIndex'
p4661
g59
(g98
S'F\x00\x00\x00'
tRp4662
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4663
I0
sg3641
g3893
sS'block_loop.thisRepN'
p4664
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4665
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p4666
Nsg69
Vn
sS'block_loop.thisTrialN'
p4667
I0
sg39
F0.70012185081577627
sg34
g752
(S'\x07\xdf\n\x10\x13\x136\x0e\x92x'
tRp4668
sa(dp4669
S'trial_loop.thisTrialN'
p4670
I71
sg3632
g4643
sS'block_loop.thisIndex'
p4671
g3626
sg38
S'left'
p4672
sg58
g62
sS'trial_loop.thisN'
p4673
I71
sg33
g4332
sg63
g64
sS'trial_loop.thisIndex'
p4674
g59
(g98
S'G\x00\x00\x00'
tRp4675
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4676
I0
sg3641
g4650
sS'block_loop.thisRepN'
p4677
I1
sg3644
g4332
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4678
I1
sg3646
g4339
sg55
g11
sS'block_loop.thisTrial'
p4679
Nsg69
Vn
sS'block_loop.thisTrialN'
p4680
I0
sg39
F0.75013399597810348
sg34
g752
(S'\x07\xdf\n\x10\x13\x14\x00\n`@'
tRp4681
sa(dp4682
S'trial_loop.thisTrialN'
p4683
I72
sg3632
g3868
sS'block_loop.thisIndex'
p4684
g3626
sg38
S'right'
p4685
sg58
g62
sS'trial_loop.thisN'
p4686
I72
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p4687
g59
(g98
S'H\x00\x00\x00'
tRp4688
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4689
I0
sg3641
g3876
sS'block_loop.thisRepN'
p4690
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4691
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4692
Nsg69
Vn
sS'block_loop.thisTrialN'
p4693
I0
sg39
F0.96650186111946823
sg34
g752
(S'\x07\xdf\n\x10\x13\x14\x06\x07 8'
tRp4694
sa(dp4695
S'trial_loop.thisTrialN'
p4696
I73
sg3632
g3806
sS'block_loop.thisIndex'
p4697
g3626
sg38
S'right'
p4698
sg58
g62
sS'trial_loop.thisN'
p4699
I73
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4700
g59
(g98
S'I\x00\x00\x00'
tRp4701
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4702
I0
sg3641
g3813
sS'block_loop.thisRepN'
p4703
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4704
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4705
Nsg69
Vn
sS'block_loop.thisTrialN'
p4706
I0
sg39
F1.3835198633314576
sg34
g752
(S'\x07\xdf\n\x10\x13\x14\x0c\x077\xa8'
tRp4707
sa(dp4708
S'trial_loop.thisTrialN'
p4709
I74
sg3632
g4076
sS'block_loop.thisIndex'
p4710
g3626
sg38
S'right'
p4711
sg58
g62
sS'trial_loop.thisN'
p4712
I74
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p4713
g59
(g98
S'J\x00\x00\x00'
tRp4714
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4715
I0
sg3641
g4083
sS'block_loop.thisRepN'
p4716
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4717
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p4718
Nsg69
Vn
sS'block_loop.thisTrialN'
p4719
I0
sg39
F0.86680771406827262
sg34
g752
(S'\x07\xdf\n\x10\x13\x14\x12\r\x81\x08'
tRp4720
sa(dp4721
S'trial_loop.thisTrialN'
p4722
I75
sg3632
g3772
sS'block_loop.thisIndex'
p4723
g3626
sg38
S'left'
p4724
sg58
g62
sS'trial_loop.thisN'
p4725
I75
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4726
g59
(g98
S'K\x00\x00\x00'
tRp4727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4728
I0
sg3641
g3780
sS'block_loop.thisRepN'
p4729
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4730
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4731
Nsg69
Vn
sS'block_loop.thisTrialN'
p4732
I0
sg39
F1.1333984116645297
sg34
g752
(S'\x07\xdf\n\x10\x13\x14\x18\x0b\xee\xb0'
tRp4733
sa(dp4734
S'trial_loop.thisTrialN'
p4735
I76
sg3632
g4546
sS'block_loop.thisIndex'
p4736
g3626
sg38
S'right'
p4737
sg58
g62
sS'trial_loop.thisN'
p4738
I76
sg33
g4550
sg63
g64
sS'trial_loop.thisIndex'
p4739
g59
(g98
S'L\x00\x00\x00'
tRp4740
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4741
I0
sg3641
g4554
sS'block_loop.thisRepN'
p4742
I1
sg3644
g4550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4743
I1
sg3646
g4557
sg55
g11
sS'block_loop.thisTrial'
p4744
Nsg69
Vn
sS'block_loop.thisTrialN'
p4745
I0
sg39
F1.0334314259889652
sg34
g752
(S'\x07\xdf\n\x10\x13\x14\x1e\x0eg\x80'
tRp4746
sa(dp4747
S'trial_loop.thisTrialN'
p4748
I77
sg3632
g4505
sS'block_loop.thisIndex'
p4749
g3626
sg38
S'left'
p4750
sg58
g62
sS'trial_loop.thisN'
p4751
I77
sg33
g4485
sg63
g64
sS'trial_loop.thisIndex'
p4752
g59
(g98
S'M\x00\x00\x00'
tRp4753
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4754
I0
sg3641
g4512
sS'block_loop.thisRepN'
p4755
I1
sg3644
g4485
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4756
I1
sg3646
g4479
sg55
g11
sS'block_loop.thisTrial'
p4757
Nsg69
Vn
sS'block_loop.thisTrialN'
p4758
I0
sg39
F0.71686079927167157
sg34
g752
(S'\x07\xdf\n\x10\x13\x14%\x00.\xe0'
tRp4759
sa(dp4760
S'trial_loop.thisTrialN'
p4761
I78
sg3632
g3687
sS'block_loop.thisIndex'
p4762
g3626
sg38
S'left'
p4763
sg58
g62
sS'trial_loop.thisN'
p4764
I78
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4765
g59
(g98
S'N\x00\x00\x00'
tRp4766
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4767
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4768
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4769
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4770
Nsg69
Vn
sS'block_loop.thisTrialN'
p4771
I0
sg39
F1.8834192238064134
sg34
g752
(S'\x07\xdf\n\x10\x13\x14*\x0b\xbb\xe8'
tRp4772
sa(dp4773
S'trial_loop.thisTrialN'
p4774
I79
sg3632
g4244
sS'block_loop.thisIndex'
p4775
g3626
sg38
S'right'
p4776
sg58
g62
sS'trial_loop.thisN'
p4777
I79
sg33
g4055
sg63
g64
sS'trial_loop.thisIndex'
p4778
g59
(g98
S'O\x00\x00\x00'
tRp4779
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4780
I0
sg3641
g4251
sS'block_loop.thisRepN'
p4781
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4782
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p4783
Nsg69
Vn
sS'block_loop.thisTrialN'
p4784
I0
sg39
F1.1168516191246454
sg34
g752
(S'\x07\xdf\n\x10\x13\x141\n`@'
tRp4785
sa(dp4786
S'trial_loop.thisTrialN'
p4787
I80
sg3632
S'6-sour_patch_kids.png'
p4788
sS'block_loop.thisIndex'
p4789
g3626
sg38
S'left'
p4790
sg58
g62
sS'trial_loop.thisN'
p4791
I80
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p4792
g59
(g98
S'P\x00\x00\x00'
tRp4793
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4794
I0
sg3641
S'38-maltesers.png'
p4795
sS'block_loop.thisRepN'
p4796
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4797
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4798
Nsg69
Vn
sS'block_loop.thisTrialN'
p4799
I0
sg39
F0.88322165101271821
sg34
g752
(S'\x07\xdf\n\x10\x13\x147\x0c\xd9\x10'
tRp4800
sa(dp4801
S'trial_loop.thisTrialN'
p4802
I81
sg3632
g3975
sS'block_loop.thisIndex'
p4803
g3626
sg38
S'right'
p4804
sg58
g62
sS'trial_loop.thisN'
p4805
I81
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4806
g59
(g98
S'Q\x00\x00\x00'
tRp4807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4808
I0
sg3641
g3982
sS'block_loop.thisRepN'
p4809
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4810
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4811
Nsg69
Vn
sS'block_loop.thisTrialN'
p4812
I0
sg39
F1.3168548692410695
sg34
g752
(S'\x07\xdf\n\x10\x13\x15\x01\x0b\x81P'
tRp4813
sa(dp4814
S'trial_loop.thisTrialN'
p4815
I82
sg3632
g3633
sS'block_loop.thisIndex'
p4816
g3626
sg38
S'right'
p4817
sg58
g62
sS'trial_loop.thisN'
p4818
I82
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p4819
g59
(g98
S'R\x00\x00\x00'
tRp4820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4821
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4822
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4823
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4824
Nsg69
Vn
sS'block_loop.thisTrialN'
p4825
I0
sg39
F1.0835068628730369
sg34
g752
(S'\x07\xdf\n\x10\x13\x15\x08\x01\x92X'
tRp4826
sa(dp4827
S'trial_loop.thisTrialN'
p4828
I83
sg3632
g4016
sS'block_loop.thisIndex'
p4829
g3626
sg38
S'right'
p4830
sg58
g62
sS'trial_loop.thisN'
p4831
I83
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4832
g59
(g98
S'S\x00\x00\x00'
tRp4833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4834
I0
sg3641
g4023
sS'block_loop.thisRepN'
p4835
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4836
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4837
Nsg69
Vn
sS'block_loop.thisTrialN'
p4838
I0
sg39
F0.80017008936556522
sg34
g752
(S'\x07\xdf\n\x10\x13\x15\x0e\x03S\x90'
tRp4839
sa(dp4840
S'trial_loop.thisTrialN'
p4841
I84
sg3632
S'29-beans.png'
p4842
sS'block_loop.thisIndex'
p4843
g3626
sg38
S'right'
p4844
sg58
g62
sS'trial_loop.thisN'
p4845
I84
sg33
g4263
sg63
g64
sS'trial_loop.thisIndex'
p4846
g59
(g98
S'T\x00\x00\x00'
tRp4847
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4848
I0
sg3641
S'46-pistachios.png'
p4849
sS'block_loop.thisRepN'
p4850
I1
sg3644
g4263
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4851
I1
sg3646
g4270
sg55
g11
sS'block_loop.thisTrial'
p4852
Nsg69
Vn
sS'block_loop.thisTrialN'
p4853
I0
sg39
F0.91679334513173671
sg34
g752
(S'\x07\xdf\n\x10\x13\x15\x14\x00\xcf\x08'
tRp4854
sa(dp4855
S'trial_loop.thisTrialN'
p4856
I85
sg3632
g4505
sS'block_loop.thisIndex'
p4857
g3626
sg38
S'left'
p4858
sg58
g62
sS'trial_loop.thisN'
p4859
I85
sg33
g4485
sg63
g64
sS'trial_loop.thisIndex'
p4860
g59
(g98
S'U\x00\x00\x00'
tRp4861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4862
I0
sg3641
g4512
sS'block_loop.thisRepN'
p4863
I1
sg3644
g4485
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4864
I1
sg3646
g4479
sg55
g11
sS'block_loop.thisTrial'
p4865
Nsg69
Vn
sS'block_loop.thisTrialN'
p4866
I0
sg39
F0.85014403142122319
sg34
g752
(S'\x07\xdf\n\x10\x13\x15\x19\x0f2\xa0'
tRp4867
sa(dp4868
S'trial_loop.thisTrialN'
p4869
I86
sg3632
g3930
sS'block_loop.thisIndex'
p4870
g3626
sg38
S'right'
p4871
sg58
g62
sS'trial_loop.thisN'
p4872
I86
sg33
g3934
sg63
g64
sS'trial_loop.thisIndex'
p4873
g59
(g98
S'V\x00\x00\x00'
tRp4874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4875
I0
sg3641
g3938
sS'block_loop.thisRepN'
p4876
I1
sg3644
g3934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4877
I1
sg3646
g3941
sg55
g11
sS'block_loop.thisTrial'
p4878
Nsg69
Vn
sS'block_loop.thisTrialN'
p4879
I0
sg39
F0.95017915547214216
sg34
g752
(S'\x07\xdf\n\x10\x13\x15\x1f\re\xb0'
tRp4880
sa(dp4881
S'trial_loop.thisTrialN'
p4882
I87
sg3632
g4628
sS'block_loop.thisIndex'
p4883
g3626
sg38
S'right'
p4884
sg58
g62
sS'trial_loop.thisN'
p4885
I87
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4886
g59
(g98
S'W\x00\x00\x00'
tRp4887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4888
I0
sg3641
g4635
sS'block_loop.thisRepN'
p4889
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4890
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4891
Nsg69
Vn
sS'block_loop.thisTrialN'
p4892
I0
sg39
F1.9501882785989437
sg34
g752
(S'\x07\xdf\n\x10\x13\x15%\r>\xa0'
tRp4893
sa(dp4894
S'trial_loop.thisTrialN'
p4895
I88
sg3632
g3738
sS'block_loop.thisIndex'
p4896
g3626
sg38
S'left'
p4897
sg58
g62
sS'trial_loop.thisN'
p4898
I88
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4899
g59
(g98
S'X\x00\x00\x00'
tRp4900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4901
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4902
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4903
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4904
Nsg69
Vn
sS'block_loop.thisTrialN'
p4905
I0
sg39
F1.0001915857355925
sg34
g752
(S'\x07\xdf\n\x10\x13\x15,\r\x13\xa8'
tRp4906
sa(dp4907
S'trial_loop.thisTrialN'
p4908
I89
sg3632
g3704
sS'block_loop.thisIndex'
p4909
g3626
sg38
S'right'
p4910
sg58
g62
sS'trial_loop.thisN'
p4911
I89
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4912
g59
(g98
S'Y\x00\x00\x00'
tRp4913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4914
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4915
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4916
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4917
Nsg69
Vn
sS'block_loop.thisTrialN'
p4918
I0
sg39
F0.68353286379715428
sg34
g752
(S'\x07\xdf\n\x10\x13\x152\re\xb0'
tRp4919
sa(dp4920
S'trial_loop.thisTrialN'
p4921
I90
sg3632
g3868
sS'block_loop.thisIndex'
p4922
g3626
sg38
S'right'
p4923
sg58
g62
sS'trial_loop.thisN'
p4924
I90
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p4925
g59
(g98
S'Z\x00\x00\x00'
tRp4926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4927
I0
sg3641
g3876
sS'block_loop.thisRepN'
p4928
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4929
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4930
Nsg69
Vn
sS'block_loop.thisTrialN'
p4931
I0
sg39
F0.73320944882289041
sg34
g752
(S'\x07\xdf\n\x10\x13\x158\t7`'
tRp4932
sa(dp4933
S'trial_loop.thisTrialN'
p4934
I91
sg3632
g4171
sS'block_loop.thisIndex'
p4935
g3626
sg38
S'right'
p4936
sg58
g62
sS'trial_loop.thisN'
p4937
I91
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4938
g59
(g98
S'[\x00\x00\x00'
tRp4939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4940
I0
sg3641
g4178
sS'block_loop.thisRepN'
p4941
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4942
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4943
Nsg69
Vn
sS'block_loop.thisTrialN'
p4944
I0
sg39
F0.66686005802330328
sg34
g752
(S'\x07\xdf\n\x10\x13\x16\x02\x05~@'
tRp4945
sa(dp4946
S'trial_loop.thisTrialN'
p4947
I92
sg3632
g3789
sS'block_loop.thisIndex'
p4948
g3626
sg38
S'left'
p4949
sg58
g62
sS'trial_loop.thisN'
p4950
I92
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p4951
g59
(g98
S'\\\x00\x00\x00'
tRp4952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4953
I0
sg3641
g3797
sS'block_loop.thisRepN'
p4954
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4955
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p4956
Nsg69
Vn
sS'block_loop.thisTrialN'
p4957
I0
sg39
F0.78338067857839633
sg34
g752
(S'\x07\xdf\n\x10\x13\x16\x08\x01\x11p'
tRp4958
sa(dp4959
S'trial_loop.thisTrialN'
p4960
I93
sg3632
g4505
sS'block_loop.thisIndex'
p4961
g3626
sg38
S'left'
p4962
sg58
g62
sS'trial_loop.thisN'
p4963
I93
sg33
g4485
sg63
g64
sS'trial_loop.thisIndex'
p4964
g59
(g98
S']\x00\x00\x00'
tRp4965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4966
I0
sg3641
g4512
sS'block_loop.thisRepN'
p4967
I1
sg3644
g4485
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4968
I1
sg3646
g4479
sg55
g11
sS'block_loop.thisTrial'
p4969
Nsg69
Vn
sS'block_loop.thisTrialN'
p4970
I0
sg39
F1.2668584044586169
sg34
g752
(S'\x07\xdf\n\x10\x13\x16\r\r\x8c\xc0'
tRp4971
sa(dp4972
S'trial_loop.thisTrialN'
p4973
I94
sg3632
g4788
sS'block_loop.thisIndex'
p4974
g3626
sg38
S'left'
p4975
sg58
g62
sS'trial_loop.thisN'
p4976
I94
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p4977
g59
(g98
S'^\x00\x00\x00'
tRp4978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4979
I0
sg3641
g4795
sS'block_loop.thisRepN'
p4980
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4981
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4982
Nsg69
Vn
sS'block_loop.thisTrialN'
p4983
I0
sg39
F0.74992929574364098
sg34
g752
(S'\x07\xdf\n\x10\x13\x16\x14\x02\xea\x18'
tRp4984
sa(dp4985
S'trial_loop.thisTrialN'
p4986
I95
sg3632
g4628
sS'block_loop.thisIndex'
p4987
g3626
sg38
S'right'
p4988
sg58
g62
sS'trial_loop.thisN'
p4989
I95
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4990
g59
(g98
S'_\x00\x00\x00'
tRp4991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4992
I0
sg3641
g4635
sS'block_loop.thisRepN'
p4993
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4994
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4995
Nsg69
Vn
sS'block_loop.thisTrialN'
p4996
I0
sg39
F2.7001352504084934
sg34
g752
(S'\x07\xdf\n\x10\x13\x16\x19\x0e\xb1\xb8'
tRp4997
sa(dp4998
S'trial_loop.thisTrialN'
p4999
I96
sg3632
S'3-ellas_strawberries_apples.png'
p5000
sS'block_loop.thisIndex'
p5001
g3626
sg38
S'left'
p5002
sg58
g62
sS'trial_loop.thisN'
p5003
I96
sg33
g4550
sg63
g64
sS'trial_loop.thisIndex'
p5004
g59
(g98
S'`\x00\x00\x00'
tRp5005
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5006
I0
sg3641
S'13-mccoys_steak_crisps.png'
p5007
sS'block_loop.thisRepN'
p5008
I1
sg3644
g4550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5009
I1
sg3646
g4557
sg55
g11
sS'block_loop.thisTrial'
p5010
Nsg69
Vn
sS'block_loop.thisTrialN'
p5011
I0
sg39
F0.93347498893126613
sg34
g752
(S'\x07\xdf\n\x10\x13\x16!\n\xb2H'
tRp5012
sa(dp5013
S'trial_loop.thisTrialN'
p5014
I97
sg3632
g4104
sS'block_loop.thisIndex'
p5015
g3626
sg38
S'right'
p5016
sg58
g62
sS'trial_loop.thisN'
p5017
I97
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p5018
g59
(g98
S'a\x00\x00\x00'
tRp5019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5020
I0
sg3641
g4111
sS'block_loop.thisRepN'
p5021
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5022
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p5023
Nsg69
Vn
sS'block_loop.thisTrialN'
p5024
I0
sg39
F0.65018411617347738
sg34
g752
(S"\x07\xdf\n\x10\x13\x16'\n\x12 "
tRp5025
sa(dp5026
S'trial_loop.thisTrialN'
p5027
I98
sg3632
g4171
sS'block_loop.thisIndex'
p5028
g3626
sg38
S'right'
p5029
sg58
g62
sS'trial_loop.thisN'
p5030
I98
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5031
g59
(g98
S'b\x00\x00\x00'
tRp5032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5033
I0
sg3641
g4178
sS'block_loop.thisRepN'
p5034
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5035
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5036
Nsg69
Vn
sS'block_loop.thisTrialN'
p5037
I0
sg39
F0.66718735032191034
sg34
g752
(S'\x07\xdf\n\x10\x13\x16-\x05f\xd0'
tRp5038
sa(dp5039
S'trial_loop.thisTrialN'
p5040
I99
sg3632
g3851
sS'block_loop.thisIndex'
p5041
g3626
sg38
S'right'
p5042
sg58
g62
sS'trial_loop.thisN'
p5043
I99
sg33
g3861
sg63
g64
sS'trial_loop.thisIndex'
p5044
g59
(g98
S'c\x00\x00\x00'
tRp5045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5046
I0
sg3641
g3859
sS'block_loop.thisRepN'
p5047
I1
sg3644
g3861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5048
I1
sg3646
g3855
sg55
g11
sS'block_loop.thisTrial'
p5049
Nsg69
Vn
sS'block_loop.thisTrialN'
p5050
I0
sg39
F0.60011694712738972
sg34
g752
(S'\x07\xdf\n\x10\x13\x163\x00\xbb\x80'
tRp5051
sa(dp5052
S'trial_loop.thisTrialN'
p5053
I100
sg3632
S'31-hobnobs.png'
p5054
sS'block_loop.thisIndex'
p5055
g3626
sg38
S'left'
p5056
sg58
g62
sS'trial_loop.thisN'
p5057
I100
sg33
g3934
sg63
g64
sS'trial_loop.thisIndex'
p5058
g59
(g98
S'd\x00\x00\x00'
tRp5059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5060
I0
sg3641
S'25-kitkat.png'
p5061
sS'block_loop.thisRepN'
p5062
I1
sg3644
g3934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5063
I1
sg3646
g3941
sg55
g11
sS'block_loop.thisTrial'
p5064
Nsg69
Vn
sS'block_loop.thisTrialN'
p5065
I0
sg39
F0.85010839418828255
sg34
g752
(S'\x07\xdf\n\x10\x13\x168\n\\X'
tRp5066
sa(dp5067
S'trial_loop.thisTrialN'
p5068
I101
sg3632
g4328
sS'block_loop.thisIndex'
p5069
g3626
sg38
S'right'
p5070
sg58
g62
sS'trial_loop.thisN'
p5071
I101
sg33
g4332
sg63
g64
sS'trial_loop.thisIndex'
p5072
g59
(g98
S'e\x00\x00\x00'
tRp5073
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5074
I0
sg3641
g4336
sS'block_loop.thisRepN'
p5075
I1
sg3644
g4332
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5076
I1
sg3646
g4339
sg55
g11
sS'block_loop.thisTrial'
p5077
Nsg69
Vn
sS'block_loop.thisTrialN'
p5078
I0
sg39
F0.88348109002981801
sg34
g752
(S'\x07\xdf\n\x10\x13\x17\x02\x08\x8fh'
tRp5079
sa(dp5080
S'trial_loop.thisTrialN'
p5081
I102
sg3632
g3915
sS'block_loop.thisIndex'
p5082
g3626
sg38
S'left'
p5083
sg58
g62
sS'trial_loop.thisN'
p5084
I102
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p5085
g59
(g98
S'f\x00\x00\x00'
tRp5086
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5087
I0
sg3641
g3922
sS'block_loop.thisRepN'
p5088
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5089
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5090
Nsg69
Vn
sS'block_loop.thisTrialN'
p5091
I0
sg39
F0.85010554321343079
sg34
g752
(S'\x07\xdf\n\x10\x13\x17\x08\x07v('
tRp5092
sa(dp5093
S'trial_loop.thisTrialN'
p5094
I103
sg3632
g4016
sS'block_loop.thisIndex'
p5095
g3626
sg38
S'right'
p5096
sg58
g62
sS'trial_loop.thisN'
p5097
I103
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5098
g59
(g98
S'g\x00\x00\x00'
tRp5099
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5100
I0
sg3641
g4023
sS'block_loop.thisRepN'
p5101
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5102
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5103
Nsg69
Vn
sS'block_loop.thisTrialN'
p5104
I0
sg39
F0.65016786559863249
sg34
g752
(S'\x07\xdf\n\x10\x13\x17\x0e\x05\xa5P'
tRp5105
sa(dp5106
S'trial_loop.thisTrialN'
p5107
I104
sg3632
g4259
sS'block_loop.thisIndex'
p5108
g3626
sg38
S'left'
p5109
sg58
g62
sS'trial_loop.thisN'
p5110
I104
sg33
g4263
sg63
g64
sS'trial_loop.thisIndex'
p5111
g59
(g98
S'h\x00\x00\x00'
tRp5112
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5113
I0
sg3641
g4267
sS'block_loop.thisRepN'
p5114
I1
sg3644
g4263
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5115
I1
sg3646
g4270
sg55
g11
sS'block_loop.thisTrial'
p5116
Nsg69
Vn
sS'block_loop.thisTrialN'
p5117
I0
sg39
F0.61726244508463424
sg34
g752
(S'\x07\xdf\n\x10\x13\x17\x14\x00\xbb\x80'
tRp5118
sa(dp5119
S'trial_loop.thisTrialN'
p5120
I105
sg3632
g4328
sS'block_loop.thisIndex'
p5121
g3626
sg38
S'right'
p5122
sg58
g62
sS'trial_loop.thisN'
p5123
I105
sg33
g4332
sg63
g64
sS'trial_loop.thisIndex'
p5124
g59
(g98
S'i\x00\x00\x00'
tRp5125
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5126
I0
sg3641
g4336
sS'block_loop.thisRepN'
p5127
I1
sg3644
g4332
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5128
I1
sg3646
g4339
sg55
g11
sS'block_loop.thisTrial'
p5129
Nsg69
Vn
sS'block_loop.thisTrialN'
p5130
I0
sg39
F0.95014579902635887
sg34
g752
(S'\x07\xdf\n\x10\x13\x17\x19\n\x9a\xd8'
tRp5131
sa(dp5132
S'trial_loop.thisTrialN'
p5133
I106
sg3632
g3851
sS'block_loop.thisIndex'
p5134
g3626
sg38
S'right'
p5135
sg58
g62
sS'trial_loop.thisN'
p5136
I106
sg33
g3861
sg63
g64
sS'trial_loop.thisIndex'
p5137
g59
(g98
S'j\x00\x00\x00'
tRp5138
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5139
I0
sg3641
g3859
sS'block_loop.thisRepN'
p5140
I1
sg3644
g3861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5141
I1
sg3646
g3855
sg55
g11
sS'block_loop.thisTrial'
p5142
Nsg69
Vn
sS'block_loop.thisTrialN'
p5143
I0
sg39
F0.65015475109976251
sg34
g752
(S'\x07\xdf\n\x10\x13\x17\x1f\nw\xb0'
tRp5144
sa(dp5145
S'trial_loop.thisTrialN'
p5146
I107
sg3632
g3930
sS'block_loop.thisIndex'
p5147
g3626
sg38
S'right'
p5148
sg58
g62
sS'trial_loop.thisN'
p5149
I107
sg33
g3934
sg63
g64
sS'trial_loop.thisIndex'
p5150
g59
(g98
S'k\x00\x00\x00'
tRp5151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5152
I0
sg3641
g3938
sS'block_loop.thisRepN'
p5153
I1
sg3644
g3934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5154
I1
sg3646
g3941
sg55
g11
sS'block_loop.thisTrial'
p5155
Nsg69
Vn
sS'block_loop.thisTrialN'
p5156
I0
sg39
F0.88352556529571302
sg34
g752
(S'\x07\xdf\n\x10\x13\x17%\x05\x8d\xe0'
tRp5157
sa(dp5158
S'trial_loop.thisTrialN'
p5159
I108
sg3632
g4643
sS'block_loop.thisIndex'
p5160
g3626
sg38
S'left'
p5161
sg58
g62
sS'trial_loop.thisN'
p5162
I108
sg33
g4332
sg63
g64
sS'trial_loop.thisIndex'
p5163
g59
(g98
S'l\x00\x00\x00'
tRp5164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5165
I0
sg3641
g4650
sS'block_loop.thisRepN'
p5166
I1
sg3644
g4332
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5167
I1
sg3646
g4339
sg55
g11
sS'block_loop.thisTrial'
p5168
Nsg69
Vn
sS'block_loop.thisTrialN'
p5169
I0
sg39
F0.85009556479053572
sg34
g752
(S'\x07\xdf\n\x10\x13\x17+\x04:\x08'
tRp5170
sa(dp5171
S'trial_loop.thisTrialN'
p5172
I109
sg3632
g3806
sS'block_loop.thisIndex'
p5173
g3626
sg38
S'right'
p5174
sg58
g62
sS'trial_loop.thisN'
p5175
I109
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5176
g59
(g98
S'm\x00\x00\x00'
tRp5177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5178
I0
sg3641
g3813
sS'block_loop.thisRepN'
p5179
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5180
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5181
Nsg69
Vn
sS'block_loop.thisTrialN'
p5182
I0
sg39
F1.6172268078589696
sg34
g752
(S'\x07\xdf\n\x10\x13\x171\x02\xa3\xc8'
tRp5183
sa(dp5184
S'trial_loop.thisTrialN'
p5185
I110
sg3632
g3960
sS'block_loop.thisIndex'
p5186
g3626
sg38
S'right'
p5187
sg58
g62
sS'trial_loop.thisN'
p5188
I110
sg33
g3749
sg63
g64
sS'trial_loop.thisIndex'
p5189
g59
(g98
S'n\x00\x00\x00'
tRp5190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5191
I0
sg3641
g3967
sS'block_loop.thisRepN'
p5192
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5193
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5194
Nsg69
Vn
sS'block_loop.thisTrialN'
p5195
I0
sg39
F0.81685772022319725
sg34
g752
(S'\x07\xdf\n\x10\x13\x177\x0c\x7f8'
tRp5196
sa(dp5197
S'trial_loop.thisTrialN'
p5198
I111
sg3632
g4229
sS'block_loop.thisIndex'
p5199
g3626
sg38
S'right'
p5200
sg58
g62
sS'trial_loop.thisN'
p5201
I111
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p5202
g59
(g98
S'o\x00\x00\x00'
tRp5203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5204
I0
sg3641
g4236
sS'block_loop.thisRepN'
p5205
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5206
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p5207
Nsg69
Vn
sS'block_loop.thisTrialN'
p5208
I0
sg39
F1.0666732619283721
sg34
g752
(S'\x07\xdf\n\x10\x13\x18\x01\n5H'
tRp5209
sa(dp5210
S'trial_loop.thisTrialN'
p5211
I112
sg3632
g3633
sS'block_loop.thisIndex'
p5212
g3626
sg38
S'right'
p5213
sg58
g62
sS'trial_loop.thisN'
p5214
I112
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5215
g59
(g98
S'p\x00\x00\x00'
tRp5216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5217
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5218
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5219
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5220
Nsg69
Vn
sS'block_loop.thisTrialN'
p5221
I0
sg39
F0.75020584063167917
sg34
g752
(S'\x07\xdf\n\x10\x13\x18\x07\x0b\xbb\xe8'
tRp5222
sa(dp5223
S'trial_loop.thisTrialN'
p5224
I113
sg3632
g3670
sS'block_loop.thisIndex'
p5225
g3626
sg38
S'left'
p5226
sg58
g62
sS'trial_loop.thisN'
p5227
I113
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p5228
g59
(g98
S'q\x00\x00\x00'
tRp5229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5230
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5231
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5232
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5233
Nsg69
Vn
sS'block_loop.thisTrialN'
p5234
I0
sg39
F0.98351450349582592
sg34
g752
(S'\x07\xdf\n\x10\x13\x18\r\x08{\xe0'
tRp5235
sa(dp5236
S'trial_loop.thisTrialN'
p5237
I114
sg3632
g3738
sS'block_loop.thisIndex'
p5238
g3626
sg38
S'left'
p5239
sg58
g62
sS'trial_loop.thisN'
p5240
I114
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5241
g59
(g98
S'r\x00\x00\x00'
tRp5242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5243
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5244
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5245
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5246
Nsg69
Vn
sS'block_loop.thisTrialN'
p5247
I0
sg39
F0.86687556734250393
sg34
g752
(S'\x07\xdf\n\x10\x13\x18\x13\x08\x93P'
tRp5248
sa(dp5249
S'trial_loop.thisTrialN'
p5250
I115
sg3632
g3789
sS'block_loop.thisIndex'
p5251
g3626
sg38
S'left'
p5252
sg58
g62
sS'trial_loop.thisN'
p5253
I115
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p5254
g59
(g98
S's\x00\x00\x00'
tRp5255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5256
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5257
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5258
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p5259
Nsg69
Vn
sS'block_loop.thisTrialN'
p5260
I0
sg39
F2.0333986397454282
sg34
g752
(S'\x07\xdf\n\x10\x13\x18\x19\x07\x00\xf8'
tRp5261
sa(dp5262
S'trial_loop.thisTrialN'
p5263
I116
sg3632
g4475
sS'block_loop.thisIndex'
p5264
g3626
sg38
S'right'
p5265
sg58
g62
sS'trial_loop.thisN'
p5266
I116
sg33
g4485
sg63
g64
sS'trial_loop.thisIndex'
p5267
g59
(g98
S't\x00\x00\x00'
tRp5268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5269
I0
sg3641
g4483
sS'block_loop.thisRepN'
p5270
I1
sg3644
g4485
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5271
I1
sg3646
g4479
sg55
g11
sS'block_loop.thisTrial'
p5272
Nsg69
Vn
sS'block_loop.thisTrialN'
p5273
I0
sg39
F0.83337628807203146
sg34
g752
(S'\x07\xdf\n\x10\x13\x18 \x08\x06\xb0'
tRp5274
sa(dp5275
S'trial_loop.thisTrialN'
p5276
I117
sg3632
g3960
sS'block_loop.thisIndex'
p5277
g3626
sg38
S'right'
p5278
sg58
g62
sS'trial_loop.thisN'
p5279
I117
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5280
g59
(g98
S'u\x00\x00\x00'
tRp5281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5282
I0
sg3641
g3967
sS'block_loop.thisRepN'
p5283
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5284
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5285
Nsg69
Vn
sS'block_loop.thisTrialN'
p5286
I0
sg39
F1.366758962336462
sg34
g752
(S'\x07\xdf\n\x10\x13\x18&\x05\xfb@'
tRp5287
sa(dp5288
S'trial_loop.thisTrialN'
p5289
I118
sg3632
g3834
sS'block_loop.thisIndex'
p5290
g3626
sg38
S'left'
p5291
sg58
g62
sS'trial_loop.thisN'
p5292
I118
sg33
g3838
sg63
g64
sS'trial_loop.thisIndex'
p5293
g59
(g98
S'v\x00\x00\x00'
tRp5294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5295
I0
sg3641
g3842
sS'block_loop.thisRepN'
p5296
I1
sg3644
g3838
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5297
I1
sg3646
g3845
sg55
g11
sS'block_loop.thisTrial'
p5298
Nsg69
Vn
sS'block_loop.thisTrialN'
p5299
I0
sg39
F0.85015800120891072
sg34
g752
(S'\x07\xdf\n\x10\x13\x18,\x0c@\xb8'
tRp5300
sa(dp5301
S'trial_loop.thisTrialN'
p5302
I119
sg3632
g4788
sS'block_loop.thisIndex'
p5303
g3626
sg38
S'left'
p5304
sg58
g62
sS'trial_loop.thisN'
p5305
I119
sg33
g3879
sg63
g64
sS'trial_loop.thisIndex'
p5306
g59
(g98
S'w\x00\x00\x00'
tRp5307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5308
I0
sg3641
g4795
sS'block_loop.thisRepN'
p5309
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5310
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p5311
Nsg69
Vn
sS'block_loop.thisTrialN'
p5312
I0
sg39
F0.96660335594788194
sg34
g752
(S'\x07\xdf\n\x10\x13\x182\no\xe0'
tRp5313
sa(dp5314
S'trial_loop.thisTrialN'
p5315
I120
sg3632
g4061
sS'block_loop.thisIndex'
p5316
g3626
sg38
S'left'
p5317
sg58
g62
sS'trial_loop.thisN'
p5318
I120
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5319
g59
(g98
S'x\x00\x00\x00'
tRp5320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5321
I0
sg3641
g4068
sS'block_loop.thisRepN'
p5322
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5323
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5324
Nsg69
Vn
sS'block_loop.thisTrialN'
p5325
I0
sg39
F1.0168740848312154
sg34
g752
(S'\x07\xdf\n\x10\x13\x188\nL\xb8'
tRp5326
sa(dp5327
S'trial_loop.thisTrialN'
p5328
I121
sg3632
g3885
sS'block_loop.thisIndex'
p5329
g3626
sg38
S'left'
p5330
sg58
g62
sS'trial_loop.thisN'
p5331
I121
sg33
g3896
sg63
g64
sS'trial_loop.thisIndex'
p5332
g59
(g98
S'y\x00\x00\x00'
tRp5333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5334
I0
sg3641
g3893
sS'block_loop.thisRepN'
p5335
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5336
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vn
sS'block_loop.thisTrialN'
p5338
I0
sg39
F0.98347915136400843
sg34
g752
(S'\x07\xdf\n\x10\x13\x19\x02\x0b\x1b\xc0'
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g4475
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'right'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g4485
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g4483
sS'block_loop.thisRepN'
p5348
I1
sg3644
g4485
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g4479
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vn
sS'block_loop.thisTrialN'
p5351
I0
sg39
F0.93352203008544166
sg34
g752
(S'\x07\xdf\n\x10\x13\x19\x08\x0bm\xc8'
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g3755
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'left'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5361
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vn
sS'block_loop.thisTrialN'
p5364
I0
sg39
F0.7667985339066945
sg34
g752
(S'\x07\xdf\n\x10\x13\x19\x0e\n\xcd\xa0'
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g4171
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'right'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g4178
sS'block_loop.thisRepN'
p5374
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vn
sS'block_loop.thisTrialN'
p5377
I0
sg39
F0.65013393895787885
sg34
g752
(S'\x07\xdf\n\x10\x13\x19\x14\x07\xd0\x00'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g3755
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'left'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5387
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vn
sS'block_loop.thisTrialN'
p5390
I0
sg39
F0.73346261568804039
sg34
g752
(S'\x07\xdf\n\x10\x13\x19\x1a\x03$\xb0'
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g4788
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'left'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g4795
sS'block_loop.thisRepN'
p5400
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vn
sS'block_loop.thisTrialN'
p5403
I0
sg39
F0.79994258129590889
sg34
g752
(S'\x07\xdf\n\x10\x13\x19\x1f\x0e\xad\xd0'
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g3975
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'right'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g3982
sS'block_loop.thisRepN'
p5413
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vn
sS'block_loop.thisTrialN'
p5416
I0
sg39
F1.3001755062214215
sg34
g752
(S'\x07\xdf\n\x10\x13\x19%\x0c%`'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g4475
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'right'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g4485
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g4483
sS'block_loop.thisRepN'
p5426
I1
sg3644
g4485
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g4479
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vn
sS'block_loop.thisTrialN'
p5429
I0
sg39
F0.78348274360178038
sg34
g752
(S'\x07\xdf\n\x10\x13\x19,\x01\xfb\xd0'
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g4842
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'right'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g4263
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g4849
sS'block_loop.thisRepN'
p5439
I1
sg3644
g4263
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g4270
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vn
sS'block_loop.thisTrialN'
p5442
I0
sg39
F0.63352727588062407
sg34
g752
(S'\x07\xdf\n\x10\x13\x191\x0e{\x08'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g3930
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'right'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g3934
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g3938
sS'block_loop.thisRepN'
p5452
I1
sg3644
g3934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g3941
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vn
sS'block_loop.thisTrialN'
p5455
I0
sg39
F0.81685258846118813
sg34
g752
(S'\x07\xdf\n\x10\x13\x197\tV\xa0'
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g4016
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'right'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g4023
sS'block_loop.thisRepN'
p5465
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vn
sS'block_loop.thisTrialN'
p5468
I0
sg39
F0.73354500895948149
sg34
g752
(S'\x07\xdf\n\x10\x13\x1a\x01\x07\x0c\xb0'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g4229
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'right'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g4236
sS'block_loop.thisRepN'
p5478
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vn
sS'block_loop.thisTrialN'
p5481
I0
sg39
F0.68345702777151018
sg34
g752
(S'\x07\xdf\n\x10\x13\x1a\x07\x03\x92\x10'
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g3772
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'left'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g3783
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g3780
sS'block_loop.thisRepN'
p5491
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vn
sS'block_loop.thisTrialN'
p5494
I0
sg39
F0.88342435556114651
sg34
g752
(S'\x07\xdf\n\x10\x13\x1a\x0c\x0ec\x98'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g4061
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'left'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g4068
sS'block_loop.thisRepN'
p5504
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vn
sS'block_loop.thisTrialN'
p5507
I0
sg39
F0.85017368159606121
sg34
g752
(S'\x07\xdf\n\x10\x13\x1a\x12\rJX'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g5000
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'left'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g4550
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g5007
sS'block_loop.thisRepN'
p5517
I1
sg3644
g4550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g4557
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vn
sS'block_loop.thisTrialN'
p5520
I0
sg39
F0.85008672675758135
sg34
g752
(S'\x07\xdf\n\x10\x13\x1a\x18\x0b}h'
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g4104
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'right'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g4111
sS'block_loop.thisRepN'
p5530
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vn
sS'block_loop.thisTrialN'
p5533
I0
sg39
F0.60009442440059502
sg34
g752
(S'\x07\xdf\n\x10\x13\x1a\x1e\t\xac\x90'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g4214
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'left'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g3855
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g4221
sS'block_loop.thisRepN'
p5543
I1
sg3644
g3861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g3855
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F0.78345423381688306
sg34
g752
(S'\x07\xdf\n\x10\x13\x1a$\x04\x0b('
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g4643
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'left'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g4332
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g4650
sS'block_loop.thisRepN'
p5556
I1
sg3644
g4332
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g4339
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F1.0334639271459309
sg34
g752
(S'\x07\xdf\n\x10\x13\x1a*\x01H '
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g3653
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'left'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F0.83355048283556243
sg34
g752
(S'\x07\xdf\n\x10\x13\x1a0\x02U\xa8'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g4244
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'right'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g4055
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g4251
sS'block_loop.thisRepN'
p5582
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F1.0835322365819593
sg34
g752
(S'\x07\xdf\n\x10\x13\x1a6\x00FP'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g3930
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'right'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3941
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g3938
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g3941
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F0.70010902140347753
sg34
g752
(S'\x07\xdf\n\x10\x13\x1b\x00\x02\x07\x88'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g4842
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'right'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g4270
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g4849
sS'block_loop.thisRepN'
p5608
I1
sg3644
g4263
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g4270
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.70024444287264487
sg34
g752
(S'\x07\xdf\n\x10\x13\x1b\x05\r\x1bx'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g3704
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'right'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F0.73347202392324107
sg34
g752
(S'\x07\xdf\n\x10\x13\x1b\x0b\t#\xd8'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g3960
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'right'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g3967
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F0.65062088603735901
sg34
g752
(S'\x07\xdf\n\x10\x13\x1b\x11\x05\xa98'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g4044
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'left'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g4048
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g4052
sS'block_loop.thisRepN'
p5647
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F0.88348878767283168
sg34
g752
(S'\x07\xdf\n\x10\x13\x1b\x17\x00\xc3P'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g3721
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'left'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F0.68353799555916339
sg34
g752
(S'\x07\xdf\n\x10\x13\x1b\x1c\x0e\xad\xd0'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g4788
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'left'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g4795
sS'block_loop.thisRepN'
p5673
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.716590241441736
sg34
g752
(S'\x07\xdf\n\x10\x13\x1b"\n{\x98'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g3851
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'right'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3861
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g3859
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g3855
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F0.75024575432325946
sg34
g752
(S'\x07\xdf\n\x10\x13\x1b(\x06\x87\xe0'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g4076
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g4083
sS'block_loop.thisRepN'
p5699
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.90011825857800432
sg34
g752
(S'\x07\xdf\n\x10\x13\x1b.\x03K\xc0'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g3772
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'left'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g3780
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F0.93354170183010865
sg34
g752
(S'\x07\xdf\n\x10\x13\x1b4\x022\x80'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g4044
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'left'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g4048
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g4052
sS'block_loop.thisRepN'
p5725
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.68339687214029254
sg34
g752
(S'\x07\xdf\n\x10\x13\x1b:\x01\xd0\xd8'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g5000
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'left'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g4550
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g5007
sS'block_loop.thisRepN'
p5738
I1
sg3644
g4550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g4557
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F0.86680685877217911
sg34
g752
(S'\x07\xdf\n\x10\x13\x1c\x03\x0c\xa2`'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g5054
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'left'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g3934
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g5061
sS'block_loop.thisRepN'
p5751
I1
sg3644
g3934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g3941
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F0.7001774448872311
sg34
g752
(S'\x07\xdf\n\x10\x13\x1c\t\x0b\x10\x08'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g4061
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'left'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g4068
sS'block_loop.thisRepN'
p5764
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F0.75027797037910204
sg34
g752
(S'\x07\xdf\n\x10\x13\x1c\x0f\x07\x1cP'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g4842
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'right'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g4270
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g4849
sS'block_loop.thisRepN'
p5777
I1
sg3644
g4263
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g4270
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F0.7167724189494038
sg34
g752
(S'\x07\xdf\n\x10\x13\x1c\x15\x03\xe00'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g5000
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'left'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g4557
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g5007
sS'block_loop.thisRepN'
p5790
I1
sg3644
g4550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g4557
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F1.0169043052082998
sg34
g752
(S'\x07\xdf\n\x10\x13\x1c\x1a\x0f*\xd0'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g3704
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'right'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5803
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F0.73345178197632777
sg34
g752
(S'\x07\xdf\n\x10\x13\x1c!\x00\xb7\x98'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g4259
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'left'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g4263
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g4267
sS'block_loop.thisRepN'
p5816
I1
sg3644
g4263
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g4270
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.66679106435185531
sg34
g752
(S'\x07\xdf\n\x10\x13\x1c&\x0c\x7f8'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g4061
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'left'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g4068
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F0.63354865821747808
sg34
g752
(S'\x07\xdf\n\x10\x13\x1c,\x07\xd3\xe8'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g4171
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'right'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g4178
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F0.80013046076783212
sg34
g752
(S'\x07\xdf\n\x10\x13\x1c2\x02\xaf\x80'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g4044
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'left'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g4048
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g4052
sS'block_loop.thisRepN'
p5855
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F0.750203844938369
sg34
g752
(S"\x07\xdf\n\x10\x13\x1c8\x00'\x10"
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g3885
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'left'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g3893
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F0.68359244924067752
sg34
g752
(S'\x07\xdf\n\x10\x13\x1d\x01\x0c-0'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g3975
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'right'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g3982
sS'block_loop.thisRepN'
p5881
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F1.1501613083528355
sg34
g752
(S'\x07\xdf\n\x10\x13\x1d\x07\x07\xc0`'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g4229
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'right'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g4236
sS'block_loop.thisRepN'
p5894
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F0.85000091231631814
sg34
g752
(S'\x07\xdf\n\x10\x13\x1d\r\n\xb2H'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g4244
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'right'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g4055
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g4251
sS'block_loop.thisRepN'
p5907
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F1.0668648476639646
sg34
g752
(S'\x07\xdf\n\x10\x13\x1d\x13\x08\xe1p'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g5054
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'left'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g3934
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g5061
sS'block_loop.thisRepN'
p5920
I1
sg3644
g3934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g3941
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F0.81685600963101024
sg34
g752
(S'\x07\xdf\n\x10\x13\x1d\x19\nh\x10'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g3834
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'left'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g3838
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g3842
sS'block_loop.thisRepN'
p5933
I1
sg3644
g3838
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g3845
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F1.1168872563503101
sg34
g752
(S'\x07\xdf\n\x10\x13\x1d\x1f\x08\x1e '
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g3772
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g3780
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F0.95012185080850031
sg34
g752
(S'\x07\xdf\n\x10\x13\x1d%\nXp'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g4016
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'right'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g4023
sS'block_loop.thisRepN'
p5959
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.91677709455689183
sg34
g752
(S'\x07\xdf\n\x10\x13\x1d+\n1`'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g4475
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'right'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g4485
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g4483
sS'block_loop.thisRepN'
p5972
I1
sg3644
g4485
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g4479
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F0.70012042531743646
sg34
g752
(S'\x07\xdf\n\x10\x13\x1d1\tV\xa0'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g3755
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'left'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5985
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F0.80009852980583673
sg34
g752
(S'\x07\xdf\n\x10\x13\x1d7\x05b\xe8'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g3868
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'right'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g3876
sS'block_loop.thisRepN'
p5998
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F0.76654308626893908
sg34
g752
(S'\x07\xdf\n\x10\x13\x1e\x01\x02\x9f\xe0'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g3687
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'right'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g3695
sS'block_loop.thisRepN'
p6011
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F2.1005189350617002
sg34
g752
(S'\x07\xdf\n\x10\x13\x1e\x06\x0e\xe0\x98'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g3851
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'right'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g3861
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g3859
sS'block_loop.thisRepN'
p6024
I1
sg3644
g3861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g3855
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F0.60010668360337149
sg34
g752
(S'\x07\xdf\n\x10\x13\x1e\x0e\x01\xd4\xc0'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g4259
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'left'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g4263
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g4267
sS'block_loop.thisRepN'
p6037
I1
sg3644
g4263
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g4270
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F0.65010029741097242
sg34
g752
(S'\x07\xdf\n\x10\x13\x1e\x13\x0bu\x98'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g4186
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'right'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g3838
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g4193
sS'block_loop.thisRepN'
p6050
I1
sg3644
g3838
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g3845
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F0.68353457438206533
sg34
g752
(S'\x07\xdf\n\x10\x13\x1e\x19\x06\x8f\xb0'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g3806
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'left'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g3813
sS'block_loop.thisRepN'
p6063
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F1.18347156776872
sg34
g752
(S'\x07\xdf\n\x10\x13\x1e\x1f\x02\x1e\xf8'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g4643
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'left'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g4332
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g4650
sS'block_loop.thisRepN'
p6076
I1
sg3644
g4332
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g4339
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F0.90017385264945915
sg34
g752
(S'\x07\xdf\n\x10\x13\x1e%\x05\x8d\xe0'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g3834
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'right'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3838
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g3842
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3838
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g3845
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F0.68341711407992989
sg34
g752
(S'\x07\xdf\n\x10\x13\x1e+\x04t\xa0'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g5054
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'left'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g3934
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g5061
sS'block_loop.thisRepN'
p6102
I1
sg3644
g3934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g3941
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.85011580673744902
sg34
g752
(S'\x07\xdf\n\x10\x13\x1e1\x00Bh'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g4259
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'left'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g4263
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g4267
sS'block_loop.thisRepN'
p6115
I1
sg3644
g4263
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g4270
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F0.65012167975510238
sg34
g752
(S'\x07\xdf\n\x10\x13\x1e6\r\xb3\xd0'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g3789
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'left'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g3797
sS'block_loop.thisRepN'
p6128
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F1.0667642081316444
sg34
g752
(S'\x07\xdf\n\x10\x13\x1f\x00\x08\xcd\xe8'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g4842
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'right'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g4263
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g4849
sS'block_loop.thisRepN'
p6141
I1
sg3644
g4263
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g4270
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.90011797347688116
sg34
g752
(S'\x07\xdf\n\x10\x13\x1f\x06\nP\xa0'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g3975
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'right'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g3982
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F1.0168056613620138
sg34
g752
(S'\x07\xdf\n\x10\x13\x1f\x0c\tu\xe0'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g4546
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'right'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g4550
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g4554
sS'block_loop.thisRepN'
p6167
I1
sg3644
g4550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g4557
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F0.98354728974663885
sg34
g752
(S'\x07\xdf\n\x10\x13\x1f\x12\n\x06h'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g4214
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'left'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g3855
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g4221
sS'block_loop.thisRepN'
p6180
I1
sg3644
g3861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g3855
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F0.70019483585201669
sg34
g752
(S'\x07\xdf\n\x10\x13\x1f\x18\n\\X'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g4229
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'right'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g4236
sS'block_loop.thisRepN'
p6193
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F0.68342994348495267
sg34
g752
(S'\x07\xdf\n\x10\x13\x1f\x1e\x06d\xb8'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g4505
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'left'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g4485
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g4512
sS'block_loop.thisRepN'
p6206
I1
sg3644
g4485
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g4479
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F0.81680725790647557
sg34
g752
(S'\x07\xdf\n\x10\x13\x1f$\x01\xf7\xe8'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g4628
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'right'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g4635
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F1.9833939071177156
sg34
g752
(S'\x07\xdf\n\x10\x13\x1f)\x0e\xf08'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g5000
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'left'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g4550
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g5007
sS'block_loop.thisRepN'
p6232
I1
sg3644
g4550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g4557
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F0.81720867564581567
sg34
g752
(S'\x07\xdf\n\x10\x13\x1f0\x0f>X'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g4186
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'right'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g3838
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g4193
sS'block_loop.thisRepN'
p6245
I1
sg3644
g3838
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g3845
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F1.0167988190078177
sg34
g752
(S'\x07\xdf\n\x10\x13\x1f6\x0c\xf4h'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g4104
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'right'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3896
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g4111
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F0.73344037806236884
sg34
g752
(S'\x07\xdf\n\x10\x13 \x00\r\xc3p'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g5054
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'left'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g3934
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g5061
sS'block_loop.thisRepN'
p6271
I1
sg3644
g3934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g3941
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F1.100094424400595
sg34
g752
(S'\x07\xdf\n\x10\x13 \x06\n\nP'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g4628
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'right'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g4635
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F1.0168535577904549
sg34
g752
(S'\x07\xdf\n\x10\x13 \x0c\x0c\n\x08'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g3915
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'left'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g3922
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F1.1172441988310311
sg34
g752
(S'\x07\xdf\n\x10\x13 \x12\x0c\xd9\x10'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g3834
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'left'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g3838
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g3842
sS'block_loop.thisRepN'
p6310
I1
sg3644
g3838
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g3845
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F0.81687169001088478
sg34
g752
(S'\x07\xdf\n\x10\x13 \x18\x0f\x13`'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g3738
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'left'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g3746
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F0.8667823403593502
sg34
g752
(S'\x07\xdf\n\x10\x13 \x1e\x0c\xc9p'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4546
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'right'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g4550
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4554
sS'block_loop.thisRepN'
p6336
I1
sg3644
g4550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g4557
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F0.95010388964874437
sg34
g752
(S'\x07\xdf\n\x10\x13 $\x0bu\x98'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g3806
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'right'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g3813
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.3500901479274035
sg34
g752
(S'\x07\xdf\n\x10\x13 *\x0b\x13\xf0'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F0.36668711768288631
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'29-beans.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'right'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'46-pistachios.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'46-pistachios.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'29-beans.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F0.65025396514101885
sg34
g752
(S'\x07\xdf\n\x10\x13 6\x07\xebX'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'21-nakd_banana_crunch.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'right'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'1-treacle_cookies.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'1-treacle_cookies.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6401
I2
sg6384
S'21-nakd_banana_crunch.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F0.61676808546326356
sg34
g752
(S'\x07\xdf\n\x10\x13!\x00\x03\x05p'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'42-mrkipling_lemon_slices.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'left'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'42-mrkipling_lemon_slices.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'16-skips_prawn.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6418
I2
sg6384
S'16-skips_prawn.png'
p6419
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.9167471592882066
sg34
g752
(S'\x07\xdf\n\x10\x13!\x05\x0c\xe4\xc8'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'49-yorkie.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'left'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'49-yorkie.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'35-raisins.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6435
I2
sg6384
S'35-raisins.png'
p6436
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vn
sS'block_loop.thisTrialN'
p6438
I0
sg39
F0.76675405864807544
sg34
g752
(S'\x07\xdf\n\x10\x13!\x0b\x0c\x06 '
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'6-sour_patch_kids.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'left'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'38-maltesers.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'38-maltesers.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6452
I2
sg6384
S'6-sour_patch_kids.png'
p6453
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vn
sS'block_loop.thisTrialN'
p6455
I0
sg39
F0.66655557355261408
sg34
g752
(S'\x07\xdf\n\x10\x13!\x11\t\x08\x80'
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
S'16-skips_prawn.png'
p6459
sS'block_loop.thisIndex'
p6460
g6364
sg38
S'right'
p6461
sg58
g62
sS'trial_loop.thisN'
p6462
I5
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6463
g59
(g98
S'\x05\x00\x00\x00'
tRp6464
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6465
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6466
sS'block_loop.thisRepN'
p6467
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6468
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6469
Nsg69
Vn
sS'block_loop.thisTrialN'
p6470
I0
sg39
F0.79999304361263057
sg34
g752
(S'\x07\xdf\n\x10\x13!\x17\x04\x97\xc8'
tRp6471
sa(dp6472
S'trial_loop.thisTrialN'
p6473
I6
sg6370
S'27-hartleys_raspberries_jelly.png'
p6474
sS'block_loop.thisIndex'
p6475
g6364
sg38
S'right'
p6476
sg58
g62
sS'trial_loop.thisN'
p6477
I6
sg33
S'51-mars.png'
p6478
sg63
g64
sS'trial_loop.thisIndex'
p6479
g59
(g98
S'\x06\x00\x00\x00'
tRp6480
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6481
I0
sg6379
S'51-mars.png'
p6482
sS'block_loop.thisRepN'
p6483
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6484
I2
sg6384
S'27-hartleys_raspberries_jelly.png'
p6485
sg55
g11
sS'block_loop.thisTrial'
p6486
Nsg69
Vn
sS'block_loop.thisTrialN'
p6487
I0
sg39
F0.60021102941391291
sg34
g752
(S'\x07\xdf\n\x10\x13!\x1d\x01\xd4\xc0'
tRp6488
sa(dp6489
S'trial_loop.thisTrialN'
p6490
I7
sg6370
S'36-fig_rolls.png'
p6491
sS'block_loop.thisIndex'
p6492
g6364
sg38
S'left'
p6493
sg58
g62
sS'trial_loop.thisN'
p6494
I7
sg33
S'36-fig_rolls.png'
p6495
sg63
g64
sS'trial_loop.thisIndex'
p6496
g59
(g98
S'\x07\x00\x00\x00'
tRp6497
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6498
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6499
sS'block_loop.thisRepN'
p6500
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6501
I2
sg6384
S'34-hula_hoops_bbq_beef_redo.png'
p6502
sg55
g11
sS'block_loop.thisTrial'
p6503
Nsg69
Vn
sS'block_loop.thisTrialN'
p6504
I0
sg39
F0.75012715362390736
sg34
g752
(S'\x07\xdf\n\x10\x13!"\x0b\xb4\x18'
tRp6505
sa(dp6506
S'trial_loop.thisTrialN'
p6507
I8
sg6370
S'10-bounty_redo.png'
p6508
sS'block_loop.thisIndex'
p6509
g6364
sg38
S'left'
p6510
sg58
g62
sS'trial_loop.thisN'
p6511
I8
sg33
S'10-bounty_redo.png'
p6512
sg63
g64
sS'trial_loop.thisIndex'
p6513
g59
(g98
S'\x08\x00\x00\x00'
tRp6514
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6515
I0
sg6379
S'4-corn.png'
p6516
sS'block_loop.thisRepN'
p6517
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6518
I2
sg6384
S'4-corn.png'
p6519
sg55
g11
sS'block_loop.thisTrial'
p6520
Nsg69
Vn
sS'block_loop.thisTrialN'
p6521
I0
sg39
F1.0001687779149506
sg34
g752
(S'\x07\xdf\n\x10\x13!(\x089x'
tRp6522
sa(dp6523
S'trial_loop.thisTrialN'
p6524
I9
sg6370
S'51-mars.png'
p6525
sS'block_loop.thisIndex'
p6526
g6364
sg38
S'left'
p6527
sg58
g62
sS'trial_loop.thisN'
p6528
I9
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p6529
g59
(g98
S'\t\x00\x00\x00'
tRp6530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6531
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6532
sS'block_loop.thisRepN'
p6533
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6534
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p6535
Nsg69
Vn
sS'block_loop.thisTrialN'
p6536
I0
sg39
F0.68346985717653297
sg34
g752
(S'\x07\xdf\n\x10\x13!.\x08\xca\x00'
tRp6537
sa(dp6538
S'trial_loop.thisTrialN'
p6539
I10
sg6370
S'8-liquorice_catherine_wheels.png'
p6540
sS'block_loop.thisIndex'
p6541
g6364
sg38
S'right'
p6542
sg58
g62
sS'trial_loop.thisN'
p6543
I10
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6544
sg63
g64
sS'trial_loop.thisIndex'
p6545
g59
(g98
S'\n\x00\x00\x00'
tRp6546
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6547
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p6548
sS'block_loop.thisRepN'
p6549
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6550
I2
sg6384
S'8-liquorice_catherine_wheels.png'
p6551
sg55
g11
sS'block_loop.thisTrial'
p6552
Nsg69
Vn
sS'block_loop.thisTrialN'
p6553
I0
sg39
F0.81677504185063299
sg34
g752
(S'\x07\xdf\n\x10\x13!4\x04]0'
tRp6554
sa(dp6555
S'trial_loop.thisTrialN'
p6556
I11
sg6370
g6408
sS'block_loop.thisIndex'
p6557
g6364
sg38
S'left'
p6558
sg58
g62
sS'trial_loop.thisN'
p6559
I11
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6560
g59
(g98
S'\x0b\x00\x00\x00'
tRp6561
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6562
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6563
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6564
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6565
Nsg69
Vn
sS'block_loop.thisTrialN'
p6566
I0
sg39
F0.80008113884105114
sg34
g752
(S'\x07\xdf\n\x10\x13!:\x02\x13@'
tRp6567
sa(dp6568
S'trial_loop.thisTrialN'
p6569
I12
sg6370
S'3-ellas_strawberries_apples.png'
p6570
sS'block_loop.thisIndex'
p6571
g6364
sg38
S'left'
p6572
sg58
g62
sS'trial_loop.thisN'
p6573
I12
sg33
S'3-ellas_strawberries_apples.png'
p6574
sg63
g64
sS'trial_loop.thisIndex'
p6575
g59
(g98
S'\x0c\x00\x00\x00'
tRp6576
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6577
I0
sg6379
S'13-mccoys_steak_crisps.png'
p6578
sS'block_loop.thisRepN'
p6579
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6580
I2
sg6384
S'13-mccoys_steak_crisps.png'
p6581
sg55
g11
sS'block_loop.thisTrial'
p6582
Nsg69
Vn
sS'block_loop.thisTrialN'
p6583
I0
sg39
F0.85019506393291522
sg34
g752
(S'\x07\xdf\n\x10\x13"\x03\x0e\xd0\xf8'
tRp6584
sa(dp6585
S'trial_loop.thisTrialN'
p6586
I13
sg6370
g6474
sS'block_loop.thisIndex'
p6587
g6364
sg38
S'right'
p6588
sg58
g62
sS'trial_loop.thisN'
p6589
I13
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p6590
g59
(g98
S'\r\x00\x00\x00'
tRp6591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6592
I0
sg6379
g6482
sS'block_loop.thisRepN'
p6593
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6594
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p6595
Nsg69
Vn
sS'block_loop.thisTrialN'
p6596
I0
sg39
F0.81677675243554404
sg34
g752
(S'\x07\xdf\n\x10\x13"\t\r:\xb8'
tRp6597
sa(dp6598
S'trial_loop.thisTrialN'
p6599
I14
sg6370
S'50-polo.png'
p6600
sS'block_loop.thisIndex'
p6601
g6364
sg38
S'right'
p6602
sg58
g62
sS'trial_loop.thisN'
p6603
I14
sg33
S'48-twix.png'
p6604
sg63
g64
sS'trial_loop.thisIndex'
p6605
g59
(g98
S'\x0e\x00\x00\x00'
tRp6606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6607
I0
sg6379
S'48-twix.png'
p6608
sS'block_loop.thisRepN'
p6609
I2
sg6382
g6604
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6610
I2
sg6384
S'50-polo.png'
p6611
sg55
g11
sS'block_loop.thisTrial'
p6612
Nsg69
Vn
sS'block_loop.thisTrialN'
p6613
I0
sg39
F0.80016381720633944
sg34
g752
(S'\x07\xdf\n\x10\x13"\x0f\n\xf0\xc8'
tRp6614
sa(dp6615
S'trial_loop.thisTrialN'
p6616
I15
sg6370
S'19-caramello_redo.png'
p6617
sS'block_loop.thisIndex'
p6618
g6364
sg38
S'right'
p6619
sg58
g62
sS'trial_loop.thisN'
p6620
I15
sg33
S'19-caramello_redo.png'
p6621
sg63
g64
sS'trial_loop.thisIndex'
p6622
g59
(g98
S'\x0f\x00\x00\x00'
tRp6623
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6624
I0
sg6379
S'30-spaghetti_hoops.png'
p6625
sS'block_loop.thisRepN'
p6626
I2
sg6382
g6621
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6627
I2
sg6384
S'30-spaghetti_hoops.png'
p6628
sg55
g11
sS'block_loop.thisTrial'
p6629
Nsg69
Vn
sS'block_loop.thisTrialN'
p6630
I0
sg39
F1.2834368428448215
sg34
g752
(S'\x07\xdf\n\x10\x13"\x15\x08-\xc0'
tRp6631
sa(dp6632
S'trial_loop.thisTrialN'
p6633
I16
sg6370
S'48-twix.png'
p6634
sS'block_loop.thisIndex'
p6635
g6364
sg38
S'left'
p6636
sg58
g62
sS'trial_loop.thisN'
p6637
I16
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p6638
g59
(g98
S'\x10\x00\x00\x00'
tRp6639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6640
I0
sg6379
S'50-polo.png'
p6641
sS'block_loop.thisRepN'
p6642
I2
sg6382
g6604
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6643
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p6644
Nsg69
Vn
sS'block_loop.thisTrialN'
p6645
I0
sg39
F0.6667654055490857
sg34
g752
(S'\x07\xdf\n\x10\x13"\x1b\r\x07\xf0'
tRp6646
sa(dp6647
S'trial_loop.thisTrialN'
p6648
I17
sg6370
S'18-mms.png'
p6649
sS'block_loop.thisIndex'
p6650
g6364
sg38
S'left'
p6651
sg58
g62
sS'trial_loop.thisN'
p6652
I17
sg33
S'18-mms.png'
p6653
sg63
g64
sS'trial_loop.thisIndex'
p6654
g59
(g98
S'\x11\x00\x00\x00'
tRp6655
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6656
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p6657
sS'block_loop.thisRepN'
p6658
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6659
I2
sg6384
S'43-mrporky_pork_crackles_redo.png'
p6660
sg55
g11
sS'block_loop.thisTrial'
p6661
Nsg69
Vn
sS'block_loop.thisTrialN'
p6662
I0
sg39
F0.66679705140268197
sg34
g752
(S'\x07\xdf\n\x10\x13"!\x08\x9b '
tRp6663
sa(dp6664
S'trial_loop.thisTrialN'
p6665
I18
sg6370
g6540
sS'block_loop.thisIndex'
p6666
g6364
sg38
S'right'
p6667
sg58
g62
sS'trial_loop.thisN'
p6668
I18
sg33
g6551
sg63
g64
sS'trial_loop.thisIndex'
p6669
g59
(g98
S'\x12\x00\x00\x00'
tRp6670
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6671
I0
sg6379
g6548
sS'block_loop.thisRepN'
p6672
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6673
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p6674
Nsg69
Vn
sS'block_loop.thisTrialN'
p6675
I0
sg39
F0.73361827910412103
sg34
g752
(S'\x07\xdf\n\x10\x13"\'\x03\xef\xd0'
tRp6676
sa(dp6677
S'trial_loop.thisTrialN'
p6678
I19
sg6370
g6508
sS'block_loop.thisIndex'
p6679
g6364
sg38
S'left'
p6680
sg58
g62
sS'trial_loop.thisN'
p6681
I19
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p6682
g59
(g98
S'\x13\x00\x00\x00'
tRp6683
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6684
I0
sg6379
g6516
sS'block_loop.thisRepN'
p6685
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6686
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p6687
Nsg69
Vn
sS'block_loop.thisTrialN'
p6688
I0
sg39
F0.85011096007656306
sg34
g752
(S'\x07\xdf\n\x10\x13"-\x00u0'
tRp6689
sa(dp6690
S'trial_loop.thisTrialN'
p6691
I20
sg6370
S'30-spaghetti_hoops.png'
p6692
sS'block_loop.thisIndex'
p6693
g6364
sg38
S'left'
p6694
sg58
g62
sS'trial_loop.thisN'
p6695
I20
sg33
g6621
sg63
g64
sS'trial_loop.thisIndex'
p6696
g59
(g98
S'\x14\x00\x00\x00'
tRp6697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6698
I0
sg6379
S'19-caramello_redo.png'
p6699
sS'block_loop.thisRepN'
p6700
I2
sg6382
g6621
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6701
I2
sg6384
g6628
sg55
g11
sS'block_loop.thisTrial'
p6702
Nsg69
Vn
sS'block_loop.thisTrialN'
p6703
I0
sg39
F1.2501727692797431
sg34
g752
(S'\x07\xdf\n\x10\x13"2\r\xe6\x98'
tRp6704
sa(dp6705
S'trial_loop.thisTrialN'
p6706
I21
sg6370
g6491
sS'block_loop.thisIndex'
p6707
g6364
sg38
S'left'
p6708
sg58
g62
sS'trial_loop.thisN'
p6709
I21
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p6710
g59
(g98
S'\x15\x00\x00\x00'
tRp6711
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6712
I0
sg6379
g6499
sS'block_loop.thisRepN'
p6713
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6714
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p6715
Nsg69
Vn
sS'block_loop.thisTrialN'
p6716
I0
sg39
F0.75011831559822895
sg34
g752
(S'\x07\xdf\n\x10\x13"9\x03\x05p'
tRp6717
sa(dp6718
S'trial_loop.thisTrialN'
p6719
I22
sg6370
S'45-chewy_nougat_redo.png'
p6720
sS'block_loop.thisIndex'
p6721
g6364
sg38
S'left'
p6722
sg58
g62
sS'trial_loop.thisN'
p6723
I22
sg33
S'41-peanuts_redo.png'
p6724
sg63
g64
sS'trial_loop.thisIndex'
p6725
g59
(g98
S'\x16\x00\x00\x00'
tRp6726
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6727
I0
sg6379
S'41-peanuts_redo.png'
p6728
sS'block_loop.thisRepN'
p6729
I2
sg6382
S'45-chewy_nougat_redo.png'
p6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6731
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p6732
Nsg69
Vn
sS'block_loop.thisTrialN'
p6733
I0
sg39
F0.80018377405940555
sg34
g752
(S'\x07\xdf\n\x10\x13#\x02\x0e\xcd\x10'
tRp6734
sa(dp6735
S'trial_loop.thisTrialN'
p6736
I23
sg6370
g6391
sS'block_loop.thisIndex'
p6737
g6364
sg38
S'right'
p6738
sg58
g62
sS'trial_loop.thisN'
p6739
I23
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6740
g59
(g98
S'\x17\x00\x00\x00'
tRp6741
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6742
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6743
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6744
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6745
Nsg69
Vn
sS'block_loop.thisTrialN'
p6746
I0
sg39
F0.61677264703757828
sg34
g752
(S'\x07\xdf\n\x10\x13#\x08\x0cD\xa0'
tRp6747
sa(dp6748
S'trial_loop.thisTrialN'
p6749
I24
sg6370
S'22-daim.png'
p6750
sS'block_loop.thisIndex'
p6751
g6364
sg38
S'left'
p6752
sg58
g62
sS'trial_loop.thisN'
p6753
I24
sg33
S'7-olives.png'
p6754
sg63
g64
sS'trial_loop.thisIndex'
p6755
g59
(g98
S'\x18\x00\x00\x00'
tRp6756
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6757
I0
sg6379
S'7-olives.png'
p6758
sS'block_loop.thisRepN'
p6759
I2
sg6382
S'22-daim.png'
p6760
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6761
I2
sg6384
g6754
sg55
g11
sS'block_loop.thisTrial'
p6762
Nsg69
Vn
sS'block_loop.thisTrialN'
p6763
I0
sg39
F0.85062955300963949
sg34
g752
(S'\x07\xdf\n\x10\x13#\x0e\x07 8'
tRp6764
sa(dp6765
S'trial_loop.thisTrialN'
p6766
I25
sg6370
g6459
sS'block_loop.thisIndex'
p6767
g6364
sg38
S'right'
p6768
sg58
g62
sS'trial_loop.thisN'
p6769
I25
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6770
g59
(g98
S'\x19\x00\x00\x00'
tRp6771
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6772
I0
sg6379
g6466
sS'block_loop.thisRepN'
p6773
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6774
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6775
Nsg69
Vn
sS'block_loop.thisTrialN'
p6776
I0
sg39
F0.76680366567597957
sg34
g752
(S'\x07\xdf\n\x10\x13#\x14\x05O`'
tRp6777
sa(dp6778
S'trial_loop.thisTrialN'
p6779
I26
sg6370
g6525
sS'block_loop.thisIndex'
p6780
g6364
sg38
S'left'
p6781
sg58
g62
sS'trial_loop.thisN'
p6782
I26
sg33
g6485
sg63
g64
sS'trial_loop.thisIndex'
p6783
g59
(g98
S'\x1a\x00\x00\x00'
tRp6784
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6785
I0
sg6379
g6532
sS'block_loop.thisRepN'
p6786
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6787
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p6788
Nsg69
Vn
sS'block_loop.thisTrialN'
p6789
I0
sg39
F0.7667734453061712
sg34
g752
(S'\x07\xdf\n\x10\x13#\x1a\x02\x13@'
tRp6790
sa(dp6791
S'trial_loop.thisTrialN'
p6792
I27
sg6370
S'4-corn.png'
p6793
sS'block_loop.thisIndex'
p6794
g6364
sg38
S'right'
p6795
sg58
g62
sS'trial_loop.thisN'
p6796
I27
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p6797
g59
(g98
S'\x1b\x00\x00\x00'
tRp6798
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6799
I0
sg6379
S'10-bounty_redo.png'
p6800
sS'block_loop.thisRepN'
p6801
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6802
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p6803
Nsg69
Vn
sS'block_loop.thisTrialN'
p6804
I0
sg39
F1.2168736286766944
sg34
g752
(S'\x07\xdf\n\x10\x13#\x1f\x0eS\xf8'
tRp6805
sa(dp6806
S'trial_loop.thisTrialN'
p6807
I28
sg6370
S'40-sardines.png'
p6808
sS'block_loop.thisIndex'
p6809
g6364
sg38
S'right'
p6810
sg58
g62
sS'trial_loop.thisN'
p6811
I28
sg33
S'5-pineapple.png'
p6812
sg63
g64
sS'trial_loop.thisIndex'
p6813
g59
(g98
S'\x1c\x00\x00\x00'
tRp6814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6815
I0
sg6379
S'5-pineapple.png'
p6816
sS'block_loop.thisRepN'
p6817
I2
sg6382
g6812
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6818
I2
sg6384
S'40-sardines.png'
p6819
sg55
g11
sS'block_loop.thisTrial'
p6820
Nsg69
Vn
sS'block_loop.thisTrialN'
p6821
I0
sg39
F1.1668406713724835
sg34
g752
(S'\x07\xdf\n\x10\x13#&\x02\xf9\xb8'
tRp6822
sa(dp6823
S'trial_loop.thisTrialN'
p6824
I29
sg6370
S'44-crunch.png'
p6825
sS'block_loop.thisIndex'
p6826
g6364
sg38
S'left'
p6827
sg58
g62
sS'trial_loop.thisN'
p6828
I29
sg33
S'44-crunch.png'
p6829
sg63
g64
sS'trial_loop.thisIndex'
p6830
g59
(g98
S'\x1d\x00\x00\x00'
tRp6831
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6832
I0
sg6379
S'26-walkers_smoky_bacon.png'
p6833
sS'block_loop.thisRepN'
p6834
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6835
I2
sg6384
S'26-walkers_smoky_bacon.png'
p6836
sg55
g11
sS'block_loop.thisTrial'
p6837
Nsg69
Vn
sS'block_loop.thisTrialN'
p6838
I0
sg39
F0.86685275951458607
sg34
g752
(S'\x07\xdf\n\x10\x13#,\x05\xeb\xa0'
tRp6839
sa(dp6840
S'trial_loop.thisTrialN'
p6841
I30
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p6842
sS'block_loop.thisIndex'
p6843
g6364
sg38
S'left'
p6844
sg58
g62
sS'trial_loop.thisN'
p6845
I30
sg33
g6544
sg63
g64
sS'trial_loop.thisIndex'
p6846
g59
(g98
S'\x1e\x00\x00\x00'
tRp6847
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6848
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p6849
sS'block_loop.thisRepN'
p6850
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6851
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p6852
Nsg69
Vn
sS'block_loop.thisTrialN'
p6853
I0
sg39
F1.3501426059301593
sg34
g752
(S'\x07\xdf\n\x10\x13#2\x04\x93\xe0'
tRp6854
sa(dp6855
S'trial_loop.thisTrialN'
p6856
I31
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6857
sS'block_loop.thisIndex'
p6858
g6364
sg38
S'right'
p6859
sg58
g62
sS'trial_loop.thisN'
p6860
I31
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p6861
g59
(g98
S'\x1f\x00\x00\x00'
tRp6862
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6863
I0
sg6379
S'36-fig_rolls.png'
p6864
sS'block_loop.thisRepN'
p6865
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6866
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p6867
Nsg69
Vn
sS'block_loop.thisTrialN'
p6868
I0
sg39
F1.0168450048586237
sg34
g752
(S'\x07\xdf\n\x10\x13#8\nd('
tRp6869
sa(dp6870
S'trial_loop.thisTrialN'
p6871
I32
sg6370
g6692
sS'block_loop.thisIndex'
p6872
g6364
sg38
S'right'
p6873
sg58
g62
sS'trial_loop.thisN'
p6874
I32
sg33
g6621
sg63
g64
sS'trial_loop.thisIndex'
p6875
g59
(g98
S' \x00\x00\x00'
tRp6876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6877
I0
sg6379
g6699
sS'block_loop.thisRepN'
p6878
I2
sg6382
g6621
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6879
I2
sg6384
g6628
sg55
g11
sS'block_loop.thisTrial'
p6880
Nsg69
Vn
sS'block_loop.thisTrialN'
p6881
I0
sg39
F1.1168097097470309
sg34
g752
(S'\x07\xdf\n\x10\x13$\x02\x0b30'
tRp6882
sa(dp6883
S'trial_loop.thisTrialN'
p6884
I33
sg6370
g6391
sS'block_loop.thisIndex'
p6885
g6364
sg38
S'right'
p6886
sg58
g62
sS'trial_loop.thisN'
p6887
I33
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6888
g59
(g98
S'!\x00\x00\x00'
tRp6889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6890
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6891
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6892
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6893
Nsg69
Vn
sS'block_loop.thisTrialN'
p6894
I0
sg39
F0.650112841722148
sg34
g752
(S'\x07\xdf\n\x10\x13$\x08\rm\x80'
tRp6895
sa(dp6896
S'trial_loop.thisTrialN'
p6897
I34
sg6370
S'5-pineapple.png'
p6898
sS'block_loop.thisIndex'
p6899
g6364
sg38
S'right'
p6900
sg58
g62
sS'trial_loop.thisN'
p6901
I34
sg33
g6819
sg63
g64
sS'trial_loop.thisIndex'
p6902
g59
(g98
S'"\x00\x00\x00'
tRp6903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6904
I0
sg6379
S'40-sardines.png'
p6905
sS'block_loop.thisRepN'
p6906
I2
sg6382
g6812
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6907
I2
sg6384
g6819
sg55
g11
sS'block_loop.thisTrial'
p6908
Nsg69
Vn
sS'block_loop.thisTrialN'
p6909
I0
sg39
F0.95063018023211043
sg34
g752
(S'\x07\xdf\n\x10\x13$\x0e\x08\x83\xb0'
tRp6910
sa(dp6911
S'trial_loop.thisTrialN'
p6912
I35
sg6370
g6720
sS'block_loop.thisIndex'
p6913
g6364
sg38
S'left'
p6914
sg58
g62
sS'trial_loop.thisN'
p6915
I35
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p6916
g59
(g98
S'#\x00\x00\x00'
tRp6917
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6918
I0
sg6379
g6728
sS'block_loop.thisRepN'
p6919
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6920
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p6921
Nsg69
Vn
sS'block_loop.thisTrialN'
p6922
I0
sg39
F0.7335276179946959
sg34
g752
(S'\x07\xdf\n\x10\x13$\x14\x08`\x88'
tRp6923
sa(dp6924
S'trial_loop.thisTrialN'
p6925
I36
sg6370
S'26-walkers_smoky_bacon.png'
p6926
sS'block_loop.thisIndex'
p6927
g6364
sg38
S'right'
p6928
sg58
g62
sS'trial_loop.thisN'
p6929
I36
sg33
g6836
sg63
g64
sS'trial_loop.thisIndex'
p6930
g59
(g98
S'$\x00\x00\x00'
tRp6931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6932
I0
sg6379
S'44-crunch.png'
p6933
sS'block_loop.thisRepN'
p6934
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6935
I2
sg6384
g6836
sg55
g11
sS'block_loop.thisTrial'
p6936
Nsg69
Vn
sS'block_loop.thisTrialN'
p6937
I0
sg39
F1.0833817049278878
sg34
g752
(S'\x07\xdf\n\x10\x13$\x1a\x04\xa7h'
tRp6938
sa(dp6939
S'trial_loop.thisTrialN'
p6940
I37
sg6370
S'33-ambrosia_rice.png'
p6941
sS'block_loop.thisIndex'
p6942
g6364
sg38
S'right'
p6943
sg58
g62
sS'trial_loop.thisN'
p6944
I37
sg33
S'33-ambrosia_rice.png'
p6945
sg63
g64
sS'trial_loop.thisIndex'
p6946
g59
(g98
S'%\x00\x00\x00'
tRp6947
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6948
I0
sg6379
S'23-crunchie_redo.png'
p6949
sS'block_loop.thisRepN'
p6950
I2
sg6382
S'23-crunchie_redo.png'
p6951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6952
I2
sg6384
g6945
sg55
g11
sS'block_loop.thisTrial'
p6953
Nsg69
Vn
sS'block_loop.thisTrialN'
p6954
I0
sg39
F1.4335220300781657
sg34
g752
(S'\x07\xdf\n\x10\x13$ \x06h\xa0'
tRp6955
sa(dp6956
S'trial_loop.thisTrialN'
p6957
I38
sg6370
S'38-maltesers.png'
p6958
sS'block_loop.thisIndex'
p6959
g6364
sg38
S'right'
p6960
sg58
g62
sS'trial_loop.thisN'
p6961
I38
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p6962
g59
(g98
S'&\x00\x00\x00'
tRp6963
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6964
I0
sg6379
S'6-sour_patch_kids.png'
p6965
sS'block_loop.thisRepN'
p6966
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6967
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6968
Nsg69
Vn
sS'block_loop.thisTrialN'
p6969
I0
sg39
F1.0165043129600235
sg34
g752
(S'\x07\xdf\n\x10\x13$&\r\xa40'
tRp6970
sa(dp6971
S'trial_loop.thisTrialN'
p6972
I39
sg6370
g6570
sS'block_loop.thisIndex'
p6973
g6364
sg38
S'left'
p6974
sg58
g62
sS'trial_loop.thisN'
p6975
I39
sg33
g6581
sg63
g64
sS'trial_loop.thisIndex'
p6976
g59
(g98
S"'\x00\x00\x00"
tRp6977
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6978
I0
sg6379
g6578
sS'block_loop.thisRepN'
p6979
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6980
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p6981
Nsg69
Vn
sS'block_loop.thisTrialN'
p6982
I0
sg39
F0.95027352285251254
sg34
g752
(S'\x07\xdf\n\x10\x13$,\x0es8'
tRp6983
sa(dp6984
S'trial_loop.thisTrialN'
p6985
I40
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6986
sS'block_loop.thisIndex'
p6987
g6364
sg38
S'right'
p6988
sg58
g62
sS'trial_loop.thisN'
p6989
I40
sg33
g6653
sg63
g64
sS'trial_loop.thisIndex'
p6990
g59
(g98
S'(\x00\x00\x00'
tRp6991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6992
I0
sg6379
S'18-mms.png'
p6993
sS'block_loop.thisRepN'
p6994
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6995
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p6996
Nsg69
Vn
sS'block_loop.thisTrialN'
p6997
I0
sg39
F0.70011957002134295
sg34
g752
(S'\x07\xdf\n\x10\x13$2\x0e\x11\x90'
tRp6998
sa(dp6999
S'trial_loop.thisTrialN'
p7000
I41
sg6370
S'35-raisins.png'
p7001
sS'block_loop.thisIndex'
p7002
g6364
sg38
S'right'
p7003
sg58
g62
sS'trial_loop.thisN'
p7004
I41
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7005
g59
(g98
S')\x00\x00\x00'
tRp7006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7007
I0
sg6379
S'49-yorkie.png'
p7008
sS'block_loop.thisRepN'
p7009
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7010
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7011
Nsg69
Vn
sS'block_loop.thisTrialN'
p7012
I0
sg39
F0.78346164635877358
sg34
g752
(S'\x07\xdf\n\x10\x13$8\n\x1d\xd8'
tRp7013
sa(dp7014
S'trial_loop.thisTrialN'
p7015
I42
sg6370
S'7-olives.png'
p7016
sS'block_loop.thisIndex'
p7017
g6364
sg38
S'right'
p7018
sg58
g62
sS'trial_loop.thisN'
p7019
I42
sg33
g6760
sg63
g64
sS'trial_loop.thisIndex'
p7020
g59
(g98
S'*\x00\x00\x00'
tRp7021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7022
I0
sg6379
S'22-daim.png'
p7023
sS'block_loop.thisRepN'
p7024
I2
sg6382
g6760
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7025
I2
sg6384
g6754
sg55
g11
sS'block_loop.thisTrial'
p7026
Nsg69
Vn
sS'block_loop.thisTrialN'
p7027
I0
sg39
F0.88350190217170166
sg34
g752
(S'\x07\xdf\n\x10\x13%\x02\x07Z\xd0'
tRp7028
sa(dp7029
S'trial_loop.thisTrialN'
p7030
I43
sg6370
g6649
sS'block_loop.thisIndex'
p7031
g6364
sg38
S'left'
p7032
sg58
g62
sS'trial_loop.thisN'
p7033
I43
sg33
g6653
sg63
g64
sS'trial_loop.thisIndex'
p7034
g59
(g98
S'+\x00\x00\x00'
tRp7035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7036
I0
sg6379
g6657
sS'block_loop.thisRepN'
p7037
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7038
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p7039
Nsg69
Vn
sS'block_loop.thisTrialN'
p7040
I0
sg39
F0.81686798373993952
sg34
g752
(S'\x07\xdf\n\x10\x13%\x08\x06\x03\x10'
tRp7041
sa(dp7042
S'trial_loop.thisTrialN'
p7043
I44
sg6370
g6898
sS'block_loop.thisIndex'
p7044
g6364
sg38
S'left'
p7045
sg58
g62
sS'trial_loop.thisN'
p7046
I44
sg33
g6819
sg63
g64
sS'trial_loop.thisIndex'
p7047
g59
(g98
S',\x00\x00\x00'
tRp7048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7049
I0
sg6379
g6905
sS'block_loop.thisRepN'
p7050
I2
sg6382
g6812
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7051
I2
sg6384
g6819
sg55
g11
sS'block_loop.thisTrial'
p7052
Nsg69
Vn
sS'block_loop.thisTrialN'
p7053
I0
sg39
F0.96680634559015743
sg34
g752
(S'\x07\xdf\n\x10\x13%\x0e\x03\xb9 '
tRp7054
sa(dp7055
S'trial_loop.thisTrialN'
p7056
I45
sg6370
g6857
sS'block_loop.thisIndex'
p7057
g6364
sg38
S'right'
p7058
sg58
g62
sS'trial_loop.thisN'
p7059
I45
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p7060
g59
(g98
S'-\x00\x00\x00'
tRp7061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7062
I0
sg6379
g6864
sS'block_loop.thisRepN'
p7063
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7064
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p7065
Nsg69
Vn
sS'block_loop.thisTrialN'
p7066
I0
sg39
F0.88353810959961265
sg34
g752
(S'\x07\xdf\n\x10\x13%\x14\x03\x92\x10'
tRp7067
sa(dp7068
S'trial_loop.thisTrialN'
p7069
I46
sg6370
S'25-kitkat.png'
p7070
sS'block_loop.thisIndex'
p7071
g6364
sg38
S'right'
p7072
sg58
g62
sS'trial_loop.thisN'
p7073
I46
sg33
S'31-hobnobs.png'
p7074
sg63
g64
sS'trial_loop.thisIndex'
p7075
g59
(g98
S'.\x00\x00\x00'
tRp7076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7077
I0
sg6379
S'31-hobnobs.png'
p7078
sS'block_loop.thisRepN'
p7079
I2
sg6382
g7074
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7080
I2
sg6384
S'25-kitkat.png'
p7081
sg55
g11
sS'block_loop.thisTrial'
p7082
Nsg69
Vn
sS'block_loop.thisTrialN'
p7083
I0
sg39
F0.95014579902635887
sg34
g752
(S'\x07\xdf\n\x10\x13%\x1a\x02x\xd0'
tRp7084
sa(dp7085
S'trial_loop.thisTrialN'
p7086
I47
sg6370
S'23-crunchie_redo.png'
p7087
sS'block_loop.thisIndex'
p7088
g6364
sg38
S'left'
p7089
sg58
g62
sS'trial_loop.thisN'
p7090
I47
sg33
g6951
sg63
g64
sS'trial_loop.thisIndex'
p7091
g59
(g98
S'/\x00\x00\x00'
tRp7092
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7093
I0
sg6379
S'33-ambrosia_rice.png'
p7094
sS'block_loop.thisRepN'
p7095
I2
sg6382
g6951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7096
I2
sg6384
g6945
sg55
g11
sS'block_loop.thisTrial'
p7097
Nsg69
Vn
sS'block_loop.thisTrialN'
p7098
I0
sg39
F0.98352049055392854
sg34
g752
(S'\x07\xdf\n\x10\x13% \x02\x17('
tRp7099
sa(dp7100
S'trial_loop.thisTrialN'
p7101
I48
sg6370
g6750
sS'block_loop.thisIndex'
p7102
g6364
sg38
S'left'
p7103
sg58
g62
sS'trial_loop.thisN'
p7104
I48
sg33
g6760
sg63
g64
sS'trial_loop.thisIndex'
p7105
g59
(g98
S'0\x00\x00\x00'
tRp7106
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7107
I0
sg6379
g6758
sS'block_loop.thisRepN'
p7108
I2
sg6382
g6760
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7109
I2
sg6384
g6754
sg55
g11
sS'block_loop.thisTrial'
p7110
Nsg69
Vn
sS'block_loop.thisTrialN'
p7111
I0
sg39
F1.0334545189180062
sg34
g752
(S'\x07\xdf\n\x10\x13%&\x02m\x18'
tRp7112
sa(dp7113
S'trial_loop.thisTrialN'
p7114
I49
sg6370
g6941
sS'block_loop.thisIndex'
p7115
g6364
sg38
S'right'
p7116
sg58
g62
sS'trial_loop.thisN'
p7117
I49
sg33
g6945
sg63
g64
sS'trial_loop.thisIndex'
p7118
g59
(g98
S'1\x00\x00\x00'
tRp7119
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7120
I0
sg6379
g6949
sS'block_loop.thisRepN'
p7121
I2
sg6382
g6951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7122
I2
sg6384
g6945
sg55
g11
sS'block_loop.thisTrial'
p7123
Nsg69
Vn
sS'block_loop.thisTrialN'
p7124
I0
sg39
F1.1334924939437769
sg34
g752
(S'\x07\xdf\n\x10\x13%,\x03v\xb8'
tRp7125
sa(dp7126
S'trial_loop.thisTrialN'
p7127
I50
sg6370
S'46-pistachios.png'
p7128
sS'block_loop.thisIndex'
p7129
g6364
sg38
S'left'
p7130
sg58
g62
sS'trial_loop.thisN'
p7131
I50
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7132
g59
(g98
S'2\x00\x00\x00'
tRp7133
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7134
I0
sg6379
S'29-beans.png'
p7135
sS'block_loop.thisRepN'
p7136
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7137
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7138
Nsg69
Vn
sS'block_loop.thisTrialN'
p7139
I0
sg39
F0.68343906661175424
sg34
g752
(S'\x07\xdf\n\x10\x13%2\x05\xef\x88'
tRp7140
sa(dp7141
S'trial_loop.thisTrialN'
p7142
I51
sg6370
g6570
sS'block_loop.thisIndex'
p7143
g6364
sg38
S'left'
p7144
sg58
g62
sS'trial_loop.thisN'
p7145
I51
sg33
g6581
sg63
g64
sS'trial_loop.thisIndex'
p7146
g59
(g98
S'3\x00\x00\x00'
tRp7147
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7148
I0
sg6379
g6578
sS'block_loop.thisRepN'
p7149
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7150
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p7151
Nsg69
Vn
sS'block_loop.thisTrialN'
p7152
I0
sg39
F0.83344528175075538
sg34
g752
(S'\x07\xdf\n\x10\x13%8\x01\xc18'
tRp7153
sa(dp7154
S'trial_loop.thisTrialN'
p7155
I52
sg6370
g6825
sS'block_loop.thisIndex'
p7156
g6364
sg38
S'left'
p7157
sg58
g62
sS'trial_loop.thisN'
p7158
I52
sg33
g6829
sg63
g64
sS'trial_loop.thisIndex'
p7159
g59
(g98
S'4\x00\x00\x00'
tRp7160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7161
I0
sg6379
g6833
sS'block_loop.thisRepN'
p7162
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7163
I2
sg6384
g6836
sg55
g11
sS'block_loop.thisTrial'
p7164
Nsg69
Vn
sS'block_loop.thisTrialN'
p7165
I0
sg39
F0.95020909074082738
sg34
g752
(S'\x07\xdf\n\x10\x13&\x01\x0e\xf4 '
tRp7166
sa(dp7167
S'trial_loop.thisTrialN'
p7168
I53
sg6370
g6459
sS'block_loop.thisIndex'
p7169
g6364
sg38
S'right'
p7170
sg58
g62
sS'trial_loop.thisN'
p7171
I53
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7172
g59
(g98
S'5\x00\x00\x00'
tRp7173
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7174
I0
sg6379
g6466
sS'block_loop.thisRepN'
p7175
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7176
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7177
Nsg69
Vn
sS'block_loop.thisTrialN'
p7178
I0
sg39
F0.7166509672824759
sg34
g752
(S'\x07\xdf\n\x10\x13&\x07\x0e\x92x'
tRp7179
sa(dp7180
S'trial_loop.thisTrialN'
p7181
I54
sg6370
g6570
sS'block_loop.thisIndex'
p7182
g6364
sg38
S'left'
p7183
sg58
g62
sS'trial_loop.thisN'
p7184
I54
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7185
g59
(g98
S'6\x00\x00\x00'
tRp7186
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7187
I0
sg6379
g6578
sS'block_loop.thisRepN'
p7188
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7189
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p7190
Nsg69
Vn
sS'block_loop.thisTrialN'
p7191
I0
sg39
F0.85016227768210229
sg34
g752
(S'\x07\xdf\n\x10\x13&\r\n\xd9X'
tRp7192
sa(dp7193
S'trial_loop.thisTrialN'
p7194
I55
sg6370
g6442
sS'block_loop.thisIndex'
p7195
g6364
sg38
S'left'
p7196
sg58
g62
sS'trial_loop.thisN'
p7197
I55
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p7198
g59
(g98
S'7\x00\x00\x00'
tRp7199
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7200
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7201
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7202
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7203
Nsg69
Vn
sS'block_loop.thisTrialN'
p7204
I0
sg39
F0.73318236452905694
sg34
g752
(S'\x07\xdf\n\x10\x13&\x13\t\x0ch'
tRp7205
sa(dp7206
S'trial_loop.thisTrialN'
p7207
I56
sg6370
g6692
sS'block_loop.thisIndex'
p7208
g6364
sg38
S'right'
p7209
sg58
g62
sS'trial_loop.thisN'
p7210
I56
sg33
g6628
sg63
g64
sS'trial_loop.thisIndex'
p7211
g59
(g98
S'8\x00\x00\x00'
tRp7212
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7213
I0
sg6379
g6699
sS'block_loop.thisRepN'
p7214
I2
sg6382
g6621
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7215
I2
sg6384
g6628
sg55
g11
sS'block_loop.thisTrial'
p7216
Nsg69
Vn
sS'block_loop.thisTrialN'
p7217
I0
sg39
F2.6334688308270415
sg34
g752
(S'\x07\xdf\n\x10\x13&\x19\x05\x91\xc8'
tRp7218
sa(dp7219
S'trial_loop.thisTrialN'
p7220
I57
sg6370
g6425
sS'block_loop.thisIndex'
p7221
g6364
sg38
S'left'
p7222
sg58
g62
sS'trial_loop.thisN'
p7223
I57
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7224
g59
(g98
S'9\x00\x00\x00'
tRp7225
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7226
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7227
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7228
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7229
Nsg69
Vn
sS'block_loop.thisTrialN'
p7230
I0
sg39
F0.78353178042743821
sg34
g752
(S'\x07\xdf\n\x10\x13&!\x00]\xc0'
tRp7231
sa(dp7232
S'trial_loop.thisTrialN'
p7233
I58
sg6370
g6808
sS'block_loop.thisIndex'
p7234
g6364
sg38
S'right'
p7235
sg58
g62
sS'trial_loop.thisN'
p7236
I58
sg33
g6812
sg63
g64
sS'trial_loop.thisIndex'
p7237
g59
(g98
S':\x00\x00\x00'
tRp7238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7239
I0
sg6379
g6816
sS'block_loop.thisRepN'
p7240
I2
sg6382
g6812
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7241
I2
sg6384
g6819
sg55
g11
sS'block_loop.thisTrial'
p7242
Nsg69
Vn
sS'block_loop.thisTrialN'
p7243
I0
sg39
F0.8501052581195836
sg34
g752
(S'\x07\xdf\n\x10\x13&&\x0c\xdc\xf8'
tRp7244
sa(dp7245
S'trial_loop.thisTrialN'
p7246
I59
sg6370
g6491
sS'block_loop.thisIndex'
p7247
g6364
sg38
S'left'
p7248
sg58
g62
sS'trial_loop.thisN'
p7249
I59
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p7250
g59
(g98
S';\x00\x00\x00'
tRp7251
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7252
I0
sg6379
g6499
sS'block_loop.thisRepN'
p7253
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7254
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p7255
Nsg69
Vn
sS'block_loop.thisTrialN'
p7256
I0
sg39
F0.85012207888212288
sg34
g752
(S'\x07\xdf\n\x10\x13&,\x0b\x0c '
tRp7257
sa(dp7258
S'trial_loop.thisTrialN'
p7259
I60
sg6370
g6958
sS'block_loop.thisIndex'
p7260
g6364
sg38
S'right'
p7261
sg58
g62
sS'trial_loop.thisN'
p7262
I60
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p7263
g59
(g98
S'<\x00\x00\x00'
tRp7264
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7265
I0
sg6379
g6965
sS'block_loop.thisRepN'
p7266
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7267
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7268
Nsg69
Vn
sS'block_loop.thisTrialN'
p7269
I0
sg39
F1.1998980490170652
sg34
g752
(S'\x07\xdf\n\x10\x13&2\t;H'
tRp7270
sa(dp7271
S'trial_loop.thisTrialN'
p7272
I61
sg6370
g6525
sS'block_loop.thisIndex'
p7273
g6364
sg38
S'left'
p7274
sg58
g62
sS'trial_loop.thisN'
p7275
I61
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p7276
g59
(g98
S'=\x00\x00\x00'
tRp7277
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7278
I0
sg6379
g6532
sS'block_loop.thisRepN'
p7279
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7280
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p7281
Nsg69
Vn
sS'block_loop.thisTrialN'
p7282
I0
sg39
F1.1835593778887414
sg34
g752
(S'\x07\xdf\n\x10\x13&8\x0c\xe4\xc8'
tRp7283
sa(dp7284
S'trial_loop.thisTrialN'
p7285
I62
sg6370
g6793
sS'block_loop.thisIndex'
p7286
g6364
sg38
S'right'
p7287
sg58
g62
sS'trial_loop.thisN'
p7288
I62
sg33
g6519
sg63
g64
sS'trial_loop.thisIndex'
p7289
g59
(g98
S'>\x00\x00\x00'
tRp7290
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7291
I0
sg6379
g6800
sS'block_loop.thisRepN'
p7292
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7293
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p7294
Nsg69
Vn
sS'block_loop.thisTrialN'
p7295
I0
sg39
F1.0501783572035492
sg34
g752
(S"\x07\xdf\n\x10\x13'\x03\x00\xd2\xf0"
tRp7296
sa(dp7297
S'trial_loop.thisTrialN'
p7298
I63
sg6370
g6634
sS'block_loop.thisIndex'
p7299
g6364
sg38
S'left'
p7300
sg58
g62
sS'trial_loop.thisN'
p7301
I63
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p7302
g59
(g98
S'?\x00\x00\x00'
tRp7303
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7304
I0
sg6379
g6641
sS'block_loop.thisRepN'
p7305
I2
sg6382
g6604
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7306
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p7307
Nsg69
Vn
sS'block_loop.thisTrialN'
p7308
I0
sg39
F1.1168131309241289
sg34
g752
(S"\x07\xdf\n\x10\x13'\t\x02\x1b\x10"
tRp7309
sa(dp7310
S'trial_loop.thisTrialN'
p7311
I64
sg6370
g6617
sS'block_loop.thisIndex'
p7312
g6364
sg38
S'left'
p7313
sg58
g62
sS'trial_loop.thisN'
p7314
I64
sg33
g6621
sg63
g64
sS'trial_loop.thisIndex'
p7315
g59
(g98
S'@\x00\x00\x00'
tRp7316
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7317
I0
sg6379
g6625
sS'block_loop.thisRepN'
p7318
I2
sg6382
g6621
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7319
I2
sg6384
g6628
sg55
g11
sS'block_loop.thisTrial'
p7320
Nsg69
Vn
sS'block_loop.thisTrialN'
p7321
I0
sg39
F2.4167557122200378
sg34
g752
(S"\x07\xdf\n\x10\x13'\x0f\x04YH"
tRp7322
sa(dp7323
S'trial_loop.thisTrialN'
p7324
I65
sg6370
g6491
sS'block_loop.thisIndex'
p7325
g6364
sg38
S'left'
p7326
sg58
g62
sS'trial_loop.thisN'
p7327
I65
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p7328
g59
(g98
S'A\x00\x00\x00'
tRp7329
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7330
I0
sg6379
g6499
sS'block_loop.thisRepN'
p7331
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7332
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p7333
Nsg69
Vn
sS'block_loop.thisTrialN'
p7334
I0
sg39
F0.70012555708672153
sg34
g752
(S"\x07\xdf\n\x10\x13'\x16\x0bN\x88"
tRp7335
sa(dp7336
S'trial_loop.thisTrialN'
p7337
I66
sg6370
S'41-peanuts_redo.png'
p7338
sS'block_loop.thisIndex'
p7339
g6364
sg38
S'right'
p7340
sg58
g62
sS'trial_loop.thisN'
p7341
I66
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p7342
g59
(g98
S'B\x00\x00\x00'
tRp7343
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7344
I0
sg6379
S'45-chewy_nougat_redo.png'
p7345
sS'block_loop.thisRepN'
p7346
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7347
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p7348
Nsg69
Vn
sS'block_loop.thisTrialN'
p7349
I0
sg39
F1.0334453957839287
sg34
g752
(S"\x07\xdf\n\x10\x13'\x1c\x07 8"
tRp7350
sa(dp7351
S'trial_loop.thisTrialN'
p7352
I67
sg6370
S'31-hobnobs.png'
p7353
sS'block_loop.thisIndex'
p7354
g6364
sg38
S'left'
p7355
sg58
g62
sS'trial_loop.thisN'
p7356
I67
sg33
g7074
sg63
g64
sS'trial_loop.thisIndex'
p7357
g59
(g98
S'C\x00\x00\x00'
tRp7358
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7359
I0
sg6379
S'25-kitkat.png'
p7360
sS'block_loop.thisRepN'
p7361
I2
sg6382
g7074
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7362
I2
sg6384
g7081
sg55
g11
sS'block_loop.thisTrial'
p7363
Nsg69
Vn
sS'block_loop.thisTrialN'
p7364
I0
sg39
F0.86683280266879592
sg34
g752
(S'\x07\xdf\n\x10\x13\'"\x08)\xd8'
tRp7365
sa(dp7366
S'trial_loop.thisTrialN'
p7367
I68
sg6370
S'13-mccoys_steak_crisps.png'
p7368
sS'block_loop.thisIndex'
p7369
g6364
sg38
S'right'
p7370
sg58
g62
sS'trial_loop.thisN'
p7371
I68
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7372
g59
(g98
S'D\x00\x00\x00'
tRp7373
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7374
I0
sg6379
S'3-ellas_strawberries_apples.png'
p7375
sS'block_loop.thisRepN'
p7376
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7377
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p7378
Nsg69
Vn
sS'block_loop.thisTrialN'
p7379
I0
sg39
F0.93347213796369033
sg34
g752
(S"\x07\xdf\n\x10\x13'(\x06\xd6\x00"
tRp7380
sa(dp7381
S'trial_loop.thisTrialN'
p7382
I69
sg6370
g6617
sS'block_loop.thisIndex'
p7383
g6364
sg38
S'left'
p7384
sg58
g62
sS'trial_loop.thisN'
p7385
I69
sg33
g6628
sg63
g64
sS'trial_loop.thisIndex'
p7386
g59
(g98
S'E\x00\x00\x00'
tRp7387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7388
I0
sg6379
g6625
sS'block_loop.thisRepN'
p7389
I2
sg6382
g6621
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7390
I2
sg6384
g6628
sg55
g11
sS'block_loop.thisTrial'
p7391
Nsg69
Vn
sS'block_loop.thisTrialN'
p7392
I0
sg39
F1.200101608868863
sg34
g752
(S"\x07\xdf\n\x10\x13'.\x065\xd8"
tRp7393
sa(dp7394
S'trial_loop.thisTrialN'
p7395
I70
sg6370
g6442
sS'block_loop.thisIndex'
p7396
g6364
sg38
S'left'
p7397
sg58
g62
sS'trial_loop.thisN'
p7398
I70
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7399
g59
(g98
S'F\x00\x00\x00'
tRp7400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7401
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7402
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7403
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7404
Nsg69
Vn
sS'block_loop.thisTrialN'
p7405
I0
sg39
F0.71651126934739295
sg34
g752
(S"\x07\xdf\n\x10\x13'4\t\xdfX"
tRp7406
sa(dp7407
S'trial_loop.thisTrialN'
p7408
I71
sg6370
g6825
sS'block_loop.thisIndex'
p7409
g6364
sg38
S'left'
p7410
sg58
g62
sS'trial_loop.thisN'
p7411
I71
sg33
g6829
sg63
g64
sS'trial_loop.thisIndex'
p7412
g59
(g98
S'G\x00\x00\x00'
tRp7413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7414
I0
sg6379
g6833
sS'block_loop.thisRepN'
p7415
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7416
I2
sg6384
g6836
sg55
g11
sS'block_loop.thisTrial'
p7417
Nsg69
Vn
sS'block_loop.thisTrialN'
p7418
I0
sg39
F0.73355498738965252
sg34
g752
(S"\x07\xdf\n\x10\x13':\x05\xeb\xa0"
tRp7419
sa(dp7420
S'trial_loop.thisTrialN'
p7421
I72
sg6370
g6750
sS'block_loop.thisIndex'
p7422
g6364
sg38
S'left'
p7423
sg58
g62
sS'trial_loop.thisN'
p7424
I72
sg33
g6760
sg63
g64
sS'trial_loop.thisIndex'
p7425
g59
(g98
S'H\x00\x00\x00'
tRp7426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7427
I0
sg6379
g6758
sS'block_loop.thisRepN'
p7428
I2
sg6382
g6760
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7429
I2
sg6384
g6754
sg55
g11
sS'block_loop.thisTrial'
p7430
Nsg69
Vn
sS'block_loop.thisTrialN'
p7431
I0
sg39
F0.81688765549188247
sg34
g752
(S'\x07\xdf\n\x10\x13(\x04\x02q\x00'
tRp7432
sa(dp7433
S'trial_loop.thisTrialN'
p7434
I73
sg6370
S'1-treacle_cookies.png'
p7435
sS'block_loop.thisIndex'
p7436
g6364
sg38
S'left'
p7437
sg58
g62
sS'trial_loop.thisN'
p7438
I73
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7439
g59
(g98
S'I\x00\x00\x00'
tRp7440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7441
I0
sg6379
S'21-nakd_banana_crunch.png'
p7442
sS'block_loop.thisRepN'
p7443
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7444
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7445
Nsg69
Vn
sS'block_loop.thisTrialN'
p7446
I0
sg39
F0.70020680996094598
sg34
g752
(S"\x07\xdf\n\x10\x13(\n\x00'\x10"
tRp7447
sa(dp7448
S'trial_loop.thisTrialN'
p7449
I74
sg6370
g6926
sS'block_loop.thisIndex'
p7450
g6364
sg38
S'right'
p7451
sg58
g62
sS'trial_loop.thisN'
p7452
I74
sg33
g6829
sg63
g64
sS'trial_loop.thisIndex'
p7453
g59
(g98
S'J\x00\x00\x00'
tRp7454
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7455
I0
sg6379
g6933
sS'block_loop.thisRepN'
p7456
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7457
I2
sg6384
g6836
sg55
g11
sS'block_loop.thisTrial'
p7458
Nsg69
Vn
sS'block_loop.thisTrialN'
p7459
I0
sg39
F1.0668565798259806
sg34
g752
(S'\x07\xdf\n\x10\x13(\x0f\x0b7\x18'
tRp7460
sa(dp7461
S'trial_loop.thisTrialN'
p7462
I75
sg6370
g6600
sS'block_loop.thisIndex'
p7463
g6364
sg38
S'right'
p7464
sg58
g62
sS'trial_loop.thisN'
p7465
I75
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p7466
g59
(g98
S'K\x00\x00\x00'
tRp7467
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7468
I0
sg6379
g6608
sS'block_loop.thisRepN'
p7469
I2
sg6382
g6604
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7470
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p7471
Nsg69
Vn
sS'block_loop.thisTrialN'
p7472
I0
sg39
F0.91675485692394432
sg34
g752
(S'\x07\xdf\n\x10\x13(\x15\x0c\xb9\xd0'
tRp7473
sa(dp7474
S'trial_loop.thisTrialN'
p7475
I76
sg6370
g6808
sS'block_loop.thisIndex'
p7476
g6364
sg38
S'right'
p7477
sg58
g62
sS'trial_loop.thisN'
p7478
I76
sg33
g6812
sg63
g64
sS'trial_loop.thisIndex'
p7479
g59
(g98
S'L\x00\x00\x00'
tRp7480
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7481
I0
sg6379
g6816
sS'block_loop.thisRepN'
p7482
I2
sg6382
g6812
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7483
I2
sg6384
g6819
sg55
g11
sS'block_loop.thisTrial'
p7484
Nsg69
Vn
sS'block_loop.thisTrialN'
p7485
I0
sg39
F0.93354170182283269
sg34
g752
(S'\x07\xdf\n\x10\x13(\x1b\x0c\x1d\x90'
tRp7486
sa(dp7487
S'trial_loop.thisTrialN'
p7488
I77
sg6370
g6793
sS'block_loop.thisIndex'
p7489
g6364
sg38
S'right'
p7490
sg58
g62
sS'trial_loop.thisN'
p7491
I77
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p7492
g59
(g98
S'M\x00\x00\x00'
tRp7493
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7494
I0
sg6379
g6800
sS'block_loop.thisRepN'
p7495
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7496
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p7497
Nsg69
Vn
sS'block_loop.thisTrialN'
p7498
I0
sg39
F1.5168840632613865
sg34
g752
(S'\x07\xdf\n\x10\x13(!\x0b}h'
tRp7499
sa(dp7500
S'trial_loop.thisTrialN'
p7501
I78
sg6370
g6540
sS'block_loop.thisIndex'
p7502
g6364
sg38
S'right'
p7503
sg58
g62
sS'trial_loop.thisN'
p7504
I78
sg33
g6544
sg63
g64
sS'trial_loop.thisIndex'
p7505
g59
(g98
S'N\x00\x00\x00'
tRp7506
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7507
I0
sg6379
g6548
sS'block_loop.thisRepN'
p7508
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7509
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p7510
Nsg69
Vn
sS'block_loop.thisTrialN'
p7511
I0
sg39
F0.66685920272720978
sg34
g752
(S'\x07\xdf\n\x10\x13((\x04\xa7h'
tRp7512
sa(dp7513
S'trial_loop.thisTrialN'
p7514
I79
sg6370
S'2-steamed_puddings.png'
p7515
sS'block_loop.thisIndex'
p7516
g6364
sg38
S'left'
p7517
sg58
g62
sS'trial_loop.thisN'
p7518
I79
sg33
S'2-steamed_puddings.png'
p7519
sg63
g64
sS'trial_loop.thisIndex'
p7520
g59
(g98
S'O\x00\x00\x00'
tRp7521
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7522
I0
sg6379
S'20-fruit_pastilles.png'
p7523
sS'block_loop.thisRepN'
p7524
I2
sg6382
g7519
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7525
I2
sg6384
S'20-fruit_pastilles.png'
p7526
sg55
g11
sS'block_loop.thisTrial'
p7527
Nsg69
Vn
sS'block_loop.thisTrialN'
p7528
I0
sg39
F0.81680127085564891
sg34
g752
(S'\x07\xdf\n\x10\x13(-\x0f>X'
tRp7529
sa(dp7530
S'trial_loop.thisTrialN'
p7531
I80
sg6370
g6600
sS'block_loop.thisIndex'
p7532
g6364
sg38
S'right'
p7533
sg58
g62
sS'trial_loop.thisN'
p7534
I80
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p7535
g59
(g98
S'P\x00\x00\x00'
tRp7536
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7537
I0
sg6379
g6608
sS'block_loop.thisRepN'
p7538
I2
sg6382
g6604
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7539
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p7540
Nsg69
Vn
sS'block_loop.thisTrialN'
p7541
I0
sg39
F0.66677966043789638
sg34
g752
(S'\x07\xdf\n\x10\x13(3\x0c\xf4h'
tRp7542
sa(dp7543
S'trial_loop.thisTrialN'
p7544
I81
sg6370
g6720
sS'block_loop.thisIndex'
p7545
g6364
sg38
S'left'
p7546
sg58
g62
sS'trial_loop.thisN'
p7547
I81
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p7548
g59
(g98
S'Q\x00\x00\x00'
tRp7549
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7550
I0
sg6379
g6728
sS'block_loop.thisRepN'
p7551
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7552
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p7553
Nsg69
Vn
sS'block_loop.thisTrialN'
p7554
I0
sg39
F0.81676192735176301
sg34
g752
(S'\x07\xdf\n\x10\x13(9\x08\x83\xb0'
tRp7555
sa(dp7556
S'trial_loop.thisTrialN'
p7557
I82
sg6370
g6842
sS'block_loop.thisIndex'
p7558
g6364
sg38
S'left'
p7559
sg58
g62
sS'trial_loop.thisN'
p7560
I82
sg33
g6551
sg63
g64
sS'trial_loop.thisIndex'
p7561
g59
(g98
S'R\x00\x00\x00'
tRp7562
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7563
I0
sg6379
g6849
sS'block_loop.thisRepN'
p7564
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7565
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p7566
Nsg69
Vn
sS'block_loop.thisTrialN'
p7567
I0
sg39
F0.78348759026266634
sg34
g752
(S'\x07\xdf\n\x10\x13)\x03\x069\xc0'
tRp7568
sa(dp7569
S'trial_loop.thisTrialN'
p7570
I83
sg6370
g6408
sS'block_loop.thisIndex'
p7571
g6364
sg38
S'left'
p7572
sg58
g62
sS'trial_loop.thisN'
p7573
I83
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7574
g59
(g98
S'S\x00\x00\x00'
tRp7575
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7576
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7577
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7578
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7579
Nsg69
Vn
sS'block_loop.thisTrialN'
p7580
I0
sg39
F0.88382035643735435
sg34
g752
(S'\x07\xdf\n\x10\x13)\t\x03v\xb8'
tRp7581
sa(dp7582
S'trial_loop.thisTrialN'
p7583
I84
sg6370
g7353
sS'block_loop.thisIndex'
p7584
g6364
sg38
S'left'
p7585
sg58
g62
sS'trial_loop.thisN'
p7586
I84
sg33
g7074
sg63
g64
sS'trial_loop.thisIndex'
p7587
g59
(g98
S'T\x00\x00\x00'
tRp7588
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7589
I0
sg6379
g7360
sS'block_loop.thisRepN'
p7590
I2
sg6382
g7074
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7591
I2
sg6384
g7081
sg55
g11
sS'block_loop.thisTrial'
p7592
Nsg69
Vn
sS'block_loop.thisTrialN'
p7593
I0
sg39
F0.76677601118717575
sg34
g752
(S'\x07\xdf\n\x10\x13)\x0f\x02"\xe0'
tRp7594
sa(dp7595
S'trial_loop.thisTrialN'
p7596
I85
sg6370
g6371
sS'block_loop.thisIndex'
p7597
g6364
sg38
S'right'
p7598
sg58
g62
sS'trial_loop.thisN'
p7599
I85
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7600
g59
(g98
S'U\x00\x00\x00'
tRp7601
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7602
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7603
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7604
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7605
Nsg69
Vn
sS'block_loop.thisTrialN'
p7606
I0
sg39
F1.2168134730382008
sg34
g752
(S'\x07\xdf\n\x10\x13)\x14\x0ec\x98'
tRp7607
sa(dp7608
S'trial_loop.thisTrialN'
p7609
I86
sg6370
g7368
sS'block_loop.thisIndex'
p7610
g6364
sg38
S'right'
p7611
sg58
g62
sS'trial_loop.thisN'
p7612
I86
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7613
g59
(g98
S'V\x00\x00\x00'
tRp7614
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7615
I0
sg6379
g7375
sS'block_loop.thisRepN'
p7616
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7617
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p7618
Nsg69
Vn
sS'block_loop.thisTrialN'
p7619
I0
sg39
F0.98348798940423876
sg34
g752
(S'\x07\xdf\n\x10\x13)\x1b\x02\xca\xd8'
tRp7620
sa(dp7621
S'trial_loop.thisTrialN'
p7622
I87
sg6370
g6898
sS'block_loop.thisIndex'
p7623
g6364
sg38
S'left'
p7624
sg58
g62
sS'trial_loop.thisN'
p7625
I87
sg33
g6819
sg63
g64
sS'trial_loop.thisIndex'
p7626
g59
(g98
S'W\x00\x00\x00'
tRp7627
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7628
I0
sg6379
g6905
sS'block_loop.thisRepN'
p7629
I2
sg6382
g6812
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7630
I2
sg6384
g6819
sg55
g11
sS'block_loop.thisTrial'
p7631
Nsg69
Vn
sS'block_loop.thisTrialN'
p7632
I0
sg39
F0.76682533310668077
sg34
g752
(S'\x07\xdf\n\x10\x13)!\x03 \xc8'
tRp7633
sa(dp7634
S'trial_loop.thisTrialN'
p7635
I88
sg6370
g6442
sS'block_loop.thisIndex'
p7636
g6364
sg38
S'left'
p7637
sg58
g62
sS'trial_loop.thisN'
p7638
I88
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p7639
g59
(g98
S'X\x00\x00\x00'
tRp7640
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7641
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7642
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7643
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7644
Nsg69
Vn
sS'block_loop.thisTrialN'
p7645
I0
sg39
F0.69984359533555107
sg34
g752
(S"\x07\xdf\n\x10\x13)'\x00\x1f@"
tRp7646
sa(dp7647
S'trial_loop.thisTrialN'
p7648
I89
sg6370
g6649
sS'block_loop.thisIndex'
p7649
g6364
sg38
S'left'
p7650
sg58
g62
sS'trial_loop.thisN'
p7651
I89
sg33
g6653
sg63
g64
sS'trial_loop.thisIndex'
p7652
g59
(g98
S'Y\x00\x00\x00'
tRp7653
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7654
I0
sg6379
g6657
sS'block_loop.thisRepN'
p7655
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7656
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p7657
Nsg69
Vn
sS'block_loop.thisTrialN'
p7658
I0
sg39
F0.95019027428497793
sg34
g752
(S'\x07\xdf\n\x10\x13),\x0b/H'
tRp7659
sa(dp7660
S'trial_loop.thisTrialN'
p7661
I90
sg6370
g7515
sS'block_loop.thisIndex'
p7662
g6364
sg38
S'left'
p7663
sg58
g62
sS'trial_loop.thisN'
p7664
I90
sg33
g7519
sg63
g64
sS'trial_loop.thisIndex'
p7665
g59
(g98
S'Z\x00\x00\x00'
tRp7666
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7667
I0
sg6379
g7523
sS'block_loop.thisRepN'
p7668
I2
sg6382
g7519
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7669
I2
sg6384
g7526
sg55
g11
sS'block_loop.thisTrial'
p7670
Nsg69
Vn
sS'block_loop.thisTrialN'
p7671
I0
sg39
F0.73355840855947463
sg34
g752
(S'\x07\xdf\n\x10\x13)2\x0b\x088'
tRp7672
sa(dp7673
S'trial_loop.thisTrialN'
p7674
I91
sg6370
g7016
sS'block_loop.thisIndex'
p7675
g6364
sg38
S'right'
p7676
sg58
g62
sS'trial_loop.thisN'
p7677
I91
sg33
g6760
sg63
g64
sS'trial_loop.thisIndex'
p7678
g59
(g98
S'[\x00\x00\x00'
tRp7679
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7680
I0
sg6379
g7023
sS'block_loop.thisRepN'
p7681
I2
sg6382
g6760
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7682
I2
sg6384
g6754
sg55
g11
sS'block_loop.thisTrial'
p7683
Nsg69
Vn
sS'block_loop.thisTrialN'
p7684
I0
sg39
F0.88336591050756397
sg34
g752
(S'\x07\xdf\n\x10\x13)8\x07\x8d\x98'
tRp7685
sa(dp7686
S'trial_loop.thisTrialN'
p7687
I92
sg6370
g6525
sS'block_loop.thisIndex'
p7688
g6364
sg38
S'left'
p7689
sg58
g62
sS'trial_loop.thisN'
p7690
I92
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p7691
g59
(g98
S'\\\x00\x00\x00'
tRp7692
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7693
I0
sg6379
g6532
sS'block_loop.thisRepN'
p7694
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7695
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p7696
Nsg69
Vn
sS'block_loop.thisTrialN'
p7697
I0
sg39
F0.65010628446907504
sg34
g752
(S'\x07\xdf\n\x10\x13*\x02\x069\xc0'
tRp7698
sa(dp7699
S'trial_loop.thisTrialN'
p7700
I93
sg6370
g6459
sS'block_loop.thisIndex'
p7701
g6364
sg38
S'right'
p7702
sg58
g62
sS'trial_loop.thisN'
p7703
I93
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p7704
g59
(g98
S']\x00\x00\x00'
tRp7705
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7706
I0
sg6379
g6466
sS'block_loop.thisRepN'
p7707
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7708
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7709
Nsg69
Vn
sS'block_loop.thisTrialN'
p7710
I0
sg39
F0.90007920017524157
sg34
g752
(S'\x07\xdf\n\x10\x13*\x08\x01O\xf0'
tRp7711
sa(dp7712
S'trial_loop.thisTrialN'
p7713
I94
sg6370
g6570
sS'block_loop.thisIndex'
p7714
g6364
sg38
S'left'
p7715
sg58
g62
sS'trial_loop.thisN'
p7716
I94
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7717
g59
(g98
S'^\x00\x00\x00'
tRp7718
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7719
I0
sg6379
g6578
sS'block_loop.thisRepN'
p7720
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7721
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p7722
Nsg69
Vn
sS'block_loop.thisTrialN'
p7723
I0
sg39
F0.81683776337013114
sg34
g752
(S'\x07\xdf\n\x10\x13*\x0e\x00u0'
tRp7724
sa(dp7725
S'trial_loop.thisTrialN'
p7726
I95
sg6370
g6371
sS'block_loop.thisIndex'
p7727
g6364
sg38
S'right'
p7728
sg58
g62
sS'trial_loop.thisN'
p7729
I95
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7730
g59
(g98
S'_\x00\x00\x00'
tRp7731
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7732
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7733
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7734
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7735
Nsg69
Vn
sS'block_loop.thisTrialN'
p7736
I0
sg39
F0.66688970819814131
sg34
g752
(S'\x07\xdf\n\x10\x13*\x13\rm\x80'
tRp7737
sa(dp7738
S'trial_loop.thisTrialN'
p7739
I96
sg6370
S'20-fruit_pastilles.png'
p7740
sS'block_loop.thisIndex'
p7741
g6364
sg38
S'right'
p7742
sg58
g62
sS'trial_loop.thisN'
p7743
I96
sg33
g7526
sg63
g64
sS'trial_loop.thisIndex'
p7744
g59
(g98
S'`\x00\x00\x00'
tRp7745
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7746
I0
sg6379
S'2-steamed_puddings.png'
p7747
sS'block_loop.thisRepN'
p7748
I2
sg6382
g7519
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7749
I2
sg6384
g7526
sg55
g11
sS'block_loop.thisTrial'
p7750
Nsg69
Vn
sS'block_loop.thisTrialN'
p7751
I0
sg39
F0.71687961573479697
sg34
g752
(S'\x07\xdf\n\x10\x13*\x19\x08\xc20'
tRp7752
sa(dp7753
S'trial_loop.thisTrialN'
p7754
I97
sg6370
g6371
sS'block_loop.thisIndex'
p7755
g6364
sg38
S'right'
p7756
sg58
g62
sS'trial_loop.thisN'
p7757
I97
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7758
g59
(g98
S'a\x00\x00\x00'
tRp7759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7760
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7761
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7762
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7763
Nsg69
Vn
sS'block_loop.thisTrialN'
p7764
I0
sg39
F0.65010457387688803
sg34
g752
(S'\x07\xdf\n\x10\x13*\x1f\x04\xcex'
tRp7765
sa(dp7766
S'trial_loop.thisTrialN'
p7767
I98
sg6370
g6941
sS'block_loop.thisIndex'
p7768
g6364
sg38
S'right'
p7769
sg58
g62
sS'trial_loop.thisN'
p7770
I98
sg33
g6951
sg63
g64
sS'trial_loop.thisIndex'
p7771
g59
(g98
S'b\x00\x00\x00'
tRp7772
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7773
I0
sg6379
g6949
sS'block_loop.thisRepN'
p7774
I2
sg6382
g6951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7775
I2
sg6384
g6945
sg55
g11
sS'block_loop.thisTrial'
p7776
Nsg69
Vn
sS'block_loop.thisTrialN'
p7777
I0
sg39
F1.1335121656957199
sg34
g752
(S'\x07\xdf\n\x10\x13*%\x00#('
tRp7778
sa(dp7779
S'trial_loop.thisTrialN'
p7780
I99
sg6370
g6986
sS'block_loop.thisIndex'
p7781
g6364
sg38
S'right'
p7782
sg58
g62
sS'trial_loop.thisN'
p7783
I99
sg33
g6653
sg63
g64
sS'trial_loop.thisIndex'
p7784
g59
(g98
S'c\x00\x00\x00'
tRp7785
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7786
I0
sg6379
g6993
sS'block_loop.thisRepN'
p7787
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7788
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p7789
Nsg69
Vn
sS'block_loop.thisTrialN'
p7790
I0
sg39
F0.71682801302813459
sg34
g752
(S'\x07\xdf\n\x10\x13*+\x02\x9b\xf8'
tRp7791
sa(dp7792
S'trial_loop.thisTrialN'
p7793
I100
sg6370
g6508
sS'block_loop.thisIndex'
p7794
g6364
sg38
S'left'
p7795
sg58
g62
sS'trial_loop.thisN'
p7796
I100
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p7797
g59
(g98
S'd\x00\x00\x00'
tRp7798
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7799
I0
sg6379
g6516
sS'block_loop.thisRepN'
p7800
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7801
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p7802
Nsg69
Vn
sS'block_loop.thisTrialN'
p7803
I0
sg39
F1.2168160389192053
sg34
g752
(S'\x07\xdf\n\x10\x13*0\x0e%\x18'
tRp7804
sa(dp7805
S'trial_loop.thisTrialN'
p7806
I101
sg6370
g6720
sS'block_loop.thisIndex'
p7807
g6364
sg38
S'left'
p7808
sg58
g62
sS'trial_loop.thisN'
p7809
I101
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p7810
g59
(g98
S'e\x00\x00\x00'
tRp7811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7812
I0
sg6379
g6728
sS'block_loop.thisRepN'
p7813
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7814
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p7815
Nsg69
Vn
sS'block_loop.thisTrialN'
p7816
I0
sg39
F0.70016889194812393
sg34
g752
(S'\x07\xdf\n\x10\x13*7\x02\x8cX'
tRp7817
sa(dp7818
S'trial_loop.thisTrialN'
p7819
I102
sg6370
g7740
sS'block_loop.thisIndex'
p7820
g6364
sg38
S'right'
p7821
sg58
g62
sS'trial_loop.thisN'
p7822
I102
sg33
g7519
sg63
g64
sS'trial_loop.thisIndex'
p7823
g59
(g98
S'f\x00\x00\x00'
tRp7824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7825
I0
sg6379
g7747
sS'block_loop.thisRepN'
p7826
I2
sg6382
g7519
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7827
I2
sg6384
g7526
sg55
g11
sS'block_loop.thisTrial'
p7828
Nsg69
Vn
sS'block_loop.thisTrialN'
p7829
I0
sg39
F0.750100354438473
sg34
g752
(S'\x07\xdf\n\x10\x13+\x00\r\xda\xe0'
tRp7830
sa(dp7831
S'trial_loop.thisTrialN'
p7832
I103
sg6370
g6808
sS'block_loop.thisIndex'
p7833
g6364
sg38
S'right'
p7834
sg58
g62
sS'trial_loop.thisN'
p7835
I103
sg33
g6812
sg63
g64
sS'trial_loop.thisIndex'
p7836
g59
(g98
S'g\x00\x00\x00'
tRp7837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7838
I0
sg6379
g6816
sS'block_loop.thisRepN'
p7839
I2
sg6382
g6812
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7840
I2
sg6384
g6819
sg55
g11
sS'block_loop.thisTrial'
p7841
Nsg69
Vn
sS'block_loop.thisTrialN'
p7842
I0
sg39
F0.86676637487835251
sg34
g752
(S'\x07\xdf\n\x10\x13+\x06\n\x9a\xd8'
tRp7843
sa(dp7844
S'trial_loop.thisTrialN'
p7845
I104
sg6370
g6986
sS'block_loop.thisIndex'
p7846
g6364
sg38
S'right'
p7847
sg58
g62
sS'trial_loop.thisN'
p7848
I104
sg33
g6653
sg63
g64
sS'trial_loop.thisIndex'
p7849
g59
(g98
S'h\x00\x00\x00'
tRp7850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7851
I0
sg6379
g6993
sS'block_loop.thisRepN'
p7852
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7853
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p7854
Nsg69
Vn
sS'block_loop.thisTrialN'
p7855
I0
sg39
F0.96686878201580839
sg34
g752
(S'\x07\xdf\n\x10\x13+\x0c\t\x08\x80'
tRp7856
sa(dp7857
S'trial_loop.thisTrialN'
p7858
I105
sg6370
g7016
sS'block_loop.thisIndex'
p7859
g6364
sg38
S'right'
p7860
sg58
g62
sS'trial_loop.thisN'
p7861
I105
sg33
g6760
sg63
g64
sS'trial_loop.thisIndex'
p7862
g59
(g98
S'i\x00\x00\x00'
tRp7863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7864
I0
sg6379
g7023
sS'block_loop.thisRepN'
p7865
I2
sg6382
g6760
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7866
I2
sg6384
g6754
sg55
g11
sS'block_loop.thisTrial'
p7867
Nsg69
Vn
sS'block_loop.thisTrialN'
p7868
I0
sg39
F0.75010662658314686
sg34
g752
(S'\x07\xdf\n\x10\x13+\x12\x08\xe5X'
tRp7869
sa(dp7870
S'trial_loop.thisTrialN'
p7871
I106
sg6370
g6600
sS'block_loop.thisIndex'
p7872
g6364
sg38
S'right'
p7873
sg58
g62
sS'trial_loop.thisN'
p7874
I106
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p7875
g59
(g98
S'j\x00\x00\x00'
tRp7876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7877
I0
sg6379
g6608
sS'block_loop.thisRepN'
p7878
I2
sg6382
g6604
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7879
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p7880
Nsg69
Vn
sS'block_loop.thisTrialN'
p7881
I0
sg39
F1.3834756731739617
sg34
g752
(S'\x07\xdf\n\x10\x13+\x18\x05\xa5P'
tRp7882
sa(dp7883
S'trial_loop.thisTrialN'
p7884
I107
sg6370
g6926
sS'block_loop.thisIndex'
p7885
g6364
sg38
S'right'
p7886
sg58
g62
sS'trial_loop.thisN'
p7887
I107
sg33
g6829
sg63
g64
sS'trial_loop.thisIndex'
p7888
g59
(g98
S'k\x00\x00\x00'
tRp7889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7890
I0
sg6379
g6933
sS'block_loop.thisRepN'
p7891
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7892
I2
sg6384
g6836
sg55
g11
sS'block_loop.thisTrial'
p7893
Nsg69
Vn
sS'block_loop.thisTrialN'
p7894
I0
sg39
F1.7667443653263035
sg34
g752
(S'\x07\xdf\n\x10\x13+\x1e\x0b\xee\xb0'
tRp7895
sa(dp7896
S'trial_loop.thisTrialN'
p7897
I108
sg6370
g6617
sS'block_loop.thisIndex'
p7898
g6364
sg38
S'right'
p7899
sg58
g62
sS'trial_loop.thisN'
p7900
I108
sg33
g6621
sg63
g64
sS'trial_loop.thisIndex'
p7901
g59
(g98
S'l\x00\x00\x00'
tRp7902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7903
I0
sg6379
g6625
sS'block_loop.thisRepN'
p7904
I2
sg6382
g6621
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7905
I2
sg6384
g6628
sg55
g11
sS'block_loop.thisTrial'
p7906
Nsg69
Vn
sS'block_loop.thisTrialN'
p7907
I0
sg39
F1.4833842137886677
sg34
g752
(S'\x07\xdf\n\x10\x13+%\x08\xe9@'
tRp7908
sa(dp7909
S'trial_loop.thisTrialN'
p7910
I109
sg6370
g6750
sS'block_loop.thisIndex'
p7911
g6364
sg38
S'left'
p7912
sg58
g62
sS'trial_loop.thisN'
p7913
I109
sg33
g6754
sg63
g64
sS'trial_loop.thisIndex'
p7914
g59
(g98
S'm\x00\x00\x00'
tRp7915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7916
I0
sg6379
g6758
sS'block_loop.thisRepN'
p7917
I2
sg6382
g6760
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7918
I2
sg6384
g6754
sg55
g11
sS'block_loop.thisTrial'
p7919
Nsg69
Vn
sS'block_loop.thisTrialN'
p7920
I0
sg39
F0.65020663890754804
sg34
g752
(S'\x07\xdf\n\x10\x13+,\x01\x96@'
tRp7921
sa(dp7922
S'trial_loop.thisTrialN'
p7923
I110
sg6370
g7128
sS'block_loop.thisIndex'
p7924
g6364
sg38
S'left'
p7925
sg58
g62
sS'trial_loop.thisN'
p7926
I110
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7927
g59
(g98
S'n\x00\x00\x00'
tRp7928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7929
I0
sg6379
g7135
sS'block_loop.thisRepN'
p7930
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7931
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7932
Nsg69
Vn
sS'block_loop.thisTrialN'
p7933
I0
sg39
F0.66687716389424168
sg34
g752
(S'\x07\xdf\n\x10\x13+1\x0b\xf2\x98'
tRp7934
sa(dp7935
S'trial_loop.thisTrialN'
p7936
I111
sg6370
g6986
sS'block_loop.thisIndex'
p7937
g6364
sg38
S'right'
p7938
sg58
g62
sS'trial_loop.thisN'
p7939
I111
sg33
g6660
sg63
g64
sS'trial_loop.thisIndex'
p7940
g59
(g98
S'o\x00\x00\x00'
tRp7941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7942
I0
sg6379
g6993
sS'block_loop.thisRepN'
p7943
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7944
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p7945
Nsg69
Vn
sS'block_loop.thisTrialN'
p7946
I0
sg39
F0.85021530587982852
sg34
g752
(S'\x07\xdf\n\x10\x13+7\x07\x81\xe0'
tRp7947
sa(dp7948
S'trial_loop.thisTrialN'
p7949
I112
sg6370
g6525
sS'block_loop.thisIndex'
p7950
g6364
sg38
S'left'
p7951
sg58
g62
sS'trial_loop.thisN'
p7952
I112
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p7953
g59
(g98
S'p\x00\x00\x00'
tRp7954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7955
I0
sg6379
g6532
sS'block_loop.thisRepN'
p7956
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7957
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p7958
Nsg69
Vn
sS'block_loop.thisTrialN'
p7959
I0
sg39
F0.76685897464631125
sg34
g752
(S'\x07\xdf\n\x10\x13,\x01\x05\xb4\xf0'
tRp7960
sa(dp7961
S'trial_loop.thisTrialN'
p7962
I113
sg6370
g6857
sS'block_loop.thisIndex'
p7963
g6364
sg38
S'right'
p7964
sg58
g62
sS'trial_loop.thisN'
p7965
I113
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p7966
g59
(g98
S'q\x00\x00\x00'
tRp7967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7968
I0
sg6379
g6864
sS'block_loop.thisRepN'
p7969
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7970
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p7971
Nsg69
Vn
sS'block_loop.thisTrialN'
p7972
I0
sg39
F0.85011295575532131
sg34
g752
(S'\x07\xdf\n\x10\x13,\x07\x02\xb3h'
tRp7973
sa(dp7974
S'trial_loop.thisTrialN'
p7975
I114
sg6370
g6540
sS'block_loop.thisIndex'
p7976
g6364
sg38
S'right'
p7977
sg58
g62
sS'trial_loop.thisN'
p7978
I114
sg33
g6544
sg63
g64
sS'trial_loop.thisIndex'
p7979
g59
(g98
S'r\x00\x00\x00'
tRp7980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7981
I0
sg6379
g6548
sS'block_loop.thisRepN'
p7982
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7983
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p7984
Nsg69
Vn
sS'block_loop.thisTrialN'
p7985
I0
sg39
F0.88352442489849636
sg34
g752
(S'\x07\xdf\n\x10\x13,\r\x00\xe2\x90'
tRp7986
sa(dp7987
S'trial_loop.thisTrialN'
p7988
I115
sg6370
g6425
sS'block_loop.thisIndex'
p7989
g6364
sg38
S'left'
p7990
sg58
g62
sS'trial_loop.thisN'
p7991
I115
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p7992
g59
(g98
S's\x00\x00\x00'
tRp7993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7994
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7995
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7996
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7997
Nsg69
Vn
sS'block_loop.thisTrialN'
p7998
I0
sg39
F0.733545864255575
sg34
g752
(S'\x07\xdf\n\x10\x13,\x12\x0e\xcd\x10'
tRp7999
sa(dp8000
S'trial_loop.thisTrialN'
p8001
I116
sg6370
g7515
sS'block_loop.thisIndex'
p8002
g6364
sg38
S'left'
p8003
sg58
g62
sS'trial_loop.thisN'
p8004
I116
sg33
g7519
sg63
g64
sS'trial_loop.thisIndex'
p8005
g59
(g98
S't\x00\x00\x00'
tRp8006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8007
I0
sg6379
g7523
sS'block_loop.thisRepN'
p8008
I2
sg6382
g7519
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8009
I2
sg6384
g7526
sg55
g11
sS'block_loop.thisTrial'
p8010
Nsg69
Vn
sS'block_loop.thisTrialN'
p8011
I0
sg39
F0.95010930650460068
sg34
g752
(S'\x07\xdf\n\x10\x13,\x18\x0bRp'
tRp8012
sa(dp8013
S'trial_loop.thisTrialN'
p8014
I117
sg6370
g6750
sS'block_loop.thisIndex'
p8015
g6364
sg38
S'left'
p8016
sg58
g62
sS'trial_loop.thisN'
p8017
I117
sg33
g6760
sg63
g64
sS'trial_loop.thisIndex'
p8018
g59
(g98
S'u\x00\x00\x00'
tRp8019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8020
I0
sg6379
g6758
sS'block_loop.thisRepN'
p8021
I2
sg6382
g6760
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8022
I2
sg6384
g6754
sg55
g11
sS'block_loop.thisTrial'
p8023
Nsg69
Vn
sS'block_loop.thisTrialN'
p8024
I0
sg39
F0.70060737240419257
sg34
g752
(S'\x07\xdf\n\x10\x13,\x1e\n\xf0\xc8'
tRp8025
sa(dp8026
S'trial_loop.thisTrialN'
p8027
I118
sg6370
g7338
sS'block_loop.thisIndex'
p8028
g6364
sg38
S'right'
p8029
sg58
g62
sS'trial_loop.thisN'
p8030
I118
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p8031
g59
(g98
S'v\x00\x00\x00'
tRp8032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8033
I0
sg6379
g7345
sS'block_loop.thisRepN'
p8034
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8035
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p8036
Nsg69
Vn
sS'block_loop.thisTrialN'
p8037
I0
sg39
F0.9834266933685285
sg34
g752
(S'\x07\xdf\n\x10\x13,$\x06\xfd\x10'
tRp8038
sa(dp8039
S'trial_loop.thisTrialN'
p8040
I119
sg6370
g6425
sS'block_loop.thisIndex'
p8041
g6364
sg38
S'left'
p8042
sg58
g62
sS'trial_loop.thisN'
p8043
I119
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8044
g59
(g98
S'w\x00\x00\x00'
tRp8045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8046
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8047
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8048
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8049
Nsg69
Vn
sS'block_loop.thisTrialN'
p8050
I0
sg39
F0.750203844938369
sg34
g752
(S'\x07\xdf\n\x10\x13,*\x07\x14\x80'
tRp8051
sa(dp8052
S'trial_loop.thisTrialN'
p8053
I120
sg6370
g6408
sS'block_loop.thisIndex'
p8054
g6364
sg38
S'left'
p8055
sg58
g62
sS'trial_loop.thisN'
p8056
I120
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8057
g59
(g98
S'x\x00\x00\x00'
tRp8058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8059
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8060
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8061
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8062
Nsg69
Vn
sS'block_loop.thisTrialN'
p8063
I0
sg39
F0.96656800380878849
sg34
g752
(S'\x07\xdf\n\x10\x13,0\x03\xd8`'
tRp8064
sa(dp8065
S'trial_loop.thisTrialN'
p8066
I121
sg6370
g7515
sS'block_loop.thisIndex'
p8067
g6364
sg38
S'left'
p8068
sg58
g62
sS'trial_loop.thisN'
p8069
I121
sg33
g7519
sg63
g64
sS'trial_loop.thisIndex'
p8070
g59
(g98
S'y\x00\x00\x00'
tRp8071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8072
I0
sg6379
g7523
sS'block_loop.thisRepN'
p8073
I2
sg6382
g7519
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8074
I2
sg6384
g7526
sg55
g11
sS'block_loop.thisTrial'
p8075
Nsg69
Vn
sS'block_loop.thisTrialN'
p8076
I0
sg39
F0.86677720859734109
sg34
g752
(S'\x07\xdf\n\x10\x13,6\x03\xef\xd0'
tRp8077
sa(dp8078
S'trial_loop.thisTrialN'
p8079
I122
sg6370
g6842
sS'block_loop.thisIndex'
p8080
g6364
sg38
S'left'
p8081
sg58
g62
sS'trial_loop.thisN'
p8082
I122
sg33
g6544
sg63
g64
sS'trial_loop.thisIndex'
p8083
g59
(g98
S'z\x00\x00\x00'
tRp8084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8085
I0
sg6379
g6849
sS'block_loop.thisRepN'
p8086
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8087
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p8088
Nsg69
Vn
sS'block_loop.thisTrialN'
p8089
I0
sg39
F1.316985444042075
sg34
g752
(S'\x07\xdf\n\x10\x13-\x00\x02Y\x90'
tRp8090
sa(dp8091
S'trial_loop.thisTrialN'
p8092
I123
sg6370
g7353
sS'block_loop.thisIndex'
p8093
g6364
sg38
S'left'
p8094
sg58
g62
sS'trial_loop.thisN'
p8095
I123
sg33
g7074
sg63
g64
sS'trial_loop.thisIndex'
p8096
g59
(g98
S'{\x00\x00\x00'
tRp8097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8098
I0
sg6379
g7360
sS'block_loop.thisRepN'
p8099
I2
sg6382
g7074
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8100
I2
sg6384
g7081
sg55
g11
sS'block_loop.thisTrial'
p8101
Nsg69
Vn
sS'block_loop.thisTrialN'
p8102
I0
sg39
F0.76686040014465107
sg34
g752
(S'\x07\xdf\n\x10\x13-\x06\x07\xb0\xc0'
tRp8103
sa(dp8104
S'trial_loop.thisTrialN'
p8105
I124
sg6370
g6634
sS'block_loop.thisIndex'
p8106
g6364
sg38
S'left'
p8107
sg58
g62
sS'trial_loop.thisN'
p8108
I124
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p8109
g59
(g98
S'|\x00\x00\x00'
tRp8110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8111
I0
sg6379
g6641
sS'block_loop.thisRepN'
p8112
I2
sg6382
g6604
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8113
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vn
sS'block_loop.thisTrialN'
p8115
I0
sg39
F0.7168129028432304
sg34
g752
(S'\x07\xdf\n\x10\x13-\x0c\x04\xaf8'
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g7070
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'right'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g7074
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g7078
sS'block_loop.thisRepN'
p8125
I2
sg6382
g7074
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8126
I2
sg6384
g7081
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vn
sS'block_loop.thisTrialN'
p8128
I0
sg39
F0.95019084447994828
sg34
g752
(S'\x07\xdf\n\x10\x13-\x12\x00\xbb\x80'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g6634
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'left'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g6641
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6604
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8139
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vn
sS'block_loop.thisTrialN'
p8141
I0
sg39
F0.83357471615454415
sg34
g752
(S'\x07\xdf\n\x10\x13-\x18\x00\x94p'
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g7338
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'right'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g7345
sS'block_loop.thisRepN'
p8151
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8152
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vn
sS'block_loop.thisTrialN'
p8154
I0
sg39
F0.93352459595917026
sg34
g752
(S'\x07\xdf\n\x10\x13-\x1d\r\xcb@'
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g7001
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'right'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g7008
sS'block_loop.thisRepN'
p8164
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vn
sS'block_loop.thisTrialN'
p8167
I0
sg39
F0.78385907272604527
sg34
g752
(S'\x07\xdf\n\x10\x13-#\r+\x18'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g6857
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'right'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g6864
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vn
sS'block_loop.thisTrialN'
p8180
I0
sg39
F0.7501425489099347
sg34
g752
(S'\x07\xdf\n\x10\x13-)\nh\x10'
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g6898
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'left'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6812
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g6905
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6812
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6384
g6819
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vn
sS'block_loop.thisTrialN'
p8193
I0
sg39
F0.81688195354217896
sg34
g752
(S'\x07\xdf\n\x10\x13-/\x07(\x08'
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g6793
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'right'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g6800
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vn
sS'block_loop.thisTrialN'
p8206
I0
sg39
F0.95018172135314671
sg34
g752
(S'\x07\xdf\n\x10\x13-5\x04\xde\x18'
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g7353
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'left'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g7074
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g7360
sS'block_loop.thisRepN'
p8216
I2
sg6382
g7074
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6384
g7081
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vn
sS'block_loop.thisTrialN'
p8219
I0
sg39
F0.83343843940383522
sg34
g752
(S'\x07\xdf\n\x10\x13-;\x04\xba\xf0'
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g7368
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'right'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6581
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g7375
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vn
sS'block_loop.thisTrialN'
p8232
I0
sg39
F0.90012025426403852
sg34
g752
(S'\x07\xdf\n\x10\x13.\x05\x02\xab\x98'
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g6958
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'right'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g6965
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vn
sS'block_loop.thisTrialN'
p8245
I0
sg39
F0.73363852105103433
sg34
g752
(S'\x07\xdf\n\x10\x13.\x0b\x01\x92X'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g7128
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'left'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g7135
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vn
sS'block_loop.thisTrialN'
p8258
I0
sg39
F0.7835480310022831
sg34
g752
(S'\x07\xdf\n\x10\x13.\x10\rY\xf8'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g6692
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'right'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g6621
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g6699
sS'block_loop.thisRepN'
p8268
I2
sg6382
g6621
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6384
g6628
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vn
sS'block_loop.thisTrialN'
p8271
I0
sg39
F1.4501646154822083
sg34
g752
(S'\x07\xdf\n\x10\x13.\x16\n\x96\xf0'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g7353
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'left'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g7074
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g7360
sS'block_loop.thisRepN'
p8281
I2
sg6382
g7074
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6384
g7081
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vn
sS'block_loop.thisTrialN'
p8284
I0
sg39
F0.68345417679665843
sg34
g752
(S'\x07\xdf\n\x10\x13.\x1d\x02\x90@'
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g6617
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'left'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6621
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g6625
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6621
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6384
g6628
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vn
sS'block_loop.thisTrialN'
p8297
I0
sg39
F1.6668620537020615
sg34
g752
(S'\x07\xdf\n\x10\x13."\r\xa0H'
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g6793
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'right'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g6800
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vn
sS'block_loop.thisTrialN'
p8310
I0
sg39
F1.1168290963978507
sg34
g752
(S'\x07\xdf\n\x10\x13.)\x08\xf1\x10'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g7087
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'left'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6951
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g7094
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6384
g6945
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vn
sS'block_loop.thisTrialN'
p8323
I0
sg39
F1.5334730502727325
sg34
g752
(S'\x07\xdf\n\x10\x13./\x0b+`'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g7740
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'right'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g7519
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g7747
sS'block_loop.thisRepN'
p8333
I2
sg6382
g7519
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6384
g7526
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vn
sS'block_loop.thisTrialN'
p8336
I0
sg39
F0.70011472336045699
sg34
g752
(S'\x07\xdf\n\x10\x13.6\x04\x93\xe0'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g7435
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'left'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g7442
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vn
sS'block_loop.thisTrialN'
p8349
I0
sg39
F0.75010805207421072
sg34
g752
(S'\x07\xdf\n\x10\x13/\x00\x00\xa0('
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g6540
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'right'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6544
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g6548
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vn
sS'block_loop.thisTrialN'
p8362
I0
sg39
F0.78352408278442454
sg34
g752
(S'\x07\xdf\n\x10\x13/\x05\x0cg\xc8'
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g6425
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'left'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vn
sS'block_loop.thisTrialN'
p8375
I0
sg39
F1.166869466251228
sg34
g752
(S'\x07\xdf\n\x10\x13/\x0b\t\xa0\xd8'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g6600
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'right'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g6608
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6604
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vn
sS'block_loop.thisTrialN'
p8388
I0
sg39
F1.1668509348965017
sg34
g752
(S'\x07\xdf\n\x10\x13/\x11\x0c\xd1@'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g7070
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'right'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g7081
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g7078
sS'block_loop.thisRepN'
p8398
I2
sg6382
g7074
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g7081
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vn
sS'block_loop.thisTrialN'
p8401
I0
sg39
F0.95009647710685385
sg34
g752
(S'\x07\xdf\n\x10\x13/\x18\x00\x84\xd0'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g6842
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'left'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6544
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g6849
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vn
sS'block_loop.thisTrialN'
p8414
I0
sg39
F1.2668755103295553
sg34
g752
(S'\x07\xdf\n\x10\x13/\x1e\x00]\xc0'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g6474
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'right'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g6482
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.66677253299712902
sg34
g752
(S'\x07\xdf\n\x10\x13/$\x04\xf9p'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g7001
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'right'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g7008
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F0.88354409665043931
sg34
g752
(S'\x07\xdf\n\x10\x13/*\x00N '
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6391
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'right'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F0.75015908458590275
sg34
g752
(S'\x07\xdf\n\x10\x13//\x0e<\x88'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g7070
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'right'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g7081
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g7078
sS'block_loop.thisRepN'
p8463
I2
sg6382
g7074
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g7081
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.98351022702991031
sg34
g752
(S'\x07\xdf\n\x10\x13/5\n\xfc\x80'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g7368
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'right'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g7375
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F0.96686250986385858
sg34
g752
(S'\x07\xdf\n\x10\x13/;\x0bRp'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g6857
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'right'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g6864
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F0.91680702982557705
sg34
g752
(S'\x07\xdf\n\x10\x130\x05\x0b+`'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6459
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'right'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6466
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F0.84999692094424972
sg34
g752
(S'\x07\xdf\n\x10\x130\x0b\n\x8f '
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g6371
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'right'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.71728245895792497
sg34
g752
(S'\x07\xdf\n\x10\x130\x11\x08\xbeH'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g7368
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'right'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g7375
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.95019284017325845
sg34
g752
(S'\x07\xdf\n\x10\x130\x17\x04\xca\x90'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g6898
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'left'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6812
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g6905
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6812
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6819
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.96676215543266153
sg34
g752
(S'\x07\xdf\n\x10\x130\x1d\x04\xa3\x80'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g6692
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'right'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6621
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g6699
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6621
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g6628
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F1.1667597035921062
sg34
g752
(S'\x07\xdf\n\x10\x130#\x04|p'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6958
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'right'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6965
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F0.7165075630764477
sg34
g752
(S'\x07\xdf\n\x10\x130)\x07\xac\xd8'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6941
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'right'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6951
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6949
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6945
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F1.2335926203013514
sg34
g752
(S'\x07\xdf\n\x10\x130/\x03\xb9 '
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g7515
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'left'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g7526
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g7523
sS'block_loop.thisRepN'
p8593
I2
sg6382
g7519
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g7526
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.7501006395323202
sg34
g752
(S'\x07\xdf\n\x10\x1305\x07\xdb\xb8'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g6926
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'right'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6829
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g6933
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g6836
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F1.0834432860647212
sg34
g752
(S'\x07\xdf\n\x10\x130;\x04\x9f\x98'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g6391
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'right'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F0.6668651897853124
sg34
g752
(S'\x07\xdf\n\x10\x131\x05\x06`\xd0'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g7070
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'right'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g7074
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g7078
sS'block_loop.thisRepN'
p8632
I2
sg6382
g7074
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g7081
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F0.75022209120652406
sg34
g752
(S'\x07\xdf\n\x10\x131\x0b\x01\xb5\x80'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g7338
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g7345
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.96676871267845854
sg34
g752
(S'\x07\xdf\n\x10\x131\x10\r\xbb\xa0'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6825
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'left'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6829
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6833
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6836
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F0.81727168225916103
sg34
g752
(S'\x07\xdf\n\x10\x131\x16\r\xd3\x10'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g7001
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'right'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g7008
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F0.81685486924106954
sg34
g752
(S'\x07\xdf\n\x10\x131\x1c\x0b\x89 '
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g6941
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'right'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6945
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g6949
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g6945
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F1.0834581111412263
sg34
g752
(S'\x07\xdf\n\x10\x131"\t?0'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g7001
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'right'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g7008
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.75018274770991411
sg34
g752
(S'\x07\xdf\n\x10\x131(\x0b\x00h'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g7128
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'left'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g7135
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.68345531718659913
sg34
g752
(S'\x07\xdf\n\x10\x131.\x07\xc4H'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g7016
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'right'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6760
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g7023
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6760
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6754
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F0.85017995374801103
sg34
g752
(S'\x07\xdf\n\x10\x1314\x03S\x90'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g7128
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'left'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g7135
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F0.83355532950372435
sg34
g752
(S'\x07\xdf\n\x10\x131:\x01\x82\xb8'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g6442
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'left'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.74994839729333762
sg34
g752
(S'\x07\xdf\n\x10\x132\x03\x0e\xb9\x88'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g6825
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'left'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6829
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g6833
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6836
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.76686382131447317
sg34
g752
(S'\x07\xdf\n\x10\x132\t\x0b}h'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6408
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'left'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F1.033426294234232
sg34
g752
(S'\x07\xdf\n\x10\x132\x0f\x08{\xe0'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g6508
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'left'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g6516
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F1.983460334908159
sg34
g752
(S'\x07\xdf\n\x10\x132\x15\t\x85\x80'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g6474
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g6482
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F0.63355093899735948
sg34
g752
(S'\x07\xdf\n\x10\x132\x1c\t\x99\x08'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6842
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'left'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6544
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6849
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.86678747211408336
sg34
g752
(S'\x07\xdf\n\x10\x132"\x04\xaf8'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g7087
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'left'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6951
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g7094
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g6945
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.91686404938809574
sg34
g752
(S'\x07\xdf\n\x10\x132(\x03\x1c\xe0'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g6508
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'left'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g6516
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.68347498893854208
sg34
g752
(S'\x07\xdf\n\x10\x132.\x02>8'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g6808
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'right'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6812
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g6816
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6812
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6819
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F0.61679944623028859
sg34
g752
(S'\x07\xdf\n\x10\x1323\rR('
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g7435
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'left'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g7442
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.68352345556922955
sg34
g752
(S'\x07\xdf\n\x10\x1329\x07\xef@'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g7338
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'right'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g7345
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F0.88394209321268136
sg34
g752
(S'\x07\xdf\n\x10\x133\x03\x03\x82p'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g7435
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'left'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g7442
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F0.68350891557929572
sg34
g752
(S'\x07\xdf\n\x10\x133\t\x02i0'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g6634
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'left'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g6641
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6604
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F0.76681221860781079
sg34
g752
(S'\x07\xdf\n\x10\x133\x0e\r:\xb8'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g7087
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'left'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6951
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g7094
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6945
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F0.88353383312642109
sg34
g752
(S'\x07\xdf\n\x10\x133\x14\n90'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g7016
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'right'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6760
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g7023
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6760
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6754
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F0.73348713410814526
sg34
g752
(S'\x07\xdf\n\x10\x133\x1a\x08\xe5X'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g6958
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'right'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g6965
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.76656104742141906
sg34
g752
(S'\x07\xdf\n\x10\x133 \x05j\xb8'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g7435
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'left'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g7442
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.68353485948318848
sg34
g752
(S'\x07\xdf\n\x10\x133&\x02*\xb0'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g6720
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'left'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g6728
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F0.70011728924146155
sg34
g752
(S'\x07\xdf\n\x10\x133+\r>\xa0'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g6649
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'left'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6660
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g6657
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F0.78344368519901764
sg34
g752
(S'\x07\xdf\n\x10\x1331\t\x0ch'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g6474
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'right'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g6482
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F0.61673415882250993
sg34
g752
(S'\x07\xdf\n\x10\x1337\x06I`'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g6491
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'left'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g6499
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F0.76677144962013699
sg34
g752
(S'\x07\xdf\n\x10\x134\x01\x01!\x10'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6926
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'right'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6829
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6933
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g6836
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F0.66682242511160439
sg34
g752
(S"\x07\xdf\n\x10\x134\x06\r'0"
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g6649
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'left'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6653
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g6657
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F0.76689233109937049
sg34
g752
(S'\x07\xdf\n\x10\x134\x0c\x08\xba`'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g7740
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'right'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g7519
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g7747
sS'block_loop.thisRepN'
p9048
I2
sg6382
g7519
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g7526
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F0.63353297783760354
sg34
g752
(S'\x07\xdf\n\x10\x134\x12\x05zX'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6986
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'right'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6653
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6993
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F0.65015104482881725
sg34
g752
(S'\x07\xdf\n\x10\x134\x18\x00\x94p'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g7087
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'left'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6951
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g7094
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g6945
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F1.1667451636021724
sg34
g752
(S'\x07\xdf\n\x10\x134\x1d\n\xec\xe0'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g7740
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'right'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g7519
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g7747
sS'block_loop.thisRepN'
p9087
I2
sg6382
g7519
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g7526
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.65026593924994813
sg34
g752
(S'\x07\xdf\n\x10\x134#\r\xde\xc8'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I89
sg56
Vr
sg57
Vn
sg42
I511
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I89
sg55
g11
sg56
Vr
sg45
F0.11
sg42
I511
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I01
sg48
I25
sg47
g498
sg51
F30
sg46
F1.7600000000000005
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I81228624
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\xcd\xcc\x8c?\xaeGa?\xcd\xccL?\\\x8fB?\\\x8fB?\xcd\xcc\xcc?\x9a\x99\x99>\xb8\x1e\x85>\x8f\xc2u?\xd7\xa3\xb0?\xf6(\x9c?\xecQ\xb8?)\\\xcf?\\\x8f\x82?\x1f\x85\xab?\xecQ8?\xf6(\x9c?\x9a\x99\x99?\x1f\x85k?33\xb3?\\\x8f\xc2>\x8f\xc2\xb5?\xcd\xcc\x8c?\x9a\x99\xd9?{\x14\xae>\xaeG\xe1?\x8f\xc2u?\\\x8fB?\x9a\x99\x99?\\\x8f\xc2>33\xb3?q=\xca?\xcd\xccL?\\\x8f\x82?\x9a\x99\x99>{\x14\xae>\x00\x00\x80?\x14\xae\x87?H\xe1z?\xd7\xa3p?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S"H\xe1\xca?!\xb0:@\x87\x16\x01@!\xb0:@\x87\x161@\x96C\x13@\x96C#@\x87\x161@\xee|g@^\xba\xf9?\xa8\xc6\xdb?\xbaI\x84@1\x08\xb0@!\xb0\x1a@\xee|'@!\xb0\x82@\xc9v\x16@\x91\xed\xec?\xbaI$@\xa8\xc6\x9b?\xc9v&@b\x10@@\x08\xac\nA\xdb\xf9\xce?/\xdd\\@\xa8\xc6+@\xb2\x9d\x11Au\x93\x08@B`\xb5?B`E@\x91\xed\xec?\xfc\xa9i@/\xddL@\x87\x16\x81@!\xb0*@d;\xc3@\xbaI4@^\xba\xf9?\x96C\x13@\xa8\xc6\x0b@"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x1cB\x00\x00\xb0A\x00\x00\xc8A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\x18B\x00\x00\x98A\x00\x00\x90A\x00\x00\xa0@\x00\x00\x80A\x00\x00\x14B\x00\x00\x00@\x00\x00pA\x00\x00\xe0@\x00\x00\x08B\x00\x00\xd0A\x00\x00\x04B\x00\x00\xf8A\x00\x00\x10A\x00\x00\xd8A\x00\x00@A\x00\x00\x00A\x00\x00\x10B\x00\x00\x80@\x00\x00 A\x00\x00@@\x00\x00\x00\x00\x00\x00\xc0A\x00\x00\xe8A\x00\x00PA\x00\x00\xb8A\x00\x00\x88A\x00\x00\xf0A\x00\x00\x00B\x00\x00`A\x00\x00\x80?\x00\x00\xe0A\x00\x00\x0cB\x00\x00\xc0@\x00\x000A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\xcd\xcc\x8c?\x9a\x99\xd9?33\xb3?\xcd\xcc\x8c?\x00\x00\x80?\xcd\xcc\x8c?ff\xa6?ff\xa6?\x00\x00\x00@\xcd\xcc\xcc?\x00\x00\x80?ff\xa6?\x9a\x99\xd9?\x9a\x99\xd9?ff\xe6?ff\xe6?\x9a\x99\xd9?\x00\x00\xc0?\x00\x00\xc0?33\xb3?\x00\x00\xc0?\x9a\x99\xd9?\x00\x00\xc0?\x9a\x99\xd9?\x00\x00\x00@ff\xa6?\x00\x00\x00@33\xb3?\x9a\x99\x99?ff\xe6?33\xb3?\xcd\xcc\x8c?33\xb3?\x00\x00\x00@33\xb3?\xcd\xcc\x8c?\x9a\x99\x99?\x9a\x99\xd9?\x9a\x99\xd9?\x9a\x99\xd9?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\x1a\x00\x00\x00#\x00\x00\x00\x0b\x00\x00\x00\x19\x00\x00\x00\x17\x00\x00\x00\x08\x00\x00\x00&\x00\x00\x00\r\x00\x00\x00\x15\x00\x00\x00\x12\x00\x00\x00\x18\x00\x00\x00\'\x00\x00\x00\x14\x00\x00\x00\x1d\x00\x00\x00"\x00\x00\x00\x0c\x00\x00\x00\t\x00\x00\x00\x1f\x00\x00\x00\x07\x00\x00\x00\x06\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x1b\x00\x00\x00\x02\x00\x00\x00\x0f\x00\x00\x00\x13\x00\x00\x00$\x00\x00\x00\x1c\x00\x00\x00 \x00\x00\x00\x11\x00\x00\x00!\x00\x00\x00\x10\x00\x00\x00\x0e\x00\x00\x00%\x00\x00\x00\x16\x00\x00\x00\n\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g375
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g256
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g277
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g242
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g249
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g368
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g235
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g228
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g137
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g214
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g361
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g116
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g207
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g151
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g340
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g284
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g333
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g319
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g165
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g291
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g186
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g158
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g354
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g130
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g172
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g123
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g102
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g270
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g305
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g193
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g263
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g221
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g312
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g326
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g200
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g109
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g298
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g347
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g144
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g179
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I81228624
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x90@\x00\x00\xc0@\x00\x00\xc0@\x9a\x99\xb9@\x9a\x99y@ff\xa6@\x9a\x99Y@\x00\x00\xc0@333@33\xb3@ff&@\x00\x00`@\x00\x00\x90@\x00\x00\xc0@\x9a\x99\x19@333@33S@ff\x96@\x00\x00\x00@33\x93@\x00\x00\xc0@\x00\x00\xc0@\x9a\x99\xb9@\x00\x00\xc0@\x00\x00\xc0@ff\x86@\x00\x00\xc0@33\xf3?\x9a\x99y@\x00\x00\x80@\x00\x00\xc0@\x00\x00\xc0@\x9a\x99y@ff\x86@\xcd\xcc\x0c@\x00\x00\x80@33S@ff\xa6@\x9a\x99y@\x9a\x99\x99@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S"\x8b\xbb[@\\\x12\xb1?\xc4\xab\xca?\xddg\x86?\xa9D\x04@\x17\x0f\xb1?\x04y\xf7?\x90\xbe\x9b?n5\xb3?\xa8WU@\x1c{\xf7?u\x8e\xa8?\x06e\xc6?\x84i\xa6?=W\x15@\xe0&\xc2?\xd4\x9a\xd9?\xd4y\xf7?6G4@`V\x95?\x08i\x06@\xd2\xb3\x8a?\x19\xb9\xfb?~#\xa2?\xe1W\xb5?k\xce\x8c?a\xf4\xae?|\xee\xce?\x97\xbd\x9b?\xc1a\x06@\xf3#\xe2?\xe4\x10Q@\xc3e\xee@'N\x95?\x1dV\xf5?\xe63\xf3?\xab\x9e\x99?*y\xb7?\x8cB\xa4?QY\xd5?"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'33s@fff@333@\x9a\x99y@fff@fff@\x9a\x99Y@\x9a\x99\x89@333@33S@33S@\x00\x00`@ff\x86@fff@33S@333@33S@\x00\x00@@\xcd\xccL@33S@33\x83@\xcd\xccl@\xcd\xccl@\x9a\x99Y@\x9a\x99\x89@ff\x86@\x9a\x99y@ffF@\x00\x00@@\x00\x00\x80@\x9a\x99\x89@\xcd\xccL@\x9a\x999@ff\x86@33s@33s@33S@fff@\x9a\x99y@\x00\x00@@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'@5\xc2\x04\x006\xc2\x04\xc0\xa0\xc0\x04\x80\xa0\xc0\x04\xa0;\xc2\x04\xa0\x8f\xbd\x0c\xc0f\xbf\x0c@\x8f\xbd\x0c\xc0c\xbf\x0c\xa0\x8c\xbd\x0c`8\xc2\x04 8\xc2\x04\x003\xc1\x04`=\xc2\x04`\x8f\xbd\x0c\x80:\xc2\x04\x804\xc2\x04\x80b\xbf\x0c\xa0e\xbf\x0c g\xbf\x0c`\xa0\xc0\x04 \xa0\xc0\x04\xa0:\xc1\x04\xa0\xc07\x03 \xc07\x03`\xc17\x03 \xc27\x03`\xc07\x03\x00\xc17\x03\xc0\xc17\x03@\xc17\x03\x80\xc27\x03@\xc37\x03@\xc07\x03 \xc37\x03\xe0\xc17\x03`\xc27\x03\x80\xc57\x03\xc0\xc07\x03 \xc17\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'/\xdd<@\xdb\xf9\x8e?+\x87\xa6?\x0e-\xe2?T\xe3\x1d@\x83\xc0\xaa?^\xba\x99?B`\x95?\xb6\xf3\x1d?\x83\xc0\xea?B`\x05@\xbcts?\x87\x16\x01@\x0e-\xa2?\xdb\xf9\x8e?\xf0\xa7&?\x0e-\x82?u\x93(@u\x93\x88?\xc5 \xe0?\xf8S\xb3?\x91\xed\x8c?\xa8\xc6\xdb?P\x8d\x97?\x83\xc0\x8a?\xe9&\x91?\x0e-\xa2?\xa0\x1a\x8f?b\x10\x00@\x83\xc0*?\xdb\xf9\xae?\xbaI$@\xbcts?m\xe7{?^\xba\x99?\xe9&\xf1?\xd9\xce7?+\x87\x86?\x06\x81U?T\xe3\r@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I81228624
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'`\xf57\x03\x98 \xff\x0c\xd0\xf47\x030\xf57\x03\xa0\xf47\x03\xd0\xf47\x03\xb0!\xff\x0c`\xf57\x03\xd8!\xff\x0c\xb0!\xff\x0c\x88!\xff\x0c8!\xff\x0c0\xf57\x03\xe8 \xff\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'\x88ja\x04\xf0\xf8\xb1\x04(*G\x02\xb0y\xb1\x04\x10}\xb1\x04\xf8v\xb1\x04\xd8r\xb1\x04\xc0~\xb1\x04\xd8x\xb1\x048|\xb1\x04\x90u\xb1\x04\x98|\xb1\x04H{\xb1\x04\xa0t\xb1\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g788
sg82
g789
sg83
g793
sg84
g794
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g766
sg82
g799
sg83
g771
sg84
g803
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g808
sg82
g809
sg83
g813
sg84
g814
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g743
sg82
g819
sg83
g748
sg84
g823
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g828
sg82
g829
sg83
g833
sg84
g834
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g808
sg82
g839
sg83
g813
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g755
sg82
g848
sg83
g760
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g828
sg82
g857
sg83
g833
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g777
sg82
g866
sg83
g782
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g788
sg82
g875
sg83
g793
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I81228624
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I81228624
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'\xd0Q\x01\r\x80x5\x03`A\x01\r\x88A\x01\r\xe0y5\x03`A\x01\r\xb0A\x01\r0R\x01\r\x80x5\x03\xd0\xf5\x00\r\xd8A\x01\r`v5\x03@Q\x01\r\xd8A\x01\r\x00B\x01\r\x10Q\x01\r\xd0Q\x01\r\xe0y5\x03\x90R\x01\r\x80x5\x03\xe8\xf6\x00\r@\xf6\x00\r\x80x5\x03@Q\x01\r@\xf6\x00\r@Q\x01\r\xe0P\x01\r\xa0{5\x03`v5\x03(B\x01\r\xc0u5\x03\x90C\x01\r\xa0{5\x03pQ\x01\r@Q\x01\r\x90R\x01\r\xa0{5\x03@Q\x01\r\xe0y5\x03\xe8\xf6\x00\rPB\x01\rxB\x01\r\x10Q\x01\r`A\x01\r@Q\x01\r\xb0A\x01\rPB\x01\r@\xf6\x00\r\x10Q\x01\r@Q\x01\rPB\x01\r\x00R\x01\r\xf0R\x01\r\x08\xf6\x00\r\xd0\xf5\x00\r\x80x5\x03\xa0Q\x01\r\xb0A\x01\r\x00B\x01\r\x18C\x01\r\xe0y5\x03\x18C\x01\rPB\x01\r\x10Q\x01\r\xc0R\x01\r\xe0P\x01\r`A\x01\r\xa0{5\x03\xf0R\x01\r\x10Q\x01\r\xe8\xf6\x00\rpQ\x01\rhC\x01\rxB\x01\r`v5\x03(B\x01\r\xa0Q\x01\r\xe0y5\x03\xd8A\x01\r\x88A\x01\r(B\x01\r\x08\xf6\x00\r\x00B\x01\r\xd0Q\x01\rpQ\x01\r\x00B\x01\r\xd0Q\x01\rPB\x01\r\x08\xf6\x00\rxB\x01\r`v5\x03\xd8A\x01\r\xd0\xf5\x00\r\x00B\x01\r@\xf6\x00\r\x00B\x01\rhC\x01\r\xd0\xf5\x00\r\xe0y5\x03\xd8A\x01\r(B\x01\r`A\x01\rhC\x01\r\xe0y5\x03\x10Q\x01\rpQ\x01\r\xa0{5\x03\xc8B\x01\r\x18C\x01\r\x88A\x01\r\x10Q\x01\r`A\x01\r(B\x01\r\xa0Q\x01\r\x90C\x01\r\xe0P\x01\r\x00B\x01\r\xd0\xf5\x00\r@\xf6\x00\r\xa0{5\x03\xb0A\x01\r\xb0\xf6\x00\rPB\x01\r\x08\xf6\x00\r\x10Q\x01\r\x80x5\x03PB\x01\r\x00R\x01\r\xd0\xf5\x00\r\x88A\x01\r\xf0R\x01\r\xc0R\x01\rPB\x01\r\x88A\x01\rx\xf6\x00\r\xe0y5\x03x\xf6\x00\r\xb0A\x01\r\x80x5\x03\xc0R\x01\r\x80u5\x03\x90C\x01\r \xf7\x00\r\xa0Q\x01\r(B\x01\r\xc0R\x01\r\x80x5\x03\xe0y5\x03@Q\x01\r\xa0Q\x01\r(B\x01\r\x90R\x01\r@C\x01\r \xf7\x00\r`v5\x03PB\x01\r\x88A\x01\r`v5\x03xB\x01\r\x08\xf6\x00\r\xe0P\x01\r\xf0B\x01\rxB\x01\r\xd8A\x01\r\xb0A\x01\r\x88A\x01\r\x08\xf6\x00\r\x00R\x01\r\xd8A\x01\r\xf0R\x01\r`v5\x03\xd8A\x01\r\x00B\x01\r\xd8A\x01\rpQ\x01\r`R\x01\r\xa0Q\x01\rpQ\x01\r\xa0{5\x03\xe0P\x01\r\xd0\xf5\x00\r`A\x01\r\xc0R\x01\r\x00B\x01\r\x88A\x01\r\xa0{5\x03`A\x01\r\xd0\xf5\x00\rpQ\x01\r\x08\xf6\x00\r\xb8C\x01\r\xd0Q\x01\r\xd0\xf5\x00\r@Q\x01\r\xb0A\x01\r@\xf6\x00\r\x88A\x01\r\x10Q\x01\r@\xf6\x00\r`A\x01\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\xe0\xb9\xbf\x0c\x80j6\x03\xc0o6\x03\xc0n6\x03\x00n6\x03\x80o6\x03\xe0o6\x03 n6\x03\x00i6\x03\xe0n6\x03`n6\x03\xa0l6\x03`m6\x03`k6\x03\xe0l6\x03\xe0k6\x03`l6\x03`o6\x03@n6\x03\x00j6\x03 m6\x03\xa0k6\x03\xa0m6\x03\x00b6\x03 k6\x03 l6\x03\xc0-\xc0\x0c\x80C\xba\x0c\xe0G\xba\x0c\xa0B\xba\x0c\xa0L\xba\x0c\x00F\xba\x0c\x80K\xba\x0c\xa0C\xba\x0c M\xba\x0c@M\xba\x0c\x00G\xba\x0c\x00L\xba\x0c @\xba\x0c`M\xba\x0c`B\xba\x0c G\xba\x0c\xe0B\xba\x0c\x80F\xba\x0c\x80L\xba\x0c`G\xba\x0c@@\xba\x0c@G\xba\x0c\xc0K\xba\x0c K\xba\x0c`F\xba\x0c\x00K\xba\x0c\x00C\xba\x0c\xe0O\xba\x0c\xc0B\xba\x0c\xc0G\xba\x0c\x80G\xba\x0c@K\xba\x0c\xe0K\xba\x0c\xa0F\xba\x0c F\xba\x0c\x80B\xba\x0c\xa0G\xba\x0c\xe0m6\x03\x80\xb8\xbf\x0c@F\xba\x0c@C\xba\x0c\xe0\x1e\xc0\x04\x00\x1e\xc0\x04\x80\x1f\xc0\x04\x80\x1a\xc0\x04 \x1f\xc0\x04\xe0\x1f\xc0\x04\xe0F\xba\x0c\xa0\xd4\xc2\x04\xc0\xd0\xc2\x04\x80\xd3\xc2\x04\x80\xd9\xc2\x04\x00\xd5\xc2\x04\xe0\xda\xc2\x04 \xd3\xc2\x04\xa0\xda\xc2\x04`\xd1\xc2\x04 \xdc\xc2\x04\xe0\xd2\xc2\x04\xe0\xd3\xc2\x04\x00\xdb\xc2\x04\x00\xd3\xc2\x04\xc0\xdb\xc2\x04`\x1f\xc0\x04@\x83\xbc\x0c\x00\x89\xbc\x0c \x80\xbc\x0c\xe0\x80\xbc\x0c\x80\x80\xbc\x0c\xc0\x8a\xbc\x0c@\x81\xbc\x0c\xe0\x82\xbc\x0c\xa0\x80\xbc\x0c\xa0\x82\xbc\x0c\xc0\x80\xbc\x0c\xa0n6\x03\x00\x8b\xbc\x0c`#\xeb\x04\x80#\xeb\x04\xe0!\xeb\x04\xe0"\xeb\x04 $\xeb\x04\x00!\xeb\x04\xe0#\xeb\x04`"\xeb\x04@!\xeb\x04\xa0 \xeb\x04\x80!\xeb\x04\xc0#\xeb\x04 #\xeb\x04`$\xeb\x04\xc0"\xeb\x04\x00#\xeb\x04@%\xeb\x04\x00%\xeb\x04\xa0$\xeb\x04\x80%\xeb\x04`%\xeb\x04\xc0%\xeb\x04\xe0%\xeb\x04 "\xeb\x04@"\xeb\x04\x00&\xeb\x04 &\xeb\x04\x80&\xeb\x04\xa0&\xeb\x04\x80"\xeb\x04\xa0#\xeb\x04\xc0&\xeb\x04 %\xeb\x04\x80\'\xeb\x04\xa0%\xeb\x04\xa0!\xeb\x04\xc0!\xeb\x04\xe0\'\xeb\x04\xc0\'\xeb\x04\x00(\xeb\x04\xa0\'\xeb\x04`&\xeb\x04`(\xeb\x04@(\xeb\x04\xa0(\xeb\x04\x80(\xeb\x04\xc0$\xeb\x04\xc0(\xeb\x04 )\xeb\x04\x00)\xeb\x04\xe0 \xeb\x04@)\xeb\x04`)\xeb\x04\xc0)\xeb\x04\xa0)\xeb\x04`\'\xeb\x04\xe0)\xeb\x04@*\xeb\x04`*\xeb\x04\x80*\xeb\x04\xe0&\xeb\x04\xc0*\xeb\x04\xa0*\xeb\x04\x00\'\xeb\x04\xe0*\xeb\x04\x00+\xeb\x04 +\xeb\x04\x80+\xeb\x04`+\xeb\x04@&\xeb\x04\xa0+\xeb\x04\x00,\xeb\x04 ,\xeb\x04\x00"\xeb\x04`,\xeb\x04\x80,\xeb\x04 (\xeb\x04\xc0,\xeb\x04\xa0,\xeb\x04\x00-\xeb\x04\xe0,\xeb\x04@+\xeb\x04`-\xeb\x04@-\xeb\x04\xa0-\xeb\x04\x80-\xeb\x04\xe0-\xeb\x04\xc0\xda\xc2\x04 \'\xeb\x04 -\xeb\x04`.\xeb\x04\x80.\xeb\x04\x80$\xeb\x04@.\xeb\x04@\'\xeb\x04@,\xeb\x04\x80)\xeb\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'\xef\x03\xe0?\x03\x9d\x99?\xda\x8e\xa8?\xae|\xf7?W\xa0\x99?rY\x95?6z\x97? \x14\xb1?\x08\x17\xb1?\xe3\xc5\x9b?\x9a\xf4\xae?\x8f9\x93?\xc5\xbd\xfb?\x1c\x07\xa0?e{\x07@\xb2F\xe4?c}\x97?*z\xb7?(%\xc2?\xae\xd2\xcc?pX\x95?\x15w\xb7?\xc1_U?\x03k\x86?\xe2@\xb3?\xe0?s?\xd9\xae\xca?\xc7i\xc6?\xc4\xcd\x8c?{Zs?\x88\xb1\xaa?nZ\xb5?2\x03\x80?\xac\x05\x80?,\x12\x80?\xe3qf?\xb8\xe6]?\xda\xc1;?~|\x97?\xccJ\x84?\xc9\xe0\x9d?6d\xa6?\x1bH\xc4?\xf1\x89\x18@XTD?\xeb\xc1\xbb?-9\xb3?\xf3\x98\x99?\xb4mf?$Hb?2\x06\x80?\x15%\xc2?\xa1l\xe6?\xc6\xb0\xaa?\xd0\xc2\x9b?\xb7\x9d\x99?|\x02\xa0?oH\xe4?\xad\xbe\xbb?\xd0\xe4\x9d?\xe3\x8b\x88?\xf1[\x95?\x11\x17\x91?7\x03\x80?\xa7\xec\xae?\xba$\xc2?p\xad\xca?\xba\x8e\x88?_\x03\x80?S:s?\x08\x83w?\xfc\x85w?PF\x84?\x15\\f?)\xd9\x8c?g\x8b\xa8?\xd6\x9d\x99?\x8bl\x86?{i\xa6?5m\xa6?\xa8\xde\xfd?\x98\xeb]?\xd1\x9d\x99?\xa9Y\x95?\x1e\xcf\x1c@\xc6\x02\xc0?b\x8a\x08@\xc8\xf1\x8e?\xa7\xb0j?\xfb\x96\x99?\xae<s?\xc9\xfbn?2Z\x95?\xd5\x16\xd1?\x84\xdc{?\x1e\xf2\x8e?\xd04s?\x90L\x84?R\xc2;?\xf8\xb2j?\xddF\xc4?\x94\xb0j?L\xed\xae?\x19@s?X\xb1\x8a?\xb38\xb3?#~w?\xcc)b?\xdc;s?\xed\xff\xee?\xc3\xf4n?\x80JD?\xb2G\x84?\x9e\xbf\xdb?\x98D\x93?\xadG\xc4?C\xe2\x9d?\xfei\x86?\xdeC\x84?\xf5\x84w?9\x99\xf9?\x97\xa6Y?\xe4\xb6j?\xa5<s?\xe1l\xa6?\xca\'\x82?WG\x84?\xe8\x16\x91?\t|\x97?cJ\xc4?&$\xc2?M\xe4n?\xf2\xc1;?\xd2W\x15@\x9c\x9by@\x81\x8e\x88?\x06\xd1\xec?\x85H\xc4?"J\xa4?%\xdb\x9d?,\x89\x88@\x0f\x16\x91?\xe3\x19Q?r\xd2\xcc?\xe7\xb3\xaa?\x0e~H?e\xd6L?\x0b(\x82? \xbe\x9b?M4\xc2?\x0e\x8fH?:\xc2\x9b?\xd8\xbf\x9b?\xff~7?\x1c\x91H?L\xb4j?a\xf1\x1e@2\x92H?>\xea\x8e?\xcc\x17\xb1?\xe0Y\xd5?Y\x81w?\xa2\xb3;?\xbf\xb2j?x\xbb\xaa?\x9dz\xd7?X\xaf\x8a?Am\x86?\x07<s?\xa6\xa2\xb9?\xa7\xb0j?S\xe6]?\xea\xad\x8a?Z\x06@?t\'\xa2?`73?Xz\xd7?\xc8\x04\xa0?4\x95H?h\x80\x07@/\xb2j?09s?\x1dm7?w\x04\x80?\x9c\x9f\xd9?\xd4~7?E:3?\xa6\xa0Y?\xd1I\x84?\xd57\x93?\xa8qw?\x07\x06\xc0?m\xe9]?\r}7?\xe1\x89\x88?\xda\x8eH?\xdd\xf1\xae?Y63?&\x02@?D(b?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'\x80\x7f\xb1\x04\x98\x7f\xb1\x04\x18\xbe\xb6\x04\x88\xbd\xb6\x048\xb9\xb6\x04@\xbd\xb6\x04(\xb7\xb6\x04\xd8\xb2\xb6\x04X\xb1\xb6\x04\xe0\xb3\xb6\x04\x10\xba\xb6\x04\xc8\xbc\xb6\x04`\xb2\xb6\x04X\xb7\xb6\x04\xc0\xb8\xb6\x04@\xb1\xb6\x04`\xbe\xb6\x04(\xb1\xb6\x04\xb0\xb6\xb6\x04\x00\xb8\xb6\x04@\xb4\xb6\x04H\xb8\xb6\x04\xe0\xb9\xb6\x04\xa0\xba\xb6\x04\x00\xbe\xb6\x04 \xb3\xb6\x04\x90\xb5\xb6\x04p\xb7\xb6\x04\x90\xb8\xb6\x04\xc0\xbb\xb6\x048\xb3\xb6\x04\x80\xbf\xb6\x04\xd8\xb8\xb6\x04H\xb2\xb6\x04\xf8\xbc\xb6\x04\x08\xbf\xb6\x04\xa8\xb8\xb6\x04h\xbf\xb6\x04\xd0\xb7\xb6\x04\xd0\xb4\xb6\x04x\xb2\xb6\x04\xe0\xbc\xb6\x048\xb0\xb6\x04`\xbb\xb6\x04\xe0\xb6\xb6\x04\x98\xb9\xb6\x04P\xb9\xb6\x04\x90\xbe\xb6\x04\xc8\xbf\xb6\x04\xf0\xbe\xb6\x04@\xb7\xb6\x04\x88\xb4\xb6\x04\xd8\xbe\xb6\x04\xb8\xba\xb6\x04\x10\xbd\xb6\x04\xf0\xbb\xb6\x04h\xb3\xb6\x04\xf8\xb6\xb6\x04H\xbe\xb6\x040\xbb\xb6\x04\xa0\xbd\xb6\x04\xe0\xb0\xb6\x04\xc8\xb0\xb6\x04x\xbe\xb6\x04\xd0\xbd\xb6\x04\x98\xbf\xb6\x04\xe8\xb7\xb6\x04\x80\xb0\xb6\x04\xa8\xb5\xb6\x04\x88\xb1\xb6\x04\xe8\xbd\xb6\x04\xf0\xb8\xb6\x04\x90\xbb\xb6\x04 \xb9\xb6\x040\xbe\xb6\x04(\xbd\xb6\x04\xc0\xbe\xb6\x04\x88\xba\xb6\x04\xa0\xb7\xb6\x04X\xbd\xb6\x04\xe8\xb1\xb6\x04\x00\xbb\xb6\x04x\xb5\xb6\x048\xbf\xb6\x04\x18\xb2\xb6\x04\xc8\xb6\xb6\x04\xc8\xb9\xb6\x04(\xba\xb6\x04\xa8\xb2\xb6\x04\xb0\xb0\xb6\x04 \xbf\xb6\x04\xd0\xba\xb6\x04\x88\xb7\xb6\x04x\xbb\xb6\x04\xb0\xbf\xb6\x048S\xb6\x04\xf8P\xb6\x04\x10]\xb6\x04\x00U\xb6\x04\xa8R\xb6\x04\xa8X\xb6\x04 V\xb6\x04\xf0U\xb6\x04\xc8\\\xb6\x04HR\xb6\x04\x90R\xb6\x04@Q\xb6\x04\x10W\xb6\x04pQ\xb6\x04 \\\xb6\x04\x10Q\xb6\x04\x98P\xb6\x04P\\\xb6\x04\xf8\\\xb6\x04\xd0Q\xb6\x04\x00[\xb6\x04\x08V\xb6\x04hP\xb6\x04\xb8W\xb6\x04 S\xb6\x04\x00R\xb6\x04\xb8Z\xb6\x04@T\xb6\x04\x18R\xb6\x04\xc8Y\xb6\x04\x98V\xb6\x04\x80Y\xb6\x040X\xb6\x04\x98S\xb6\x04\xc8S\xb6\x04\xa0Q\xb6\x04PP\xb6\x04\xd8U\xb6\x04\xb0V\xb6\x04\xd0T\xb6\x04\xf8S\xb6\x04\xc0U\xb6\x04\xf8Y\xb6\x04\xe8Q\xb6\x04PY\xb6\x04@W\xb6\x04\xc0[\xb6\x04xR\xb6\x04H^\xb6\x04\x90X\xb6\x04P_\xb6\x04\xe0_\xb6\x04hV\xb6\x04HU\xb6\x04\xb0S\xb6\x04`\xb5\xb6\x04\x98\xb3\xb6\x04\xe0\xbf\xb6\x04\xb0\xb3\xb6\x04\x80\xb3\xb6\x04\x10\xb4\xb6\x04\xd0\xb1\xb6\x040\xb2\xb6\x04\x00\xb2\xb6\x04X\xb4\xb6\x04P\xb6\xb6\x04@\xba\xb6\x04 \xb0\xb6\x04p\xb1\xb6\x04\xc0\xb2\xb6\x04p\xb4\xb6\x04\x10\xb1\xb6\x040\xb8\xb6\x04\xb8\xb7\xb6\x04\x08\xb3\xb6\x04\xe8\xb4\xb6\x04\xa8\xbb\xb6\x04\x10\xb7\xb6\x04h\xb0\xb6\x04\xd8\xbb\xb6\x04\xa0\xb1\xb6\x04\x90\xb2\xb6\x04h\xbc\xb6\x04\x08\xbc\xb6\x04H\xb5\xb6\x04p\xbd\xb6\x04\xc8\xb3\xb6\x04\xb0\xbc\xb6\x04\x80\xbc\xb6\x04\x18\xb8\xb6\x04\x80\xb9\xb6\x04\x18\xbb\xb6\x04P\xb3\xb6\x04\x08\xb9\xb6\x04X\xba\xb6\x04\xa0\xb4\xb6\x04x\xb8\xb6\x04`\xb8\xb6\x04P\xb0\xb6\x04\xc0\xb5\xb6\x040\xb5\xb6\x04\xb0\xb9\xb6\x04\xb8\xb1\xb6\x04 \xbc\xb6\x04\xa8\xbe\xb6\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g936
sg894
g983
sg909
g943
sg903
g990
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1002
sg894
g998
sg909
g1009
sg903
g1006
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g1025
sg894
g1015
sg909
g1019
sg903
g1023
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g919
sg894
g1032
sg909
g926
sg903
g1039
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g1051
sg894
g1047
sg909
g1058
sg903
g1055
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1068
sg894
g1064
sg909
g1075
sg903
g1072
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g1085
sg894
g1081
sg909
g1092
sg903
g1089
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g1102
sg894
g1098
sg909
g1109
sg903
g1106
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g1068
sg894
g1115
sg909
g1075
sg903
g1122
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1134
sg894
g1130
sg909
g1141
sg903
g1138
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1025
sg894
g1015
sg909
g1019
sg903
g1023
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g907
sg894
g1160
sg909
g899
sg903
g1167
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1198
sg894
g1188
sg909
g1192
sg903
g1196
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g919
sg894
g1032
sg909
g926
sg903
g1039
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1228
sg894
g1218
sg909
g1222
sg903
g1226
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g1239
sg894
g1235
sg909
g1246
sg903
g1243
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g919
sg894
g1032
sg909
g926
sg903
g1039
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g1102
sg894
g1265
sg909
g1109
sg903
g1272
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g1239
sg894
g1235
sg909
g1246
sg903
g1243
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1102
sg894
g1098
sg909
g1109
sg903
g1106
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g907
sg894
g1160
sg909
g899
sg903
g1167
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1323
sg894
g1319
sg909
g1330
sg903
g1327
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g1085
sg894
g1336
sg909
g1092
sg903
g1343
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1228
sg894
g1218
sg909
g1222
sg903
g1226
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g970
sg894
g1364
sg909
g977
sg903
g1371
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g1389
sg894
g1379
sg909
g1383
sg903
g1387
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1323
sg894
g1319
sg909
g1330
sg903
g1327
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1389
sg894
g1409
sg909
g1383
sg903
g1416
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1102
sg894
g1098
sg909
g1109
sg903
g1106
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1198
sg894
g1437
sg909
g1192
sg903
g1444
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g1323
sg894
g1452
sg909
g1330
sg903
g1459
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1102
sg894
g1265
sg909
g1109
sg903
g1272
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g1228
sg894
g1218
sg909
g1222
sg903
g1226
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1510
sg894
g1506
sg909
g1517
sg903
g1514
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g1527
sg894
g1523
sg909
g1534
sg903
g1531
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1025
sg894
g1015
sg909
g1019
sg903
g1023
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g936
sg894
g983
sg909
g943
sg903
g990
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g1102
sg894
g1098
sg909
g1109
sg903
g1106
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1002
sg894
g1579
sg909
g1009
sg903
g1586
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g1510
sg894
g1594
sg909
g1517
sg903
g1601
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g1239
sg894
g1609
sg909
g1246
sg903
g1616
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g1025
sg894
g1624
sg909
g1019
sg903
g1631
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1102
sg894
g1098
sg909
g1109
sg903
g1106
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1510
sg894
g1506
sg909
g1517
sg903
g1514
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1002
sg894
g1579
sg909
g1009
sg903
g1586
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1688
sg894
g1678
sg909
g1682
sg903
g1686
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g1198
sg894
g1188
sg909
g1192
sg903
g1196
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1051
sg894
g1047
sg909
g1058
sg903
g1055
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1688
sg894
g1734
sg909
g1682
sg903
g1741
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g1002
sg894
g998
sg909
g1009
sg903
g1006
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1134
sg894
g1762
sg909
g1141
sg903
g1769
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1085
sg894
g1336
sg909
g1092
sg903
g1343
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g970
sg894
g1364
sg909
g977
sg903
g1371
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1085
sg894
g1081
sg909
g1092
sg903
g1089
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1510
sg894
g1594
sg909
g1517
sg903
g1601
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1025
sg894
g1624
sg909
g1019
sg903
g1631
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g1527
sg894
g1842
sg909
g1534
sg903
g1849
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1323
sg894
g1452
sg909
g1330
sg903
g1459
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1688
sg894
g1734
sg909
g1682
sg903
g1741
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1025
sg894
g1015
sg909
g1019
sg903
g1023
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g1228
sg894
g1922
sg909
g1222
sg903
g1929
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1389
sg894
g1379
sg909
g1383
sg903
g1387
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1239
sg894
g1235
sg909
g1246
sg903
g1243
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g1527
sg894
g1842
sg909
g1534
sg903
g1849
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1085
sg894
g1336
sg909
g1092
sg903
g1343
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1228
sg894
g1922
sg909
g1222
sg903
g1929
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1688
sg894
g1678
sg909
g1682
sg903
g1686
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g1068
sg894
g1064
sg909
g1075
sg903
g1072
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g1228
sg894
g1922
sg909
g1222
sg903
g1929
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g1198
sg894
g1437
sg909
g1192
sg903
g1444
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1134
sg894
g1130
sg909
g1141
sg903
g1138
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1389
sg894
g1409
sg909
g1383
sg903
g1416
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g1134
sg894
g1762
sg909
g1141
sg903
g1769
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1510
sg894
g1506
sg909
g1517
sg903
g1514
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1198
sg894
g1437
sg909
g1192
sg903
g1444
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g1527
sg894
g1523
sg909
g1534
sg903
g1531
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1085
sg894
g1081
sg909
g1092
sg903
g1089
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1068
sg894
g1115
sg909
g1075
sg903
g1122
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g1051
sg894
g1047
sg909
g1058
sg903
g1055
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1134
sg894
g1762
sg909
g1141
sg903
g1769
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g1239
sg894
g1609
sg909
g1246
sg903
g1616
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1134
sg894
g1762
sg909
g1141
sg903
g1769
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1239
sg894
g1609
sg909
g1246
sg903
g1616
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g1051
sg894
g2275
sg909
g1058
sg903
g2282
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g970
sg894
g1364
sg909
g977
sg903
g1371
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g1068
sg894
g1115
sg909
g1075
sg903
g1122
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g1228
sg894
g1922
sg909
g1222
sg903
g1929
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1239
sg894
g1609
sg909
g1246
sg903
g1616
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g970
sg894
g1364
sg909
g977
sg903
g1371
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g1025
sg894
g1015
sg909
g1019
sg903
g1023
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1389
sg894
g1409
sg909
g1383
sg903
g1416
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1323
sg894
g1319
sg909
g1330
sg903
g1327
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g936
sg894
g983
sg909
g943
sg903
g990
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g1085
sg894
g1336
sg909
g1092
sg903
g1343
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g1025
sg894
g1624
sg909
g1019
sg903
g1631
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g936
sg894
g983
sg909
g943
sg903
g990
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g1228
sg894
g1922
sg909
g1222
sg903
g1929
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g1688
sg894
g1678
sg909
g1682
sg903
g1686
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1389
sg894
g1379
sg909
g1383
sg903
g1387
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g907
sg894
g1160
sg909
g899
sg903
g1167
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1134
sg894
g1130
sg909
g1141
sg903
g1138
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1051
sg894
g2275
sg909
g1058
sg903
g2282
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1239
sg894
g1235
sg909
g1246
sg903
g1243
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1323
sg894
g1452
sg909
g1330
sg903
g1459
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1002
sg894
g1579
sg909
g1009
sg903
g1586
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1051
sg894
g1047
sg909
g1058
sg903
g1055
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1510
sg894
g1594
sg909
g1517
sg903
g1601
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g1198
sg894
g1437
sg909
g1192
sg903
g1444
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1025
sg894
g1624
sg909
g1019
sg903
g1631
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1510
sg894
g1594
sg909
g1517
sg903
g1601
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g1002
sg894
g1579
sg909
g1009
sg903
g1586
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g1051
sg894
g2275
sg909
g1058
sg903
g2282
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1688
sg894
g1734
sg909
g1682
sg903
g1741
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1527
sg894
g1842
sg909
g1534
sg903
g1849
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g1510
sg894
g1594
sg909
g1517
sg903
g1601
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g953
sg894
g2745
sg909
g960
sg903
g2752
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g919
sg894
g1032
sg909
g926
sg903
g1039
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g970
sg894
g1364
sg909
g977
sg903
g1371
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1002
sg894
g998
sg909
g1009
sg903
g1006
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g1527
sg894
g1523
sg909
g1534
sg903
g1531
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g953
sg894
g2745
sg909
g960
sg903
g2752
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g1389
sg894
g1409
sg909
g1383
sg903
g1416
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1323
sg894
g1452
sg909
g1330
sg903
g1459
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g1688
sg894
g1678
sg909
g1682
sg903
g1686
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1228
sg894
g1218
sg909
g1222
sg903
g1226
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g1527
sg894
g1523
sg909
g1534
sg903
g1531
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g919
sg894
g1032
sg909
g926
sg903
g1039
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1102
sg894
g1265
sg909
g1109
sg903
g1272
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g1688
sg894
g1678
sg909
g1682
sg903
g1686
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g1228
sg894
g1218
sg909
g1222
sg903
g1226
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g1198
sg894
g1188
sg909
g1192
sg903
g1196
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1134
sg894
g1130
sg909
g1141
sg903
g1138
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1323
sg894
g1319
sg909
g1330
sg903
g1327
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1085
sg894
g1081
sg909
g1092
sg903
g1089
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g1510
sg894
g1506
sg909
g1517
sg903
g1514
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g953
sg894
g2745
sg909
g960
sg903
g2752
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1085
sg894
g1336
sg909
g1092
sg903
g1343
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1527
sg894
g1842
sg909
g1534
sg903
g1849
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1198
sg894
g1437
sg909
g1192
sg903
g1444
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g907
sg894
g1160
sg909
g899
sg903
g1167
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1068
sg894
g1064
sg909
g1075
sg903
g1072
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1527
sg894
g1842
sg909
g1534
sg903
g1849
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1068
sg894
g1064
sg909
g1075
sg903
g1072
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g1002
sg894
g998
sg909
g1009
sg903
g1006
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g953
sg894
g2745
sg909
g960
sg903
g2752
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g1198
sg894
g1188
sg909
g1192
sg903
g1196
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g1002
sg894
g998
sg909
g1009
sg903
g1006
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1068
sg894
g1115
sg909
g1075
sg903
g1122
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1688
sg894
g1734
sg909
g1682
sg903
g1741
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g1085
sg894
g1081
sg909
g1092
sg903
g1089
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g1068
sg894
g1115
sg909
g1075
sg903
g1122
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g1134
sg894
g1762
sg909
g1141
sg903
g1769
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1068
sg894
g1064
sg909
g1075
sg903
g1072
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1389
sg894
g1379
sg909
g1383
sg903
g1387
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g1102
sg894
g1265
sg909
g1109
sg903
g1272
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g1688
sg894
g1734
sg909
g1682
sg903
g1741
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1389
sg894
g1379
sg909
g1383
sg903
g1387
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1323
sg894
g1319
sg909
g1330
sg903
g1327
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g907
sg894
g1160
sg909
g899
sg903
g1167
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1051
sg894
g2275
sg909
g1058
sg903
g2282
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g1527
sg894
g1523
sg909
g1534
sg903
g1531
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1134
sg894
g1130
sg909
g1141
sg903
g1138
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g1323
sg894
g1452
sg909
g1330
sg903
g1459
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g1051
sg894
g2275
sg909
g1058
sg903
g2282
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g1389
sg894
g1409
sg909
g1383
sg903
g1416
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1198
sg894
g1188
sg909
g1192
sg903
g1196
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1510
sg894
g1506
sg909
g1517
sg903
g1514
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g1051
sg894
g1047
sg909
g1058
sg903
g1055
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1102
sg894
g1265
sg909
g1109
sg903
g1272
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g1002
sg894
g1579
sg909
g1009
sg903
g1586
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1239
sg894
g1235
sg909
g1246
sg903
g1243
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g953
sg894
g2745
sg909
g960
sg903
g2752
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g1025
sg894
g1624
sg909
g1019
sg903
g1631
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g1239
sg894
g1609
sg909
g1246
sg903
g1616
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g936
sg894
g983
sg909
g943
sg903
g990
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I81228624
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'\xd0\xb4.\x12`\xb6.\x12p\x87.\x12\xa0\x87.\x12`/\xeb\x04\xd0\x87.\x12\xf8\xb4.\x12 \xb5.\x12H\xb5.\x12\xb0\xb6.\x12`\x88.\x12\x00$\xeb\x04p\xb5.\x12 \x89.\x12\x98\xb5.\x12\xa0/\xeb\x04\xf0k.\x12\xd0\xb4.\x12\xc0\xb5.\x12\xd0\xb4.\x12\xf8\xb4.\x12H\xb5.\x12\xa0\x87.\x12\xd0\xb4.\x12 \xb5.\x12\xd0\xb4.\x120\x88.\x12`/\xeb\x04\x00$\xeb\x04\xf8\xb4.\x12\x08m.\x12\xf8\xb4.\x12\x00$\xeb\x04\xa0/\xeb\x04\x98\xb5.\x12\xd0\x87.\x12\xd0l.\x12\xd0\xb4.\x12 \x89.\x12\xf0k.\x12\x00\xb7.\x12\xe8\xb5.\x12\x00\x88.\x12\x00$\xeb\x04 \xb5.\x12\x00\x88.\x12(l.\x12\xd0\x87.\x12p\x87.\x12\x00$\xeb\x040\x88.\x12\xa0\x87.\x12(l.\x12`\xb6.\x12\xd0\x87.\x12\x08m.\x12p\xb5.\x12\xe0/\xeb\x04\xd0\x87.\x12\xc0/\xeb\x04`\x88.\x120\x88.\x12`l.\x12p\x87.\x12`l.\x12(l.\x12`/\xeb\x04\xd0l.\x12\xa0\x87.\x12(l.\x12\x08m.\x12(l.\x12\x98\xb5.\x12p\x87.\x12\x00$\xeb\x04H\xb5.\x12`l.\x12\xc0/\xeb\x04\xa0\x87.\x12\x00\xb7.\x12\x98\xb5.\x12H\xb5.\x128\xb6.\x12 \xb5.\x12\xe8\xb5.\x12\xc0/\xeb\x04\xc0\xb5.\x12\xa0\x87.\x12\xf8\xb4.\x12`/\xeb\x04\x98\xb5.\x12\xd0\x87.\x12\xb0\xb6.\x12\xc0/\xeb\x04\x98\xb5.\x12\xa0\x87.\x12`l.\x12\xa0/\xeb\x04\xd0\x87.\x12\x00\x88.\x12\xc0\xb5.\x12(l.\x128\xb6.\x12 \xb5.\x12\xe8\xb5.\x12(l.\x12\x00\x88.\x12\xc0\xb5.\x12(l.\x12p\x87.\x12\xf0\x88.\x12\xf0k.\x12\xd0\xb4.\x12`\x88.\x12\xf8\xb4.\x12\xf0k.\x12\xc0/\xeb\x04\xf8\xb4.\x12p\xb5.\x12P\x89.\x12`/\xeb\x04\x08m.\x12\xc0/\xeb\x04\x88\xb6.\x12\xc0\x88.\x12 \xb5.\x12\x98\xb5.\x12H\xb5.\x12\xc0/\xeb\x04\xe8\xb5.\x12\xc0\xb5.\x12 \xb5.\x12\xb0\xb6.\x12\x80/\xeb\x04`/\xeb\x04`l.\x12\xa0/\xeb\x04 \x89.\x12(l.\x12\x00$\xeb\x04\x00\xb7.\x12\xd8\xb6.\x12(\xb7.\x12\x98l.\x12\xf8\xb4.\x120\x88.\x12\xd0\x87.\x12\x98\xb5.\x12\x00\x88.\x12\x00$\xeb\x04H\xb5.\x120\x88.\x12`l.\x12\xc0\xb5.\x12\x98l.\x12(\xb7.\x12\x80\x89.\x12`/\xeb\x04\xe8\xb5.\x12`/\xeb\x04\xd0\x87.\x120\x88.\x12\xa0/\xeb\x04H\xb5.\x12\xf0k.\x12\x00\xb7.\x12\xc0\xb5.\x12p\xb5.\x12H\xb5.\x12 \xb5.\x12\xc0/\xeb\x04 \xb5.\x12\x98\xb5.\x12\xa0\x87.\x12\x00\x88.\x12\xe8\xb5.\x12p\xb5.\x12p\x87.\x12(l.\x12p\xb5.\x12\xc0\xb5.\x12\xe8\xb5.\x12\xf0k.\x12\xe8\xb5.\x12H\xb5.\x12`l.\x12 \x89.\x12\xf0k.\x12\xc0/\xeb\x04\xa0\x87.\x12`l.\x12p\xb5.\x12\x08m.\x12\xc0\xb5.\x12\xa0\x87.\x12\xd0\xb4.\x12p\xb5.\x12\xf8\xb4.\x12`l.\x12p\x87.\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S'\xe0\xc1.\x12@\xc1.\x12\xc0\xc1.\x12\x80\xc2.\x12\xa0\xc2.\x12\x80\xc0.\x12 \xd15\x03`L\xba\x0c\x80\xd05\x03`\xc2.\x12 \xc2.\x12\xe0\xc2.\x12 \xc0.\x12\x80\xc3.\x12@\xc3.\x12@\xc2.\x12\xe0\xc0.\x12\xa0\xc3.\x12\xc0\xc3.\x12 \xc4.\x12\x00\xc4.\x12\x00\xc1.\x12\x80\xc4.\x12\xa0\xc4.\x12\xa0\xc0.\x12 \xc1.\x12\xc0\xc4.\x12 \xc5.\x12@\xc5.\x12`\xc1.\x12\xa0\xc1.\x12\xe0\xd05\x03\x00\xc3.\x12`\xc4.\x12\xc0\xc5.\x12 \xc6.\x12\x00\xc2.\x12\xc0\xc2.\x12@\xc4.\x12\xa0\xc6.\x12\xe0\xc3.\x12`\xc5.\x12@\xc0.\x12\x00\xc6.\x12@\xc6.\x12`\xc7.\x12\x80\xc7.\x12 \xc3.\x12\xe0\xc4.\x12\xe0\xc7.\x12\x00\xc8.\x12\xa0\xc5.\x12\x80\xc5.\x12`\xc8.\x12\x80\xc8.\x12\x00\xc5.\x12\xa0\xc7.\x12\xc0\xc0.\x12@\xc7.\x12\x80\xc1.\x12\x00\xc9.\x12@\xc8.\x12`\xc9.\x12\x80\xc9.\x12\xc0\xc6.\x12\x80\xc6.\x12`\xc6.\x12\x00\xca.\x12@\xc9.\x12`\xca.\x12\xe0+7\x03\xc0/7\x03\xc0)7\x03`/7\x03\x80.7\x03\xa0$7\x03 $7\x03\xc0+7\x03\xc0%7\x03`&7\x03\xe0/7\x03\xa0/7\x03\xc0#7\x03\x00-7\x03\x80/7\x03 (7\x03 &7\x03 *7\x03\xc0-7\x03@-7\x03\x00+7\x03\xc0*7\x03\xa0-7\x03@%7\x03 -7\x03`+7\x03@#7\x03\xe0-7\x03@/7\x03@,7\x03\x00.7\x03\x80#7\x03\x80%7\x03\x80*7\x03\xa0*7\x03`$7\x03 #7\x03\xe0$7\x03\x00%7\x03 /7\x03\xa0.7\x03\x00*7\x03@+7\x03\xc0(7\x03 +7\x03\xe0(7\x03\xe0*7\x03\xe0)7\x03 )7\x03\x00)7\x03 /\xeb\x04\x00l6\x03\xc0m6\x03\x80l6\x03@m6\x03@l6\x03\x80M\xba\x0c\x80)7\x03\xc0l6\x03\xa0o6\x03\xc0i6\x03\xc0k6\x03\x80e6\x03\x00k6\x03\x00o6\x03\x80n6\x03 o6\x03@o6\x03\x80k6\x03\x00m6\x03 .\xeb\x04@2\xc1\x04 5\xc2\x04\xe05\xc2\x04@;\xc2\x04\x00;\xc2\x04\x002\xc2\x04\x00:\xc2\x04\xc05\xc2\x04\xe0\xbf\xe8\x04\x80m6\x03\x00\xd2\xc2\x04\xe0\xd6\xc2\x04\xc0\xd7\xc2\x04`\xd3\xc2\x04\x80\xd4\xc2\x04`\xde\xc2\x04\xe0\xdb\xc2\x04\xe0\xd4\xc2\x04\xe0\xdf\xc2\x04 \xd1\xc2\x04\xa0\xd1\xc2\x04\x00\xdc\xc2\x04\xc09\xc2\x04\xe0\xd1\xc2\x04\xa0\xdb\xc2\x04\x80&7\x03\xa0f\xbf\x0c\xe0`\xbf\x0c`i\xbf\x0c\xc0e\xbf\x0c@`\xbf\x0c\x80`\xbf\x0c\xe0f\xbf\x0c\xc0d\xbf\x0c\xe0b\xbf\x0c\x00g\xbf\x0c o\xbf\x0c\x00f\xbf\x0c``\xbf\x0c\x00\xd1\xc2\x04\xc0\xd4\xc2\x04\xc0\xb6\xbf\x0c@\xb0\xbf\x0c\xa0\xb9\xbf\x0c`\xb0\xbf\x0c\xc0\xb9\xbf\x0c \xb1\xbf\x0c\xa04\xc2\x04 \xbb\xbf\x0c B\xba\x0c`x5\x03\xa0}5\x03@{5\x03 v5\x03\x80q5\x03\xe0\x7f5\x03\x80}5\x03\xa0v5\x03\xe0z5\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'\x12\x9f\xb9?\xb9\x9c\xb9?h{\xf7?Ny\xf7?U)\x82?vC3?w^U?\xa39\x93?\xca\xf4\xae?\x06E\xc4?\x0c\x9c\x19@A\x8cH?\xbc\xb0\x8a?\xe9\xf2.?\xd7@D?&\xad\x8a?\xce\x87H?\xb5\x04\x80?X\xd1\x8c?\x93\xa0Y?r\xb2*?\xdd\x9d\x99?\x97#\x12@\x059s?\xcf\x997?\xd2\xc6{?5\x17\x91?\x85)b?F\x0e@?\xb9\xc1{?p@3?\xffAD?7\xc5{?\x19~7?N\xa0j?\xe6\x847?#\x9dY?gof?O:3?\x05\xdd]?\x8a\xc8;?\xd2\xdf;?r\xb2*?\xad\xc2;?\x1f\x04\xa0?\x92\xfc.?\xa4aU?D\x96H?$\x03\xc0?\xa4\x94H?6\x9e\x99?jl\xa6?\x94QD?\x98|\x97?-\x07@?\xda\xfc.?\xa9%\x82?\xdb\xf1\x8e?R\xf7.?\xb9\xf4.?\n\x8b\xe8?Z\x04\x80?\xd4\x06\x80?n\x8b\xa8?Dj\x86?\xb6\xa5Y?PLD?\xc1_U?+7\xd3?\x86\x1aQ?0;3?\xc8\x08@?\xaalw?.\x17\xb1?\x1c\xe7]?3\x13\x91?{G\x84?0\x847?\xe2\x13\xf1?\xfe\xf4\x8e?\xd0\x1ab?\xb3\x8e\xa8?Z\xb0\x8a?\xf2\xd7L?\xf8\xb2j?\n\xa3Y?\xf1>s?\xc5\x9f\xf9?G\x06\x80?\x02\xfc.?\x9d\xb3;?W\xb7*?\xa3\x8bH?k(\xa2?^\xfb??\x04\xcf,@8\xf8n?wr&?\xca\xcc*?D\xa1\x19?\xb4\xa0Y?\xd1+b?\x84\xa0Y?gq&?\xe9\x04\x1e?\xc1<s?\x8bp&?\xbb.b?\xdd\x9fY?J\x01\xcf?\x96\x1dQ?\xc0\x88\x88?}\r@?\x9b\xc7{?\x8f\xeb]?4#\x02@&XU?\xf5\xf1\xae?\xf4\xa3Y?Qsw?\xee(\x82?J\xc5{?M\xfbn?\xe9LD?.o&?5\xc4;?\t\xc9L?\'l\xa6?S\x92H?\xd8."?@\x1dQ?\x9b\xc9;?\n\xf7.?\x19(b?\xfb\xa4Y?I\x9fY?\xca\x9f\x19?u\x90H?\x8cH\x84?\x90cU?/\xb1\x8a?X:3?8C3?\xd3\xc4;?\x17\x8f&?R,b?Y\xfc.?ur7?\x1b\x10@?&nf?\x97\xfcn?\x19\xf3.?\x0e\xe7]?\xd4>3?8\x12@?f~7?\xec)\x82?\x7f\xc3;?\xd2\xb2*??0"?Z\xd5L?\\\r@?\xea\xff.?|8\x93?\xa9\x99Y?\x07\x8f\x88?z\x1dQ?)\xf6\x8e?0;s?\xe7\xb1j?\x18;3?B\xd3L?+<D?\xe7n\x06@\x97\xa0\x19?\xf9l&?\x1f\xfc.?\xff{\x97?\xcbqf?m\xf4.?1\xa1Y?`n&?\xbb\x8b\x88?"nf?\xb0&\x82?\xc1\xc9{?\xf8?3?D\xf5.?H\x1aQ?\xda\xdf\xfd?\x964Q?w&\x82?\xc0\xc2;?\xe5\xcf\x8c?B(\x82?\xdc\x01\x8f?\x81\x1eQ?s\xe5]?\x02:s?\xc1\xcf\xac?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'\xb0P\xb6\x04\xc0^\xb6\x04(\x11\x0e\x05 \x1c\x0e\x05\x08\x1c\x0e\x05\xe0\x1f\x0e\x05\x08\x1f\x0e\x05\xf8\x1c\x0e\x05\xb8\x1a\x0e\x05\xd8\x1b\x0e\x05\x80\x1c\x0e\x05\x90\x1b\x0e\x05p\x1d\x0e\x05 \x1f\x0e\x05\xf0\x15\x0e\x05\xb0\x1f\x0e\x05 \x19\x0e\x05P\x16\x0e\x05H\x18\x0e\x058\x1f\x0e\x05P\x13\x0e\x05\xa0\x1a\x0e\x05p\x1a\x0e\x05\xc8\x13\x0e\x05x\x15\x0e\x05\x10\x14\x0e\x05\xf8\x16\x0e\x05h\x1c\x0e\x05\x98\x19\x0e\x05(\x1d\x0e\x05X\x1d\x0e\x05\x18\x15\x0e\x05\xf0\x18\x0e\x05p\x11\x0e\x05\xd0\x17\x0e\x05\xc8\x1c\x0e\x050\x15\x0e\x05\xe8\x1d\x0e\x05@\x17\x0e\x05\xe0\x16\x0e\x05\xe8\x14\x0e\x05\x18\x1b\x0e\x05\x00\x1e\x0e\x05\xc8\x19\x0e\x05@\x1a\x0e\x05(\x1a\x0e\x05\xa8\x1e\x0e\x05\xf0\x1e\x0e\x05h\x1f\x0e\x058\x16\x0e\x05\xf0\x1b\x0e\x05\xc0\x1b\x0e\x05\xa8\x0e\xb4\x04\xd8\x02\xb4\x04\xf8\x0c\xb4\x04\x88\x07\xb4\x04`\x0b\xb4\x04@\x04\xb4\x04\xb8\n\xb4\x04\x18\x08\xb4\x04\x88\n\xb4\x04\xf0\x0b\xb4\x04\xf8\x03\xb4\x04p\n\xb4\x04`\x08\xb4\x04\x08v\xb1\x04\xb0p\xb1\x04\x00x\xb1\x04\xa8{\xb1\x04\xc8|\xb1\x04\xd0t\xb1\x04\x98y\xb1\x04@t\xb1\x04\xf8y\xb1\x04Py\xb1\x04(}\xb1\x04\xf0{\xb1\x04\x80y\xb1\x04\xe0\x7f\xb1\x04\xc8y\xb1\x04xu\xb1\x04@}\xb1\x04\xa0}\xb1\x04\xb0|\xb1\x04Ps\xb1\x04P|\xb1\x04Pv\xb1\x04\xe0s\xb1\x04\xf8p\xb1\x04Xw\xb1\x04\xe8w\xb1\x04\xb8\x1d\x0e\x05\x88\x1a\x0e\x05\x80\x1f\x0e\x05`\x15\x0e\x05\x10\x1a\x0e\x05\xb0\x13\x0e\x05\x08\x16\x0e\x05H\x1b\x0e\x05\xb8\x11\x0e\x05\x80\x19\x0e\x05\x88\x1d\x0e\x05\x80\x13\x0e\x05\x80\x16\x0e\x05\x00\x12\x0e\x05\x90\x1e\x0e\x05p\x14\x0e\x05\xb0\x16\x0e\x05\xa8\x12\x0e\x05\x00\x18\x0e\x050\x18\x0e\x058\x19\x0e\x05@\x14\x0e\x05\xe8\x11\x0e\x05\x00\x1b\x0e\x05\xe8\x1a\x0e\x05x\x12\x0e\x05X\x11\x0e\x05\xa0\x17\x0e\x05\xd8\x18\x0e\x05\xd8\x1e\x0e\x05x\x1b\x0e\x058\x10\x0e\x05P\x1f\x0e\x05\x98\x1f\x0e\x05H\x12\x0e\x05\x10\x11\x0e\x05X\x14\x0e\x05\x98\x16\x0e\x05\x88\x14\x0e\x050\x1b\x0e\x05\x98\x1c\x0e\x058\x13\x0e\x05\xd0\x1a\x0e\x05@\x1d\x0e\x05 \x16\x0e\x05P\x10\x0e\x05\xc8\x16\x0e\x05h\x16\x0e\x05\xa8\x18\x0e\x05P\x19\x0e\x05\xb0\x19\x0e\x05\xf8\x19\x0e\x05X\x1a\x0e\x05\xc8\x1f\x0e\x05\xb8\x17\x0e\x05\xd0\x14\x0e\x05\x08\x13\x0e\x05\xa0\x11\x0e\x05P\x1c\x0e\x05\x90\x15\x0e\x05\xb0\x1c\x0e\x05\xa8\x1b\x0e\x05\x18\x12\x0e\x05\x88\x17\x0e\x05\xc0\x12\x0e\x05\xa0\x1d\x0e\x05\xd0\x11\x0e\x05(\x17\x0e\x05\x88\x11\x0e\x05\x90\x18\x0e\x05\x00\x15\x0e\x05 \x13\x0e\x05\xe0\x10\x0e\x05x\x1e\x0e\x05\x98\x10\x0e\x05x\x18\x0e\x05h\x13\x0e\x05\xd8\x12\x0e\x05\xe0\x13\x0e\x05h\x19\x0e\x05\xb8\x14\x0e\x05\xc0\x18\x0e\x05\x80\x10\x0e\x05\xf0\x12\x0e\x05`\x18\x0e\x05\xc0\x1e\x0e\x05p\x17\x0e\x05\x98\x13\x0e\x050\x12\x0e\x05\xe8\x17\x0e\x05\xa8\x15\x0e\x05H\x15\x0e\x05h\x10\x0e\x05(\x14\x0e\x05\xf8\x13\x0e\x05\x90\x12\x0e\x05@\x11\x0e\x05\xb0\x10\x0e\x05\xc0\x15\x0e\x05\x08\x19\x0e\x05X\x17\x0e\x05 \x10\x0e\x05\xd8\x15\x0e\x05\xa0\x14\x0e\x05\xf8\x10\x0e\x05\xc8\x10\x0e\x05\x10\x17\x0e\x058\x1c\x0e\x05`\x12\x0e\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3799
sg3632
g3789
sg3646
g3793
sg3641
g3797
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3674
sg3632
g3806
sg3646
g3681
sg3641
g3813
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3838
sg3632
g3834
sg3646
g3845
sg3641
g3842
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3861
sg3632
g3851
sg3646
g3855
sg3641
g3859
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3799
sg3632
g3789
sg3646
g3793
sg3641
g3797
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3637
sg3632
g3915
sg3646
g3647
sg3641
g3922
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3934
sg3632
g3930
sg3646
g3941
sg3641
g3938
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3742
sg3632
g3960
sg3646
g3749
sg3641
g3967
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3776
sg3632
g3975
sg3646
g3783
sg3641
g3982
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3637
sg3632
g3915
sg3646
g3647
sg3641
g3922
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g3759
sg3632
g4016
sg3646
g3766
sg3641
g4023
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g4048
sg3632
g4044
sg3646
g4055
sg3641
g4052
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3708
sg3632
g4061
sg3646
g3715
sg3641
g4068
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g3663
sg3632
g4076
sg3646
g3657
sg3641
g4083
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g3889
sg3632
g4104
sg3646
g3896
sg3641
g4111
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3742
sg3632
g3960
sg3646
g3749
sg3641
g3967
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3663
sg3632
g4076
sg3646
g3657
sg3641
g4083
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g3725
sg3632
g4171
sg3646
g3732
sg3641
g4178
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3838
sg3632
g4186
sg3646
g3845
sg3641
g4193
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g3637
sg3632
g3915
sg3646
g3647
sg3641
g3922
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3861
sg3632
g4214
sg3646
g3855
sg3641
g4221
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3799
sg3632
g4229
sg3646
g3793
sg3641
g4236
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g4048
sg3632
g4244
sg3646
g4055
sg3641
g4251
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g4263
sg3632
g4259
sg3646
g4270
sg3641
g4267
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3861
sg3632
g4214
sg3646
g3855
sg3641
g4221
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3663
sg3632
g4076
sg3646
g3657
sg3641
g4083
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g3861
sg3632
g4214
sg3646
g3855
sg3641
g4221
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g4332
sg3632
g4328
sg3646
g4339
sg3641
g4336
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g4048
sg3632
g4244
sg3646
g4055
sg3641
g4251
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g4332
sg3632
g4328
sg3646
g4339
sg3641
g4336
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g3889
sg3632
g4104
sg3646
g3896
sg3641
g4111
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3838
sg3632
g4186
sg3646
g3845
sg3641
g4193
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g4485
sg3632
g4475
sg3646
g4479
sg3641
g4483
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g4485
sg3632
g4505
sg3646
g4479
sg3641
g4512
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g4048
sg3632
g4044
sg3646
g4055
sg3641
g4052
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g4550
sg3632
g4546
sg3646
g4557
sg3641
g4554
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g4550
sg3632
g4546
sg3646
g4557
sg3641
g4554
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g4332
sg3632
g4328
sg3646
g4339
sg3641
g4336
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g3838
sg3632
g4186
sg3646
g3845
sg3641
g4193
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3691
sg3632
g4628
sg3646
g3698
sg3641
g4635
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g4332
sg3632
g4643
sg3646
g4339
sg3641
g4650
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g4332
sg3632
g4643
sg3646
g4339
sg3641
g4650
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3674
sg3632
g3806
sg3646
g3681
sg3641
g3813
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3663
sg3632
g4076
sg3646
g3657
sg3641
g4083
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g4550
sg3632
g4546
sg3646
g4557
sg3641
g4554
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g4485
sg3632
g4505
sg3646
g4479
sg3641
g4512
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g4048
sg3632
g4244
sg3646
g4055
sg3641
g4251
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g3872
sg3632
g4788
sg3646
g3879
sg3641
g4795
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3776
sg3632
g3975
sg3646
g3783
sg3641
g3982
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g3759
sg3632
g4016
sg3646
g3766
sg3641
g4023
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g4263
sg3632
g4842
sg3646
g4270
sg3641
g4849
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g4485
sg3632
g4505
sg3646
g4479
sg3641
g4512
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3934
sg3632
g3930
sg3646
g3941
sg3641
g3938
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g3691
sg3632
g4628
sg3646
g3698
sg3641
g4635
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3725
sg3632
g4171
sg3646
g3732
sg3641
g4178
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3799
sg3632
g3789
sg3646
g3793
sg3641
g3797
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g4485
sg3632
g4505
sg3646
g4479
sg3641
g4512
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g3872
sg3632
g4788
sg3646
g3879
sg3641
g4795
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g3691
sg3632
g4628
sg3646
g3698
sg3641
g4635
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g4550
sg3632
g5000
sg3646
g4557
sg3641
g5007
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3889
sg3632
g4104
sg3646
g3896
sg3641
g4111
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g3725
sg3632
g4171
sg3646
g3732
sg3641
g4178
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3861
sg3632
g3851
sg3646
g3855
sg3641
g3859
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3934
sg3632
g5054
sg3646
g3941
sg3641
g5061
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g4332
sg3632
g4328
sg3646
g4339
sg3641
g4336
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g3637
sg3632
g3915
sg3646
g3647
sg3641
g3922
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g3759
sg3632
g4016
sg3646
g3766
sg3641
g4023
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g4263
sg3632
g4259
sg3646
g4270
sg3641
g4267
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g4332
sg3632
g4328
sg3646
g4339
sg3641
g4336
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g3861
sg3632
g3851
sg3646
g3855
sg3641
g3859
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3934
sg3632
g3930
sg3646
g3941
sg3641
g3938
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g4332
sg3632
g4643
sg3646
g4339
sg3641
g4650
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3674
sg3632
g3806
sg3646
g3681
sg3641
g3813
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3742
sg3632
g3960
sg3646
g3749
sg3641
g3967
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3799
sg3632
g4229
sg3646
g3793
sg3641
g4236
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3799
sg3632
g3789
sg3646
g3793
sg3641
g3797
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g4485
sg3632
g4475
sg3646
g4479
sg3641
g4483
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g3742
sg3632
g3960
sg3646
g3749
sg3641
g3967
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3838
sg3632
g3834
sg3646
g3845
sg3641
g3842
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g3872
sg3632
g4788
sg3646
g3879
sg3641
g4795
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g3708
sg3632
g4061
sg3646
g3715
sg3641
g4068
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g4485
sg3632
g4475
sg3646
g4479
sg3641
g4483
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g3725
sg3632
g4171
sg3646
g3732
sg3641
g4178
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3872
sg3632
g4788
sg3646
g3879
sg3641
g4795
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3776
sg3632
g3975
sg3646
g3783
sg3641
g3982
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g4485
sg3632
g4475
sg3646
g4479
sg3641
g4483
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g4263
sg3632
g4842
sg3646
g4270
sg3641
g4849
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3934
sg3632
g3930
sg3646
g3941
sg3641
g3938
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g3759
sg3632
g4016
sg3646
g3766
sg3641
g4023
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3799
sg3632
g4229
sg3646
g3793
sg3641
g4236
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g3708
sg3632
g4061
sg3646
g3715
sg3641
g4068
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g4550
sg3632
g5000
sg3646
g4557
sg3641
g5007
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g3889
sg3632
g4104
sg3646
g3896
sg3641
g4111
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3861
sg3632
g4214
sg3646
g3855
sg3641
g4221
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g4332
sg3632
g4643
sg3646
g4339
sg3641
g4650
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g4048
sg3632
g4244
sg3646
g4055
sg3641
g4251
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3934
sg3632
g3930
sg3646
g3941
sg3641
g3938
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g4263
sg3632
g4842
sg3646
g4270
sg3641
g4849
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3742
sg3632
g3960
sg3646
g3749
sg3641
g3967
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g4048
sg3632
g4044
sg3646
g4055
sg3641
g4052
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g3872
sg3632
g4788
sg3646
g3879
sg3641
g4795
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3861
sg3632
g3851
sg3646
g3855
sg3641
g3859
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g3663
sg3632
g4076
sg3646
g3657
sg3641
g4083
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g4048
sg3632
g4044
sg3646
g4055
sg3641
g4052
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g4550
sg3632
g5000
sg3646
g4557
sg3641
g5007
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g3934
sg3632
g5054
sg3646
g3941
sg3641
g5061
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g3708
sg3632
g4061
sg3646
g3715
sg3641
g4068
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g4263
sg3632
g4842
sg3646
g4270
sg3641
g4849
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g4550
sg3632
g5000
sg3646
g4557
sg3641
g5007
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g4263
sg3632
g4259
sg3646
g4270
sg3641
g4267
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3708
sg3632
g4061
sg3646
g3715
sg3641
g4068
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3725
sg3632
g4171
sg3646
g3732
sg3641
g4178
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g4048
sg3632
g4044
sg3646
g4055
sg3641
g4052
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g3776
sg3632
g3975
sg3646
g3783
sg3641
g3982
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g3799
sg3632
g4229
sg3646
g3793
sg3641
g4236
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g4048
sg3632
g4244
sg3646
g4055
sg3641
g4251
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g3934
sg3632
g5054
sg3646
g3941
sg3641
g5061
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g3838
sg3632
g3834
sg3646
g3845
sg3641
g3842
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g3759
sg3632
g4016
sg3646
g3766
sg3641
g4023
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g4485
sg3632
g4475
sg3646
g4479
sg3641
g4483
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g3861
sg3632
g3851
sg3646
g3855
sg3641
g3859
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g4263
sg3632
g4259
sg3646
g4270
sg3641
g4267
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g3838
sg3632
g4186
sg3646
g3845
sg3641
g4193
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g3674
sg3632
g3806
sg3646
g3681
sg3641
g3813
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g4332
sg3632
g4643
sg3646
g4339
sg3641
g4650
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3838
sg3632
g3834
sg3646
g3845
sg3641
g3842
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g3934
sg3632
g5054
sg3646
g3941
sg3641
g5061
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g4263
sg3632
g4259
sg3646
g4270
sg3641
g4267
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g3799
sg3632
g3789
sg3646
g3793
sg3641
g3797
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g4263
sg3632
g4842
sg3646
g4270
sg3641
g4849
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3776
sg3632
g3975
sg3646
g3783
sg3641
g3982
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g4550
sg3632
g4546
sg3646
g4557
sg3641
g4554
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g3861
sg3632
g4214
sg3646
g3855
sg3641
g4221
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g3799
sg3632
g4229
sg3646
g3793
sg3641
g4236
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g4485
sg3632
g4505
sg3646
g4479
sg3641
g4512
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3691
sg3632
g4628
sg3646
g3698
sg3641
g4635
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g4550
sg3632
g5000
sg3646
g4557
sg3641
g5007
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g3838
sg3632
g4186
sg3646
g3845
sg3641
g4193
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3889
sg3632
g4104
sg3646
g3896
sg3641
g4111
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g3934
sg3632
g5054
sg3646
g3941
sg3641
g5061
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3691
sg3632
g4628
sg3646
g3698
sg3641
g4635
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3637
sg3632
g3915
sg3646
g3647
sg3641
g3922
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g3838
sg3632
g3834
sg3646
g3845
sg3641
g3842
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g4550
sg3632
g4546
sg3646
g4557
sg3641
g4554
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3674
sg3632
g3806
sg3646
g3681
sg3641
g3813
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I81228624
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'P\xccr\x12 \x0cr\x12h\xf3r\x12x\xccr\x12\xa0\xccr\x12h\xf3r\x12\x00\xd15\x03\xc8\xccr\x12\xf0\xccr\x12\x00\xd15\x03\xa0\xf3r\x12h\xf3r\x12\xd8\xf3r\x12\x00\xd15\x03\x00\xdc5\x03P\x0cr\x12\x00\xdc5\x03\xc0\xdb5\x03\x80\xf4r\x12\xf0\xccr\x12P\x0cr\x12\xc8\xccr\x120\xcer\x12 \x0cr\x12X\xcer\x12h\xf3r\x12\x10\xf4r\x12\xf0\xccr\x12\x18\xcdr\x12@\xcdr\x12\xa0\xf3r\x12\xc8\xccr\x12P\x0cr\x12 \x0cr\x12\x80\xcer\x12\x80\x0cr\x12\xd0\rr\x12\x00\x0er\x12@\rr\x12p\rr\x12\xc0\xdb5\x03x\xccr\x12`\xd15\x03\xc0\xdb5\x03\x80\xcer\x12\xc8\xccr\x12h\xcdr\x12\xb0\x0cr\x12`\xd15\x03\x00\x0er\x12P\xccr\x12p\rr\x12@\xcdr\x12h\xf3r\x12\xd8\xf3r\x12@\rr\x12\xa0\rr\x12x\xccr\x12\x18\xcdr\x12\xc8\xccr\x12@\rr\x12\x00\xd15\x03 \xd95\x03\x00\xdc5\x03P\x0cr\x12\xc8\xccr\x120\xcer\x12h\xcdr\x12\xd8\xf3r\x12\xa0\rr\x12\xa0\xccr\x12@\xcdr\x12`\xd15\x03 \x0cr\x12@\xcdr\x12\x00\xdc5\x03\x18\xcdr\x12\xf0\xccr\x12\xa0\xf3r\x12\xe0\x0cr\x12\x00\xdc5\x03\x80\x0cr\x12\x80\xf4r\x12h\xf3r\x12h\xcdr\x12P\xccr\x12\xd8\xf3r\x12\x80\xcer\x12@\rr\x12\xc0\xdb5\x03\xe0\x0cr\x12`\xd15\x03\x00\xd15\x03\xe0\xcdr\x12\xd8\xf3r\x12P\xccr\x120\x0er\x12P\xccr\x12\xb0\x0cr\x12\xc0\xdb5\x03\xf0\xccr\x12\x80\x0cr\x12\xe0\x0cr\x12\x18\xcdr\x12\xc0\xdb5\x03`\xd15\x03\x00\xdc5\x03@\xcdr\x12P\x0cr\x12X\xcer\x12P\xccr\x12\xb8\xf4r\x12\x00\xd15\x03\xc8\xccr\x12\xa0\xf3r\x12\x08\xcer\x12\xe0\x0cr\x12`\xd15\x03\x80\x0cr\x12x\xccr\x12h\xf3r\x12\xe0\x0cr\x12\xa0\xf3r\x12h\xcdr\x12\x00\xdc5\x03h\xcdr\x12\x00\xdc5\x030\xcer\x12x\xccr\x12\xc8\xccr\x12\x18\xcdr\x12\xf0\xccr\x12h\xcdr\x12p\rr\x12\xa0\xccr\x12P\xccr\x12P\x0cr\x12h\xcdr\x12P\x0cr\x12\xf0\xccr\x12\xb0\x0cr\x12\xe0\x0cr\x12 \x0cr\x12\xa0\xf3r\x12x\xccr\x12\x00\xdc5\x03\xa8\xcer\x12\xa0\xf3r\x12\x00\xd15\x03x\xccr\x12 \x0cr\x12\xa8\xcer\x12\xd8\xf3r\x12\xc8\xccr\x12h\xf3r\x12P\xccr\x12\xd8\xf3r\x12\x18\xcdr\x12P\x0cr\x12\xa0\xccr\x12\xb0\x0cr\x120\x0er\x12@\xcdr\x12 \x0cr\x12h\xcdr\x12\x80\x0cr\x12@\xcdr\x12\x08\xcer\x12\x00\x0er\x12x\xccr\x12P\xccr\x12`\xd15\x03P\xccr\x12@\rr\x12@\xcdr\x12h\xf3r\x12\xf0\xccr\x12\x00\xd15\x03\xa0\xf3r\x12\xb0\x0cr\x12\xf0\xccr\x12\x18\xcdr\x12\x10\rr\x12\x80\x0cr\x12 \x0cr\x12\x00\xdc5\x03\xb0\x0cr\x12`\xd15\x03\xa0\xccr\x12 \x0cr\x12\x80\x0cr\x12\xb8\xf4r\x12\x00\xd15\x03\xc8\xccr\x12@\xcdr\x12\xc0\xdb5\x03\xe0\x0cr\x12\xc0\xdb5\x03\xb0\x0cr\x12\xe0\x0cr\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x80\xdbs\x12`\xdas\x12\x80\xdcs\x12@\xdcs\x12\xe0\xd9s\x12`\xdcs\x12`\xdbs\x12\xc0\xdcs\x12\xc0\xdbs\x12\x00\xdds\x12\x80\xdas\x12`\xdds\x12\x80\xdds\x12 \xdcs\x12@\xdas\x12\xe0\xdbs\x12\xc0\xdas\x12\xa0\xdbs\x12\xa0\xdas\x12@\xdds\x12\xe0\xdas\x12\xa0\xdcs\x12\x00\xdes\x12\xc0\xdes\x12\x00\xdfs\x12 \xdfs\x12\x00\xdcs\x12`\xdes\x12@\xdfs\x12@\xdes\x12`\xdfs\x12\xc0\xdds\x12\x00\xdbs\x12\xc0\xdfs\x12\xe0\xdfs\x12\xe0\xdcs\x12 \xdbs\x12 \xdds\x12@\xdbs\x12\xa0\xdes\x12 \xdes\x12\xa0\xdds\x12\x00\xdas\x12\xe0\xdds\x12\x80\xdfs\x12\x80\xdes\x12\xa0\xdfs\x12 \xdas\x12\xc0a\x86\x12 a\x86\x12\xa0b\x86\x12@b\x86\x12 `\x86\x12`b\x86\x12\xe0b\x86\x12\xc0b\x86\x12``\x86\x12@c\x86\x12`c\x86\x12 b\x86\x12\xa0c\x86\x12\x80c\x86\x12\xe0`\x86\x12\x00d\x86\x12\xe0c\x86\x12\xc0`\x86\x12`d\x86\x12\x80d\x86\x12\x80b\x86\x12\xc0d\x86\x12\xa0d\x86\x12\x00c\x86\x12\xe0d\x86\x12\x00e\x86\x12 e\x86\x12@e\x86\x12`e\x86\x12\x80e\x86\x12\xe0e\x86\x12\x00f\x86\x12\xa0a\x86\x12`a\x86\x12`f\x86\x12@f\x86\x12\x00b\x86\x12\x80f\x86\x12\xe0f\x86\x12\x00g\x86\x12\xa0`\x86\x12\x00a\x86\x12`g\x86\x12@g\x86\x12\x80a\x86\x12\x80g\x86\x12\xe0g\x86\x12\xc0g\x86\x12 h\x86\x12\x00h\x86\x12`h\x86\x12\x80h\x86\x12\xe0a\x86\x12 c\x86\x12\xe0h\x86\x12\xc0h\x86\x12 g\x86\x12\x00i\x86\x12 i\x86\x12@i\x86\x12`i\x86\x12\x80i\x86\x12\xa0i\x86\x12\xc0i\x86\x12\xe0i\x86\x12\x00j\x86\x12 j\x86\x12\x80j\x86\x12\xa0j\x86\x12@a\x86\x12@h\x86\x12\x00k\x86\x12 k\x86\x12\xc0f\x86\x12\xc0e\x86\x12@k\x86\x12`k\x86\x12\x80k\x86\x12\xe0k\x86\x12\xc0k\x86\x12 l\x86\x12\x00l\x86\x12 f\x86\x12@l\x86\x12\xa0l\x86\x12\x80l\x86\x12\xe0l\x86\x12\xc0l\x86\x12\x80`\x86\x12@m\x86\x12 m\x86\x12\xc0c\x86\x12\xa0m\x86\x12\xc0m\x86\x12@d\x86\x12@`\x86\x12 n\x86\x12@n\x86\x12`l\x86\x12\x80n\x86\x12`n\x86\x12`j\x86\x12\xa0n\x86\x12\x00o\x86\x12 o\x86\x12@o\x86\x12\xa0g\x86\x12\x80o\x86\x12\xc0o\x86\x12\xe0o\x86\x12\xe0j\x86\x12`m\x86\x12\xa0h\x86\x12\xa0o\x86\x12\xc0n\x86\x12\x00m\x86\x12@j\x86\x12\xa0k\x86\x12`o\x86\x12\xe0m\x86\x12 d\x86\x12\xc0j\x86\x12\xa0f\x86\x12\xe0n\x86\x12\xa0e\x86\x12\xc0s5\x03`|5\x03\xc0\xf1\xa8\x12 \xf1\xa8\x12\xa0\xf1\xa8\x12@\xf2\xa8\x12\xa0\xf2\xa8\x12\xc0\xf2\xa8\x12\x80\xf2\xa8\x12 \xf0\xa8\x12\xe0\xf2\xa8\x12@\xf3\xa8\x12 \xf3\xa8\x12\xe0\xf1\xa8\x12\xa0\xf3\xa8\x12\x80\xf3\xa8\x12\x00\xf1\xa8\x12\xc0\xf3\xa8\x12 \xf4\xa8\x12@\xf4\xa8\x12@\xf0\xa8\x12\x80\xf4\xa8\x12`\xf4\xa8\x12\xc0\xf4\xa8\x12\xa0\xf4\xa8\x12\xa0\xf0\xa8\x12 \xf5\xa8\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'\x0bw&?\x83\xe4\x1d?\xf1\xafj?\xfeID?c\xa3*?X\xccL?n\xa7\x19?U\x08@?\x88\x05\x80?\xe1\xf7.?+\x18Q?\x1e\xd2L?b\xa6Y?H\x18Q?\x89\xd7L?\xa9G\xa4?#\xb1*?6\xb3*?h\xce;?\xdf\xa0Y?\xa9\x05\xa0?\xc1\x07@?\xd8\xd8L?\xd0\xe4\x1d?\xdc\xc2Y??MD?DKD?\x84\xc2\x9b?\t[\x95?\x10\xea]?y\xd1\xac?\xfa\'\x82?\x9f\xf3\x8e?\xccm&?\x80\\s?w\xc8;?@\xac\x8a?\xa6}\xb7?\xd0\x1c\x82? Es?\t;3?\xf1\x90H?.-b?C\x1eQ?\x9f\x80w?\x8e/b?\xc1<s?\x00\xc8{?=H\x84?H\x16\x91?\xdd\xf5.?\xac\\U?\xe7@s?pv7?<\xa4Y?\xd7\xb1;?\xc1\x8a(@\x8a\x95H?\x80\xa0Y?\x9a\xa1Y?B\x96\x99?\xe0~\x97??l\x86?\xbc\xf3\x8e? \xac\x1a@n;3?\xf0G\x84?\xc1\xe8]?\x08\xf8n?\xee\x9c\x99?Hm7?B\xca;?\x8d\x1fQ?\xc1@3?\xc2\x8e\x88?r\xb0j?\x97\xfcn?B)\xc2?I\xb7*?\xe3\x19Q?\x12\xb2*?O\x17Q?\xa5\x92H?\rBb?oKD?\x8b\xc0\x9b?\xde\xc5{?\xaaND?\xf3(3?\xab?s?|\xca;?E$b?^m&?\x97kf?H\x1cQ?I\xb9*?l\x857?Am&?\xed\x16\x91?\n\x827?\xa1\xc0\x9b?E>3?\x94\x06@?g\xe4]?\xb6\x84w?\xfd\x06@?\xbb\x15\xb1?\xae$\xe2?\x89\xdf\xbd?\xf1s&?v\xb8*?\xb6\xa7Y?\xdfPD?\x01\xa1Y?\xa8.b?\xa9\xc9;?]:s?\x01[3?\xda\xc1{?\\\r@?\x00qw?\x1c\xe5]?\xfb\x92\xa8?\xf7PD?\r\x817?\xb5?s?\'eU?x\xfbn?\xfd\xaaH?X\t@?-\x1fQ?\x1c?s?9\\U?Hnf?\xbc\xcf;?\x9b\x96H?\xfe\x9e\xb9?\xda\xf6.?\xbc[\xd5?A\xf4\x8e?\xd8H\xc4?\xb8:3?\x15\x07@?\t\x95H?\xfb[\x95?_[\x95?\x869s?\xfa(\xa2?\x9b\xb1*?\xf2/b?m\n@?T\xc7{?M\x84w?\xde\xb3j?f\x99Y?\xd3\x9f7?\xd7?s?\xba}w?bX\x95?\nm7?]\xe6\x9d?\x98\x06@?E\xae\x8a?\xad\xb7*?\x8e\x0e@?(~w?\xb88Q?g\x1dQ?\xc1\xae\x8a?\xfa\x0b@?\xed\xf6.?e\xa5Y?\xe2cU?\x9e\xfc??0QD?PG\x84?\x07\xe2\xfd?e0"?\xc9\xe5]?\x9a\xb7j?8\xf8.?\x92\xe6\x1d?e\xfb.?\x07Jb?q\xfa.?\xceMD?F/b?\xd0\xc5;?X=D?$\xfc.?\xe3:3?\xc4\x8fH?J\xe2\x1d?"KD?\xe0\xb4*?\x0eSD?8/"?Mp&?\xe8W\x95?\xd4w&?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'\xe8\x07\xb4\x04\xb0\x0f\xb4\x04\x98\xbf\x0c\x05P\xb9\x0c\x05\xa0\xb7\x0c\x05\xc8\xbf\x0c\x05\x80\xbc\x0c\x05\xd0\xb7\x0c\x050\xbe\x0c\x05X\xba\x0c\x05\x08\xa9\xd0\x04\xc8\xaf\xd0\x04\xf8\xac\xd0\x04\xe0\xa0\xd0\x04\xb0\xac\xd0\x04\x98\xa0\xd0\x04(\xa1\xd0\x04\x00\xa8\xd0\x04\xf8\xa3\xd0\x04\xc8\xa0\xd0\x04h\xa3\xd0\x040\xa2\xd0\x040\xab\xd0\x04\xa8\xa2\xd0\x04X\xa4\xd0\x04x\xa2\xd0\x04\xd8\xa5\xd0\x04\x80\xa6\xd0\x040\xae\xd0\x04\x90\xa8\xd0\x04\xc8\xa3\xd0\x04(\xaa\xd0\x04\x80\xa3\xd0\x04\xa8\xa8\xd0\x04@\xa7\xd0\x04\xd0\xa7\xd0\x040\xa8\xd0\x04\x08\xa6\xd0\x04\xc0\xa8\xd0\x04\xb0\xa0\xd0\x04\x98\xa6\xd0\x04\xd0\xa4\xd0\x04\x10\xaa\xd0\x04\x98\xa3\xd0\x04\xe0\xa3\xd0\x04\xb8\xa4\xd0\x04\xc0\xa2\xd0\x04\x00\xab\xd0\x04\x98\xa9\xd0\x04\xf8\xa6\xd0\x04H\xa8\xd0\x04\xf8\xa0\xd0\x04(\xa7\xd0\x04\xe0\xa6\xd0\x04\xb8\xa7\xd0\x04\x00\xa2\xd0\x04\xd0\xa1\xd0\x04@\xa1\xd0\x048\xa9\xd0\x04\xb0\xa6\xd0\x04\x88\xaa\xd0\x04\xd0\xaa\xd0\x04\xd8\xa8\xd0\x04p\xa1\xd0\x04\x90\xa2\xd0\x04x\xab\xd0\x04\x80\xa9\xd0\x04\xb0\xa3\xd0\x04\x98\xac\xd0\x04X\xa1\xd0\x04\xd0\xad\xd0\x04\x90\xab\xd0\x04\x80\xaf\xd0\x04\xd8\xab\xd0\x04\x10\xa7\xd0\x04\xc8\xac\xd0\x04H\xa2\xd0\x04\xe8\xa1\xd0\x04P\xa9\xd0\x048\xa0\xd0\x04X\xa7\xd0\x04\x80\xac\xd0\x04\xe8\xad\xd0\x04\x08\xac\xd0\x04H\xab\xd0\x04\xe8\xa7\xd0\x04\x18\xa8\xd0\x04P\xa6\xd0\x04\xa8\xae\xd0\x04(\xad\xd0\x04h\xa0\xd0\x04\x10\xa4\xd0\x04\xe0\xac\xd0\x04p\xaa\xd0\x04\xa8\xab\xd0\x04\xe8\xaa\xd0\x04`\xae\xd0\x04`\xa2\xd0\x04\x18\xae\xd0\x04\xb0\xa9\xd0\x04(\xa4\xd0\x048\xac\xd0\x04\x08\xaf\xd0\x04\xa0\xa1\xd0\x04\x90\xae\xd0\x04\xb8\xaa\xd0\x04\x88\xa7\xd0\x04\xd8\xae\xd0\x04 \xa6\xd0\x04\xc0\xae\xd0\x04\xe0\xa9\xd0\x04h\xa6\xd0\x04X\xad\xd0\x04X\xaa\xd0\x04\x10\xa1\xd0\x04\xf0\xa8\xd0\x04@\xad\xd0\x04h\xa9\xd0\x04`\xa8\xd0\x04`\xab\xd0\x04 \xaf\xd0\x04@\xaa\xd0\x04\xb0\xaf\xd0\x04\xf0\xa5\xd0\x04\xc8\xa6\xd0\x048\xa6\xd0\x04\xa0\xaa\xd0\x04\x88\xa1\xd0\x04\x80\xa0\xd0\x048\xaf\xd0\x04\x00\xae\xd0\x04P\xaf\xd0\x04\xb8\xad\xd0\x04h\xac\xd0\x04 \xac\xd0\x04 \xa9\xd0\x04\x88\xad\xd0\x04p\xa7\xd0\x04H\xae\xd0\x04h\xaf\xd0\x04\xe0\xaf\xd0\x04\x10\xad\xd0\x04x\xa8\xd0\x04x\xae\xd0\x04\xb8\xa1\xd0\x04\xf0\xae\xd0\x04\xc8\xa9\xd0\x04\x98\xaf\xd0\x04\xf0\xab\xd0\x04 \xa0\xd0\x04\x18\xab\xd0\x04\x18\xa2\xd0\x04\xa0\xad\xd0\x04\xf0\xa2\xd0\x04\xa0\xa7\xd0\x04\xf0\xb2\x0c\x05(\xba\x0c\x05x\xb2\x0c\x05\x18\xb8\x0c\x05h\xb0\x0c\x05P\xb0\x0c\x05\x98\xb0\x0c\x05X\xb4\x0c\x05\xf8\xb9\x0c\x05\xf0\xb5\x0c\x05`\xb8\x0c\x05\xc0\xb2\x0c\x05\xa0\xb4\x0c\x05\xe8\xb7\x0c\x05\xd0\xbd\x0c\x05\xd0\xba\x0c\x05\x10\xba\x0c\x05 \xb3\x0c\x05\xd0\xb4\x0c\x05h\xb6\x0c\x05\xe0\xb9\x0c\x05\xd0\xb1\x0c\x050\xb5\x0c\x05\xf8\xb6\x0c\x05\x08\xb6\x0c\x05\x00\xb8\x0c\x058\xb9\x0c\x05H\xbb\x0c\x05X\xb7\x0c\x05\xb8\xb1\x0c\x05\x80\xb3\x0c\x05\xc8\xb0\x0c\x05\x10\xb1\x0c\x05\x00\xbb\x0c\x058\xb6\x0c\x05\xa0\xb1\x0c\x05 \xb0\x0c\x05@\xb4\x0c\x05`\xb5\x0c\x05\xe0\xb0\x0c\x05\x08\xb3\x0c\x05\xc8\xb6\x0c\x05\x80\xb9\x0c\x05p\xbd\x0c\x05\x98\xbc\x0c\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6412
sg6370
g6459
sg6384
g6419
sg6379
g6466
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6495
sg6370
g6491
sg6384
g6502
sg6379
g6499
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6512
sg6370
g6508
sg6384
g6519
sg6379
g6516
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6478
sg6370
g6525
sg6384
g6485
sg6379
g6532
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6544
sg6370
g6540
sg6384
g6551
sg6379
g6548
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6574
sg6370
g6570
sg6384
g6581
sg6379
g6578
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6604
sg6370
g6600
sg6384
g6611
sg6379
g6608
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6621
sg6370
g6617
sg6384
g6628
sg6379
g6625
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6604
sg6370
g6634
sg6384
g6611
sg6379
g6641
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6653
sg6370
g6649
sg6384
g6660
sg6379
g6657
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6544
sg6370
g6540
sg6384
g6551
sg6379
g6548
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6512
sg6370
g6508
sg6384
g6519
sg6379
g6516
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6621
sg6370
g6692
sg6384
g6628
sg6379
g6699
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6495
sg6370
g6491
sg6384
g6502
sg6379
g6499
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6730
sg6370
g6720
sg6384
g6724
sg6379
g6728
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6760
sg6370
g6750
sg6384
g6754
sg6379
g6758
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6412
sg6370
g6459
sg6384
g6419
sg6379
g6466
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6478
sg6370
g6525
sg6384
g6485
sg6379
g6532
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6512
sg6370
g6793
sg6384
g6519
sg6379
g6800
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6812
sg6370
g6808
sg6384
g6819
sg6379
g6816
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6829
sg6370
g6825
sg6384
g6836
sg6379
g6833
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6544
sg6370
g6842
sg6384
g6551
sg6379
g6849
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6495
sg6370
g6857
sg6384
g6502
sg6379
g6864
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6621
sg6370
g6692
sg6384
g6628
sg6379
g6699
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6812
sg6370
g6898
sg6384
g6819
sg6379
g6905
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6730
sg6370
g6720
sg6384
g6724
sg6379
g6728
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6829
sg6370
g6926
sg6384
g6836
sg6379
g6933
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6951
sg6370
g6941
sg6384
g6945
sg6379
g6949
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6446
sg6370
g6958
sg6384
g6453
sg6379
g6965
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6574
sg6370
g6570
sg6384
g6581
sg6379
g6578
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6653
sg6370
g6986
sg6384
g6660
sg6379
g6993
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6429
sg6370
g7001
sg6384
g6436
sg6379
g7008
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6760
sg6370
g7016
sg6384
g6754
sg6379
g7023
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6653
sg6370
g6649
sg6384
g6660
sg6379
g6657
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6812
sg6370
g6898
sg6384
g6819
sg6379
g6905
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6495
sg6370
g6857
sg6384
g6502
sg6379
g6864
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g7074
sg6370
g7070
sg6384
g7081
sg6379
g7078
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6951
sg6370
g7087
sg6384
g6945
sg6379
g7094
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6760
sg6370
g6750
sg6384
g6754
sg6379
g6758
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6951
sg6370
g6941
sg6384
g6945
sg6379
g6949
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6375
sg6370
g7128
sg6384
g6385
sg6379
g7135
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6574
sg6370
g6570
sg6384
g6581
sg6379
g6578
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6829
sg6370
g6825
sg6384
g6836
sg6379
g6833
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6412
sg6370
g6459
sg6384
g6419
sg6379
g6466
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6574
sg6370
g6570
sg6384
g6581
sg6379
g6578
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6621
sg6370
g6692
sg6384
g6628
sg6379
g6699
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6812
sg6370
g6808
sg6384
g6819
sg6379
g6816
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6495
sg6370
g6491
sg6384
g6502
sg6379
g6499
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6446
sg6370
g6958
sg6384
g6453
sg6379
g6965
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6478
sg6370
g6525
sg6384
g6485
sg6379
g6532
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6512
sg6370
g6793
sg6384
g6519
sg6379
g6800
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6604
sg6370
g6634
sg6384
g6611
sg6379
g6641
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6621
sg6370
g6617
sg6384
g6628
sg6379
g6625
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6495
sg6370
g6491
sg6384
g6502
sg6379
g6499
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6730
sg6370
g7338
sg6384
g6724
sg6379
g7345
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g7074
sg6370
g7353
sg6384
g7081
sg6379
g7360
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6574
sg6370
g7368
sg6384
g6581
sg6379
g7375
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6621
sg6370
g6617
sg6384
g6628
sg6379
g6625
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6829
sg6370
g6825
sg6384
g6836
sg6379
g6833
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6760
sg6370
g6750
sg6384
g6754
sg6379
g6758
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6395
sg6370
g7435
sg6384
g6402
sg6379
g7442
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6829
sg6370
g6926
sg6384
g6836
sg6379
g6933
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6604
sg6370
g6600
sg6384
g6611
sg6379
g6608
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6812
sg6370
g6808
sg6384
g6819
sg6379
g6816
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6512
sg6370
g6793
sg6384
g6519
sg6379
g6800
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6544
sg6370
g6540
sg6384
g6551
sg6379
g6548
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g7519
sg6370
g7515
sg6384
g7526
sg6379
g7523
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6604
sg6370
g6600
sg6384
g6611
sg6379
g6608
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6730
sg6370
g6720
sg6384
g6724
sg6379
g6728
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6544
sg6370
g6842
sg6384
g6551
sg6379
g6849
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g7074
sg6370
g7353
sg6384
g7081
sg6379
g7360
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6574
sg6370
g7368
sg6384
g6581
sg6379
g7375
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6812
sg6370
g6898
sg6384
g6819
sg6379
g6905
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6653
sg6370
g6649
sg6384
g6660
sg6379
g6657
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g7519
sg6370
g7515
sg6384
g7526
sg6379
g7523
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6760
sg6370
g7016
sg6384
g6754
sg6379
g7023
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6478
sg6370
g6525
sg6384
g6485
sg6379
g6532
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6412
sg6370
g6459
sg6384
g6419
sg6379
g6466
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6574
sg6370
g6570
sg6384
g6581
sg6379
g6578
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g7519
sg6370
g7740
sg6384
g7526
sg6379
g7747
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6951
sg6370
g6941
sg6384
g6945
sg6379
g6949
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6653
sg6370
g6986
sg6384
g6660
sg6379
g6993
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6512
sg6370
g6508
sg6384
g6519
sg6379
g6516
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6730
sg6370
g6720
sg6384
g6724
sg6379
g6728
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g7519
sg6370
g7740
sg6384
g7526
sg6379
g7747
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6812
sg6370
g6808
sg6384
g6819
sg6379
g6816
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6653
sg6370
g6986
sg6384
g6660
sg6379
g6993
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6760
sg6370
g7016
sg6384
g6754
sg6379
g7023
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6604
sg6370
g6600
sg6384
g6611
sg6379
g6608
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6829
sg6370
g6926
sg6384
g6836
sg6379
g6933
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6621
sg6370
g6617
sg6384
g6628
sg6379
g6625
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6760
sg6370
g6750
sg6384
g6754
sg6379
g6758
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6375
sg6370
g7128
sg6384
g6385
sg6379
g7135
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6653
sg6370
g6986
sg6384
g6660
sg6379
g6993
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6478
sg6370
g6525
sg6384
g6485
sg6379
g6532
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6495
sg6370
g6857
sg6384
g6502
sg6379
g6864
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6544
sg6370
g6540
sg6384
g6551
sg6379
g6548
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g7519
sg6370
g7515
sg6384
g7526
sg6379
g7523
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6760
sg6370
g6750
sg6384
g6754
sg6379
g6758
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6730
sg6370
g7338
sg6384
g6724
sg6379
g7345
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g7519
sg6370
g7515
sg6384
g7526
sg6379
g7523
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6544
sg6370
g6842
sg6384
g6551
sg6379
g6849
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g7074
sg6370
g7353
sg6384
g7081
sg6379
g7360
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6604
sg6370
g6634
sg6384
g6611
sg6379
g6641
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g7074
sg6370
g7070
sg6384
g7081
sg6379
g7078
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6604
sg6370
g6634
sg6384
g6611
sg6379
g6641
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6730
sg6370
g7338
sg6384
g6724
sg6379
g7345
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6429
sg6370
g7001
sg6384
g6436
sg6379
g7008
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6495
sg6370
g6857
sg6384
g6502
sg6379
g6864
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6812
sg6370
g6898
sg6384
g6819
sg6379
g6905
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6512
sg6370
g6793
sg6384
g6519
sg6379
g6800
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g7074
sg6370
g7353
sg6384
g7081
sg6379
g7360
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6574
sg6370
g7368
sg6384
g6581
sg6379
g7375
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6446
sg6370
g6958
sg6384
g6453
sg6379
g6965
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6375
sg6370
g7128
sg6384
g6385
sg6379
g7135
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6621
sg6370
g6692
sg6384
g6628
sg6379
g6699
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g7074
sg6370
g7353
sg6384
g7081
sg6379
g7360
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6621
sg6370
g6617
sg6384
g6628
sg6379
g6625
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6512
sg6370
g6793
sg6384
g6519
sg6379
g6800
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6951
sg6370
g7087
sg6384
g6945
sg6379
g7094
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g7519
sg6370
g7740
sg6384
g7526
sg6379
g7747
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6395
sg6370
g7435
sg6384
g6402
sg6379
g7442
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6544
sg6370
g6540
sg6384
g6551
sg6379
g6548
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6604
sg6370
g6600
sg6384
g6611
sg6379
g6608
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g7074
sg6370
g7070
sg6384
g7081
sg6379
g7078
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6544
sg6370
g6842
sg6384
g6551
sg6379
g6849
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6429
sg6370
g7001
sg6384
g6436
sg6379
g7008
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g7074
sg6370
g7070
sg6384
g7081
sg6379
g7078
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6574
sg6370
g7368
sg6384
g6581
sg6379
g7375
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6495
sg6370
g6857
sg6384
g6502
sg6379
g6864
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6412
sg6370
g6459
sg6384
g6419
sg6379
g6466
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6574
sg6370
g7368
sg6384
g6581
sg6379
g7375
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6812
sg6370
g6898
sg6384
g6819
sg6379
g6905
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6621
sg6370
g6692
sg6384
g6628
sg6379
g6699
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6446
sg6370
g6958
sg6384
g6453
sg6379
g6965
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6951
sg6370
g6941
sg6384
g6945
sg6379
g6949
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g7519
sg6370
g7515
sg6384
g7526
sg6379
g7523
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6829
sg6370
g6926
sg6384
g6836
sg6379
g6933
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g7074
sg6370
g7070
sg6384
g7081
sg6379
g7078
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6730
sg6370
g7338
sg6384
g6724
sg6379
g7345
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6829
sg6370
g6825
sg6384
g6836
sg6379
g6833
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6429
sg6370
g7001
sg6384
g6436
sg6379
g7008
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6951
sg6370
g6941
sg6384
g6945
sg6379
g6949
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6429
sg6370
g7001
sg6384
g6436
sg6379
g7008
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6375
sg6370
g7128
sg6384
g6385
sg6379
g7135
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6760
sg6370
g7016
sg6384
g6754
sg6379
g7023
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6375
sg6370
g7128
sg6384
g6385
sg6379
g7135
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6829
sg6370
g6825
sg6384
g6836
sg6379
g6833
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6512
sg6370
g6508
sg6384
g6519
sg6379
g6516
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6544
sg6370
g6842
sg6384
g6551
sg6379
g6849
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6951
sg6370
g7087
sg6384
g6945
sg6379
g7094
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6512
sg6370
g6508
sg6384
g6519
sg6379
g6516
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6812
sg6370
g6808
sg6384
g6819
sg6379
g6816
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6395
sg6370
g7435
sg6384
g6402
sg6379
g7442
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6730
sg6370
g7338
sg6384
g6724
sg6379
g7345
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6395
sg6370
g7435
sg6384
g6402
sg6379
g7442
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6604
sg6370
g6634
sg6384
g6611
sg6379
g6641
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6951
sg6370
g7087
sg6384
g6945
sg6379
g7094
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6760
sg6370
g7016
sg6384
g6754
sg6379
g7023
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6446
sg6370
g6958
sg6384
g6453
sg6379
g6965
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6395
sg6370
g7435
sg6384
g6402
sg6379
g7442
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6730
sg6370
g6720
sg6384
g6724
sg6379
g6728
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6653
sg6370
g6649
sg6384
g6660
sg6379
g6657
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6495
sg6370
g6491
sg6384
g6502
sg6379
g6499
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6829
sg6370
g6926
sg6384
g6836
sg6379
g6933
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6653
sg6370
g6649
sg6384
g6660
sg6379
g6657
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g7519
sg6370
g7740
sg6384
g7526
sg6379
g7747
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6653
sg6370
g6986
sg6384
g6660
sg6379
g6993
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6951
sg6370
g7087
sg6384
g6945
sg6379
g7094
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g7519
sg6370
g7740
sg6384
g7526
sg6379
g7747
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.