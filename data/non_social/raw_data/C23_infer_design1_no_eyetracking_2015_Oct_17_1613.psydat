ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C23_infer_design1_no_eyetracking_2015_Oct_17_1613
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vl
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x83$f\xcbL\x00N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Oct_17_1613
p66
sVparticipant
p67
VC23
p68
sVglasses
p69
Vy
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vl
sg15
F0.88361286548297358
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vy
sa(dp89
g63
g64
sg56
Vl
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F12.266444139518171
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P3\x00'
tbsg69
Vy
sa(dp95
g63
g64
sg20
F9.5500000000000007
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F0.59999999999999942
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x1b\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p102
sg21
F1.2
sg69
Vy
sa(dp103
g63
g64
sg20
F6.3840000000000003
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'\x07\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p109
sg21
F2
sg69
Vy
sa(dp110
g63
g64
sg20
F4.7839999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F1.0199999999999991
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\x0b\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p116
sg21
F2
sg69
Vy
sa(dp117
g63
g64
sg20
F2.4009999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S' \x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p123
sg21
F1.1000000000000001
sg69
Vy
sa(dp124
g63
g64
sg20
F7.8010000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F1.46
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x06\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V7-olives.png
p130
sg21
F1.5
sg69
Vy
sa(dp131
g63
g64
sg20
F2.7170000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0.49999999999999889
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'&\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V50-polo.png
p137
sg21
F1.8
sg69
Vy
sa(dp138
g63
g64
sg20
F2.9009999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.57999999999999918
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\x15\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V29-beans.png
p144
sg21
F1.5
sg69
Vy
sa(dp145
g63
g64
sg20
F5.984
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F0.69999999999999951
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x12\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p151
sg21
F1.2
sg69
Vy
sa(dp152
g63
g64
sg20
F6.6669999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F0.95999999999999974
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x04\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p158
sg21
F1.2
sg69
Vy
sa(dp159
g63
g64
sg20
F2.1840000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F1.2199999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'#\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p165
sg21
F1.8
sg69
Vy
sa(dp166
g63
g64
sg20
F1.8169999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F1.3999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\x01\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p172
sg21
F1.3999999999999999
sg69
Vy
sa(dp173
g63
g64
sg20
F3.5339999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F2.3600000000000008
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'\x00\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p179
sg21
F1.3
sg69
Vy
sa(dp180
g63
g64
sg20
F4.734
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F1.2399999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x16\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p186
sg21
F1.8
sg69
Vy
sa(dp187
g63
g64
sg20
F1.351
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0.65999999999999948
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\x11\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p193
sg21
F1.2
sg69
Vy
sa(dp194
g63
g64
sg20
F1.351
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F0.63999999999999924
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\x08\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p200
sg21
F1.5
sg69
Vy
sa(dp201
g63
g64
sg20
F3.984
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F0.57999999999999918
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\x0f\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p207
sg21
F1.3999999999999999
sg69
Vy
sa(dp208
g63
g64
sg20
F5.2009999999999996
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F0.53999999999999937
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'%\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p214
sg21
F1.3
sg69
Vy
sa(dp215
g63
g64
sg20
F1.784
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F1.5799999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x14\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p221
sg21
F1.8
sg69
Vy
sa(dp222
g63
g64
sg20
F3.117
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F0.37999999999999878
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x19\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p228
sg21
F1.8
sg69
Vy
sa(dp229
g63
g64
sg20
F2.9169999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F0.69999999999999929
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'$\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V48-twix.png
p235
sg21
F1.6000000000000001
sg69
Vy
sa(dp236
g63
g64
sg20
F2.4169999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F0.13999999999999874
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x10\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V22-daim.png
p242
sg21
F1.8
sg69
Vy
sa(dp243
g63
g64
sg20
F5.601
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0.67999999999999883
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x0e\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p249
sg21
F1.8999999999999999
sg69
Vy
sa(dp250
g63
g64
sg20
F1.2509999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F0.83999999999999964
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'\x13\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p256
sg21
F1.2
sg69
Vy
sa(dp257
g63
g64
sg20
F7.7169999999999996
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F0.75999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\t\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p263
sg21
F1.3
sg69
Vy
sa(dp264
g63
g64
sg20
F6.2670000000000003
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0.93999999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x1f\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p270
sg21
F1.1000000000000001
sg69
Vy
sa(dp271
g63
g64
sg20
F1.901
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F1.3399999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x1e\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p277
sg21
F1.6000000000000001
sg69
Vy
sa(dp278
g63
g64
sg20
F2.4660000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F0.63999999999999968
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\r\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p284
sg21
F1.1000000000000001
sg69
Vy
sa(dp285
g63
g64
sg20
F1.8340000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F0.65999999999999903
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'"\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p291
sg21
F1.7
sg69
Vy
sa(dp292
g63
g64
sg20
F1.7010000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0.69999999999999929
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S"'\x00\x00\x00"
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V51-mars.png
p298
sg21
F1.5
sg69
Vy
sa(dp299
g63
g64
sg20
F1.484
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F1.7200000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x1d\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V40-sardines.png
p305
sg21
F1.2
sg69
Vy
sa(dp306
g63
g64
sg20
F1.5509999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F1.0599999999999992
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x0c\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V18-mms.png
p312
sg21
F2
sg69
Vy
sa(dp313
g63
g64
sg20
F1.734
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F0.21999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'\n\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p319
sg21
F1.3999999999999999
sg69
Vy
sa(dp320
g63
g64
sg20
F1.784
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F0.29999999999999871
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'!\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V44-crunch.png
p326
sg21
F1.8
sg69
Vy
sa(dp327
g63
g64
sg20
F2.234
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F1.3199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x1a\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V35-raisins.png
p333
sg21
F2
sg69
Vy
sa(dp334
g63
g64
sg20
F1.651
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F0.7999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\x03\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V4-corn.png
p340
sg21
F1.2
sg69
Vy
sa(dp341
g63
g64
sg20
F1.5840000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F0.63999999999999901
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'\x18\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p347
sg21
F1.7
sg69
Vy
sa(dp348
g63
g64
sg20
F2.7010000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F0.87999999999999967
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'\x1c\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p354
sg21
F1.3
sg69
Vy
sa(dp355
g63
g64
sg20
F2.4510000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F1.9000000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'\x05\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p361
sg21
F1.7
sg69
Vy
sa(dp362
g63
g64
sg20
F3.2010000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F1.9199999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x02\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p368
sg21
F1.8
sg69
Vy
sa(dp369
g63
g64
sg20
F1.5169999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F1.3599999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x17\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p375
sg21
F1.8
sg69
Vy
sa(dp376
g63
g64
sg55
g11
sg56
Vl
sg23
F1.9669154321759379
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vy
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'22-daim.png'
p380
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vl
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'right'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F1.166688951692322
sg27
F2.1840000000000002
sg69
Vy
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p389
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vl
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'right'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F1.1497918654617933
sg27
F1.0840000000000001
sg69
Vy
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p398
sg26
F2.0999999999999983
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vl
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'right'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F3.600014482890856
sg27
F2.0510000000000002
sg69
Vy
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'50-polo.png'
p407
sg26
F1
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vl
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'left'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F1.9667258431509254
sg27
F0.90100000000000002
sg69
Vy
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p416
sg26
F4.2000000000000011
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vl
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'right'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F1.7834890481690309
sg27
F4.8170000000000002
sg69
Vy
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p425
sg26
F1
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vl
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'left'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F4.7000641751719741
sg27
F0.65100000000000002
sg69
Vy
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'49-yorkie.png'
p434
sg26
F1
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vl
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'left'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F1.3667224790151522
sg27
F1.2170000000000001
sg69
Vy
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'46-pistachios.png'
p443
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vl
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'left'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F1.0334015948856177
sg27
F2.8170000000000002
sg69
Vy
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'5-pineapple.png'
p452
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vl
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'right'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F0.88341443847320988
sg27
F0.58399999999999996
sg69
Vy
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p461
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vl
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'left'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F0.9668490047429259
sg27
F0.83399999999999996
sg69
Vy
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'25-kitkat.png'
p470
sg26
F4.9000000000000021
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vl
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F3.3667692348044511
sg27
F0.751
sg69
Vy
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'18-mms.png'
p479
sg26
F5.9999999999999982
sg28
F3
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vl
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'left'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.400414587008072
sg27
F0.78400000000000003
sg69
Vy
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p488
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vl
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'left'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.4833727573968645
sg27
F1.101
sg69
Vy
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p497
sg26
F3.2000000000000002
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vl
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'right'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F1.0000555937745048
sg27
F0.71799999999999997
sg69
Vy
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p506
sg26
F3.1000000000000001
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vl
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'right'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F3.4665110231048857
sg27
F1.6339999999999999
sg69
Vy
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p515
sg26
F2.4999999999999991
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vl
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'left'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F1.9833629215754627
sg27
F0.63400000000000001
sg69
Vy
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p524
sg26
F5.9999999999999982
sg28
F3
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vl
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'right'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.0500569194718992
sg27
F0.86799999999999999
sg69
Vy
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p533
sg26
F4.4000000000000004
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vl
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'right'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F2.5834412660324233
sg27
F0.90100000000000002
sg69
Vy
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'35-raisins.png'
p542
sg26
F4
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vl
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F0.98338972062583707
sg27
F0.80100000000000005
sg69
Vy
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p551
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vl
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'left'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F0.96676917778540883
sg27
F0.76700000000000002
sg69
Vy
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p560
sg26
F4.7000000000000011
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vl
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'left'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F2.0500660425527713
sg27
F0.80100000000000005
sg69
Vy
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'40-sardines.png'
p569
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vl
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'left'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F0.816701054029636
sg27
F1.3839999999999999
sg69
Vy
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p578
sg26
F4.1000000000000014
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vl
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'right'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F1.950022337293376
sg27
F0.86699999999999999
sg69
Vy
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'7-olives.png'
p587
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vl
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'left'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F1.4000428214608291
sg27
F0.53400000000000003
sg69
Vy
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'31-hobnobs.png'
p596
sg26
F3.8999999999999999
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vl
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'right'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F1.7001172030800262
sg27
F0.63400000000000001
sg69
Vy
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'51-mars.png'
p605
sg26
F3.5000000000000004
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vl
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'left'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F1.3167767470913532
sg27
F2.3010000000000002
sg69
Vy
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p614
sg26
F4.4000000000000004
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vl
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'left'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F1.1667203122829051
sg27
F1.0669999999999999
sg69
Vy
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'48-twix.png'
p623
sg26
F4.2999999999999998
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vl
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'left'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F1.0667207969468109
sg27
F1.3340000000000001
sg69
Vy
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p632
sg26
F4.5000000000000018
sg28
F3
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vl
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'right'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.2833899772122095
sg27
F5.0170000000000003
sg69
Vy
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p641
sg26
F4.7000000000000011
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vl
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'right'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F1.6333527864026109
sg27
F0.86699999999999999
sg69
Vy
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p650
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vl
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'left'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F0.83338916468755997
sg27
F0.88400000000000001
sg69
Vy
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p659
sg26
F4.4000000000000012
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vl
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'right'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F1.3167778874762917
sg27
F1.651
sg69
Vy
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'44-crunch.png'
p668
sg26
F4.4000000000000012
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vl
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'right'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F1.1335225612365321
sg27
F1.284
sg69
Vy
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p677
sg26
F4.7000000000000011
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vl
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'right'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F0.75003185950936313
sg27
F0.55100000000000005
sg69
Vy
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p686
sg26
F4.4000000000000012
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vl
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'left'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F3.1833254599246175
sg27
F1.3169999999999999
sg69
Vy
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'29-beans.png'
p695
sg26
F3
sg28
F3
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vl
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'right'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F7.1999243354475766
sg27
F4.1669999999999998
sg69
Vy
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'4-corn.png'
p704
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vl
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'right'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F0.85006188014722284
sg27
F0.90100000000000002
sg69
Vy
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p713
sg26
F2.2999999999999994
sg28
F3
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vl
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'right'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F0.68354598189580429
sg27
F1.284
sg69
Vy
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'38-maltesers.png'
p722
sg26
F4.6000000000000014
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vl
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'left'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F1.1998710224434035
sg27
F0.80100000000000005
sg69
Vy
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p731
sg26
F4.1000000000000005
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vl
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'left'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F0.66662010094114521
sg27
F0.53400000000000003
sg69
Vy
sa(dp738
g63
g64
sg56
Vl
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F228.093014086322
sg55
g11
sg65
g66
sg67
g68
sg69
Vy
sa(dp740
g63
g64
sg56
Vl
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F11.933133803951478
sg65
g66
sg67
g68
sg69
Vy
sa(dp742
g63
g64
sg81
S'32-hovis_crackers.png'
p743
sg82
S'24-food_doctor_apple_walnut_bar.png'
p744
sg56
Vl
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\n\x11\x10\x18\x16\x03k\x00'
tRp753
sa(dp754
g63
g64
sg81
S'53-cheestrings.png'
p755
sg82
S'53-cheestrings.png'
p756
sg56
Vl
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'47-picnic.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\n\x11\x10\x18$\x06h\xa0'
tRp764
sa(dp765
g63
g64
sg81
S'52-aero_mousse.png'
p766
sg82
S'14-discos_salt_vinegar.png'
p767
sg56
Vl
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'14-discos_salt_vinegar.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\n\x11\x10\x18/\t\xf2\xe0'
tRp775
sa(dp776
g63
g64
sg81
S'11-snickers.png'
p777
sg82
S'54-frubes_yogurt.png'
p778
sg56
Vl
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'54-frubes_yogurt.png'
p782
sg33
g782
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\n\x11\x10\x188\x06h\xa0'
tRp786
sa(dp787
g63
g64
sg81
g766
sg82
S'52-aero_mousse.png'
p788
sg56
Vl
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p791
I0
sg83
g771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p792
sS'practice_loop.thisIndex'
p793
g59
(g98
S'\x04\x00\x00\x00'
tRp794
sg34
g752
(S'\x07\xdf\n\x11\x10\x19\x03\n\x83h'
tRp795
sa(dp796
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p797
sg82
S'37-nakd_cashew_cookie.png'
p798
sg56
Vl
sS'practice_loop.thisN'
p799
I5
sS'practice_loop.thisTrialN'
p800
I5
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p801
I0
sg83
S'9-yu_mango_pieces.png'
p802
sg33
g797
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p803
sS'practice_loop.thisIndex'
p804
g59
(g98
S'\x05\x00\x00\x00'
tRp805
sg34
g752
(S'\x07\xdf\n\x11\x10\x19\n\n\x96\xf0'
tRp806
sa(dp807
g63
g64
sg81
S'15-walnut_whip.png'
p808
sg82
S'28-maple_pecan.png'
p809
sg56
Vl
sS'practice_loop.thisN'
p810
I6
sS'practice_loop.thisTrialN'
p811
I6
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p812
I0
sg83
S'28-maple_pecan.png'
p813
sg33
g808
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p814
sS'practice_loop.thisIndex'
p815
g59
(g98
S'\x06\x00\x00\x00'
tRp816
sg34
g752
(S'\x07\xdf\n\x11\x10\x19\x11\x08\x83\xb0'
tRp817
sa(dp818
g63
g64
sg81
g755
sg82
S'47-picnic.png'
p819
sg56
Vl
sS'practice_loop.thisN'
p820
I7
sS'practice_loop.thisTrialN'
p821
I7
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p822
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p823
sS'practice_loop.thisIndex'
p824
g59
(g98
S'\x07\x00\x00\x00'
tRp825
sg34
g752
(S'\x07\xdf\n\x11\x10\x19\x18\x08\xd1\xd0'
tRp826
sa(dp827
g63
g64
sg81
g777
sg82
S'11-snickers.png'
p828
sg56
Vl
sS'practice_loop.thisN'
p829
I8
sS'practice_loop.thisTrialN'
p830
I8
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p831
I0
sg83
g782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p832
sS'practice_loop.thisIndex'
p833
g59
(g98
S'\x08\x00\x00\x00'
tRp834
sg34
g752
(S'\x07\xdf\n\x11\x10\x19\x1e\x08\xe9@'
tRp835
sa(dp836
g63
g64
sg81
S'12-topic.png'
p837
sg82
S'12-topic.png'
p838
sg56
Vl
sS'practice_loop.thisN'
p839
I9
sS'practice_loop.thisTrialN'
p840
I9
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p841
I0
sg83
S'39-mackerel.png'
p842
sg33
g837
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S'\x07\xdf\n\x11\x10\x19%\x0c\xc9p'
tRp846
sa(dp847
g63
g64
sg81
g808
sg82
S'15-walnut_whip.png'
p848
sg56
Vl
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g813
sg33
g808
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\n\x11\x10\x19,\x08\xcd\xe8'
tRp855
sa(dp856
g63
g64
sg81
g743
sg82
S'32-hovis_crackers.png'
p857
sg56
Vl
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\n\x11\x10\x192\t^p'
tRp864
sa(dp865
g63
g64
sg81
g837
sg82
S'39-mackerel.png'
p866
sg56
Vl
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g842
sg33
g837
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\n\x11\x10\x199\x02\xc6\xf0'
tRp873
sa(dp874
g63
g64
sg81
g797
sg82
S'9-yu_mango_pieces.png'
p875
sg56
Vl
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g802
sg33
g797
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\n\x11\x10\x1a\x03\r\x1bx'
tRp882
sa(dp883
g63
g64
sg56
Vl
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F14.716481159270188
sg65
g66
sg67
g68
sg69
Vy
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vl
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vy
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'43-mrporky_pork_crackles_redo.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'right'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'18-mms.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'18-mms.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p907
I0
sS'img_wrong'
p908
S'43-mrporky_pork_crackles_redo.png'
p909
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vy
sS'block_loop.thisTrialN'
p911
I0
sg39
F2.0334078670039162
sg34
g752
(S'\x07\xdf\n\x11\x10\x1a!\x00\xf20'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'48-twix.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'left'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'48-twix.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'50-polo.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p925
I0
sg908
S'50-polo.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vy
sS'block_loop.thisTrialN'
p928
I0
sg39
F1.1835096321206038
sg34
g752
(S'\x07\xdf\n\x11\x10\x1a(\x01\xf7\xe8'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'1-treacle_cookies.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'right'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'1-treacle_cookies.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'21-nakd_banana_crunch.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p942
I0
sg908
S'21-nakd_banana_crunch.png'
p943
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vy
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.450189546259935
sg34
g752
(S'\x07\xdf\n\x11\x10\x1a.\x05$h'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
g895
sS'block_loop.thisIndex'
p949
g888
sg38
S'right'
p950
sg58
g62
sS'trial_loop.thisN'
p951
I3
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p952
g59
(g98
S'\x03\x00\x00\x00'
tRp953
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p954
I0
sg903
g904
sS'block_loop.thisRepN'
p955
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p956
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p957
Nsg69
Vy
sS'block_loop.thisTrialN'
p958
I0
sg39
F2.7000926847995288
sg34
g752
(S'\x07\xdf\n\x11\x10\x1a4\x0c\x9ex'
tRp959
sa(dp960
S'trial_loop.thisTrialN'
p961
I4
sg894
S'23-crunchie_redo.png'
p962
sS'block_loop.thisIndex'
p963
g888
sg38
S'left'
p964
sg58
g62
sS'trial_loop.thisN'
p965
I4
sg33
S'23-crunchie_redo.png'
p966
sg63
g64
sS'trial_loop.thisIndex'
p967
g59
(g98
S'\x04\x00\x00\x00'
tRp968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p969
I0
sg903
S'33-ambrosia_rice.png'
p970
sS'block_loop.thisRepN'
p971
I0
sg906
g966
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p972
I0
sg908
S'33-ambrosia_rice.png'
p973
sg55
g11
sS'block_loop.thisTrial'
p974
Nsg69
Vy
sS'block_loop.thisTrialN'
p975
I0
sg39
F1.2001874793131719
sg34
g752
(S'\x07\xdf\n\x11\x10\x1b\x00\x08\x9f\x08'
tRp976
sa(dp977
S'trial_loop.thisTrialN'
p978
I5
sg894
S'8-liquorice_catherine_wheels.png'
p979
sS'block_loop.thisIndex'
p980
g888
sg38
S'left'
p981
sg58
g62
sS'trial_loop.thisN'
p982
I5
sg33
S'17-jacobs_mini_cheddars_redo.png'
p983
sg63
g64
sS'trial_loop.thisIndex'
p984
g59
(g98
S'\x05\x00\x00\x00'
tRp985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p986
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p987
sS'block_loop.thisRepN'
p988
I0
sg906
g983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p989
I0
sg908
S'8-liquorice_catherine_wheels.png'
p990
sg55
g11
sS'block_loop.thisTrial'
p991
Nsg69
Vy
sS'block_loop.thisTrialN'
p992
I0
sg39
F1.5002419041920803
sg34
g752
(S'\x07\xdf\n\x11\x10\x1b\x06\x0c\n\x08'
tRp993
sa(dp994
S'trial_loop.thisTrialN'
p995
I6
sg894
S'25-kitkat.png'
p996
sS'block_loop.thisIndex'
p997
g888
sg38
S'left'
p998
sg58
g62
sS'trial_loop.thisN'
p999
I6
sg33
S'31-hobnobs.png'
p1000
sg63
g64
sS'trial_loop.thisIndex'
p1001
g59
(g98
S'\x06\x00\x00\x00'
tRp1002
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1003
I0
sg903
S'31-hobnobs.png'
p1004
sS'block_loop.thisRepN'
p1005
I0
sg906
S'25-kitkat.png'
p1006
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1007
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p1008
Nsg69
Vy
sS'block_loop.thisTrialN'
p1009
I0
sg39
F2.9333681530915783
sg34
g752
(S'\x07\xdf\n\x11\x10\x1b\r\x04\xf9p'
tRp1010
sa(dp1011
S'trial_loop.thisTrialN'
p1012
I7
sg894
S'40-sardines.png'
p1013
sS'block_loop.thisIndex'
p1014
g888
sg38
S'right'
p1015
sg58
g62
sS'trial_loop.thisN'
p1016
I7
sg33
S'40-sardines.png'
p1017
sg63
g64
sS'trial_loop.thisIndex'
p1018
g59
(g98
S'\x07\x00\x00\x00'
tRp1019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1020
I0
sg903
S'5-pineapple.png'
p1021
sS'block_loop.thisRepN'
p1022
I0
sg906
g1017
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1023
I0
sg908
S'5-pineapple.png'
p1024
sg55
g11
sS'block_loop.thisTrial'
p1025
Nsg69
Vy
sS'block_loop.thisTrialN'
p1026
I0
sg39
F1.3000869258557941
sg34
g752
(S'\x07\xdf\n\x11\x10\x1b\x15\x04\x88('
tRp1027
sa(dp1028
S'trial_loop.thisTrialN'
p1029
I8
sg894
S'33-ambrosia_rice.png'
p1030
sS'block_loop.thisIndex'
p1031
g888
sg38
S'left'
p1032
sg58
g62
sS'trial_loop.thisN'
p1033
I8
sg33
g973
sg63
g64
sS'trial_loop.thisIndex'
p1034
g59
(g98
S'\x08\x00\x00\x00'
tRp1035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1036
I0
sg903
S'23-crunchie_redo.png'
p1037
sS'block_loop.thisRepN'
p1038
I0
sg906
g966
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1039
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p1040
Nsg69
Vy
sS'block_loop.thisTrialN'
p1041
I0
sg39
F1.583404773708935
sg34
g752
(S'\x07\xdf\n\x11\x10\x1b\x1b\t\xa0\xd8'
tRp1042
sa(dp1043
S'trial_loop.thisTrialN'
p1044
I9
sg894
S'19-caramello_redo.png'
p1045
sS'block_loop.thisIndex'
p1046
g888
sg38
S'right'
p1047
sg58
g62
sS'trial_loop.thisN'
p1048
I9
sg33
S'19-caramello_redo.png'
p1049
sg63
g64
sS'trial_loop.thisIndex'
p1050
g59
(g98
S'\t\x00\x00\x00'
tRp1051
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1052
I0
sg903
S'30-spaghetti_hoops.png'
p1053
sS'block_loop.thisRepN'
p1054
I0
sg906
g1049
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1055
I0
sg908
S'30-spaghetti_hoops.png'
p1056
sg55
g11
sS'block_loop.thisTrial'
p1057
Nsg69
Vy
sS'block_loop.thisTrialN'
p1058
I0
sg39
F1.8005657450548824
sg34
g752
(S'\x07\xdf\n\x11\x10\x1b"\x03\xbd\x08'
tRp1059
sa(dp1060
S'trial_loop.thisTrialN'
p1061
I10
sg894
S'46-pistachios.png'
p1062
sS'block_loop.thisIndex'
p1063
g888
sg38
S'right'
p1064
sg58
g62
sS'trial_loop.thisN'
p1065
I10
sg33
S'46-pistachios.png'
p1066
sg63
g64
sS'trial_loop.thisIndex'
p1067
g59
(g98
S'\n\x00\x00\x00'
tRp1068
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1069
I0
sg903
S'29-beans.png'
p1070
sS'block_loop.thisRepN'
p1071
I0
sg906
g1066
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1072
I0
sg908
S'29-beans.png'
p1073
sg55
g11
sS'block_loop.thisTrial'
p1074
Nsg69
Vy
sS'block_loop.thisTrialN'
p1075
I0
sg39
F1.216823417352316
sg34
g752
(S'\x07\xdf\n\x11\x10\x1b)\x010\xb0'
tRp1076
sa(dp1077
S'trial_loop.thisTrialN'
p1078
I11
sg894
S'50-polo.png'
p1079
sS'block_loop.thisIndex'
p1080
g888
sg38
S'left'
p1081
sg58
g62
sS'trial_loop.thisN'
p1082
I11
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1083
g59
(g98
S'\x0b\x00\x00\x00'
tRp1084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1085
I0
sg903
S'48-twix.png'
p1086
sS'block_loop.thisRepN'
p1087
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1088
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1089
Nsg69
Vy
sS'block_loop.thisTrialN'
p1090
I0
sg39
F1.5834136116936861
sg34
g752
(S'\x07\xdf\n\x11\x10\x1b/\x04\xda0'
tRp1091
sa(dp1092
S'trial_loop.thisTrialN'
p1093
I12
sg894
S'31-hobnobs.png'
p1094
sS'block_loop.thisIndex'
p1095
g888
sg38
S'right'
p1096
sg58
g62
sS'trial_loop.thisN'
p1097
I12
sg33
g1006
sg63
g64
sS'trial_loop.thisIndex'
p1098
g59
(g98
S'\x0c\x00\x00\x00'
tRp1099
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1100
I0
sg903
S'25-kitkat.png'
p1101
sS'block_loop.thisRepN'
p1102
I0
sg906
g1006
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1103
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p1104
Nsg69
Vy
sS'block_loop.thisTrialN'
p1105
I0
sg39
F0.73344039648873149
sg34
g752
(S'\x07\xdf\n\x11\x10\x1b5\x0e8\xa0'
tRp1106
sa(dp1107
S'trial_loop.thisTrialN'
p1108
I13
sg894
g1079
sS'block_loop.thisIndex'
p1109
g888
sg38
S'right'
p1110
sg58
g62
sS'trial_loop.thisN'
p1111
I13
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p1112
g59
(g98
S'\r\x00\x00\x00'
tRp1113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1114
I0
sg903
g1086
sS'block_loop.thisRepN'
p1115
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1116
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1117
Nsg69
Vy
sS'block_loop.thisTrialN'
p1118
I0
sg39
F5.6666962216477259
sg34
g752
(S'\x07\xdf\n\x11\x10\x1b;\n\xbe\x00'
tRp1119
sa(dp1120
S'trial_loop.thisTrialN'
p1121
I14
sg894
S'30-spaghetti_hoops.png'
p1122
sS'block_loop.thisIndex'
p1123
g888
sg38
S'right'
p1124
sg58
g62
sS'trial_loop.thisN'
p1125
I14
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p1126
g59
(g98
S'\x0e\x00\x00\x00'
tRp1127
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1128
I0
sg903
S'19-caramello_redo.png'
p1129
sS'block_loop.thisRepN'
p1130
I0
sg906
g1049
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1131
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p1132
Nsg69
Vy
sS'block_loop.thisTrialN'
p1133
I0
sg39
F0.80037501564493141
sg34
g752
(S'\x07\xdf\n\x11\x10\x1c\n\x061\xf0'
tRp1134
sa(dp1135
S'trial_loop.thisTrialN'
p1136
I15
sg894
S'42-mrkipling_lemon_slices.png'
p1137
sS'block_loop.thisIndex'
p1138
g888
sg38
S'right'
p1139
sg58
g62
sS'trial_loop.thisN'
p1140
I15
sg33
S'16-skips_prawn.png'
p1141
sg63
g64
sS'trial_loop.thisIndex'
p1142
g59
(g98
S'\x0f\x00\x00\x00'
tRp1143
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1144
I0
sg903
S'16-skips_prawn.png'
p1145
sS'block_loop.thisRepN'
p1146
I0
sg906
g1141
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1147
I0
sg908
S'42-mrkipling_lemon_slices.png'
p1148
sg55
g11
sS'block_loop.thisTrial'
p1149
Nsg69
Vy
sS'block_loop.thisTrialN'
p1150
I0
sg39
F1.0667427493599462
sg34
g752
(S'\x07\xdf\n\x11\x10\x1c\x10\x03\xa9\x80'
tRp1151
sa(dp1152
S'trial_loop.thisTrialN'
p1153
I16
sg894
g895
sS'block_loop.thisIndex'
p1154
g888
sg38
S'right'
p1155
sg58
g62
sS'trial_loop.thisN'
p1156
I16
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1157
g59
(g98
S'\x10\x00\x00\x00'
tRp1158
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1159
I0
sg903
g904
sS'block_loop.thisRepN'
p1160
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1161
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1162
Nsg69
Vy
sS'block_loop.thisTrialN'
p1163
I0
sg39
F1.1668580137848039
sg34
g752
(S'\x07\xdf\n\x11\x10\x1c\x16\x050 '
tRp1164
sa(dp1165
S'trial_loop.thisTrialN'
p1166
I17
sg894
S'7-olives.png'
p1167
sS'block_loop.thisIndex'
p1168
g888
sg38
S'left'
p1169
sg58
g62
sS'trial_loop.thisN'
p1170
I17
sg33
S'22-daim.png'
p1171
sg63
g64
sS'trial_loop.thisIndex'
p1172
g59
(g98
S'\x11\x00\x00\x00'
tRp1173
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1174
I0
sg903
S'22-daim.png'
p1175
sS'block_loop.thisRepN'
p1176
I0
sg906
g1171
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1177
I0
sg908
S'7-olives.png'
p1178
sg55
g11
sS'block_loop.thisTrial'
p1179
Nsg69
Vy
sS'block_loop.thisTrialN'
p1180
I0
sg39
F1.5167734969936646
sg34
g752
(S'\x07\xdf\n\x11\x10\x1c\x1c\x08"\x08'
tRp1181
sa(dp1182
S'trial_loop.thisTrialN'
p1183
I18
sg894
S'16-skips_prawn.png'
p1184
sS'block_loop.thisIndex'
p1185
g888
sg38
S'left'
p1186
sg58
g62
sS'trial_loop.thisN'
p1187
I18
sg33
g1141
sg63
g64
sS'trial_loop.thisIndex'
p1188
g59
(g98
S'\x12\x00\x00\x00'
tRp1189
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1190
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1191
sS'block_loop.thisRepN'
p1192
I0
sg906
g1141
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1193
I0
sg908
g1148
sg55
g11
sS'block_loop.thisTrial'
p1194
Nsg69
Vy
sS'block_loop.thisTrialN'
p1195
I0
sg39
F1.7167089511967788
sg34
g752
(S'\x07\xdf\n\x11\x10\x1c#\x01L\x08'
tRp1196
sa(dp1197
S'trial_loop.thisTrialN'
p1198
I19
sg894
S'49-yorkie.png'
p1199
sS'block_loop.thisIndex'
p1200
g888
sg38
S'left'
p1201
sg58
g62
sS'trial_loop.thisN'
p1202
I19
sg33
S'49-yorkie.png'
p1203
sg63
g64
sS'trial_loop.thisIndex'
p1204
g59
(g98
S'\x13\x00\x00\x00'
tRp1205
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1206
I0
sg903
S'35-raisins.png'
p1207
sS'block_loop.thisRepN'
p1208
I0
sg906
g1203
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1209
I0
sg908
S'35-raisins.png'
p1210
sg55
g11
sS'block_loop.thisTrial'
p1211
Nsg69
Vy
sS'block_loop.thisTrialN'
p1212
I0
sg39
F2.6671540862707843
sg34
g752
(S'\x07\xdf\n\x11\x10\x1c)\x0c\xd1@'
tRp1213
sa(dp1214
S'trial_loop.thisTrialN'
p1215
I20
sg894
S'22-daim.png'
p1216
sS'block_loop.thisIndex'
p1217
g888
sg38
S'left'
p1218
sg58
g62
sS'trial_loop.thisN'
p1219
I20
sg33
g1178
sg63
g64
sS'trial_loop.thisIndex'
p1220
g59
(g98
S'\x14\x00\x00\x00'
tRp1221
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1222
I0
sg903
S'7-olives.png'
p1223
sS'block_loop.thisRepN'
p1224
I0
sg906
g1171
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1225
I0
sg908
g1178
sg55
g11
sS'block_loop.thisTrial'
p1226
Nsg69
Vy
sS'block_loop.thisTrialN'
p1227
I0
sg39
F0.91688274588796048
sg34
g752
(S'\x07\xdf\n\x11\x10\x1c1\x08X\xb8'
tRp1228
sa(dp1229
S'trial_loop.thisTrialN'
p1230
I21
sg894
g1062
sS'block_loop.thisIndex'
p1231
g888
sg38
S'left'
p1232
sg58
g62
sS'trial_loop.thisN'
p1233
I21
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p1234
g59
(g98
S'\x15\x00\x00\x00'
tRp1235
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1236
I0
sg903
g1070
sS'block_loop.thisRepN'
p1237
I0
sg906
g1066
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1238
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p1239
Nsg69
Vy
sS'block_loop.thisTrialN'
p1240
I0
sg39
F1.1334136544583089
sg34
g752
(S'\x07\xdf\n\x11\x10\x1c7\x07z\x10'
tRp1241
sa(dp1242
S'trial_loop.thisTrialN'
p1243
I22
sg894
S'5-pineapple.png'
p1244
sS'block_loop.thisIndex'
p1245
g888
sg38
S'left'
p1246
sg58
g62
sS'trial_loop.thisN'
p1247
I22
sg33
g1024
sg63
g64
sS'trial_loop.thisIndex'
p1248
g59
(g98
S'\x16\x00\x00\x00'
tRp1249
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1250
I0
sg903
S'40-sardines.png'
p1251
sS'block_loop.thisRepN'
p1252
I0
sg906
g1017
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1253
I0
sg908
g1024
sg55
g11
sS'block_loop.thisTrial'
p1254
Nsg69
Vy
sS'block_loop.thisTrialN'
p1255
I0
sg39
F1.0001616495901544
sg34
g752
(S'\x07\xdf\n\x11\x10\x1d\x01\t\xf2\xe0'
tRp1256
sa(dp1257
S'trial_loop.thisTrialN'
p1258
I23
sg894
S'27-hartleys_raspberries_jelly.png'
p1259
sS'block_loop.thisIndex'
p1260
g888
sg38
S'right'
p1261
sg58
g62
sS'trial_loop.thisN'
p1262
I23
sg33
S'27-hartleys_raspberries_jelly.png'
p1263
sg63
g64
sS'trial_loop.thisIndex'
p1264
g59
(g98
S'\x17\x00\x00\x00'
tRp1265
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1266
I0
sg903
S'51-mars.png'
p1267
sS'block_loop.thisRepN'
p1268
I0
sg906
S'51-mars.png'
p1269
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1270
I0
sg908
g1263
sg55
g11
sS'block_loop.thisTrial'
p1271
Nsg69
Vy
sS'block_loop.thisTrialN'
p1272
I0
sg39
F1.000289942915515
sg34
g752
(S'\x07\xdf\n\x11\x10\x1d\x07\n\x83h'
tRp1273
sa(dp1274
S'trial_loop.thisTrialN'
p1275
I24
sg894
S'6-sour_patch_kids.png'
p1276
sS'block_loop.thisIndex'
p1277
g888
sg38
S'right'
p1278
sg58
g62
sS'trial_loop.thisN'
p1279
I24
sg33
S'6-sour_patch_kids.png'
p1280
sg63
g64
sS'trial_loop.thisIndex'
p1281
g59
(g98
S'\x18\x00\x00\x00'
tRp1282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1283
I0
sg903
S'38-maltesers.png'
p1284
sS'block_loop.thisRepN'
p1285
I0
sg906
S'38-maltesers.png'
p1286
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1287
I0
sg908
g1280
sg55
g11
sS'block_loop.thisTrial'
p1288
Nsg69
Vy
sS'block_loop.thisTrialN'
p1289
I0
sg39
F1.2002832716625562
sg34
g752
(S'\x07\xdf\n\x11\x10\x1d\r\x0b\x17\xd8'
tRp1290
sa(dp1291
S'trial_loop.thisTrialN'
p1292
I25
sg894
S'10-bounty_redo.png'
p1293
sS'block_loop.thisIndex'
p1294
g888
sg38
S'left'
p1295
sg58
g62
sS'trial_loop.thisN'
p1296
I25
sg33
S'10-bounty_redo.png'
p1297
sg63
g64
sS'trial_loop.thisIndex'
p1298
g59
(g98
S'\x19\x00\x00\x00'
tRp1299
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1300
I0
sg903
S'4-corn.png'
p1301
sS'block_loop.thisRepN'
p1302
I0
sg906
g1297
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1303
I0
sg908
S'4-corn.png'
p1304
sg55
g11
sS'block_loop.thisTrial'
p1305
Nsg69
Vy
sS'block_loop.thisTrialN'
p1306
I0
sg39
F0.98340426053528063
sg34
g752
(S'\x07\xdf\n\x11\x10\x1d\x13\x0e\x82\xd8'
tRp1307
sa(dp1308
S'trial_loop.thisTrialN'
p1309
I26
sg894
S'35-raisins.png'
p1310
sS'block_loop.thisIndex'
p1311
g888
sg38
S'right'
p1312
sg58
g62
sS'trial_loop.thisN'
p1313
I26
sg33
g1203
sg63
g64
sS'trial_loop.thisIndex'
p1314
g59
(g98
S'\x1a\x00\x00\x00'
tRp1315
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1316
I0
sg903
S'49-yorkie.png'
p1317
sS'block_loop.thisRepN'
p1318
I0
sg906
g1203
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1319
I0
sg908
g1210
sg55
g11
sS'block_loop.thisTrial'
p1320
Nsg69
Vy
sS'block_loop.thisTrialN'
p1321
I0
sg39
F1.6668376294010159
sg34
g752
(S'\x07\xdf\n\x11\x10\x1d\x19\x0e\xd8\xc8'
tRp1322
sa(dp1323
S'trial_loop.thisTrialN'
p1324
I27
sg894
S'21-nakd_banana_crunch.png'
p1325
sS'block_loop.thisIndex'
p1326
g888
sg38
S'right'
p1327
sg58
g62
sS'trial_loop.thisN'
p1328
I27
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p1329
g59
(g98
S'\x1b\x00\x00\x00'
tRp1330
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1331
I0
sg903
S'1-treacle_cookies.png'
p1332
sS'block_loop.thisRepN'
p1333
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1334
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1335
Nsg69
Vy
sS'block_loop.thisTrialN'
p1336
I0
sg39
F2.0168295184130329
sg34
g752
(S'\x07\xdf\n\x11\x10\x1d \n%\xa8'
tRp1337
sa(dp1338
S'trial_loop.thisTrialN'
p1339
I28
sg894
S'2-steamed_puddings.png'
p1340
sS'block_loop.thisIndex'
p1341
g888
sg38
S'left'
p1342
sg58
g62
sS'trial_loop.thisN'
p1343
I28
sg33
S'2-steamed_puddings.png'
p1344
sg63
g64
sS'trial_loop.thisIndex'
p1345
g59
(g98
S'\x1c\x00\x00\x00'
tRp1346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1347
I0
sg903
S'20-fruit_pastilles.png'
p1348
sS'block_loop.thisRepN'
p1349
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1350
I0
sg908
S'20-fruit_pastilles.png'
p1351
sg55
g11
sS'block_loop.thisTrial'
p1352
Nsg69
Vy
sS'block_loop.thisTrialN'
p1353
I0
sg39
F2.0002999212856594
sg34
g752
(S"\x07\xdf\n\x11\x10\x1d'\n\xec\xe0"
tRp1354
sa(dp1355
S'trial_loop.thisTrialN'
p1356
I29
sg894
S'44-crunch.png'
p1357
sS'block_loop.thisIndex'
p1358
g888
sg38
S'left'
p1359
sg58
g62
sS'trial_loop.thisN'
p1360
I29
sg33
S'44-crunch.png'
p1361
sg63
g64
sS'trial_loop.thisIndex'
p1362
g59
(g98
S'\x1d\x00\x00\x00'
tRp1363
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1364
I0
sg903
S'26-walkers_smoky_bacon.png'
p1365
sS'block_loop.thisRepN'
p1366
I0
sg906
S'26-walkers_smoky_bacon.png'
p1367
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1368
I0
sg908
g1361
sg55
g11
sS'block_loop.thisTrial'
p1369
Nsg69
Vy
sS'block_loop.thisTrialN'
p1370
I0
sg39
F1.5335229033516953
sg34
g752
(S'\x07\xdf\n\x11\x10\x1d.\x0by\x80'
tRp1371
sa(dp1372
S'trial_loop.thisTrialN'
p1373
I30
sg894
g1184
sS'block_loop.thisIndex'
p1374
g888
sg38
S'left'
p1375
sg58
g62
sS'trial_loop.thisN'
p1376
I30
sg33
g1141
sg63
g64
sS'trial_loop.thisIndex'
p1377
g59
(g98
S'\x1e\x00\x00\x00'
tRp1378
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1379
I0
sg903
g1191
sS'block_loop.thisRepN'
p1380
I0
sg906
g1141
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1381
I0
sg908
g1148
sg55
g11
sS'block_loop.thisTrial'
p1382
Nsg69
Vy
sS'block_loop.thisTrialN'
p1383
I0
sg39
F1.1500570050011447
sg34
g752
(S'\x07\xdf\n\x11\x10\x1d5\x04\xde\x18'
tRp1384
sa(dp1385
S'trial_loop.thisTrialN'
p1386
I31
sg894
g932
sS'block_loop.thisIndex'
p1387
g888
sg38
S'right'
p1388
sg58
g62
sS'trial_loop.thisN'
p1389
I31
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1390
g59
(g98
S'\x1f\x00\x00\x00'
tRp1391
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1392
I0
sg903
g940
sS'block_loop.thisRepN'
p1393
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1394
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1395
Nsg69
Vy
sS'block_loop.thisTrialN'
p1396
I0
sg39
F1.8000711030126695
sg34
g752
(S'\x07\xdf\n\x11\x10\x1d;\x07\xd3\xe8'
tRp1397
sa(dp1398
S'trial_loop.thisTrialN'
p1399
I32
sg894
S'45-chewy_nougat_redo.png'
p1400
sS'block_loop.thisIndex'
p1401
g888
sg38
S'left'
p1402
sg58
g62
sS'trial_loop.thisN'
p1403
I32
sg33
S'41-peanuts_redo.png'
p1404
sg63
g64
sS'trial_loop.thisIndex'
p1405
g59
(g98
S' \x00\x00\x00'
tRp1406
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1407
I0
sg903
S'41-peanuts_redo.png'
p1408
sS'block_loop.thisRepN'
p1409
I0
sg906
g1404
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1410
I0
sg908
S'45-chewy_nougat_redo.png'
p1411
sg55
g11
sS'block_loop.thisTrial'
p1412
Nsg69
Vy
sS'block_loop.thisTrialN'
p1413
I0
sg39
F0.93351754354262084
sg34
g752
(S'\x07\xdf\n\x11\x10\x1e\x06\x05C\xa8'
tRp1414
sa(dp1415
S'trial_loop.thisTrialN'
p1416
I33
sg894
g1167
sS'block_loop.thisIndex'
p1417
g888
sg38
S'right'
p1418
sg58
g62
sS'trial_loop.thisN'
p1419
I33
sg33
g1171
sg63
g64
sS'trial_loop.thisIndex'
p1420
g59
(g98
S'!\x00\x00\x00'
tRp1421
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1422
I0
sg903
g1175
sS'block_loop.thisRepN'
p1423
I0
sg906
g1171
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1424
I0
sg908
g1178
sg55
g11
sS'block_loop.thisTrial'
p1425
Nsg69
Vy
sS'block_loop.thisTrialN'
p1426
I0
sg39
F1.1168641005915561
sg34
g752
(S'\x07\xdf\n\x11\x10\x1e\x0c\x04\xa7h'
tRp1427
sa(dp1428
S'trial_loop.thisTrialN'
p1429
I34
sg894
S'29-beans.png'
p1430
sS'block_loop.thisIndex'
p1431
g888
sg38
S'right'
p1432
sg58
g62
sS'trial_loop.thisN'
p1433
I34
sg33
g1073
sg63
g64
sS'trial_loop.thisIndex'
p1434
g59
(g98
S'"\x00\x00\x00'
tRp1435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1436
I0
sg903
S'46-pistachios.png'
p1437
sS'block_loop.thisRepN'
p1438
I0
sg906
g1066
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1439
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p1440
Nsg69
Vy
sS'block_loop.thisTrialN'
p1441
I0
sg39
F1.4001882205629954
sg34
g752
(S'\x07\xdf\n\x11\x10\x1e\x12\x06\xe1\xb8'
tRp1442
sa(dp1443
S'trial_loop.thisTrialN'
p1444
I35
sg894
g1310
sS'block_loop.thisIndex'
p1445
g888
sg38
S'right'
p1446
sg58
g62
sS'trial_loop.thisN'
p1447
I35
sg33
g1210
sg63
g64
sS'trial_loop.thisIndex'
p1448
g59
(g98
S'#\x00\x00\x00'
tRp1449
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1450
I0
sg903
g1317
sS'block_loop.thisRepN'
p1451
I0
sg906
g1203
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1452
I0
sg908
g1210
sg55
g11
sS'block_loop.thisTrial'
p1453
Nsg69
Vy
sS'block_loop.thisTrialN'
p1454
I0
sg39
F1.1500689790445904
sg34
g752
(S'\x07\xdf\n\x11\x10\x1e\x18\r\xa40'
tRp1455
sa(dp1456
S'trial_loop.thisTrialN'
p1457
I36
sg894
g979
sS'block_loop.thisIndex'
p1458
g888
sg38
S'left'
p1459
sg58
g62
sS'trial_loop.thisN'
p1460
I36
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p1461
g59
(g98
S'$\x00\x00\x00'
tRp1462
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1463
I0
sg903
g987
sS'block_loop.thisRepN'
p1464
I0
sg906
g983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1465
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p1466
Nsg69
Vy
sS'block_loop.thisTrialN'
p1467
I0
sg39
F1.5168074234507003
sg34
g752
(S'\x07\xdf\n\x11\x10\x1e\x1f\x01\x15X'
tRp1468
sa(dp1469
S'trial_loop.thisTrialN'
p1470
I37
sg894
g932
sS'block_loop.thisIndex'
p1471
g888
sg38
S'left'
p1472
sg58
g62
sS'trial_loop.thisN'
p1473
I37
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1474
g59
(g98
S'%\x00\x00\x00'
tRp1475
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1476
I0
sg903
g940
sS'block_loop.thisRepN'
p1477
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1478
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1479
Nsg69
Vy
sS'block_loop.thisTrialN'
p1480
I0
sg39
F1.2502495305179764
sg34
g752
(S'\x07\xdf\n\x11\x10\x1e%\t\x85\x80'
tRp1481
sa(dp1482
S'trial_loop.thisTrialN'
p1483
I38
sg894
S'13-mccoys_steak_crisps.png'
p1484
sS'block_loop.thisIndex'
p1485
g888
sg38
S'right'
p1486
sg58
g62
sS'trial_loop.thisN'
p1487
I38
sg33
S'3-ellas_strawberries_apples.png'
p1488
sg63
g64
sS'trial_loop.thisIndex'
p1489
g59
(g98
S'&\x00\x00\x00'
tRp1490
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1491
I0
sg903
S'3-ellas_strawberries_apples.png'
p1492
sS'block_loop.thisRepN'
p1493
I0
sg906
S'13-mccoys_steak_crisps.png'
p1494
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1495
I0
sg908
g1488
sg55
g11
sS'block_loop.thisTrial'
p1496
Nsg69
Vy
sS'block_loop.thisTrialN'
p1497
I0
sg39
F1.066881591247693
sg34
g752
(S'\x07\xdf\n\x11\x10\x1e+\r\xe2\xb0'
tRp1498
sa(dp1499
S'trial_loop.thisTrialN'
p1500
I39
sg894
g1030
sS'block_loop.thisIndex'
p1501
g888
sg38
S'left'
p1502
sg58
g62
sS'trial_loop.thisN'
p1503
I39
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p1504
g59
(g98
S"'\x00\x00\x00"
tRp1505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1506
I0
sg903
g1037
sS'block_loop.thisRepN'
p1507
I0
sg906
g966
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1508
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p1509
Nsg69
Vy
sS'block_loop.thisTrialN'
p1510
I0
sg39
F1.1335262674883779
sg34
g752
(S"\x07\xdf\n\x11\x10\x1e2\x00'\x10"
tRp1511
sa(dp1512
S'trial_loop.thisTrialN'
p1513
I40
sg894
g1013
sS'block_loop.thisIndex'
p1514
g888
sg38
S'left'
p1515
sg58
g62
sS'trial_loop.thisN'
p1516
I40
sg33
g1017
sg63
g64
sS'trial_loop.thisIndex'
p1517
g59
(g98
S'(\x00\x00\x00'
tRp1518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1519
I0
sg903
g1021
sS'block_loop.thisRepN'
p1520
I0
sg906
g1017
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1521
I0
sg908
g1024
sg55
g11
sS'block_loop.thisTrial'
p1522
Nsg69
Vy
sS'block_loop.thisTrialN'
p1523
I0
sg39
F0.68352859102287766
sg34
g752
(S'\x07\xdf\n\x11\x10\x1e8\x02\x9f\xe0'
tRp1524
sa(dp1525
S'trial_loop.thisTrialN'
p1526
I41
sg894
S'18-mms.png'
p1527
sS'block_loop.thisIndex'
p1528
g888
sg38
S'left'
p1529
sg58
g62
sS'trial_loop.thisN'
p1530
I41
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1531
g59
(g98
S')\x00\x00\x00'
tRp1532
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1533
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1534
sS'block_loop.thisRepN'
p1535
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1536
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1537
Nsg69
Vy
sS'block_loop.thisTrialN'
p1538
I0
sg39
F0.76679266971859761
sg34
g752
(S'\x07\xdf\n\x11\x10\x1f\x01\ruP'
tRp1539
sa(dp1540
S'trial_loop.thisTrialN'
p1541
I42
sg894
g1325
sS'block_loop.thisIndex'
p1542
g888
sg38
S'right'
p1543
sg58
g62
sS'trial_loop.thisN'
p1544
I42
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1545
g59
(g98
S'*\x00\x00\x00'
tRp1546
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1547
I0
sg903
g1332
sS'block_loop.thisRepN'
p1548
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1549
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1550
Nsg69
Vy
sS'block_loop.thisTrialN'
p1551
I0
sg39
F0.86677336870070576
sg34
g752
(S'\x07\xdf\n\x11\x10\x1f\x07\ns\xc8'
tRp1552
sa(dp1553
S'trial_loop.thisTrialN'
p1554
I43
sg894
S'41-peanuts_redo.png'
p1555
sS'block_loop.thisIndex'
p1556
g888
sg38
S'right'
p1557
sg58
g62
sS'trial_loop.thisN'
p1558
I43
sg33
g1404
sg63
g64
sS'trial_loop.thisIndex'
p1559
g59
(g98
S'+\x00\x00\x00'
tRp1560
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1561
I0
sg903
S'45-chewy_nougat_redo.png'
p1562
sS'block_loop.thisRepN'
p1563
I0
sg906
g1404
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1564
I0
sg908
g1411
sg55
g11
sS'block_loop.thisTrial'
p1565
Nsg69
Vy
sS'block_loop.thisTrialN'
p1566
I0
sg39
F2.8667958913065377
sg34
g752
(S'\x07\xdf\n\x11\x10\x1f\r\x08\xe1p'
tRp1567
sa(dp1568
S'trial_loop.thisTrialN'
p1569
I44
sg894
g1184
sS'block_loop.thisIndex'
p1570
g888
sg38
S'left'
p1571
sg58
g62
sS'trial_loop.thisN'
p1572
I44
sg33
g1141
sg63
g64
sS'trial_loop.thisIndex'
p1573
g59
(g98
S',\x00\x00\x00'
tRp1574
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1575
I0
sg903
g1191
sS'block_loop.thisRepN'
p1576
I0
sg906
g1141
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1577
I0
sg908
g1148
sg55
g11
sS'block_loop.thisTrial'
p1578
Nsg69
Vy
sS'block_loop.thisTrialN'
p1579
I0
sg39
F0.71676796612609905
sg34
g752
(S'\x07\xdf\n\x11\x10\x1f\x15\x07}\xf8'
tRp1580
sa(dp1581
S'trial_loop.thisTrialN'
p1582
I45
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1583
sS'block_loop.thisIndex'
p1584
g888
sg38
S'left'
p1585
sg58
g62
sS'trial_loop.thisN'
p1586
I45
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p1587
sg63
g64
sS'trial_loop.thisIndex'
p1588
g59
(g98
S'-\x00\x00\x00'
tRp1589
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1590
I0
sg903
S'36-fig_rolls.png'
p1591
sS'block_loop.thisRepN'
p1592
I0
sg906
g1587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1593
I0
sg908
S'36-fig_rolls.png'
p1594
sg55
g11
sS'block_loop.thisTrial'
p1595
Nsg69
Vy
sS'block_loop.thisTrialN'
p1596
I0
sg39
F2.0168138381168319
sg34
g752
(S'\x07\xdf\n\x11\x10\x1f\x1b\x03\x8a@'
tRp1597
sa(dp1598
S'trial_loop.thisTrialN'
p1599
I46
sg894
g1244
sS'block_loop.thisIndex'
p1600
g888
sg38
S'left'
p1601
sg58
g62
sS'trial_loop.thisN'
p1602
I46
sg33
g1017
sg63
g64
sS'trial_loop.thisIndex'
p1603
g59
(g98
S'.\x00\x00\x00'
tRp1604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1605
I0
sg903
g1251
sS'block_loop.thisRepN'
p1606
I0
sg906
g1017
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1607
I0
sg908
g1024
sg55
g11
sS'block_loop.thisTrial'
p1608
Nsg69
Vy
sS'block_loop.thisTrialN'
p1609
I0
sg39
F2.6667991414042262
sg34
g752
(S'\x07\xdf\n\x11\x10\x1f"\x04Qx'
tRp1610
sa(dp1611
S'trial_loop.thisTrialN'
p1612
I47
sg894
S'26-walkers_smoky_bacon.png'
p1613
sS'block_loop.thisIndex'
p1614
g888
sg38
S'right'
p1615
sg58
g62
sS'trial_loop.thisN'
p1616
I47
sg33
g1367
sg63
g64
sS'trial_loop.thisIndex'
p1617
g59
(g98
S'/\x00\x00\x00'
tRp1618
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1619
I0
sg903
S'44-crunch.png'
p1620
sS'block_loop.thisRepN'
p1621
I0
sg906
g1367
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1622
I0
sg908
g1361
sg55
g11
sS'block_loop.thisTrial'
p1623
Nsg69
Vy
sS'block_loop.thisTrialN'
p1624
I0
sg39
F1.7499337863891924
sg34
g752
(S'\x07\xdf\n\x11\x10\x1f)\x0f\x17H'
tRp1625
sa(dp1626
S'trial_loop.thisTrialN'
p1627
I48
sg894
g979
sS'block_loop.thisIndex'
p1628
g888
sg38
S'right'
p1629
sg58
g62
sS'trial_loop.thisN'
p1630
I48
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p1631
g59
(g98
S'0\x00\x00\x00'
tRp1632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1633
I0
sg903
g987
sS'block_loop.thisRepN'
p1634
I0
sg906
g983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1635
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p1636
Nsg69
Vy
sS'block_loop.thisTrialN'
p1637
I0
sg39
F1.2834552642607377
sg34
g752
(S'\x07\xdf\n\x11\x10\x1f0\x0b\xd3X'
tRp1638
sa(dp1639
S'trial_loop.thisTrialN'
p1640
I49
sg894
g932
sS'block_loop.thisIndex'
p1641
g888
sg38
S'left'
p1642
sg58
g62
sS'trial_loop.thisN'
p1643
I49
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1644
g59
(g98
S'1\x00\x00\x00'
tRp1645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1646
I0
sg903
g940
sS'block_loop.thisRepN'
p1647
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1648
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1649
Nsg69
Vy
sS'block_loop.thisTrialN'
p1650
I0
sg39
F0.78350244769444544
sg34
g752
(S'\x07\xdf\n\x11\x10\x1f7\x01kH'
tRp1651
sa(dp1652
S'trial_loop.thisTrialN'
p1653
I50
sg894
g1430
sS'block_loop.thisIndex'
p1654
g888
sg38
S'right'
p1655
sg58
g62
sS'trial_loop.thisN'
p1656
I50
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p1657
g59
(g98
S'2\x00\x00\x00'
tRp1658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1659
I0
sg903
g1437
sS'block_loop.thisRepN'
p1660
I0
sg906
g1066
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1661
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p1662
Nsg69
Vy
sS'block_loop.thisTrialN'
p1663
I0
sg39
F0.63329006522144482
sg34
g752
(S'\x07\xdf\n\x11\x10 \x00\r\xea\x80'
tRp1664
sa(dp1665
S'trial_loop.thisTrialN'
p1666
I51
sg894
g1094
sS'block_loop.thisIndex'
p1667
g888
sg38
S'right'
p1668
sg58
g62
sS'trial_loop.thisN'
p1669
I51
sg33
g1006
sg63
g64
sS'trial_loop.thisIndex'
p1670
g59
(g98
S'3\x00\x00\x00'
tRp1671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1672
I0
sg903
g1101
sS'block_loop.thisRepN'
p1673
I0
sg906
g1006
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1674
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p1675
Nsg69
Vy
sS'block_loop.thisTrialN'
p1676
I0
sg39
F1.0667795267800102
sg34
g752
(S'\x07\xdf\n\x11\x10 \x06\x08\xc6\x18'
tRp1677
sa(dp1678
S'trial_loop.thisTrialN'
p1679
I52
sg894
g1400
sS'block_loop.thisIndex'
p1680
g888
sg38
S'right'
p1681
sg58
g62
sS'trial_loop.thisN'
p1682
I52
sg33
g1404
sg63
g64
sS'trial_loop.thisIndex'
p1683
g59
(g98
S'4\x00\x00\x00'
tRp1684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1685
I0
sg903
g1408
sS'block_loop.thisRepN'
p1686
I0
sg906
g1404
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1687
I0
sg908
g1411
sg55
g11
sS'block_loop.thisTrial'
p1688
Nsg69
Vy
sS'block_loop.thisTrialN'
p1689
I0
sg39
F0.95011385319867259
sg34
g752
(S'\x07\xdf\n\x11\x10 \x0c\nH\xd0'
tRp1690
sa(dp1691
S'trial_loop.thisTrialN'
p1692
I53
sg894
g915
sS'block_loop.thisIndex'
p1693
g888
sg38
S'left'
p1694
sg58
g62
sS'trial_loop.thisN'
p1695
I53
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1696
g59
(g98
S'5\x00\x00\x00'
tRp1697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1698
I0
sg903
g923
sS'block_loop.thisRepN'
p1699
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1700
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1701
Nsg69
Vy
sS'block_loop.thisTrialN'
p1702
I0
sg39
F1.1668699878291591
sg34
g752
(S'\x07\xdf\n\x11\x10 \x12\t\xe7('
tRp1703
sa(dp1704
S'trial_loop.thisTrialN'
p1705
I54
sg894
g1094
sS'block_loop.thisIndex'
p1706
g888
sg38
S'right'
p1707
sg58
g62
sS'trial_loop.thisN'
p1708
I54
sg33
g1006
sg63
g64
sS'trial_loop.thisIndex'
p1709
g59
(g98
S'6\x00\x00\x00'
tRp1710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1711
I0
sg903
g1101
sS'block_loop.thisRepN'
p1712
I0
sg906
g1006
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1713
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p1714
Nsg69
Vy
sS'block_loop.thisTrialN'
p1715
I0
sg39
F0.65013184277449909
sg34
g752
(S'\x07\xdf\n\x11\x10 \x18\r\x17\x90'
tRp1716
sa(dp1717
S'trial_loop.thisTrialN'
p1718
I55
sg894
g1310
sS'block_loop.thisIndex'
p1719
g888
sg38
S'right'
p1720
sg58
g62
sS'trial_loop.thisN'
p1721
I55
sg33
g1210
sg63
g64
sS'trial_loop.thisIndex'
p1722
g59
(g98
S'7\x00\x00\x00'
tRp1723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1724
I0
sg903
g1317
sS'block_loop.thisRepN'
p1725
I0
sg906
g1203
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1726
I0
sg908
g1210
sg55
g11
sS'block_loop.thisTrial'
p1727
Nsg69
Vy
sS'block_loop.thisTrialN'
p1728
I0
sg39
F0.9505603139705272
sg34
g752
(S'\x07\xdf\n\x11\x10 \x1e\x08-\xc0'
tRp1729
sa(dp1730
S'trial_loop.thisTrialN'
p1731
I56
sg894
g1484
sS'block_loop.thisIndex'
p1732
g888
sg38
S'left'
p1733
sg58
g62
sS'trial_loop.thisN'
p1734
I56
sg33
g1494
sg63
g64
sS'trial_loop.thisIndex'
p1735
g59
(g98
S'8\x00\x00\x00'
tRp1736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1737
I0
sg903
g1492
sS'block_loop.thisRepN'
p1738
I0
sg906
g1494
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1739
I0
sg908
g1488
sg55
g11
sS'block_loop.thisTrial'
p1740
Nsg69
Vy
sS'block_loop.thisTrialN'
p1741
I0
sg39
F0.98351060144796065
sg34
g752
(S'\x07\xdf\n\x11\x10 $\x08\n\x98'
tRp1742
sa(dp1743
S'trial_loop.thisTrialN'
p1744
I57
sg894
g1276
sS'block_loop.thisIndex'
p1745
g888
sg38
S'right'
p1746
sg58
g62
sS'trial_loop.thisN'
p1747
I57
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p1748
g59
(g98
S'9\x00\x00\x00'
tRp1749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1750
I0
sg903
g1284
sS'block_loop.thisRepN'
p1751
I0
sg906
g1286
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1752
I0
sg908
g1280
sg55
g11
sS'block_loop.thisTrial'
p1753
Nsg69
Vy
sS'block_loop.thisTrialN'
p1754
I0
sg39
F1.5164821285979997
sg34
g752
(S'\x07\xdf\n\x11\x10 *\x08"\x08'
tRp1755
sa(dp1756
S'trial_loop.thisTrialN'
p1757
I58
sg894
g1199
sS'block_loop.thisIndex'
p1758
g888
sg38
S'left'
p1759
sg58
g62
sS'trial_loop.thisN'
p1760
I58
sg33
g1203
sg63
g64
sS'trial_loop.thisIndex'
p1761
g59
(g98
S':\x00\x00\x00'
tRp1762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1763
I0
sg903
g1207
sS'block_loop.thisRepN'
p1764
I0
sg906
g1203
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1765
I0
sg908
g1210
sg55
g11
sS'block_loop.thisTrial'
p1766
Nsg69
Vy
sS'block_loop.thisTrialN'
p1767
I0
sg39
F0.58352650981942134
sg34
g752
(S'\x07\xdf\n\x11\x10 1\x01L\x08'
tRp1768
sa(dp1769
S'trial_loop.thisTrialN'
p1770
I59
sg894
g1276
sS'block_loop.thisIndex'
p1771
g888
sg38
S'right'
p1772
sg58
g62
sS'trial_loop.thisN'
p1773
I59
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p1774
g59
(g98
S';\x00\x00\x00'
tRp1775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1776
I0
sg903
g1284
sS'block_loop.thisRepN'
p1777
I0
sg906
g1286
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1778
I0
sg908
g1280
sg55
g11
sS'block_loop.thisTrial'
p1779
Nsg69
Vy
sS'block_loop.thisTrialN'
p1780
I0
sg39
F0.6499505215406316
sg34
g752
(S'\x07\xdf\n\x11\x10 6\n\xb2H'
tRp1781
sa(dp1782
S'trial_loop.thisTrialN'
p1783
I60
sg894
g962
sS'block_loop.thisIndex'
p1784
g888
sg38
S'left'
p1785
sg58
g62
sS'trial_loop.thisN'
p1786
I60
sg33
g973
sg63
g64
sS'trial_loop.thisIndex'
p1787
g59
(g98
S'<\x00\x00\x00'
tRp1788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1789
I0
sg903
g970
sS'block_loop.thisRepN'
p1790
I0
sg906
g966
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1791
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p1792
Nsg69
Vy
sS'block_loop.thisTrialN'
p1793
I0
sg39
F0.9668529960908927
sg34
g752
(S'\x07\xdf\n\x11\x10!\x00\x05\xc8x'
tRp1794
sa(dp1795
S'trial_loop.thisTrialN'
p1796
I61
sg894
g1310
sS'block_loop.thisIndex'
p1797
g888
sg38
S'right'
p1798
sg58
g62
sS'trial_loop.thisN'
p1799
I61
sg33
g1203
sg63
g64
sS'trial_loop.thisIndex'
p1800
g59
(g98
S'=\x00\x00\x00'
tRp1801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1802
I0
sg903
g1317
sS'block_loop.thisRepN'
p1803
I0
sg906
g1203
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1804
I0
sg908
g1210
sg55
g11
sS'block_loop.thisTrial'
p1805
Nsg69
Vy
sS'block_loop.thisTrialN'
p1806
I0
sg39
F0.76698710538130399
sg34
g752
(S'\x07\xdf\n\x11\x10!\x06\x05\xdf\xe8'
tRp1807
sa(dp1808
S'trial_loop.thisTrialN'
p1809
I62
sg894
S'38-maltesers.png'
p1810
sS'block_loop.thisIndex'
p1811
g888
sg38
S'left'
p1812
sg58
g62
sS'trial_loop.thisN'
p1813
I62
sg33
g1280
sg63
g64
sS'trial_loop.thisIndex'
p1814
g59
(g98
S'>\x00\x00\x00'
tRp1815
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1816
I0
sg903
S'6-sour_patch_kids.png'
p1817
sS'block_loop.thisRepN'
p1818
I0
sg906
g1286
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1819
I0
sg908
g1280
sg55
g11
sS'block_loop.thisTrial'
p1820
Nsg69
Vy
sS'block_loop.thisTrialN'
p1821
I0
sg39
F0.93317143665990443
sg34
g752
(S'\x07\xdf\n\x11\x10!\x0c\x02\xe2H'
tRp1822
sa(dp1823
S'trial_loop.thisTrialN'
p1824
I63
sg894
g1013
sS'block_loop.thisIndex'
p1825
g888
sg38
S'left'
p1826
sg58
g62
sS'trial_loop.thisN'
p1827
I63
sg33
g1024
sg63
g64
sS'trial_loop.thisIndex'
p1828
g59
(g98
S'?\x00\x00\x00'
tRp1829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1830
I0
sg903
g1021
sS'block_loop.thisRepN'
p1831
I0
sg906
g1017
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1832
I0
sg908
g1024
sg55
g11
sS'block_loop.thisTrial'
p1833
Nsg69
Vy
sS'block_loop.thisTrialN'
p1834
I0
sg39
F0.93352695171870437
sg34
g752
(S'\x07\xdf\n\x11\x10!\x12\x02B '
tRp1835
sa(dp1836
S'trial_loop.thisTrialN'
p1837
I64
sg894
g1259
sS'block_loop.thisIndex'
p1838
g888
sg38
S'left'
p1839
sg58
g62
sS'trial_loop.thisN'
p1840
I64
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p1841
g59
(g98
S'@\x00\x00\x00'
tRp1842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1843
I0
sg903
g1267
sS'block_loop.thisRepN'
p1844
I0
sg906
g1269
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1845
I0
sg908
g1263
sg55
g11
sS'block_loop.thisTrial'
p1846
Nsg69
Vy
sS'block_loop.thisTrialN'
p1847
I0
sg39
F1.5835513131960397
sg34
g752
(S'\x07\xdf\n\x11\x10!\x18\x01\xe0x'
tRp1848
sa(dp1849
S'trial_loop.thisTrialN'
p1850
I65
sg894
g1357
sS'block_loop.thisIndex'
p1851
g888
sg38
S'left'
p1852
sg58
g62
sS'trial_loop.thisN'
p1853
I65
sg33
g1367
sg63
g64
sS'trial_loop.thisIndex'
p1854
g59
(g98
S'A\x00\x00\x00'
tRp1855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1856
I0
sg903
g1365
sS'block_loop.thisRepN'
p1857
I0
sg906
g1367
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1858
I0
sg908
g1361
sg55
g11
sS'block_loop.thisTrial'
p1859
Nsg69
Vy
sS'block_loop.thisTrialN'
p1860
I0
sg39
F1.2839402130302915
sg34
g752
(S'\x07\xdf\n\x11\x10!\x1e\x0b>\xe8'
tRp1861
sa(dp1862
S'trial_loop.thisTrialN'
p1863
I66
sg894
g996
sS'block_loop.thisIndex'
p1864
g888
sg38
S'left'
p1865
sg58
g62
sS'trial_loop.thisN'
p1866
I66
sg33
g1006
sg63
g64
sS'trial_loop.thisIndex'
p1867
g59
(g98
S'B\x00\x00\x00'
tRp1868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1869
I0
sg903
g1004
sS'block_loop.thisRepN'
p1870
I0
sg906
g1006
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1871
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p1872
Nsg69
Vy
sS'block_loop.thisTrialN'
p1873
I0
sg39
F1.0168232462947344
sg34
g752
(S'\x07\xdf\n\x11\x10!%\x00\xd6\xd8'
tRp1874
sa(dp1875
S'trial_loop.thisTrialN'
p1876
I67
sg894
g1430
sS'block_loop.thisIndex'
p1877
g888
sg38
S'right'
p1878
sg58
g62
sS'trial_loop.thisN'
p1879
I67
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p1880
g59
(g98
S'C\x00\x00\x00'
tRp1881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1882
I0
sg903
g1437
sS'block_loop.thisRepN'
p1883
I0
sg906
g1066
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1884
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p1885
Nsg69
Vy
sS'block_loop.thisTrialN'
p1886
I0
sg39
F1.7500977167492238
sg34
g752
(S'\x07\xdf\n\x11\x10!+\x01\xa5\xe0'
tRp1887
sa(dp1888
S'trial_loop.thisTrialN'
p1889
I68
sg894
g1400
sS'block_loop.thisIndex'
p1890
g888
sg38
S'right'
p1891
sg58
g62
sS'trial_loop.thisN'
p1892
I68
sg33
g1404
sg63
g64
sS'trial_loop.thisIndex'
p1893
g59
(g98
S'D\x00\x00\x00'
tRp1894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1895
I0
sg903
g1408
sS'block_loop.thisRepN'
p1896
I0
sg906
g1404
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1897
I0
sg908
g1411
sg55
g11
sS'block_loop.thisTrial'
p1898
Nsg69
Vy
sS'block_loop.thisTrialN'
p1899
I0
sg39
F1.1500934973246331
sg34
g752
(S'\x07\xdf\n\x11\x10!1\r\xa40'
tRp1900
sa(dp1901
S'trial_loop.thisTrialN'
p1902
I69
sg894
g1137
sS'block_loop.thisIndex'
p1903
g888
sg38
S'right'
p1904
sg58
g62
sS'trial_loop.thisN'
p1905
I69
sg33
g1141
sg63
g64
sS'trial_loop.thisIndex'
p1906
g59
(g98
S'E\x00\x00\x00'
tRp1907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1908
I0
sg903
g1145
sS'block_loop.thisRepN'
p1909
I0
sg906
g1141
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1910
I0
sg908
g1148
sg55
g11
sS'block_loop.thisTrial'
p1911
Nsg69
Vy
sS'block_loop.thisTrialN'
p1912
I0
sg39
F0.78331970097951853
sg34
g752
(S'\x07\xdf\n\x11\x10!8\x01\x15X'
tRp1913
sa(dp1914
S'trial_loop.thisTrialN'
p1915
I70
sg894
g915
sS'block_loop.thisIndex'
p1916
g888
sg38
S'right'
p1917
sg58
g62
sS'trial_loop.thisN'
p1918
I70
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1919
g59
(g98
S'F\x00\x00\x00'
tRp1920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1921
I0
sg903
g923
sS'block_loop.thisRepN'
p1922
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1923
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1924
Nsg69
Vy
sS'block_loop.thisTrialN'
p1925
I0
sg39
F0.98355251060092996
sg34
g752
(S'\x07\xdf\n\x11\x10"\x01\r\x94\x90'
tRp1926
sa(dp1927
S'trial_loop.thisTrialN'
p1928
I71
sg894
g1340
sS'block_loop.thisIndex'
p1929
g888
sg38
S'right'
p1930
sg58
g62
sS'trial_loop.thisN'
p1931
I71
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p1932
g59
(g98
S'G\x00\x00\x00'
tRp1933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1934
I0
sg903
g1348
sS'block_loop.thisRepN'
p1935
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1936
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p1937
Nsg69
Vy
sS'block_loop.thisTrialN'
p1938
I0
sg39
F0.86682924757133151
sg34
g752
(S'\x07\xdf\n\x11\x10"\x07\r\xac\x00'
tRp1939
sa(dp1940
S'trial_loop.thisTrialN'
p1941
I72
sg894
S'36-fig_rolls.png'
p1942
sS'block_loop.thisIndex'
p1943
g888
sg38
S'right'
p1944
sg58
g62
sS'trial_loop.thisN'
p1945
I72
sg33
g1594
sg63
g64
sS'trial_loop.thisIndex'
p1946
g59
(g98
S'H\x00\x00\x00'
tRp1947
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1948
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1949
sS'block_loop.thisRepN'
p1950
I0
sg906
g1587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1951
I0
sg908
g1594
sg55
g11
sS'block_loop.thisTrial'
p1952
Nsg69
Vy
sS'block_loop.thisTrialN'
p1953
I0
sg39
F1.0501210661341247
sg34
g752
(S'\x07\xdf\n\x11\x10"\r\x0cX('
tRp1954
sa(dp1955
S'trial_loop.thisTrialN'
p1956
I73
sg894
g1045
sS'block_loop.thisIndex'
p1957
g888
sg38
S'right'
p1958
sg58
g62
sS'trial_loop.thisN'
p1959
I73
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p1960
g59
(g98
S'I\x00\x00\x00'
tRp1961
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1962
I0
sg903
g1053
sS'block_loop.thisRepN'
p1963
I0
sg906
g1049
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1964
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p1965
Nsg69
Vy
sS'block_loop.thisTrialN'
p1966
I0
sg39
F0.95018085082392645
sg34
g752
(S'\x07\xdf\n\x11\x10"\x13\r\xa0H'
tRp1967
sa(dp1968
S'trial_loop.thisTrialN'
p1969
I74
sg894
S'4-corn.png'
p1970
sS'block_loop.thisIndex'
p1971
g888
sg38
S'left'
p1972
sg58
g62
sS'trial_loop.thisN'
p1973
I74
sg33
g1297
sg63
g64
sS'trial_loop.thisIndex'
p1974
g59
(g98
S'J\x00\x00\x00'
tRp1975
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1976
I0
sg903
S'10-bounty_redo.png'
p1977
sS'block_loop.thisRepN'
p1978
I0
sg906
g1297
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1979
I0
sg908
g1304
sg55
g11
sS'block_loop.thisTrial'
p1980
Nsg69
Vy
sS'block_loop.thisTrialN'
p1981
I0
sg39
F0.7001556910772706
sg34
g752
(S'\x07\xdf\n\x11\x10"\x19\r>\xa0'
tRp1982
sa(dp1983
S'trial_loop.thisTrialN'
p1984
I75
sg894
g1167
sS'block_loop.thisIndex'
p1985
g888
sg38
S'right'
p1986
sg58
g62
sS'trial_loop.thisN'
p1987
I75
sg33
g1171
sg63
g64
sS'trial_loop.thisIndex'
p1988
g59
(g98
S'K\x00\x00\x00'
tRp1989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1990
I0
sg903
g1175
sS'block_loop.thisRepN'
p1991
I0
sg906
g1171
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1992
I0
sg908
g1178
sg55
g11
sS'block_loop.thisTrial'
p1993
Nsg69
Vy
sS'block_loop.thisTrialN'
p1994
I0
sg39
F1.7171867725592165
sg34
g752
(S'\x07\xdf\n\x11\x10"\x1f\tG\x00'
tRp1995
sa(dp1996
S'trial_loop.thisTrialN'
p1997
I76
sg894
g1199
sS'block_loop.thisIndex'
p1998
g888
sg38
S'left'
p1999
sg58
g62
sS'trial_loop.thisN'
p2000
I76
sg33
g1203
sg63
g64
sS'trial_loop.thisIndex'
p2001
g59
(g98
S'L\x00\x00\x00'
tRp2002
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2003
I0
sg903
g1207
sS'block_loop.thisRepN'
p2004
I0
sg906
g1203
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2005
I0
sg908
g1210
sg55
g11
sS'block_loop.thisTrial'
p2006
Nsg69
Vy
sS'block_loop.thisTrialN'
p2007
I0
sg39
F0.68355253910976899
sg34
g752
(S'\x07\xdf\n\x11\x10"&\x05O`'
tRp2008
sa(dp2009
S'trial_loop.thisTrialN'
p2010
I77
sg894
g1970
sS'block_loop.thisIndex'
p2011
g888
sg38
S'right'
p2012
sg58
g62
sS'trial_loop.thisN'
p2013
I77
sg33
g1297
sg63
g64
sS'trial_loop.thisIndex'
p2014
g59
(g98
S'M\x00\x00\x00'
tRp2015
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2016
I0
sg903
g1977
sS'block_loop.thisRepN'
p2017
I0
sg906
g1297
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2018
I0
sg908
g1304
sg55
g11
sS'block_loop.thisTrial'
p2019
Nsg69
Vy
sS'block_loop.thisTrialN'
p2020
I0
sg39
F1.8335759027504537
sg34
g752
(S'\x07\xdf\n\x11\x10",\x01\x1d('
tRp2021
sa(dp2022
S'trial_loop.thisTrialN'
p2023
I78
sg894
S'20-fruit_pastilles.png'
p2024
sS'block_loop.thisIndex'
p2025
g888
sg38
S'left'
p2026
sg58
g62
sS'trial_loop.thisN'
p2027
I78
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p2028
g59
(g98
S'N\x00\x00\x00'
tRp2029
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2030
I0
sg903
S'2-steamed_puddings.png'
p2031
sS'block_loop.thisRepN'
p2032
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2033
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p2034
Nsg69
Vy
sS'block_loop.thisTrialN'
p2035
I0
sg39
F0.83344989019497007
sg34
g752
(S'\x07\xdf\n\x11\x10"2\x0eL('
tRp2036
sa(dp2037
S'trial_loop.thisTrialN'
p2038
I79
sg894
g1062
sS'block_loop.thisIndex'
p2039
g888
sg38
S'left'
p2040
sg58
g62
sS'trial_loop.thisN'
p2041
I79
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2042
g59
(g98
S'O\x00\x00\x00'
tRp2043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2044
I0
sg903
g1070
sS'block_loop.thisRepN'
p2045
I0
sg906
g1066
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2046
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p2047
Nsg69
Vy
sS'block_loop.thisTrialN'
p2048
I0
sg39
F1.3835160752960292
sg34
g752
(S'\x07\xdf\n\x11\x10"8\x0c<\xd0'
tRp2049
sa(dp2050
S'trial_loop.thisTrialN'
p2051
I80
sg894
g1293
sS'block_loop.thisIndex'
p2052
g888
sg38
S'left'
p2053
sg58
g62
sS'trial_loop.thisN'
p2054
I80
sg33
g1297
sg63
g64
sS'trial_loop.thisIndex'
p2055
g59
(g98
S'P\x00\x00\x00'
tRp2056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2057
I0
sg903
g1301
sS'block_loop.thisRepN'
p2058
I0
sg906
g1297
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2059
I0
sg908
g1304
sg55
g11
sS'block_loop.thisTrial'
p2060
Nsg69
Vy
sS'block_loop.thisTrialN'
p2061
I0
sg39
F1.0335595382239262
sg34
g752
(S'\x07\xdf\n\x11\x10#\x03\x03C\xf0'
tRp2062
sa(dp2063
S'trial_loop.thisTrialN'
p2064
I81
sg894
S'51-mars.png'
p2065
sS'block_loop.thisIndex'
p2066
g888
sg38
S'left'
p2067
sg58
g62
sS'trial_loop.thisN'
p2068
I81
sg33
g1263
sg63
g64
sS'trial_loop.thisIndex'
p2069
g59
(g98
S'Q\x00\x00\x00'
tRp2070
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2071
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p2072
sS'block_loop.thisRepN'
p2073
I0
sg906
g1269
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2074
I0
sg908
g1263
sg55
g11
sS'block_loop.thisTrial'
p2075
Nsg69
Vy
sS'block_loop.thisTrialN'
p2076
I0
sg39
F0.88343496540528577
sg34
g752
(S'\x07\xdf\n\x11\x10#\t\x04M\x90'
tRp2077
sa(dp2078
S'trial_loop.thisTrialN'
p2079
I82
sg894
g979
sS'block_loop.thisIndex'
p2080
g888
sg38
S'right'
p2081
sg58
g62
sS'trial_loop.thisN'
p2082
I82
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p2083
g59
(g98
S'R\x00\x00\x00'
tRp2084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2085
I0
sg903
g987
sS'block_loop.thisRepN'
p2086
I0
sg906
g983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2087
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p2088
Nsg69
Vy
sS'block_loop.thisTrialN'
p2089
I0
sg39
F1.0669075350087951
sg34
g752
(S'\x07\xdf\n\x11\x10#\x0f\x02\xf9\xb8'
tRp2090
sa(dp2091
S'trial_loop.thisTrialN'
p2092
I83
sg894
g1079
sS'block_loop.thisIndex'
p2093
g888
sg38
S'left'
p2094
sg58
g62
sS'trial_loop.thisN'
p2095
I83
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2096
g59
(g98
S'S\x00\x00\x00'
tRp2097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2098
I0
sg903
g1086
sS'block_loop.thisRepN'
p2099
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2100
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2101
Nsg69
Vy
sS'block_loop.thisTrialN'
p2102
I0
sg39
F1.0334397977867411
sg34
g752
(S'\x07\xdf\n\x11\x10#\x15\x04\xba\xf0'
tRp2103
sa(dp2104
S'trial_loop.thisTrialN'
p2105
I84
sg894
g1045
sS'block_loop.thisIndex'
p2106
g888
sg38
S'right'
p2107
sg58
g62
sS'trial_loop.thisN'
p2108
I84
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p2109
g59
(g98
S'T\x00\x00\x00'
tRp2110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2111
I0
sg903
g1053
sS'block_loop.thisRepN'
p2112
I0
sg906
g1049
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2113
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2114
Nsg69
Vy
sS'block_loop.thisTrialN'
p2115
I0
sg39
F1.6171011581463972
sg34
g752
(S'\x07\xdf\n\x11\x10#\x1b\x05\x89\xf8'
tRp2116
sa(dp2117
S'trial_loop.thisTrialN'
p2118
I85
sg894
g962
sS'block_loop.thisIndex'
p2119
g888
sg38
S'left'
p2120
sg58
g62
sS'trial_loop.thisN'
p2121
I85
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p2122
g59
(g98
S'U\x00\x00\x00'
tRp2123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2124
I0
sg903
g970
sS'block_loop.thisRepN'
p2125
I0
sg906
g966
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2126
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p2127
Nsg69
Vy
sS'block_loop.thisTrialN'
p2128
I0
sg39
F1.2005826227541547
sg34
g752
(S'\x07\xdf\n\x11\x10#"\x00]\xc0'
tRp2129
sa(dp2130
S'trial_loop.thisTrialN'
p2131
I86
sg894
g1259
sS'block_loop.thisIndex'
p2132
g888
sg38
S'right'
p2133
sg58
g62
sS'trial_loop.thisN'
p2134
I86
sg33
g1263
sg63
g64
sS'trial_loop.thisIndex'
p2135
g59
(g98
S'V\x00\x00\x00'
tRp2136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2137
I0
sg903
g1267
sS'block_loop.thisRepN'
p2138
I0
sg906
g1269
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2139
I0
sg908
g1263
sg55
g11
sS'block_loop.thisTrial'
p2140
Nsg69
Vy
sS'block_loop.thisTrialN'
p2141
I0
sg39
F1.1834178311182768
sg34
g752
(S'\x07\xdf\n\x11\x10#(\x03\xc8\xc0'
tRp2142
sa(dp2143
S'trial_loop.thisTrialN'
p2144
I87
sg894
g1942
sS'block_loop.thisIndex'
p2145
g888
sg38
S'right'
p2146
sg58
g62
sS'trial_loop.thisN'
p2147
I87
sg33
g1587
sg63
g64
sS'trial_loop.thisIndex'
p2148
g59
(g98
S'W\x00\x00\x00'
tRp2149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2150
I0
sg903
g1949
sS'block_loop.thisRepN'
p2151
I0
sg906
g1587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2152
I0
sg908
g1594
sg55
g11
sS'block_loop.thisTrial'
p2153
Nsg69
Vy
sS'block_loop.thisTrialN'
p2154
I0
sg39
F1.5001361334725516
sg34
g752
(S'\x07\xdf\n\x11\x10#.\x077\xa8'
tRp2155
sa(dp2156
S'trial_loop.thisTrialN'
p2157
I88
sg894
g1340
sS'block_loop.thisIndex'
p2158
g888
sg38
S'left'
p2159
sg58
g62
sS'trial_loop.thisN'
p2160
I88
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p2161
g59
(g98
S'X\x00\x00\x00'
tRp2162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2163
I0
sg903
g1348
sS'block_loop.thisRepN'
p2164
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2165
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p2166
Nsg69
Vy
sS'block_loop.thisTrialN'
p2167
I0
sg39
F0.85019986674615211
sg34
g752
(S'\x07\xdf\n\x11\x10#5\x00#('
tRp2168
sa(dp2169
S'trial_loop.thisTrialN'
p2170
I89
sg894
g1167
sS'block_loop.thisIndex'
p2171
g888
sg38
S'left'
p2172
sg58
g62
sS'trial_loop.thisN'
p2173
I89
sg33
g1171
sg63
g64
sS'trial_loop.thisIndex'
p2174
g59
(g98
S'Y\x00\x00\x00'
tRp2175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2176
I0
sg903
g1175
sS'block_loop.thisRepN'
p2177
I0
sg906
g1171
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2178
I0
sg908
g1178
sg55
g11
sS'block_loop.thisTrial'
p2179
Nsg69
Vy
sS'block_loop.thisTrialN'
p2180
I0
sg39
F0.7334677657318025
sg34
g752
(S'\x07\xdf\n\x11\x10#:\r\x94\x90'
tRp2181
sa(dp2182
S'trial_loop.thisTrialN'
p2183
I90
sg894
g1810
sS'block_loop.thisIndex'
p2184
g888
sg38
S'left'
p2185
sg58
g62
sS'trial_loop.thisN'
p2186
I90
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p2187
g59
(g98
S'Z\x00\x00\x00'
tRp2188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2189
I0
sg903
g1817
sS'block_loop.thisRepN'
p2190
I0
sg906
g1286
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2191
I0
sg908
g1280
sg55
g11
sS'block_loop.thisTrial'
p2192
Nsg69
Vy
sS'block_loop.thisTrialN'
p2193
I0
sg39
F0.93365495994748926
sg34
g752
(S'\x07\xdf\n\x11\x10$\x04\t\xdfX'
tRp2194
sa(dp2195
S'trial_loop.thisTrialN'
p2196
I91
sg894
g1244
sS'block_loop.thisIndex'
p2197
g888
sg38
S'right'
p2198
sg58
g62
sS'trial_loop.thisN'
p2199
I91
sg33
g1017
sg63
g64
sS'trial_loop.thisIndex'
p2200
g59
(g98
S'[\x00\x00\x00'
tRp2201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2202
I0
sg903
g1251
sS'block_loop.thisRepN'
p2203
I0
sg906
g1017
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2204
I0
sg908
g1024
sg55
g11
sS'block_loop.thisTrial'
p2205
Nsg69
Vy
sS'block_loop.thisTrialN'
p2206
I0
sg39
F0.85020271770827094
sg34
g752
(S'\x07\xdf\n\x11\x10$\n\t}\xb0'
tRp2207
sa(dp2208
S'trial_loop.thisTrialN'
p2209
I92
sg894
g1555
sS'block_loop.thisIndex'
p2210
g888
sg38
S'left'
p2211
sg58
g62
sS'trial_loop.thisN'
p2212
I92
sg33
g1404
sg63
g64
sS'trial_loop.thisIndex'
p2213
g59
(g98
S'\\\x00\x00\x00'
tRp2214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2215
I0
sg903
g1562
sS'block_loop.thisRepN'
p2216
I0
sg906
g1404
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2217
I0
sg908
g1411
sg55
g11
sS'block_loop.thisTrial'
p2218
Nsg69
Vy
sS'block_loop.thisTrialN'
p2219
I0
sg39
F0.91681631845494849
sg34
g752
(S'\x07\xdf\n\x11\x10$\x10\x07\xac\xd8'
tRp2220
sa(dp2221
S'trial_loop.thisTrialN'
p2222
I93
sg894
S'3-ellas_strawberries_apples.png'
p2223
sS'block_loop.thisIndex'
p2224
g888
sg38
S'right'
p2225
sg58
g62
sS'trial_loop.thisN'
p2226
I93
sg33
g1494
sg63
g64
sS'trial_loop.thisIndex'
p2227
g59
(g98
S']\x00\x00\x00'
tRp2228
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2229
I0
sg903
S'13-mccoys_steak_crisps.png'
p2230
sS'block_loop.thisRepN'
p2231
I0
sg906
g1494
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2232
I0
sg908
g1488
sg55
g11
sS'block_loop.thisTrial'
p2233
Nsg69
Vy
sS'block_loop.thisTrialN'
p2234
I0
sg39
F2.8001426621785868
sg34
g752
(S'\x07\xdf\n\x11\x10$\x16\x06\xd2\x18'
tRp2235
sa(dp2236
S'trial_loop.thisTrialN'
p2237
I94
sg894
g979
sS'block_loop.thisIndex'
p2238
g888
sg38
S'left'
p2239
sg58
g62
sS'trial_loop.thisN'
p2240
I94
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p2241
g59
(g98
S'^\x00\x00\x00'
tRp2242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2243
I0
sg903
g987
sS'block_loop.thisRepN'
p2244
I0
sg906
g983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2245
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p2246
Nsg69
Vy
sS'block_loop.thisTrialN'
p2247
I0
sg39
F1.2667685790829637
sg34
g752
(S'\x07\xdf\n\x11\x10$\x1e\x04=\xf0'
tRp2248
sa(dp2249
S'trial_loop.thisTrialN'
p2250
I95
sg894
g1810
sS'block_loop.thisIndex'
p2251
g888
sg38
S'left'
p2252
sg58
g62
sS'trial_loop.thisN'
p2253
I95
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p2254
g59
(g98
S'_\x00\x00\x00'
tRp2255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2256
I0
sg903
g1817
sS'block_loop.thisRepN'
p2257
I0
sg906
g1286
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2258
I0
sg908
g1280
sg55
g11
sS'block_loop.thisTrial'
p2259
Nsg69
Vy
sS'block_loop.thisTrialN'
p2260
I0
sg39
F0.83366086144087603
sg34
g752
(S'\x07\xdf\n\x11\x10$$\x08\xd9\xa0'
tRp2261
sa(dp2262
S'trial_loop.thisTrialN'
p2263
I96
sg894
g1970
sS'block_loop.thisIndex'
p2264
g888
sg38
S'right'
p2265
sg58
g62
sS'trial_loop.thisN'
p2266
I96
sg33
g1304
sg63
g64
sS'trial_loop.thisIndex'
p2267
g59
(g98
S'`\x00\x00\x00'
tRp2268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2269
I0
sg903
g1977
sS'block_loop.thisRepN'
p2270
I0
sg906
g1297
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2271
I0
sg908
g1304
sg55
g11
sS'block_loop.thisTrial'
p2272
Nsg69
Vy
sS'block_loop.thisTrialN'
p2273
I0
sg39
F0.63352783551817993
sg34
g752
(S'\x07\xdf\n\x11\x10$*\x06\xce0'
tRp2274
sa(dp2275
S'trial_loop.thisTrialN'
p2276
I97
sg894
g1527
sS'block_loop.thisIndex'
p2277
g888
sg38
S'left'
p2278
sg58
g62
sS'trial_loop.thisN'
p2279
I97
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2280
g59
(g98
S'a\x00\x00\x00'
tRp2281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2282
I0
sg903
g1534
sS'block_loop.thisRepN'
p2283
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2284
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2285
Nsg69
Vy
sS'block_loop.thisTrialN'
p2286
I0
sg39
F1.3001775864713636
sg34
g752
(S'\x07\xdf\n\x11\x10$0\x01\xe4`'
tRp2287
sa(dp2288
S'trial_loop.thisTrialN'
p2289
I98
sg894
g1484
sS'block_loop.thisIndex'
p2290
g888
sg38
S'right'
p2291
sg58
g62
sS'trial_loop.thisN'
p2292
I98
sg33
g1494
sg63
g64
sS'trial_loop.thisIndex'
p2293
g59
(g98
S'b\x00\x00\x00'
tRp2294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2295
I0
sg903
g1492
sS'block_loop.thisRepN'
p2296
I0
sg906
g1494
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2297
I0
sg908
g1488
sg55
g11
sS'block_loop.thisTrial'
p2298
Nsg69
Vy
sS'block_loop.thisTrialN'
p2299
I0
sg39
F0.76664299417279835
sg34
g752
(S'\x07\xdf\n\x11\x10$6\x06\xfd\x10'
tRp2300
sa(dp2301
S'trial_loop.thisTrialN'
p2302
I99
sg894
S'17-jacobs_mini_cheddars_redo.png'
p2303
sS'block_loop.thisIndex'
p2304
g888
sg38
S'right'
p2305
sg58
g62
sS'trial_loop.thisN'
p2306
I99
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p2307
g59
(g98
S'c\x00\x00\x00'
tRp2308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2309
I0
sg903
S'8-liquorice_catherine_wheels.png'
p2310
sS'block_loop.thisRepN'
p2311
I0
sg906
g983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2312
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p2313
Nsg69
Vy
sS'block_loop.thisTrialN'
p2314
I0
sg39
F2.3833780886980094
sg34
g752
(S'\x07\xdf\n\x11\x10%\x00\x03\xbd\x08'
tRp2315
sa(dp2316
S'trial_loop.thisTrialN'
p2317
I100
sg894
g1613
sS'block_loop.thisIndex'
p2318
g888
sg38
S'right'
p2319
sg58
g62
sS'trial_loop.thisN'
p2320
I100
sg33
g1367
sg63
g64
sS'trial_loop.thisIndex'
p2321
g59
(g98
S'd\x00\x00\x00'
tRp2322
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2323
I0
sg903
g1620
sS'block_loop.thisRepN'
p2324
I0
sg906
g1367
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2325
I0
sg908
g1361
sg55
g11
sS'block_loop.thisTrial'
p2326
Nsg69
Vy
sS'block_loop.thisTrialN'
p2327
I0
sg39
F1.1172432786415811
sg34
g752
(S'\x07\xdf\n\x11\x10%\x07\n=\x18'
tRp2328
sa(dp2329
S'trial_loop.thisTrialN'
p2330
I101
sg894
g1122
sS'block_loop.thisIndex'
p2331
g888
sg38
S'right'
p2332
sg58
g62
sS'trial_loop.thisN'
p2333
I101
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p2334
g59
(g98
S'e\x00\x00\x00'
tRp2335
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2336
I0
sg903
g1129
sS'block_loop.thisRepN'
p2337
I0
sg906
g1049
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2338
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2339
Nsg69
Vy
sS'block_loop.thisTrialN'
p2340
I0
sg39
F0.78353580395832978
sg34
g752
(S'\x07\xdf\n\x11\x10%\r\x0cwh'
tRp2341
sa(dp2342
S'trial_loop.thisTrialN'
p2343
I102
sg894
g1276
sS'block_loop.thisIndex'
p2344
g888
sg38
S'right'
p2345
sg58
g62
sS'trial_loop.thisN'
p2346
I102
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p2347
g59
(g98
S'f\x00\x00\x00'
tRp2348
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2349
I0
sg903
g1284
sS'block_loop.thisRepN'
p2350
I0
sg906
g1286
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2351
I0
sg908
g1280
sg55
g11
sS'block_loop.thisTrial'
p2352
Nsg69
Vy
sS'block_loop.thisTrialN'
p2353
I0
sg39
F0.61661506899145024
sg34
g752
(S'\x07\xdf\n\x11\x10%\x13\t\xb4`'
tRp2354
sa(dp2355
S'trial_loop.thisTrialN'
p2356
I103
sg894
g1400
sS'block_loop.thisIndex'
p2357
g888
sg38
S'right'
p2358
sg58
g62
sS'trial_loop.thisN'
p2359
I103
sg33
g1404
sg63
g64
sS'trial_loop.thisIndex'
p2360
g59
(g98
S'g\x00\x00\x00'
tRp2361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2362
I0
sg903
g1408
sS'block_loop.thisRepN'
p2363
I0
sg906
g1404
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2364
I0
sg908
g1411
sg55
g11
sS'block_loop.thisTrial'
p2365
Nsg69
Vy
sS'block_loop.thisTrialN'
p2366
I0
sg39
F0.65009563554667693
sg34
g752
(S'\x07\xdf\n\x11\x10%\x19\x04Qx'
tRp2367
sa(dp2368
S'trial_loop.thisTrialN'
p2369
I104
sg894
g1527
sS'block_loop.thisIndex'
p2370
g888
sg38
S'left'
p2371
sg58
g62
sS'trial_loop.thisN'
p2372
I104
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2373
g59
(g98
S'h\x00\x00\x00'
tRp2374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2375
I0
sg903
g1534
sS'block_loop.thisRepN'
p2376
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2377
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2378
Nsg69
Vy
sS'block_loop.thisTrialN'
p2379
I0
sg39
F1.383527479147233
sg34
g752
(S'\x07\xdf\n\x11\x10%\x1e\x0e\xad\xd0'
tRp2380
sa(dp2381
S'trial_loop.thisTrialN'
p2382
I105
sg894
g962
sS'block_loop.thisIndex'
p2383
g888
sg38
S'left'
p2384
sg58
g62
sS'trial_loop.thisN'
p2385
I105
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p2386
g59
(g98
S'i\x00\x00\x00'
tRp2387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2388
I0
sg903
g970
sS'block_loop.thisRepN'
p2389
I0
sg906
g966
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2390
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p2391
Nsg69
Vy
sS'block_loop.thisTrialN'
p2392
I0
sg39
F1.0335239011883459
sg34
g752
(S'\x07\xdf\n\x11\x10%%\x05\xef\x88'
tRp2393
sa(dp2394
S'trial_loop.thisTrialN'
p2395
I106
sg894
g1583
sS'block_loop.thisIndex'
p2396
g888
sg38
S'right'
p2397
sg58
g62
sS'trial_loop.thisN'
p2398
I106
sg33
g1587
sg63
g64
sS'trial_loop.thisIndex'
p2399
g59
(g98
S'j\x00\x00\x00'
tRp2400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2401
I0
sg903
g1591
sS'block_loop.thisRepN'
p2402
I0
sg906
g1587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2403
I0
sg908
g1594
sg55
g11
sS'block_loop.thisTrial'
p2404
Nsg69
Vy
sS'block_loop.thisTrialN'
p2405
I0
sg39
F1.317261125668665
sg34
g752
(S'\x07\xdf\n\x11\x10%+\x06\xf9('
tRp2406
sa(dp2407
S'trial_loop.thisTrialN'
p2408
I107
sg894
g1137
sS'block_loop.thisIndex'
p2409
g888
sg38
S'right'
p2410
sg58
g62
sS'trial_loop.thisN'
p2411
I107
sg33
g1141
sg63
g64
sS'trial_loop.thisIndex'
p2412
g59
(g98
S'k\x00\x00\x00'
tRp2413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2414
I0
sg903
g1145
sS'block_loop.thisRepN'
p2415
I0
sg906
g1141
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2416
I0
sg908
g1148
sg55
g11
sS'block_loop.thisTrial'
p2417
Nsg69
Vy
sS'block_loop.thisTrialN'
p2418
I0
sg39
F0.58335317128330644
sg34
g752
(S'\x07\xdf\n\x11\x10%1\x0cPX'
tRp2419
sa(dp2420
S'trial_loop.thisTrialN'
p2421
I108
sg894
g2303
sS'block_loop.thisIndex'
p2422
g888
sg38
S'right'
p2423
sg58
g62
sS'trial_loop.thisN'
p2424
I108
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p2425
g59
(g98
S'l\x00\x00\x00'
tRp2426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2427
I0
sg903
g2310
sS'block_loop.thisRepN'
p2428
I0
sg906
g983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2429
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p2430
Nsg69
Vy
sS'block_loop.thisTrialN'
p2431
I0
sg39
F1.5001834594550019
sg34
g752
(S'\x07\xdf\n\x11\x10%7\x06tX'
tRp2432
sa(dp2433
S'trial_loop.thisTrialN'
p2434
I109
sg894
g1293
sS'block_loop.thisIndex'
p2435
g888
sg38
S'left'
p2436
sg58
g62
sS'trial_loop.thisN'
p2437
I109
sg33
g1304
sg63
g64
sS'trial_loop.thisIndex'
p2438
g59
(g98
S'm\x00\x00\x00'
tRp2439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2440
I0
sg903
g1301
sS'block_loop.thisRepN'
p2441
I0
sg906
g1297
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2442
I0
sg908
g1304
sg55
g11
sS'block_loop.thisTrial'
p2443
Nsg69
Vy
sS'block_loop.thisTrialN'
p2444
I0
sg39
F0.83352373013076431
sg34
g752
(S'\x07\xdf\n\x11\x10&\x01\x0ec\x98'
tRp2445
sa(dp2446
S'trial_loop.thisTrialN'
p2447
I110
sg894
g1199
sS'block_loop.thisIndex'
p2448
g888
sg38
S'left'
p2449
sg58
g62
sS'trial_loop.thisN'
p2450
I110
sg33
g1203
sg63
g64
sS'trial_loop.thisIndex'
p2451
g59
(g98
S'n\x00\x00\x00'
tRp2452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2453
I0
sg903
g1207
sS'block_loop.thisRepN'
p2454
I0
sg906
g1203
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2455
I0
sg908
g1210
sg55
g11
sS'block_loop.thisTrial'
p2456
Nsg69
Vy
sS'block_loop.thisTrialN'
p2457
I0
sg39
F0.61677871425581543
sg34
g752
(S'\x07\xdf\n\x11\x10&\x07\x0c\x96\xa8'
tRp2458
sa(dp2459
S'trial_loop.thisTrialN'
p2460
I111
sg894
g895
sS'block_loop.thisIndex'
p2461
g888
sg38
S'right'
p2462
sg58
g62
sS'trial_loop.thisN'
p2463
I111
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2464
g59
(g98
S'o\x00\x00\x00'
tRp2465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2466
I0
sg903
g904
sS'block_loop.thisRepN'
p2467
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2468
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2469
Nsg69
Vy
sS'block_loop.thisTrialN'
p2470
I0
sg39
F0.76663273070698779
sg34
g752
(S'\x07\xdf\n\x11\x10&\r\x073\xc0'
tRp2471
sa(dp2472
S'trial_loop.thisTrialN'
p2473
I112
sg894
g1970
sS'block_loop.thisIndex'
p2474
g888
sg38
S'right'
p2475
sg58
g62
sS'trial_loop.thisN'
p2476
I112
sg33
g1297
sg63
g64
sS'trial_loop.thisIndex'
p2477
g59
(g98
S'p\x00\x00\x00'
tRp2478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2479
I0
sg903
g1977
sS'block_loop.thisRepN'
p2480
I0
sg906
g1297
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2481
I0
sg908
g1304
sg55
g11
sS'block_loop.thisTrial'
p2482
Nsg69
Vy
sS'block_loop.thisTrialN'
p2483
I0
sg39
F0.80052155513203616
sg34
g752
(S'\x07\xdf\n\x11\x10&\x13\x03\xf7\xa0'
tRp2484
sa(dp2485
S'trial_loop.thisTrialN'
p2486
I113
sg894
g1484
sS'block_loop.thisIndex'
p2487
g888
sg38
S'left'
p2488
sg58
g62
sS'trial_loop.thisN'
p2489
I113
sg33
g1494
sg63
g64
sS'trial_loop.thisIndex'
p2490
g59
(g98
S'q\x00\x00\x00'
tRp2491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2492
I0
sg903
g1492
sS'block_loop.thisRepN'
p2493
I0
sg906
g1494
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2494
I0
sg908
g1488
sg55
g11
sS'block_loop.thisTrial'
p2495
Nsg69
Vy
sS'block_loop.thisTrialN'
p2496
I0
sg39
F0.93340607089703553
sg34
g752
(S'\x07\xdf\n\x11\x10&\x19\x01o0'
tRp2497
sa(dp2498
S'trial_loop.thisTrialN'
p2499
I114
sg894
g1216
sS'block_loop.thisIndex'
p2500
g888
sg38
S'left'
p2501
sg58
g62
sS'trial_loop.thisN'
p2502
I114
sg33
g1178
sg63
g64
sS'trial_loop.thisIndex'
p2503
g59
(g98
S'r\x00\x00\x00'
tRp2504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2505
I0
sg903
g1223
sS'block_loop.thisRepN'
p2506
I0
sg906
g1171
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2507
I0
sg908
g1178
sg55
g11
sS'block_loop.thisTrial'
p2508
Nsg69
Vy
sS'block_loop.thisTrialN'
p2509
I0
sg39
F0.85015197057145997
sg34
g752
(S'\x07\xdf\n\x11\x10&\x1f\x01\r\x88'
tRp2510
sa(dp2511
S'trial_loop.thisTrialN'
p2512
I115
sg894
g1357
sS'block_loop.thisIndex'
p2513
g888
sg38
S'left'
p2514
sg58
g62
sS'trial_loop.thisN'
p2515
I115
sg33
g1361
sg63
g64
sS'trial_loop.thisIndex'
p2516
g59
(g98
S's\x00\x00\x00'
tRp2517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2518
I0
sg903
g1365
sS'block_loop.thisRepN'
p2519
I0
sg906
g1367
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2520
I0
sg908
g1361
sg55
g11
sS'block_loop.thisTrial'
p2521
Nsg69
Vy
sS'block_loop.thisTrialN'
p2522
I0
sg39
F0.83343107384007453
sg34
g752
(S'\x07\xdf\n\x11\x10&$\x0e~\xf0'
tRp2523
sa(dp2524
S'trial_loop.thisTrialN'
p2525
I116
sg894
g1216
sS'block_loop.thisIndex'
p2526
g888
sg38
S'left'
p2527
sg58
g62
sS'trial_loop.thisN'
p2528
I116
sg33
g1178
sg63
g64
sS'trial_loop.thisIndex'
p2529
g59
(g98
S't\x00\x00\x00'
tRp2530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2531
I0
sg903
g1223
sS'block_loop.thisRepN'
p2532
I0
sg906
g1171
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2533
I0
sg908
g1178
sg55
g11
sS'block_loop.thisTrial'
p2534
Nsg69
Vy
sS'block_loop.thisTrialN'
p2535
I0
sg39
F0.80014095160004217
sg34
g752
(S'\x07\xdf\n\x11\x10&*\x0cs\x80'
tRp2536
sa(dp2537
S'trial_loop.thisTrialN'
p2538
I117
sg894
g1555
sS'block_loop.thisIndex'
p2539
g888
sg38
S'left'
p2540
sg58
g62
sS'trial_loop.thisN'
p2541
I117
sg33
g1411
sg63
g64
sS'trial_loop.thisIndex'
p2542
g59
(g98
S'u\x00\x00\x00'
tRp2543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2544
I0
sg903
g1562
sS'block_loop.thisRepN'
p2545
I0
sg906
g1404
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2546
I0
sg908
g1411
sg55
g11
sS'block_loop.thisTrial'
p2547
Nsg69
Vy
sS'block_loop.thisTrialN'
p2548
I0
sg39
F0.61675105991707824
sg34
g752
(S'\x07\xdf\n\x11\x10&0\t\xeb\x10'
tRp2549
sa(dp2550
S'trial_loop.thisTrialN'
p2551
I118
sg894
g2024
sS'block_loop.thisIndex'
p2552
g888
sg38
S'left'
p2553
sg58
g62
sS'trial_loop.thisN'
p2554
I118
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p2555
g59
(g98
S'v\x00\x00\x00'
tRp2556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2557
I0
sg903
g2031
sS'block_loop.thisRepN'
p2558
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2559
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p2560
Nsg69
Vy
sS'block_loop.thisTrialN'
p2561
I0
sg39
F0.9502107859334501
sg34
g752
(S'\x07\xdf\n\x11\x10&6\x04\x88('
tRp2562
sa(dp2563
S'trial_loop.thisTrialN'
p2564
I119
sg894
g1583
sS'block_loop.thisIndex'
p2565
g888
sg38
S'right'
p2566
sg58
g62
sS'trial_loop.thisN'
p2567
I119
sg33
g1594
sg63
g64
sS'trial_loop.thisIndex'
p2568
g59
(g98
S'w\x00\x00\x00'
tRp2569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2570
I0
sg903
g1591
sS'block_loop.thisRepN'
p2571
I0
sg906
g1587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2572
I0
sg908
g1594
sg55
g11
sS'block_loop.thisTrial'
p2573
Nsg69
Vy
sS'block_loop.thisTrialN'
p2574
I0
sg39
F0.98350261875202705
sg34
g752
(S"\x07\xdf\n\x11\x10'\x00\x04e\x00"
tRp2575
sa(dp2576
S'trial_loop.thisTrialN'
p2577
I120
sg894
g1094
sS'block_loop.thisIndex'
p2578
g888
sg38
S'left'
p2579
sg58
g62
sS'trial_loop.thisN'
p2580
I120
sg33
g1000
sg63
g64
sS'trial_loop.thisIndex'
p2581
g59
(g98
S'x\x00\x00\x00'
tRp2582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2583
I0
sg903
g1101
sS'block_loop.thisRepN'
p2584
I0
sg906
g1006
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2585
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p2586
Nsg69
Vy
sS'block_loop.thisTrialN'
p2587
I0
sg39
F1.2334570746206737
sg34
g752
(S"\x07\xdf\n\x11\x10'\x06\x04|p"
tRp2588
sa(dp2589
S'trial_loop.thisTrialN'
p2590
I121
sg894
g1293
sS'block_loop.thisIndex'
p2591
g888
sg38
S'left'
p2592
sg58
g62
sS'trial_loop.thisN'
p2593
I121
sg33
g1297
sg63
g64
sS'trial_loop.thisIndex'
p2594
g59
(g98
S'y\x00\x00\x00'
tRp2595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2596
I0
sg903
g1301
sS'block_loop.thisRepN'
p2597
I0
sg906
g1297
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2598
I0
sg908
g1304
sg55
g11
sS'block_loop.thisTrial'
p2599
Nsg69
Vy
sS'block_loop.thisTrialN'
p2600
I0
sg39
F0.98352799232088728
sg34
g752
(S"\x07\xdf\n\x11\x10'\x0c\x08\x9f\x08"
tRp2601
sa(dp2602
S'trial_loop.thisTrialN'
p2603
I122
sg894
g1310
sS'block_loop.thisIndex'
p2604
g888
sg38
S'right'
p2605
sg58
g62
sS'trial_loop.thisN'
p2606
I122
sg33
g1203
sg63
g64
sS'trial_loop.thisIndex'
p2607
g59
(g98
S'z\x00\x00\x00'
tRp2608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2609
I0
sg903
g1317
sS'block_loop.thisRepN'
p2610
I0
sg906
g1203
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2611
I0
sg908
g1210
sg55
g11
sS'block_loop.thisTrial'
p2612
Nsg69
Vy
sS'block_loop.thisTrialN'
p2613
I0
sg39
F0.95009076039968932
sg34
g752
(S"\x07\xdf\n\x11\x10'\x12\x08\xf1\x10"
tRp2614
sa(dp2615
S'trial_loop.thisTrialN'
p2616
I123
sg894
g1613
sS'block_loop.thisIndex'
p2617
g888
sg38
S'left'
p2618
sg58
g62
sS'trial_loop.thisN'
p2619
I123
sg33
g1367
sg63
g64
sS'trial_loop.thisIndex'
p2620
g59
(g98
S'{\x00\x00\x00'
tRp2621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2622
I0
sg903
g1620
sS'block_loop.thisRepN'
p2623
I0
sg906
g1367
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2624
I0
sg908
g1361
sg55
g11
sS'block_loop.thisTrial'
p2625
Nsg69
Vy
sS'block_loop.thisTrialN'
p2626
I0
sg39
F0.76687876879441319
sg34
g752
(S"\x07\xdf\n\x11\x10'\x18\x08\x8fh"
tRp2627
sa(dp2628
S'trial_loop.thisTrialN'
p2629
I124
sg894
g1430
sS'block_loop.thisIndex'
p2630
g888
sg38
S'right'
p2631
sg58
g62
sS'trial_loop.thisN'
p2632
I124
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2633
g59
(g98
S'|\x00\x00\x00'
tRp2634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2635
I0
sg903
g1437
sS'block_loop.thisRepN'
p2636
I0
sg906
g1066
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2637
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vy
sS'block_loop.thisTrialN'
p2639
I0
sg39
F0.66686699431829766
sg34
g752
(S"\x07\xdf\n\x11\x10'\x1e\x05\x8d\xe0"
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g1184
sS'block_loop.thisIndex'
p2643
g888
sg38
S'left'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g1141
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g1191
sS'block_loop.thisRepN'
p2649
I0
sg906
g1141
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2650
I0
sg908
g1148
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vy
sS'block_loop.thisTrialN'
p2652
I0
sg39
F0.63336276477275533
sg34
g752
(S"\x07\xdf\n\x11\x10'$\x01!\x10"
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g1942
sS'block_loop.thisIndex'
p2656
g888
sg38
S'left'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g1587
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g1949
sS'block_loop.thisRepN'
p2662
I0
sg906
g1587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2663
I0
sg908
g1594
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vy
sS'block_loop.thisTrialN'
p2665
I0
sg39
F0.68346986118922359
sg34
g752
(S"\x07\xdf\n\x11\x10')\x0b>\xe8"
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g2303
sS'block_loop.thisIndex'
p2669
g888
sg38
S'left'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g2310
sS'block_loop.thisRepN'
p2675
I0
sg906
g983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2676
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vy
sS'block_loop.thisTrialN'
p2678
I0
sg39
F0.73352792104651598
sg34
g752
(S"\x07\xdf\n\x11\x10'/\x06\xce0"
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g2024
sS'block_loop.thisIndex'
p2682
g888
sg38
S'left'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g1351
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g2031
sS'block_loop.thisRepN'
p2688
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2689
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vy
sS'block_loop.thisTrialN'
p2691
I0
sg39
F0.93343401033234841
sg34
g752
(S"\x07\xdf\n\x11\x10'5\x03S\x90"
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g1045
sS'block_loop.thisIndex'
p2695
g888
sg38
S'right'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g1053
sS'block_loop.thisRepN'
p2701
I0
sg906
g1049
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2702
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vy
sS'block_loop.thisTrialN'
p2704
I0
sg39
F1.1838218125458297
sg34
g752
(S"\x07\xdf\n\x11\x10';\x02\xb7P"
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g1030
sS'block_loop.thisIndex'
p2708
g888
sg38
S'right'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g1037
sS'block_loop.thisRepN'
p2714
I0
sg906
g966
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2715
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vy
sS'block_loop.thisTrialN'
p2717
I0
sg39
F0.75011824368175439
sg34
g752
(S'\x07\xdf\n\x11\x10(\x05\x06"P'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g996
sS'block_loop.thisIndex'
p2721
g888
sg38
S'left'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g1006
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g1004
sS'block_loop.thisRepN'
p2727
I0
sg906
g1006
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vy
sS'block_loop.thisTrialN'
p2730
I0
sg39
F1.1168313145190041
sg34
g752
(S'\x07\xdf\n\x11\x10(\x0b\x02\xe60'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g1942
sS'block_loop.thisIndex'
p2734
g888
sg38
S'right'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g1587
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g1949
sS'block_loop.thisRepN'
p2740
I0
sg906
g1587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg908
g1594
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vy
sS'block_loop.thisTrialN'
p2743
I0
sg39
F0.91686849107372836
sg34
g752
(S'\x07\xdf\n\x11\x10(\x11\x05 \x80'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g1122
sS'block_loop.thisIndex'
p2747
g888
sg38
S'left'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g1129
sS'block_loop.thisRepN'
p2753
I0
sg906
g1049
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vy
sS'block_loop.thisTrialN'
p2756
I0
sg39
F0.68343964098403376
sg34
g752
(S'\x07\xdf\n\x11\x10(\x17\x04E\xc0'
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g1079
sS'block_loop.thisIndex'
p2760
g888
sg38
S'left'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g1086
sS'block_loop.thisRepN'
p2766
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vy
sS'block_loop.thisTrialN'
p2769
I0
sg39
F1.0667578594629958
sg34
g752
(S'\x07\xdf\n\x11\x10(\x1d\x00\x13\x88'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g1137
sS'block_loop.thisIndex'
p2773
g888
sg38
S'right'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g1141
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g1145
sS'block_loop.thisRepN'
p2779
I0
sg906
g1141
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg908
g1148
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vy
sS'block_loop.thisTrialN'
p2782
I0
sg39
F0.66657020909224229
sg34
g752
(S'\x07\xdf\n\x11\x10(#\x01\x9a('
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g1527
sS'block_loop.thisIndex'
p2786
g888
sg38
S'left'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g1534
sS'block_loop.thisRepN'
p2792
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vy
sS'block_loop.thisTrialN'
p2795
I0
sg39
F0.80019112854552077
sg34
g752
(S'\x07\xdf\n\x11\x10((\x0c1\x18'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g1555
sS'block_loop.thisIndex'
p2799
g888
sg38
S'left'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1404
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g1562
sS'block_loop.thisRepN'
p2805
I0
sg906
g1404
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg908
g1411
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vy
sS'block_loop.thisTrialN'
p2808
I0
sg39
F0.73358522539820115
sg34
g752
(S'\x07\xdf\n\x11\x10(.\t\xa8\xa8'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g2024
sS'block_loop.thisIndex'
p2812
g888
sg38
S'left'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g2031
sS'block_loop.thisRepN'
p2818
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vy
sS'block_loop.thisTrialN'
p2821
I0
sg39
F0.76682488559799822
sg34
g752
(S'\x07\xdf\n\x11\x10(4\x06.\x08'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g915
sS'block_loop.thisIndex'
p2825
g888
sg38
S'left'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g923
sS'block_loop.thisRepN'
p2831
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vy
sS'block_loop.thisTrialN'
p2834
I0
sg39
F0.91678267709448846
sg34
g752
(S'\x07\xdf\n\x11\x10(:\x02\xf1\xe8'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g1167
sS'block_loop.thisIndex'
p2838
g888
sg38
S'right'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g1178
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g1175
sS'block_loop.thisRepN'
p2844
I0
sg906
g1171
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg908
g1178
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vy
sS'block_loop.thisTrialN'
p2847
I0
sg39
F0.85016708067360014
sg34
g752
(S'\x07\xdf\n\x11\x10)\x04\x02Q\xc0'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g1810
sS'block_loop.thisIndex'
p2851
g888
sg38
S'left'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g1817
sS'block_loop.thisRepN'
p2857
I0
sg906
g1286
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg908
g1280
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vy
sS'block_loop.thisTrialN'
p2860
I0
sg39
F1.0666660584611236
sg34
g752
(S'\x07\xdf\n\x11\x10)\n\x00\x80\xe8'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1340
sS'block_loop.thisIndex'
p2864
g888
sg38
S'right'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1348
sS'block_loop.thisRepN'
p2870
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vy
sS'block_loop.thisTrialN'
p2873
I0
sg39
F1.7001482785744884
sg34
g752
(S'\x07\xdf\n\x11\x10)\x10\x02\x07\x88'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g2065
sS'block_loop.thisIndex'
p2877
g888
sg38
S'left'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g2072
sS'block_loop.thisRepN'
p2883
I0
sg906
g1269
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg908
g1263
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vy
sS'block_loop.thisTrialN'
p2886
I0
sg39
F0.78347992508861353
sg34
g752
(S'\x07\xdf\n\x11\x10)\x16\rN@'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1062
sS'block_loop.thisIndex'
p2890
g888
sg38
S'left'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1073
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1070
sS'block_loop.thisRepN'
p2896
I0
sg906
g1066
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vy
sS'block_loop.thisTrialN'
p2899
I0
sg39
F1.0835525961301755
sg34
g752
(S'\x07\xdf\n\x11\x10)\x1c\nL\xb8'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g2223
sS'block_loop.thisIndex'
p2903
g888
sg38
S'right'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g1494
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g2230
sS'block_loop.thisRepN'
p2909
I0
sg906
g1494
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg908
g1488
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vy
sS'block_loop.thisTrialN'
p2912
I0
sg39
F1.7334957051671154
sg34
g752
(S'\x07\xdf\n\x11\x10)"\x0cLp'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1062
sS'block_loop.thisIndex'
p2916
g888
sg38
S'left'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1070
sS'block_loop.thisRepN'
p2922
I0
sg906
g1066
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vy
sS'block_loop.thisTrialN'
p2925
I0
sg39
F0.73367389034137886
sg34
g752
(S'\x07\xdf\n\x11\x10))\x08\x8fh'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1259
sS'block_loop.thisIndex'
p2929
g888
sg38
S'right'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1267
sS'block_loop.thisRepN'
p2935
I0
sg906
g1269
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg908
g1263
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vy
sS'block_loop.thisTrialN'
p2938
I0
sg39
F0.63354037975386746
sg34
g752
(S'\x07\xdf\n\x11\x10)/\x05\x14\xc8'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1357
sS'block_loop.thisIndex'
p2942
g888
sg38
S'left'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1367
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1365
sS'block_loop.thisRepN'
p2948
I0
sg906
g1367
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg908
g1361
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vy
sS'block_loop.thisTrialN'
p2951
I0
sg39
F0.70020358725287224
sg34
g752
(S'\x07\xdf\n\x11\x10)4\x0f.\xb8'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g1259
sS'block_loop.thisIndex'
p2955
g888
sg38
S'right'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g1267
sS'block_loop.thisRepN'
p2961
I0
sg906
g1269
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg908
g1263
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vy
sS'block_loop.thisTrialN'
p2964
I0
sg39
F1.3502273785370562
sg34
g752
(S'\x07\xdf\n\x11\x10):\x0b;\x00'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g1079
sS'block_loop.thisIndex'
p2968
g888
sg38
S'right'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g1086
sS'block_loop.thisRepN'
p2974
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vy
sS'block_loop.thisTrialN'
p2977
I0
sg39
F3.2000814234970676
sg34
g752
(S'\x07\xdf\n\x11\x10*\x05\x01\xc9\x08'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1030
sS'block_loop.thisIndex'
p2981
g888
sg38
S'right'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g973
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1037
sS'block_loop.thisRepN'
p2987
I0
sg906
g966
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vy
sS'block_loop.thisTrialN'
p2990
I0
sg39
F1.7168209940336965
sg34
g752
(S'\x07\xdf\n\x11\x10*\r\x05f\xd0'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1430
sS'block_loop.thisIndex'
p2994
g888
sg38
S'left'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1437
sS'block_loop.thisRepN'
p3000
I0
sg906
g1066
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vy
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.5334373744681216
sg34
g752
(S'\x07\xdf\n\x11\x10*\x14\x01kH'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1216
sS'block_loop.thisIndex'
p3007
g888
sg38
S'right'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1178
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1223
sS'block_loop.thisRepN'
p3013
I0
sg906
g1171
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg908
g1178
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vy
sS'block_loop.thisTrialN'
p3016
I0
sg39
F1.4001602811276825
sg34
g752
(S'\x07\xdf\n\x11\x10*\x1a\n\x12 '
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g2303
sS'block_loop.thisIndex'
p3020
g888
sg38
S'left'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g2310
sS'block_loop.thisRepN'
p3026
I0
sg906
g983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vy
sS'block_loop.thisTrialN'
p3029
I0
sg39
F1.116860964531952
sg34
g752
(S'\x07\xdf\n\x11\x10*!\x01\x92X'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g2223
sS'block_loop.thisIndex'
p3033
g888
sg38
S'right'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g1494
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g2230
sS'block_loop.thisRepN'
p3039
I0
sg906
g1494
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg908
g1488
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vy
sS'block_loop.thisTrialN'
p3042
I0
sg39
F1.1667582300879076
sg34
g752
(S"\x07\xdf\n\x11\x10*'\x03\xd0\x90"
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1340
sS'block_loop.thisIndex'
p3046
g888
sg38
S'right'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1348
sS'block_loop.thisRepN'
p3052
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vy
sS'block_loop.thisTrialN'
p3055
I0
sg39
F0.88351450726713665
sg34
g752
(S'\x07\xdf\n\x11\x10*-\x06\xc2x'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g1244
sS'block_loop.thisIndex'
p3059
g888
sg38
S'right'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1017
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g1251
sS'block_loop.thisRepN'
p3065
I0
sg906
g1017
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg908
g1024
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vy
sS'block_loop.thisTrialN'
p3068
I0
sg39
F0.8501967306874576
sg34
g752
(S'\x07\xdf\n\x11\x10*3\x05\xa98'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1583
sS'block_loop.thisIndex'
p3072
g888
sg38
S'left'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1594
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1591
sS'block_loop.thisRepN'
p3078
I0
sg906
g1587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg908
g1594
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vy
sS'block_loop.thisTrialN'
p3081
I0
sg39
F0.86678591293639329
sg34
g752
(S'\x07\xdf\n\x11\x10*9\x03\xd8`'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1199
sS'block_loop.thisIndex'
p3085
g888
sg38
S'left'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1210
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1207
sS'block_loop.thisRepN'
p3091
I0
sg906
g1203
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg908
g1210
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vy
sS'block_loop.thisTrialN'
p3094
I0
sg39
F0.63338728305188852
sg34
g752
(S'\x07\xdf\n\x11\x10+\x03\x02F\x08'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1583
sS'block_loop.thisIndex'
p3098
g888
sg38
S'left'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1594
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1591
sS'block_loop.thisRepN'
p3104
I0
sg906
g1587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg908
g1594
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vy
sS'block_loop.thisTrialN'
p3107
I0
sg39
F0.68389237387327739
sg34
g752
(S'\x07\xdf\n\x11\x10+\x08\x0cc\xe0'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g2065
sS'block_loop.thisIndex'
p3111
g888
sg38
S'left'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1263
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g2072
sS'block_loop.thisRepN'
p3117
I0
sg906
g1269
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg908
g1263
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vy
sS'block_loop.thisTrialN'
p3120
I0
sg39
F2.900172682815537
sg34
g752
(S'\x07\xdf\n\x11\x10+\x0e\x081\xa8'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g2303
sS'block_loop.thisIndex'
p3124
g888
sg38
S'right'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g990
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g2310
sS'block_loop.thisRepN'
p3130
I0
sg906
g983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vy
sS'block_loop.thisTrialN'
p3133
I0
sg39
F2.4334241745109466
sg34
g752
(S'\x07\xdf\n\x11\x10+\x16\x07\x0c\xb0'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1555
sS'block_loop.thisIndex'
p3137
g888
sg38
S'left'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1404
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1562
sS'block_loop.thisRepN'
p3143
I0
sg906
g1404
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg908
g1411
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vy
sS'block_loop.thisTrialN'
p3146
I0
sg39
F0.58351539106570272
sg34
g752
(S'\x07\xdf\n\x11\x10+\x1d\x0e@p'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g1613
sS'block_loop.thisIndex'
p3150
g888
sg38
S'right'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g1367
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g1620
sS'block_loop.thisRepN'
p3156
I0
sg906
g1367
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg908
g1361
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vy
sS'block_loop.thisTrialN'
p3159
I0
sg39
F0.96686468503776268
sg34
g752
(S'\x07\xdf\n\x11\x10+#\x08dp'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g1094
sS'block_loop.thisIndex'
p3163
g888
sg38
S'right'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g1006
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g1101
sS'block_loop.thisRepN'
p3169
I0
sg906
g1006
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vy
sS'block_loop.thisTrialN'
p3172
I0
sg39
F1.4168267244685921
sg34
g752
(S'\x07\xdf\n\x11\x10+)\x08=`'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g1137
sS'block_loop.thisIndex'
p3176
g888
sg38
S'right'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g1141
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g1145
sS'block_loop.thisRepN'
p3182
I0
sg906
g1141
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg908
g1148
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vy
sS'block_loop.thisTrialN'
p3185
I0
sg39
F2.7333765349230816
sg34
g752
(S'\x07\xdf\n\x11\x10+/\x0f>X'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g1045
sS'block_loop.thisIndex'
p3189
g888
sg38
S'right'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1053
sS'block_loop.thisRepN'
p3195
I0
sg906
g1049
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vy
sS'block_loop.thisTrialN'
p3198
I0
sg39
F1.2335024049298227
sg34
g752
(S'\x07\xdf\n\x11\x10+7\x0b\xb8\x00'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1942
sS'block_loop.thisIndex'
p3202
g888
sg38
S'right'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1587
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1949
sS'block_loop.thisRepN'
p3208
I0
sg906
g1587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg908
g1594
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vy
sS'block_loop.thisTrialN'
p3211
I0
sg39
F0.66686727941487334
sg34
g752
(S'\x07\xdf\n\x11\x10,\x02\x00Y\xd8'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1325
sS'block_loop.thisIndex'
p3215
g888
sg38
S'right'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1332
sS'block_loop.thisRepN'
p3221
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vy
sS'block_loop.thisTrialN'
p3224
I0
sg39
F1.5334222643659814
sg34
g752
(S'\x07\xdf\n\x11\x10,\x07\x0b/H'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g1276
sS'block_loop.thisIndex'
p3228
g888
sg38
S'right'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g1284
sS'block_loop.thisRepN'
p3234
I0
sg906
g1286
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg908
g1280
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vy
sS'block_loop.thisTrialN'
p3237
I0
sg39
F1.066572831978192
sg34
g752
(S'\x07\xdf\n\x11\x10,\x0e\x04\x97\xc8'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g895
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g904
sS'block_loop.thisRepN'
p3247
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vy
sS'block_loop.thisTrialN'
p3250
I0
sg39
F0.76691269525235839
sg34
g752
(S'\x07\xdf\n\x11\x10,\x14\x06\x1a\x80'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g2024
sS'block_loop.thisIndex'
p3254
g888
sg38
S'right'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g2031
sS'block_loop.thisRepN'
p3260
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vy
sS'block_loop.thisTrialN'
p3263
I0
sg39
F0.83336065505955048
sg34
g752
(S'\x07\xdf\n\x11\x10,\x1a\x03\x18\xf8'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1184
sS'block_loop.thisIndex'
p3267
g888
sg38
S'left'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1141
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1191
sS'block_loop.thisRepN'
p3273
I0
sg906
g1141
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg908
g1148
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vy
sS'block_loop.thisTrialN'
p3276
I0
sg39
F0.71670210888623842
sg34
g752
(S'\x07\xdf\n\x11\x10, \x01\r\x88'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g996
sS'block_loop.thisIndex'
p3280
g888
sg38
S'left'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1006
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1004
sS'block_loop.thisRepN'
p3286
I0
sg906
g1006
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vy
sS'block_loop.thisTrialN'
p3289
I0
sg39
F0.85019444991667115
sg34
g752
(S'\x07\xdf\n\x11\x10,%\x0c\\\x10'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1030
sS'block_loop.thisIndex'
p3293
g888
sg38
S'right'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1037
sS'block_loop.thisRepN'
p3299
I0
sg906
g966
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vy
sS'block_loop.thisTrialN'
p3302
I0
sg39
F0.70009610595570848
sg34
g752
(S'\x07\xdf\n\x11\x10,+\n\x8b8'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g2223
sS'block_loop.thisIndex'
p3306
g888
sg38
S'right'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g1488
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g2230
sS'block_loop.thisRepN'
p3312
I0
sg906
g1494
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg908
g1488
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vy
sS'block_loop.thisTrialN'
p3315
I0
sg39
F0.7667798403854249
sg34
g752
(S'\x07\xdf\n\x11\x10,1\x06\x97\x80'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1013
sS'block_loop.thisIndex'
p3319
g888
sg38
S'left'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1017
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1021
sS'block_loop.thisRepN'
p3325
I0
sg906
g1017
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg908
g1024
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vy
sS'block_loop.thisTrialN'
p3328
I0
sg39
F0.8168846560329257
sg34
g752
(S'\x07\xdf\n\x11\x10,7\x03\x95\xf8'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1122
sS'block_loop.thisIndex'
p3332
g888
sg38
S'right'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1129
sS'block_loop.thisRepN'
p3338
I0
sg906
g1049
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vy
sS'block_loop.thisTrialN'
p3341
I0
sg39
F0.8167957059940818
sg34
g752
(S'\x07\xdf\n\x11\x10-\x01\x01L\x08'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g996
sS'block_loop.thisIndex'
p3345
g888
sg38
S'left'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1000
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1004
sS'block_loop.thisRepN'
p3351
I0
sg906
g1006
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vy
sS'block_loop.thisTrialN'
p3354
I0
sg39
F1.0168101318658955
sg34
g752
(S'\x07\xdf\n\x11\x10-\x06\x0eDX'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1357
sS'block_loop.thisIndex'
p3358
g888
sg38
S'left'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1367
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1365
sS'block_loop.thisRepN'
p3364
I0
sg906
g1367
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg908
g1361
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vy
sS'block_loop.thisTrialN'
p3367
I0
sg39
F0.88351593274819606
sg34
g752
(S'\x07\xdf\n\x11\x10-\x0c\x0f\x13`'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g962
sS'block_loop.thisIndex'
p3371
g888
sg38
S'left'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g970
sS'block_loop.thisRepN'
p3377
I0
sg906
g966
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vy
sS'block_loop.thisTrialN'
p3380
I0
sg39
F0.75020804900850635
sg34
g752
(S'\x07\xdf\n\x11\x10-\x12\r\xbb\xa0'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g1810
sS'block_loop.thisIndex'
p3384
g888
sg38
S'left'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g1280
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g1817
sS'block_loop.thisRepN'
p3390
I0
sg906
g1286
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg908
g1280
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vy
sS'block_loop.thisTrialN'
p3393
I0
sg39
F0.59994691507290554
sg34
g752
(S'\x07\xdf\n\x11\x10-\x18\nA\x00'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g2065
sS'block_loop.thisIndex'
p3397
g888
sg38
S'left'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g2072
sS'block_loop.thisRepN'
p3403
I0
sg906
g1269
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg908
g1263
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vy
sS'block_loop.thisTrialN'
p3406
I0
sg39
F0.80013182851871534
sg34
g752
(S'\x07\xdf\n\x11\x10-\x1e\x04\xde\x18'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1527
sS'block_loop.thisIndex'
p3410
g888
sg38
S'left'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1534
sS'block_loop.thisRepN'
p3416
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vy
sS'block_loop.thisTrialN'
p3419
I0
sg39
F0.86678448745533387
sg34
g752
(S'\x07\xdf\n\x11\x10-$\x02Y\x90'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g1325
sS'block_loop.thisIndex'
p3423
g888
sg38
S'right'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g1332
sS'block_loop.thisRepN'
p3429
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vy
sS'block_loop.thisTrialN'
p3432
I0
sg39
F0.88351165630319883
sg34
g752
(S'\x07\xdf\n\x11\x10-*\x00\xc78'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g915
sS'block_loop.thisIndex'
p3436
g888
sg38
S'left'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g923
sS'block_loop.thisRepN'
p3442
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vy
sS'block_loop.thisTrialN'
p3445
I0
sg39
F0.83351004550968355
sg34
g752
(S'\x07\xdf\n\x11\x10-/\x0e\xb1\xb8'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1122
sS'block_loop.thisIndex'
p3449
g888
sg38
S'right'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g1056
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1129
sS'block_loop.thisRepN'
p3455
I0
sg906
g1049
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vy
sS'block_loop.thisTrialN'
p3458
I0
sg39
F0.93353322383700288
sg34
g752
(S'\x07\xdf\n\x11\x10-5\x0c\xa6H'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g2065
sS'block_loop.thisIndex'
p3462
g888
sg38
S'right'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g2072
sS'block_loop.thisRepN'
p3468
I0
sg906
g1269
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg908
g1263
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vy
sS'block_loop.thisTrialN'
p3471
I0
sg39
F1.0334340958606845
sg34
g752
(S'\x07\xdf\n\x11\x10-;\x0cD\xa0'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1400
sS'block_loop.thisIndex'
p3475
g888
sg38
S'right'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1411
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1408
sS'block_loop.thisRepN'
p3481
I0
sg906
g1404
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg908
g1411
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vy
sS'block_loop.thisTrialN'
p3484
I0
sg39
F0.85018475664310245
sg34
g752
(S'\x07\xdf\n\x11\x10.\x05\r\x0f\xc0'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1013
sS'block_loop.thisIndex'
p3488
g888
sg38
S'left'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1017
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1021
sS'block_loop.thisRepN'
p3494
I0
sg906
g1017
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg908
g1024
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vy
sS'block_loop.thisTrialN'
p3497
I0
sg39
F0.95010587050364848
sg34
g752
(S'\x07\xdf\n\x11\x10.\x0b\x0b}h'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1484
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1494
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1492
sS'block_loop.thisRepN'
p3507
I0
sg906
g1494
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg908
g1488
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vy
sS'block_loop.thisTrialN'
p3510
I0
sg39
F1.1334259135983302
sg34
g752
(S'\x07\xdf\n\x11\x10.\x11\x0b\x1b\xc0'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g1325
sS'block_loop.thisIndex'
p3514
g888
sg38
S'right'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g1332
sS'block_loop.thisRepN'
p3520
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vy
sS'block_loop.thisTrialN'
p3523
I0
sg39
F1.3001194268308609
sg34
g752
(S'\x07\xdf\n\x11\x10.\x17\r\x94\x90'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g1970
sS'block_loop.thisIndex'
p3527
g888
sg38
S'right'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1297
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g1977
sS'block_loop.thisRepN'
p3533
I0
sg906
g1297
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg908
g1304
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vy
sS'block_loop.thisTrialN'
p3536
I0
sg39
F0.68344762367996736
sg34
g752
(S'\x07\xdf\n\x11\x10.\x1e\x03k\x00'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1216
sS'block_loop.thisIndex'
p3540
g888
sg38
S'left'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g1171
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1223
sS'block_loop.thisRepN'
p3546
I0
sg906
g1171
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg908
g1178
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vy
sS'block_loop.thisTrialN'
p3549
I0
sg39
F0.86720728523596335
sg34
g752
(S'\x07\xdf\n\x11\x10.#\x0e{\x08'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g1293
sS'block_loop.thisIndex'
p3553
g888
sg38
S'left'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1304
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g1301
sS'block_loop.thisRepN'
p3559
I0
sg906
g1297
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg908
g1304
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vy
sS'block_loop.thisTrialN'
p3562
I0
sg39
F0.83351489214692265
sg34
g752
(S'\x07\xdf\n\x11\x10.)\x0c\xe8\xb0'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g2223
sS'block_loop.thisIndex'
p3566
g888
sg38
S'right'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g1494
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g2230
sS'block_loop.thisRepN'
p3572
I0
sg906
g1494
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg908
g1488
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vy
sS'block_loop.thisTrialN'
p3575
I0
sg39
F1.0500991137205347
sg34
g752
(S'\x07\xdf\n\x11\x10./\n\xd9X'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g932
sS'block_loop.thisIndex'
p3579
g888
sg38
S'left'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g940
sS'block_loop.thisRepN'
p3585
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vy
sS'block_loop.thisTrialN'
p3588
I0
sg39
F1.4501288207538892
sg34
g752
(S'\x07\xdf\n\x11\x10.5\x0c!x'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g1244
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g1017
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g1251
sS'block_loop.thisRepN'
p3598
I0
sg906
g1017
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg908
g1024
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vy
sS'block_loop.thisTrialN'
p3601
I0
sg39
F0.81684331707219826
sg34
g752
(S'\x07\xdf\n\x11\x10/\x00\x04YH'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g1613
sS'block_loop.thisIndex'
p3605
g888
sg38
S'right'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1367
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g1620
sS'block_loop.thisRepN'
p3611
I0
sg906
g1367
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg908
g1361
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vy
sS'block_loop.thisTrialN'
p3614
I0
sg39
F0.81728008457048418
sg34
g752
(S'\x07\xdf\n\x11\x10/\x06\x02\x0fX'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F2.8168384704358687
sg56
Vl
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vy
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vl
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vy
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'21-nakd_banana_crunch.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'right'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'1-treacle_cookies.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'1-treacle_cookies.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'21-nakd_banana_crunch.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vy
sS'block_loop.thisTrialN'
p3649
I0
sg39
F1.1001335105875114
sg34
g752
(S'\x07\xdf\n\x11\x10/\x13\x0c\xb2\x00'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'40-sardines.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'left'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'40-sardines.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'5-pineapple.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3663
I1
sg3646
S'5-pineapple.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vy
sS'block_loop.thisTrialN'
p3666
I0
sg39
F0.70010494394045963
sg34
g752
(S'\x07\xdf\n\x11\x10/\x19\x0e\xad\xd0'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'46-pistachios.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'right'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'46-pistachios.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'29-beans.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3680
I1
sg3646
S'29-beans.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vy
sS'block_loop.thisTrialN'
p3683
I0
sg39
F0.66686043710433296
sg34
g752
(S'\x07\xdf\n\x11\x10/\x1f\n\x7f\x80'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'31-hobnobs.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'right'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'25-kitkat.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'25-kitkat.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3697
I1
sg3646
S'31-hobnobs.png'
p3698
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vy
sS'block_loop.thisTrialN'
p3700
I0
sg39
F1.0838872991598691
sg34
g752
(S'\x07\xdf\n\x11\x10/%\x06\x0e\xc8'
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'33-ambrosia_rice.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'left'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'23-crunchie_redo.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'23-crunchie_redo.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
g3708
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3714
I1
sg3646
S'33-ambrosia_rice.png'
p3715
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vy
sS'block_loop.thisTrialN'
p3717
I0
sg39
F0.76686479907675675
sg34
g752
(S'\x07\xdf\n\x11\x10/+\x07\xd3\xe8'
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
g3687
sS'block_loop.thisIndex'
p3721
g3626
sg38
S'right'
p3722
sg58
g62
sS'trial_loop.thisN'
p3723
I5
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p3724
g59
(g98
S'\x05\x00\x00\x00'
tRp3725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3726
I0
sg3641
g3695
sS'block_loop.thisRepN'
p3727
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3728
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p3729
Nsg69
Vy
sS'block_loop.thisTrialN'
p3730
I0
sg39
F0.76686707984754321
sg34
g752
(S'\x07\xdf\n\x11\x10/1\x04\xd2`'
tRp3731
sa(dp3732
S'trial_loop.thisTrialN'
p3733
I6
sg3632
S'41-peanuts_redo.png'
p3734
sS'block_loop.thisIndex'
p3735
g3626
sg38
S'left'
p3736
sg58
g62
sS'trial_loop.thisN'
p3737
I6
sg33
S'41-peanuts_redo.png'
p3738
sg63
g64
sS'trial_loop.thisIndex'
p3739
g59
(g98
S'\x06\x00\x00\x00'
tRp3740
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3741
I0
sg3641
S'45-chewy_nougat_redo.png'
p3742
sS'block_loop.thisRepN'
p3743
I1
sg3644
g3738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3744
I1
sg3646
S'45-chewy_nougat_redo.png'
p3745
sg55
g11
sS'block_loop.thisTrial'
p3746
Nsg69
Vy
sS'block_loop.thisTrialN'
p3747
I0
sg39
F0.83342964835992461
sg34
g752
(S'\x07\xdf\n\x11\x10/7\x01\xd0\xd8'
tRp3748
sa(dp3749
S'trial_loop.thisTrialN'
p3750
I7
sg3632
S'38-maltesers.png'
p3751
sS'block_loop.thisIndex'
p3752
g3626
sg38
S'left'
p3753
sg58
g62
sS'trial_loop.thisN'
p3754
I7
sg33
S'38-maltesers.png'
p3755
sg63
g64
sS'trial_loop.thisIndex'
p3756
g59
(g98
S'\x07\x00\x00\x00'
tRp3757
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3758
I0
sg3641
S'6-sour_patch_kids.png'
p3759
sS'block_loop.thisRepN'
p3760
I1
sg3644
g3755
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3761
I1
sg3646
S'6-sour_patch_kids.png'
p3762
sg55
g11
sS'block_loop.thisTrial'
p3763
Nsg69
Vy
sS'block_loop.thisTrialN'
p3764
I0
sg39
F0.78326581778310356
sg34
g752
(S'\x07\xdf\n\x11\x100\x00\x0f\x07\xa8'
tRp3765
sa(dp3766
S'trial_loop.thisTrialN'
p3767
I8
sg3632
S'36-fig_rolls.png'
p3768
sS'block_loop.thisIndex'
p3769
g3626
sg38
S'right'
p3770
sg58
g62
sS'trial_loop.thisN'
p3771
I8
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p3772
sg63
g64
sS'trial_loop.thisIndex'
p3773
g59
(g98
S'\x08\x00\x00\x00'
tRp3774
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3775
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p3776
sS'block_loop.thisRepN'
p3777
I1
sg3644
g3772
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3778
I1
sg3646
S'36-fig_rolls.png'
p3779
sg55
g11
sS'block_loop.thisTrial'
p3780
Nsg69
Vy
sS'block_loop.thisTrialN'
p3781
I0
sg39
F0.68354455641474487
sg34
g752
(S'\x07\xdf\n\x11\x100\x06\x0c\x06 '
tRp3782
sa(dp3783
S'trial_loop.thisTrialN'
p3784
I9
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p3785
sS'block_loop.thisIndex'
p3786
g3626
sg38
S'right'
p3787
sg58
g62
sS'trial_loop.thisN'
p3788
I9
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3789
sg63
g64
sS'trial_loop.thisIndex'
p3790
g59
(g98
S'\t\x00\x00\x00'
tRp3791
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3792
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p3793
sS'block_loop.thisRepN'
p3794
I1
sg3644
g3789
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3795
I1
sg3646
S'8-liquorice_catherine_wheels.png'
p3796
sg55
g11
sS'block_loop.thisTrial'
p3797
Nsg69
Vy
sS'block_loop.thisTrialN'
p3798
I0
sg39
F1.0335464237950873
sg34
g752
(S'\x07\xdf\n\x11\x100\x0c\x07\xd3\xe8'
tRp3799
sa(dp3800
S'trial_loop.thisTrialN'
p3801
I10
sg3632
S'10-bounty_redo.png'
p3802
sS'block_loop.thisIndex'
p3803
g3626
sg38
S'left'
p3804
sg58
g62
sS'trial_loop.thisN'
p3805
I10
sg33
S'10-bounty_redo.png'
p3806
sg63
g64
sS'trial_loop.thisIndex'
p3807
g59
(g98
S'\n\x00\x00\x00'
tRp3808
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3809
I0
sg3641
S'4-corn.png'
p3810
sS'block_loop.thisRepN'
p3811
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3812
I1
sg3646
S'4-corn.png'
p3813
sg55
g11
sS'block_loop.thisTrial'
p3814
Nsg69
Vy
sS'block_loop.thisTrialN'
p3815
I0
sg39
F0.6335623321674575
sg34
g752
(S'\x07\xdf\n\x11\x100\x12\x08\xdd\x88'
tRp3816
sa(dp3817
S'trial_loop.thisTrialN'
p3818
I11
sg3632
S'3-ellas_strawberries_apples.png'
p3819
sS'block_loop.thisIndex'
p3820
g3626
sg38
S'right'
p3821
sg58
g62
sS'trial_loop.thisN'
p3822
I11
sg33
S'13-mccoys_steak_crisps.png'
p3823
sg63
g64
sS'trial_loop.thisIndex'
p3824
g59
(g98
S'\x0b\x00\x00\x00'
tRp3825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3826
I0
sg3641
S'13-mccoys_steak_crisps.png'
p3827
sS'block_loop.thisRepN'
p3828
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3829
I1
sg3646
S'3-ellas_strawberries_apples.png'
p3830
sg55
g11
sS'block_loop.thisTrial'
p3831
Nsg69
Vy
sS'block_loop.thisTrialN'
p3832
I0
sg39
F0.93348447237349319
sg34
g752
(S'\x07\xdf\n\x11\x100\x18\x03\xb9 '
tRp3833
sa(dp3834
S'trial_loop.thisTrialN'
p3835
I12
sg3632
g3768
sS'block_loop.thisIndex'
p3836
g3626
sg38
S'right'
p3837
sg58
g62
sS'trial_loop.thisN'
p3838
I12
sg33
g3779
sg63
g64
sS'trial_loop.thisIndex'
p3839
g59
(g98
S'\x0c\x00\x00\x00'
tRp3840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3841
I0
sg3641
g3776
sS'block_loop.thisRepN'
p3842
I1
sg3644
g3772
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3843
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p3844
Nsg69
Vy
sS'block_loop.thisTrialN'
p3845
I0
sg39
F0.71675542188950203
sg34
g752
(S'\x07\xdf\n\x11\x100\x1e\x03Wx'
tRp3846
sa(dp3847
S'trial_loop.thisTrialN'
p3848
I13
sg3632
S'45-chewy_nougat_redo.png'
p3849
sS'block_loop.thisIndex'
p3850
g3626
sg38
S'right'
p3851
sg58
g62
sS'trial_loop.thisN'
p3852
I13
sg33
g3738
sg63
g64
sS'trial_loop.thisIndex'
p3853
g59
(g98
S'\r\x00\x00\x00'
tRp3854
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3855
I0
sg3641
S'41-peanuts_redo.png'
p3856
sS'block_loop.thisRepN'
p3857
I1
sg3644
g3738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3858
I1
sg3646
g3745
sg55
g11
sS'block_loop.thisTrial'
p3859
Nsg69
Vy
sS'block_loop.thisTrialN'
p3860
I0
sg39
F0.65014182114282448
sg34
g752
(S'\x07\xdf\n\x11\x100#\x0e\xa6\x00'
tRp3861
sa(dp3862
S'trial_loop.thisTrialN'
p3863
I14
sg3632
S'42-mrkipling_lemon_slices.png'
p3864
sS'block_loop.thisIndex'
p3865
g3626
sg38
S'right'
p3866
sg58
g62
sS'trial_loop.thisN'
p3867
I14
sg33
S'16-skips_prawn.png'
p3868
sg63
g64
sS'trial_loop.thisIndex'
p3869
g59
(g98
S'\x0e\x00\x00\x00'
tRp3870
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3871
I0
sg3641
S'16-skips_prawn.png'
p3872
sS'block_loop.thisRepN'
p3873
I1
sg3644
g3868
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3874
I1
sg3646
S'42-mrkipling_lemon_slices.png'
p3875
sg55
g11
sS'block_loop.thisTrial'
p3876
Nsg69
Vy
sS'block_loop.thisTrialN'
p3877
I0
sg39
F1.000049321656661
sg34
g752
(S'\x07\xdf\n\x11\x100)\t\xbc0'
tRp3878
sa(dp3879
S'trial_loop.thisTrialN'
p3880
I15
sg3632
S'30-spaghetti_hoops.png'
p3881
sS'block_loop.thisIndex'
p3882
g3626
sg38
S'left'
p3883
sg58
g62
sS'trial_loop.thisN'
p3884
I15
sg33
S'19-caramello_redo.png'
p3885
sg63
g64
sS'trial_loop.thisIndex'
p3886
g59
(g98
S'\x0f\x00\x00\x00'
tRp3887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3888
I0
sg3641
S'19-caramello_redo.png'
p3889
sS'block_loop.thisRepN'
p3890
I1
sg3644
g3885
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3891
I1
sg3646
S'30-spaghetti_hoops.png'
p3892
sg55
g11
sS'block_loop.thisTrial'
p3893
Nsg69
Vy
sS'block_loop.thisTrialN'
p3894
I0
sg39
F1.383851063423208
sg34
g752
(S'\x07\xdf\n\x11\x100/\nL\xb8'
tRp3895
sa(dp3896
S'trial_loop.thisTrialN'
p3897
I16
sg3632
g3819
sS'block_loop.thisIndex'
p3898
g3626
sg38
S'right'
p3899
sg58
g62
sS'trial_loop.thisN'
p3900
I16
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p3901
g59
(g98
S'\x10\x00\x00\x00'
tRp3902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3903
I0
sg3641
g3827
sS'block_loop.thisRepN'
p3904
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3905
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p3906
Nsg69
Vy
sS'block_loop.thisTrialN'
p3907
I0
sg39
F0.95012611233869393
sg34
g752
(S'\x07\xdf\n\x11\x1006\x01S\xd8'
tRp3908
sa(dp3909
S'trial_loop.thisTrialN'
p3910
I17
sg3632
S'19-caramello_redo.png'
p3911
sS'block_loop.thisIndex'
p3912
g3626
sg38
S'left'
p3913
sg58
g62
sS'trial_loop.thisN'
p3914
I17
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p3915
g59
(g98
S'\x11\x00\x00\x00'
tRp3916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3917
I0
sg3641
S'30-spaghetti_hoops.png'
p3918
sS'block_loop.thisRepN'
p3919
I1
sg3644
g3885
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3920
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p3921
Nsg69
Vy
sS'block_loop.thisTrialN'
p3922
I0
sg39
F0.63353581821320404
sg34
g752
(S'\x07\xdf\n\x11\x101\x00\x01,\xc8'
tRp3923
sa(dp3924
S'trial_loop.thisTrialN'
p3925
I18
sg3632
S'13-mccoys_steak_crisps.png'
p3926
sS'block_loop.thisIndex'
p3927
g3626
sg38
S'left'
p3928
sg58
g62
sS'trial_loop.thisN'
p3929
I18
sg33
g3830
sg63
g64
sS'trial_loop.thisIndex'
p3930
g59
(g98
S'\x12\x00\x00\x00'
tRp3931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3932
I0
sg3641
S'3-ellas_strawberries_apples.png'
p3933
sS'block_loop.thisRepN'
p3934
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3935
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p3936
Nsg69
Vy
sS'block_loop.thisTrialN'
p3937
I0
sg39
F0.61677158684869937
sg34
g752
(S'\x07\xdf\n\x11\x101\x05\x0bJ\xa0'
tRp3938
sa(dp3939
S'trial_loop.thisTrialN'
p3940
I19
sg3632
S'29-beans.png'
p3941
sS'block_loop.thisIndex'
p3942
g3626
sg38
S'right'
p3943
sg58
g62
sS'trial_loop.thisN'
p3944
I19
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p3945
g59
(g98
S'\x13\x00\x00\x00'
tRp3946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3947
I0
sg3641
S'46-pistachios.png'
p3948
sS'block_loop.thisRepN'
p3949
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3950
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p3951
Nsg69
Vy
sS'block_loop.thisTrialN'
p3952
I0
sg39
F1.0168996520969813
sg34
g752
(S'\x07\xdf\n\x11\x101\x0b\x05\xe7\xb8'
tRp3953
sa(dp3954
S'trial_loop.thisTrialN'
p3955
I20
sg3632
S'23-crunchie_redo.png'
p3956
sS'block_loop.thisIndex'
p3957
g3626
sg38
S'left'
p3958
sg58
g62
sS'trial_loop.thisN'
p3959
I20
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p3960
g59
(g98
S'\x14\x00\x00\x00'
tRp3961
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3962
I0
sg3641
S'33-ambrosia_rice.png'
p3963
sS'block_loop.thisRepN'
p3964
I1
sg3644
g3708
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3965
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p3966
Nsg69
Vy
sS'block_loop.thisTrialN'
p3967
I0
sg39
F1.0168386414934503
sg34
g752
(S'\x07\xdf\n\x11\x101\x11\x06\xb6\xc0'
tRp3968
sa(dp3969
S'trial_loop.thisTrialN'
p3970
I21
sg3632
g3926
sS'block_loop.thisIndex'
p3971
g3626
sg38
S'left'
p3972
sg58
g62
sS'trial_loop.thisN'
p3973
I21
sg33
g3830
sg63
g64
sS'trial_loop.thisIndex'
p3974
g59
(g98
S'\x15\x00\x00\x00'
tRp3975
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3976
I0
sg3641
g3933
sS'block_loop.thisRepN'
p3977
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3978
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p3979
Nsg69
Vy
sS'block_loop.thisTrialN'
p3980
I0
sg39
F0.75022087834167905
sg34
g752
(S'\x07\xdf\n\x11\x101\x17\x07\x85\xc8'
tRp3981
sa(dp3982
S'trial_loop.thisTrialN'
p3983
I22
sg3632
S'7-olives.png'
p3984
sS'block_loop.thisIndex'
p3985
g3626
sg38
S'left'
p3986
sg58
g62
sS'trial_loop.thisN'
p3987
I22
sg33
S'22-daim.png'
p3988
sg63
g64
sS'trial_loop.thisIndex'
p3989
g59
(g98
S'\x16\x00\x00\x00'
tRp3990
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3991
I0
sg3641
S'22-daim.png'
p3992
sS'block_loop.thisRepN'
p3993
I1
sg3644
g3988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3994
I1
sg3646
S'7-olives.png'
p3995
sg55
g11
sS'block_loop.thisTrial'
p3996
Nsg69
Vy
sS'block_loop.thisTrialN'
p3997
I0
sg39
F0.68343679002100544
sg34
g752
(S'\x07\xdf\n\x11\x101\x1d\x04I\xa8'
tRp3998
sa(dp3999
S'trial_loop.thisTrialN'
p4000
I23
sg3632
g3802
sS'block_loop.thisIndex'
p4001
g3626
sg38
S'left'
p4002
sg58
g62
sS'trial_loop.thisN'
p4003
I23
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4004
g59
(g98
S'\x17\x00\x00\x00'
tRp4005
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4006
I0
sg3641
g3810
sS'block_loop.thisRepN'
p4007
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4008
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4009
Nsg69
Vy
sS'block_loop.thisTrialN'
p4010
I0
sg39
F0.86675255667250894
sg34
g752
(S'\x07\xdf\n\x11\x101"\x0f\x1b0'
tRp4011
sa(dp4012
S'trial_loop.thisTrialN'
p4013
I24
sg3632
g3984
sS'block_loop.thisIndex'
p4014
g3626
sg38
S'right'
p4015
sg58
g62
sS'trial_loop.thisN'
p4016
I24
sg33
g3988
sg63
g64
sS'trial_loop.thisIndex'
p4017
g59
(g98
S'\x18\x00\x00\x00'
tRp4018
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4019
I0
sg3641
g3992
sS'block_loop.thisRepN'
p4020
I1
sg3644
g3988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4021
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p4022
Nsg69
Vy
sS'block_loop.thisTrialN'
p4023
I0
sg39
F1.1501927108292875
sg34
g752
(S'\x07\xdf\n\x11\x101(\r\x88\xd8'
tRp4024
sa(dp4025
S'trial_loop.thisTrialN'
p4026
I25
sg3632
S'8-liquorice_catherine_wheels.png'
p4027
sS'block_loop.thisIndex'
p4028
g3626
sg38
S'left'
p4029
sg58
g62
sS'trial_loop.thisN'
p4030
I25
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p4031
g59
(g98
S'\x19\x00\x00\x00'
tRp4032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4033
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p4034
sS'block_loop.thisRepN'
p4035
I1
sg3644
g3789
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4036
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p4037
Nsg69
Vy
sS'block_loop.thisTrialN'
p4038
I0
sg39
F1.2835040157233379
sg34
g752
(S'\x07\xdf\n\x11\x101/\x018\x80'
tRp4039
sa(dp4040
S'trial_loop.thisTrialN'
p4041
I26
sg3632
S'18-mms.png'
p4042
sS'block_loop.thisIndex'
p4043
g3626
sg38
S'left'
p4044
sg58
g62
sS'trial_loop.thisN'
p4045
I26
sg33
S'18-mms.png'
p4046
sg63
g64
sS'trial_loop.thisIndex'
p4047
g59
(g98
S'\x1a\x00\x00\x00'
tRp4048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4049
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p4050
sS'block_loop.thisRepN'
p4051
I1
sg3644
g4046
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4052
I1
sg3646
S'43-mrporky_pork_crackles_redo.png'
p4053
sg55
g11
sS'block_loop.thisTrial'
p4054
Nsg69
Vy
sS'block_loop.thisTrialN'
p4055
I0
sg39
F1.1005392025908804
sg34
g752
(S'\x07\xdf\n\x11\x1015\x06\x12\xb0'
tRp4056
sa(dp4057
S'trial_loop.thisTrialN'
p4058
I27
sg3632
g3704
sS'block_loop.thisIndex'
p4059
g3626
sg38
S'right'
p4060
sg58
g62
sS'trial_loop.thisN'
p4061
I27
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p4062
g59
(g98
S'\x1b\x00\x00\x00'
tRp4063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4064
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4065
I1
sg3644
g3708
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4066
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4067
Nsg69
Vy
sS'block_loop.thisTrialN'
p4068
I0
sg39
F0.98345301199879032
sg34
g752
(S'\x07\xdf\n\x11\x101;\x08\x12h'
tRp4069
sa(dp4070
S'trial_loop.thisTrialN'
p4071
I28
sg3632
g3687
sS'block_loop.thisIndex'
p4072
g3626
sg38
S'right'
p4073
sg58
g62
sS'trial_loop.thisN'
p4074
I28
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4075
g59
(g98
S'\x1c\x00\x00\x00'
tRp4076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4077
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4078
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4079
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4080
Nsg69
Vy
sS'block_loop.thisTrialN'
p4081
I0
sg39
F2.5000411964119849
sg34
g752
(S'\x07\xdf\n\x11\x102\x05\x08hX'
tRp4082
sa(dp4083
S'trial_loop.thisTrialN'
p4084
I29
sg3632
S'2-steamed_puddings.png'
p4085
sS'block_loop.thisIndex'
p4086
g3626
sg38
S'right'
p4087
sg58
g62
sS'trial_loop.thisN'
p4088
I29
sg33
S'2-steamed_puddings.png'
p4089
sg63
g64
sS'trial_loop.thisIndex'
p4090
g59
(g98
S'\x1d\x00\x00\x00'
tRp4091
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4092
I0
sg3641
S'20-fruit_pastilles.png'
p4093
sS'block_loop.thisRepN'
p4094
I1
sg3644
g4089
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4095
I1
sg3646
S'20-fruit_pastilles.png'
p4096
sg55
g11
sS'block_loop.thisTrial'
p4097
Nsg69
Vy
sS'block_loop.thisTrialN'
p4098
I0
sg39
F1.7834539813266019
sg34
g752
(S'\x07\xdf\n\x11\x102\r\x01\x11p'
tRp4099
sa(dp4100
S'trial_loop.thisTrialN'
p4101
I30
sg3632
S'44-crunch.png'
p4102
sS'block_loop.thisIndex'
p4103
g3626
sg38
S'left'
p4104
sg58
g62
sS'trial_loop.thisN'
p4105
I30
sg33
S'26-walkers_smoky_bacon.png'
p4106
sg63
g64
sS'trial_loop.thisIndex'
p4107
g59
(g98
S'\x1e\x00\x00\x00'
tRp4108
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4109
I0
sg3641
S'26-walkers_smoky_bacon.png'
p4110
sS'block_loop.thisRepN'
p4111
I1
sg3644
g4106
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4112
I1
sg3646
S'44-crunch.png'
p4113
sg55
g11
sS'block_loop.thisTrial'
p4114
Nsg69
Vy
sS'block_loop.thisTrialN'
p4115
I0
sg39
F0.88349768658645189
sg34
g752
(S'\x07\xdf\n\x11\x102\x13\r\x88\xd8'
tRp4116
sa(dp4117
S'trial_loop.thisTrialN'
p4118
I31
sg3632
g3941
sS'block_loop.thisIndex'
p4119
g3626
sg38
S'right'
p4120
sg58
g62
sS'trial_loop.thisN'
p4121
I31
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p4122
g59
(g98
S'\x1f\x00\x00\x00'
tRp4123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4124
I0
sg3641
g3948
sS'block_loop.thisRepN'
p4125
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4126
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4127
Nsg69
Vy
sS'block_loop.thisTrialN'
p4128
I0
sg39
F1.2338137300657763
sg34
g752
(S'\x07\xdf\n\x11\x102\x19\x0co\x98'
tRp4129
sa(dp4130
S'trial_loop.thisTrialN'
p4131
I32
sg3632
S'26-walkers_smoky_bacon.png'
p4132
sS'block_loop.thisIndex'
p4133
g3626
sg38
S'right'
p4134
sg58
g62
sS'trial_loop.thisN'
p4135
I32
sg33
g4106
sg63
g64
sS'trial_loop.thisIndex'
p4136
g59
(g98
S' \x00\x00\x00'
tRp4137
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4138
I0
sg3641
S'44-crunch.png'
p4139
sS'block_loop.thisRepN'
p4140
I1
sg3644
g4106
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4141
I1
sg3646
g4113
sg55
g11
sS'block_loop.thisTrial'
p4142
Nsg69
Vy
sS'block_loop.thisTrialN'
p4143
I0
sg39
F1.0334586141416366
sg34
g752
(S'\x07\xdf\n\x11\x102 \x01\x15X'
tRp4144
sa(dp4145
S'trial_loop.thisTrialN'
p4146
I33
sg3632
S'51-mars.png'
p4147
sS'block_loop.thisIndex'
p4148
g3626
sg38
S'right'
p4149
sg58
g62
sS'trial_loop.thisN'
p4150
I33
sg33
S'51-mars.png'
p4151
sg63
g64
sS'trial_loop.thisIndex'
p4152
g59
(g98
S'!\x00\x00\x00'
tRp4153
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4154
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p4155
sS'block_loop.thisRepN'
p4156
I1
sg3644
g4151
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4157
I1
sg3646
S'27-hartleys_raspberries_jelly.png'
p4158
sg55
g11
sS'block_loop.thisTrial'
p4159
Nsg69
Vy
sS'block_loop.thisTrialN'
p4160
I0
sg39
F1.1334641164994537
sg34
g752
(S'\x07\xdf\n\x11\x102&\x02\x1e\xf8'
tRp4161
sa(dp4162
S'trial_loop.thisTrialN'
p4163
I34
sg3632
S'4-corn.png'
p4164
sS'block_loop.thisIndex'
p4165
g3626
sg38
S'right'
p4166
sg58
g62
sS'trial_loop.thisN'
p4167
I34
sg33
g3813
sg63
g64
sS'trial_loop.thisIndex'
p4168
g59
(g98
S'"\x00\x00\x00'
tRp4169
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4170
I0
sg3641
S'10-bounty_redo.png'
p4171
sS'block_loop.thisRepN'
p4172
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4173
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4174
Nsg69
Vy
sS'block_loop.thisTrialN'
p4175
I0
sg39
F0.76681006059152423
sg34
g752
(S'\x07\xdf\n\x11\x102,\x04\xd6H'
tRp4176
sa(dp4177
S'trial_loop.thisTrialN'
p4178
I35
sg3632
S'43-mrporky_pork_crackles_redo.png'
p4179
sS'block_loop.thisIndex'
p4180
g3626
sg38
S'right'
p4181
sg58
g62
sS'trial_loop.thisN'
p4182
I35
sg33
g4046
sg63
g64
sS'trial_loop.thisIndex'
p4183
g59
(g98
S'#\x00\x00\x00'
tRp4184
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4185
I0
sg3641
S'18-mms.png'
p4186
sS'block_loop.thisRepN'
p4187
I1
sg3644
g4046
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4188
I1
sg3646
g4053
sg55
g11
sS'block_loop.thisTrial'
p4189
Nsg69
Vy
sS'block_loop.thisTrialN'
p4190
I0
sg39
F1.2668084925626317
sg34
g752
(S'\x07\xdf\n\x11\x1022\x01\x96@'
tRp4191
sa(dp4192
S'trial_loop.thisTrialN'
p4193
I36
sg3632
g3653
sS'block_loop.thisIndex'
p4194
g3626
sg38
S'left'
p4195
sg58
g62
sS'trial_loop.thisN'
p4196
I36
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4197
g59
(g98
S'$\x00\x00\x00'
tRp4198
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4199
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4200
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4201
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4202
Nsg69
Vy
sS'block_loop.thisTrialN'
p4203
I0
sg39
F1.2835844128740064
sg34
g752
(S'\x07\xdf\n\x11\x1028\x065\xd8'
tRp4204
sa(dp4205
S'trial_loop.thisTrialN'
p4206
I37
sg3632
S'49-yorkie.png'
p4207
sS'block_loop.thisIndex'
p4208
g3626
sg38
S'left'
p4209
sg58
g62
sS'trial_loop.thisN'
p4210
I37
sg33
S'49-yorkie.png'
p4211
sg63
g64
sS'trial_loop.thisIndex'
p4212
g59
(g98
S'%\x00\x00\x00'
tRp4213
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4214
I0
sg3641
S'35-raisins.png'
p4215
sS'block_loop.thisRepN'
p4216
I1
sg3644
g4211
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4217
I1
sg3646
S'35-raisins.png'
p4218
sg55
g11
sS'block_loop.thisTrial'
p4219
Nsg69
Vy
sS'block_loop.thisTrialN'
p4220
I0
sg39
F0.8668779990348412
sg34
g752
(S'\x07\xdf\n\x11\x103\x02\x0b\x10\x08'
tRp4221
sa(dp4222
S'trial_loop.thisTrialN'
p4223
I38
sg3632
g3881
sS'block_loop.thisIndex'
p4224
g3626
sg38
S'left'
p4225
sg58
g62
sS'trial_loop.thisN'
p4226
I38
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p4227
g59
(g98
S'&\x00\x00\x00'
tRp4228
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4229
I0
sg3641
g3889
sS'block_loop.thisRepN'
p4230
I1
sg3644
g3885
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4231
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p4232
Nsg69
Vy
sS'block_loop.thisTrialN'
p4233
I0
sg39
F1.0667863690905506
sg34
g752
(S'\x07\xdf\n\x11\x103\x08\t}\xb0'
tRp4234
sa(dp4235
S'trial_loop.thisTrialN'
p4236
I39
sg3632
g4085
sS'block_loop.thisIndex'
p4237
g3626
sg38
S'right'
p4238
sg58
g62
sS'trial_loop.thisN'
p4239
I39
sg33
g4096
sg63
g64
sS'trial_loop.thisIndex'
p4240
g59
(g98
S"'\x00\x00\x00"
tRp4241
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4242
I0
sg3641
g4093
sS'block_loop.thisRepN'
p4243
I1
sg3644
g4089
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4244
I1
sg3646
g4096
sg55
g11
sS'block_loop.thisTrial'
p4245
Nsg69
Vy
sS'block_loop.thisTrialN'
p4246
I0
sg39
F0.81677888531339704
sg34
g752
(S'\x07\xdf\n\x11\x103\x0e\x0b\x00h'
tRp4247
sa(dp4248
S'trial_loop.thisTrialN'
p4249
I40
sg3632
g3734
sS'block_loop.thisIndex'
p4250
g3626
sg38
S'left'
p4251
sg58
g62
sS'trial_loop.thisN'
p4252
I40
sg33
g3745
sg63
g64
sS'trial_loop.thisIndex'
p4253
g59
(g98
S'(\x00\x00\x00'
tRp4254
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4255
I0
sg3641
g3742
sS'block_loop.thisRepN'
p4256
I1
sg3644
g3738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4257
I1
sg3646
g3745
sg55
g11
sS'block_loop.thisTrial'
p4258
Nsg69
Vy
sS'block_loop.thisTrialN'
p4259
I0
sg39
F0.7002252545698866
sg34
g752
(S'\x07\xdf\n\x11\x103\x14\x08\xb6x'
tRp4260
sa(dp4261
S'trial_loop.thisTrialN'
p4262
I41
sg3632
g3926
sS'block_loop.thisIndex'
p4263
g3626
sg38
S'left'
p4264
sg58
g62
sS'trial_loop.thisN'
p4265
I41
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p4266
g59
(g98
S')\x00\x00\x00'
tRp4267
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4268
I0
sg3641
g3933
sS'block_loop.thisRepN'
p4269
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4270
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p4271
Nsg69
Vy
sS'block_loop.thisTrialN'
p4272
I0
sg39
F0.61676474453815899
sg34
g752
(S'\x07\xdf\n\x11\x103\x1a\x04\xc2\xc0'
tRp4273
sa(dp4274
S'trial_loop.thisTrialN'
p4275
I42
sg3632
g3687
sS'block_loop.thisIndex'
p4276
g3626
sg38
S'right'
p4277
sg58
g62
sS'trial_loop.thisN'
p4278
I42
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4279
g59
(g98
S'*\x00\x00\x00'
tRp4280
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4281
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4282
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4283
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4284
Nsg69
Vy
sS'block_loop.thisTrialN'
p4285
I0
sg39
F0.71729111779768573
sg34
g752
(S'\x07\xdf\n\x11\x103\x1f\x0e\xa2\x18'
tRp4286
sa(dp4287
S'trial_loop.thisTrialN'
p4288
I43
sg3632
g3819
sS'block_loop.thisIndex'
p4289
g3626
sg38
S'right'
p4290
sg58
g62
sS'trial_loop.thisN'
p4291
I43
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p4292
g59
(g98
S'+\x00\x00\x00'
tRp4293
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4294
I0
sg3641
g3827
sS'block_loop.thisRepN'
p4295
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4296
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p4297
Nsg69
Vy
sS'block_loop.thisTrialN'
p4298
I0
sg39
F4.2166449470814769
sg34
g752
(S'\x07\xdf\n\x11\x103%\n\xec\xe0'
tRp4299
sa(dp4300
S'trial_loop.thisTrialN'
p4301
I44
sg3632
S'16-skips_prawn.png'
p4302
sS'block_loop.thisIndex'
p4303
g3626
sg38
S'left'
p4304
sg58
g62
sS'trial_loop.thisN'
p4305
I44
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p4306
g59
(g98
S',\x00\x00\x00'
tRp4307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4308
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p4309
sS'block_loop.thisRepN'
p4310
I1
sg3644
g3868
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4311
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p4312
Nsg69
Vy
sS'block_loop.thisTrialN'
p4313
I0
sg39
F0.70013915549316152
sg34
g752
(S'\x07\xdf\n\x11\x103.\x0e\xc1X'
tRp4314
sa(dp4315
S'trial_loop.thisTrialN'
p4316
I45
sg3632
g4207
sS'block_loop.thisIndex'
p4317
g3626
sg38
S'left'
p4318
sg58
g62
sS'trial_loop.thisN'
p4319
I45
sg33
g4211
sg63
g64
sS'trial_loop.thisIndex'
p4320
g59
(g98
S'-\x00\x00\x00'
tRp4321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4322
I0
sg3641
g4215
sS'block_loop.thisRepN'
p4323
I1
sg3644
g4211
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4324
I1
sg3646
g4218
sg55
g11
sS'block_loop.thisTrial'
p4325
Nsg69
Vy
sS'block_loop.thisTrialN'
p4326
I0
sg39
F0.55010894954284595
sg34
g752
(S'\x07\xdf\n\x11\x1034\n\x8f '
tRp4327
sa(dp4328
S'trial_loop.thisTrialN'
p4329
I46
sg3632
g4102
sS'block_loop.thisIndex'
p4330
g3626
sg38
S'left'
p4331
sg58
g62
sS'trial_loop.thisN'
p4332
I46
sg33
g4113
sg63
g64
sS'trial_loop.thisIndex'
p4333
g59
(g98
S'.\x00\x00\x00'
tRp4334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4335
I0
sg3641
g4110
sS'block_loop.thisRepN'
p4336
I1
sg3644
g4106
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4337
I1
sg3646
g4113
sg55
g11
sS'block_loop.thisTrial'
p4338
Nsg69
Vy
sS'block_loop.thisTrialN'
p4339
I0
sg39
F0.68354455641474487
sg34
g752
(S'\x07\xdf\n\x11\x103:\x04:\x08'
tRp4340
sa(dp4341
S'trial_loop.thisTrialN'
p4342
I47
sg3632
S'20-fruit_pastilles.png'
p4343
sS'block_loop.thisIndex'
p4344
g3626
sg38
S'left'
p4345
sg58
g62
sS'trial_loop.thisN'
p4346
I47
sg33
g4096
sg63
g64
sS'trial_loop.thisIndex'
p4347
g59
(g98
S'/\x00\x00\x00'
tRp4348
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4349
I0
sg3641
S'2-steamed_puddings.png'
p4350
sS'block_loop.thisRepN'
p4351
I1
sg3644
g4089
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4352
I1
sg3646
g4096
sg55
g11
sS'block_loop.thisTrial'
p4353
Nsg69
Vy
sS'block_loop.thisTrialN'
p4354
I0
sg39
F0.73353162729836185
sg34
g752
(S'\x07\xdf\n\x11\x104\x03\x0f\x0b\x90'
tRp4355
sa(dp4356
S'trial_loop.thisTrialN'
p4357
I48
sg3632
S'27-hartleys_raspberries_jelly.png'
p4358
sS'block_loop.thisIndex'
p4359
g3626
sg38
S'left'
p4360
sg58
g62
sS'trial_loop.thisN'
p4361
I48
sg33
g4151
sg63
g64
sS'trial_loop.thisIndex'
p4362
g59
(g98
S'0\x00\x00\x00'
tRp4363
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4364
I0
sg3641
S'51-mars.png'
p4365
sS'block_loop.thisRepN'
p4366
I1
sg3644
g4151
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4367
I1
sg3646
g4158
sg55
g11
sS'block_loop.thisTrial'
p4368
Nsg69
Vy
sS'block_loop.thisTrialN'
p4369
I0
sg39
F1.1168441438521768
sg34
g752
(S'\x07\xdf\n\x11\x104\t\x0b\x90\xf0'
tRp4370
sa(dp4371
S'trial_loop.thisTrialN'
p4372
I49
sg3632
g4042
sS'block_loop.thisIndex'
p4373
g3626
sg38
S'left'
p4374
sg58
g62
sS'trial_loop.thisN'
p4375
I49
sg33
g4046
sg63
g64
sS'trial_loop.thisIndex'
p4376
g59
(g98
S'1\x00\x00\x00'
tRp4377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4378
I0
sg3641
g4050
sS'block_loop.thisRepN'
p4379
I1
sg3644
g4046
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4380
I1
sg3646
g4053
sg55
g11
sS'block_loop.thisTrial'
p4381
Nsg69
Vy
sS'block_loop.thisTrialN'
p4382
I0
sg39
F0.6501495187430919
sg34
g752
(S'\x07\xdf\n\x11\x104\x0f\r\xcf('
tRp4383
sa(dp4384
S'trial_loop.thisTrialN'
p4385
I50
sg3632
S'35-raisins.png'
p4386
sS'block_loop.thisIndex'
p4387
g3626
sg38
S'right'
p4388
sg58
g62
sS'trial_loop.thisN'
p4389
I50
sg33
g4218
sg63
g64
sS'trial_loop.thisIndex'
p4390
g59
(g98
S'2\x00\x00\x00'
tRp4391
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4392
I0
sg3641
S'49-yorkie.png'
p4393
sS'block_loop.thisRepN'
p4394
I1
sg3644
g4211
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4395
I1
sg3646
g4218
sg55
g11
sS'block_loop.thisTrial'
p4396
Nsg69
Vy
sS'block_loop.thisTrialN'
p4397
I0
sg39
F0.70018847714982257
sg34
g752
(S'\x07\xdf\n\x11\x104\x15\t#\xd8'
tRp4398
sa(dp4399
S'trial_loop.thisTrialN'
p4400
I51
sg3632
g3633
sS'block_loop.thisIndex'
p4401
g3626
sg38
S'right'
p4402
sg58
g62
sS'trial_loop.thisN'
p4403
I51
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4404
g59
(g98
S'3\x00\x00\x00'
tRp4405
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4406
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4407
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4408
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4409
Nsg69
Vy
sS'block_loop.thisTrialN'
p4410
I0
sg39
F1.1001876788805021
sg34
g752
(S'\x07\xdf\n\x11\x104\x1b\x04\xf1\xa0'
tRp4411
sa(dp4412
S'trial_loop.thisTrialN'
p4413
I52
sg3632
g3941
sS'block_loop.thisIndex'
p4414
g3626
sg38
S'left'
p4415
sg58
g62
sS'trial_loop.thisN'
p4416
I52
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4417
g59
(g98
S'4\x00\x00\x00'
tRp4418
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4419
I0
sg3641
g3948
sS'block_loop.thisRepN'
p4420
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4421
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4422
Nsg69
Vy
sS'block_loop.thisTrialN'
p4423
I0
sg39
F1.1334202116722736
sg34
g752
(S'\x07\xdf\n\x11\x104!\x06\xf1X'
tRp4424
sa(dp4425
S'trial_loop.thisTrialN'
p4426
I53
sg3632
S'6-sour_patch_kids.png'
p4427
sS'block_loop.thisIndex'
p4428
g3626
sg38
S'right'
p4429
sg58
g62
sS'trial_loop.thisN'
p4430
I53
sg33
g3755
sg63
g64
sS'trial_loop.thisIndex'
p4431
g59
(g98
S'5\x00\x00\x00'
tRp4432
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4433
I0
sg3641
S'38-maltesers.png'
p4434
sS'block_loop.thisRepN'
p4435
I1
sg3644
g3755
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4436
I1
sg3646
g3762
sg55
g11
sS'block_loop.thisTrial'
p4437
Nsg69
Vy
sS'block_loop.thisTrialN'
p4438
I0
sg39
F0.88318864222037519
sg34
g752
(S"\x07\xdf\n\x11\x104'\t\xa4\xc0"
tRp4439
sa(dp4440
S'trial_loop.thisTrialN'
p4441
I54
sg3632
g4027
sS'block_loop.thisIndex'
p4442
g3626
sg38
S'right'
p4443
sg58
g62
sS'trial_loop.thisN'
p4444
I54
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p4445
g59
(g98
S'6\x00\x00\x00'
tRp4446
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4447
I0
sg3641
g4034
sS'block_loop.thisRepN'
p4448
I1
sg3644
g3789
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4449
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p4450
Nsg69
Vy
sS'block_loop.thisTrialN'
p4451
I0
sg39
F0.76686593946214998
sg34
g752
(S'\x07\xdf\n\x11\x104-\x08P\xe8'
tRp4452
sa(dp4453
S'trial_loop.thisTrialN'
p4454
I55
sg3632
g4147
sS'block_loop.thisIndex'
p4455
g3626
sg38
S'left'
p4456
sg58
g62
sS'trial_loop.thisN'
p4457
I55
sg33
g4151
sg63
g64
sS'trial_loop.thisIndex'
p4458
g59
(g98
S'7\x00\x00\x00'
tRp4459
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4460
I0
sg3641
g4155
sS'block_loop.thisRepN'
p4461
I1
sg3644
g4151
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4462
I1
sg3646
g4158
sg55
g11
sS'block_loop.thisTrial'
p4463
Nsg69
Vy
sS'block_loop.thisTrialN'
p4464
I0
sg39
F1.3168286346144669
sg34
g752
(S'\x07\xdf\n\x11\x1043\x05O`'
tRp4465
sa(dp4466
S'trial_loop.thisTrialN'
p4467
I56
sg3632
g4027
sS'block_loop.thisIndex'
p4468
g3626
sg38
S'right'
p4469
sg58
g62
sS'trial_loop.thisN'
p4470
I56
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p4471
g59
(g98
S'8\x00\x00\x00'
tRp4472
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4473
I0
sg3641
g4034
sS'block_loop.thisRepN'
p4474
I1
sg3644
g3789
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4475
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p4476
Nsg69
Vy
sS'block_loop.thisTrialN'
p4477
I0
sg39
F0.70024321563505509
sg34
g752
(S'\x07\xdf\n\x11\x1049\n\xa2\xa8'
tRp4478
sa(dp4479
S'trial_loop.thisTrialN'
p4480
I57
sg3632
g3956
sS'block_loop.thisIndex'
p4481
g3626
sg38
S'left'
p4482
sg58
g62
sS'trial_loop.thisN'
p4483
I57
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4484
g59
(g98
S'9\x00\x00\x00'
tRp4485
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4486
I0
sg3641
g3963
sS'block_loop.thisRepN'
p4487
I1
sg3644
g3708
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4488
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4489
Nsg69
Vy
sS'block_loop.thisTrialN'
p4490
I0
sg39
F0.58345152949914336
sg34
g752
(S'\x07\xdf\n\x11\x105\x03\x06pp'
tRp4491
sa(dp4492
S'trial_loop.thisTrialN'
p4493
I58
sg3632
g4386
sS'block_loop.thisIndex'
p4494
g3626
sg38
S'right'
p4495
sg58
g62
sS'trial_loop.thisN'
p4496
I58
sg33
g4218
sg63
g64
sS'trial_loop.thisIndex'
p4497
g59
(g98
S':\x00\x00\x00'
tRp4498
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4499
I0
sg3641
g4393
sS'block_loop.thisRepN'
p4500
I1
sg3644
g4211
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4501
I1
sg3646
g4218
sg55
g11
sS'block_loop.thisTrial'
p4502
Nsg69
Vy
sS'block_loop.thisTrialN'
p4503
I0
sg39
F0.75016243360460066
sg34
g752
(S'\x07\xdf\n\x11\x105\t\x00\x94p'
tRp4504
sa(dp4505
S'trial_loop.thisTrialN'
p4506
I59
sg3632
g3956
sS'block_loop.thisIndex'
p4507
g3626
sg38
S'left'
p4508
sg58
g62
sS'trial_loop.thisN'
p4509
I59
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4510
g59
(g98
S';\x00\x00\x00'
tRp4511
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4512
I0
sg3641
g3963
sS'block_loop.thisRepN'
p4513
I1
sg3644
g3708
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4514
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4515
Nsg69
Vy
sS'block_loop.thisTrialN'
p4516
I0
sg39
F1.4000987003310001
sg34
g752
(S'\x07\xdf\n\x11\x105\x0e\x0c\x9a\x90'
tRp4517
sa(dp4518
S'trial_loop.thisTrialN'
p4519
I60
sg3632
g4042
sS'block_loop.thisIndex'
p4520
g3626
sg38
S'left'
p4521
sg58
g62
sS'trial_loop.thisN'
p4522
I60
sg33
g4046
sg63
g64
sS'trial_loop.thisIndex'
p4523
g59
(g98
S'<\x00\x00\x00'
tRp4524
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4525
I0
sg3641
g4050
sS'block_loop.thisRepN'
p4526
I1
sg3644
g4046
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4527
I1
sg3646
g4053
sg55
g11
sS'block_loop.thisTrial'
p4528
Nsg69
Vy
sS'block_loop.thisTrialN'
p4529
I0
sg39
F0.61679667532098392
sg34
g752
(S'\x07\xdf\n\x11\x105\x15\x03\xdcH'
tRp4530
sa(dp4531
S'trial_loop.thisTrialN'
p4532
I61
sg3632
g3751
sS'block_loop.thisIndex'
p4533
g3626
sg38
S'left'
p4534
sg58
g62
sS'trial_loop.thisN'
p4535
I61
sg33
g3762
sg63
g64
sS'trial_loop.thisIndex'
p4536
g59
(g98
S'=\x00\x00\x00'
tRp4537
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4538
I0
sg3641
g3759
sS'block_loop.thisRepN'
p4539
I1
sg3644
g3755
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4540
I1
sg3646
g3762
sg55
g11
sS'block_loop.thisTrial'
p4541
Nsg69
Vy
sS'block_loop.thisTrialN'
p4542
I0
sg39
F1.0499052482518891
sg34
g752
(S'\x07\xdf\n\x11\x105\x1a\r\xfa '
tRp4543
sa(dp4544
S'trial_loop.thisTrialN'
p4545
I62
sg3632
g4042
sS'block_loop.thisIndex'
p4546
g3626
sg38
S'left'
p4547
sg58
g62
sS'trial_loop.thisN'
p4548
I62
sg33
g4053
sg63
g64
sS'trial_loop.thisIndex'
p4549
g59
(g98
S'>\x00\x00\x00'
tRp4550
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4551
I0
sg3641
g4050
sS'block_loop.thisRepN'
p4552
I1
sg3644
g4046
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4553
I1
sg3646
g4053
sg55
g11
sS'block_loop.thisTrial'
p4554
Nsg69
Vy
sS'block_loop.thisTrialN'
p4555
I0
sg39
F0.56678451596508239
sg34
g752
(S'\x07\xdf\n\x11\x105 \x0f\x03\xc0'
tRp4556
sa(dp4557
S'trial_loop.thisTrialN'
p4558
I63
sg3632
S'48-twix.png'
p4559
sS'block_loop.thisIndex'
p4560
g3626
sg38
S'left'
p4561
sg58
g62
sS'trial_loop.thisN'
p4562
I63
sg33
S'48-twix.png'
p4563
sg63
g64
sS'trial_loop.thisIndex'
p4564
g59
(g98
S'?\x00\x00\x00'
tRp4565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4566
I0
sg3641
S'50-polo.png'
p4567
sS'block_loop.thisRepN'
p4568
I1
sg3644
g4563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4569
I1
sg3646
S'50-polo.png'
p4570
sg55
g11
sS'block_loop.thisTrial'
p4571
Nsg69
Vy
sS'block_loop.thisTrialN'
p4572
I0
sg39
F0.68344534290918091
sg34
g752
(S'\x07\xdf\n\x11\x105&\x08\xed('
tRp4573
sa(dp4574
S'trial_loop.thisTrialN'
p4575
I64
sg3632
g4085
sS'block_loop.thisIndex'
p4576
g3626
sg38
S'left'
p4577
sg58
g62
sS'trial_loop.thisN'
p4578
I64
sg33
g4096
sg63
g64
sS'trial_loop.thisIndex'
p4579
g59
(g98
S'@\x00\x00\x00'
tRp4580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4581
I0
sg3641
g4093
sS'block_loop.thisRepN'
p4582
I1
sg3644
g4089
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4583
I1
sg3646
g4096
sg55
g11
sS'block_loop.thisTrial'
p4584
Nsg69
Vy
sS'block_loop.thisTrialN'
p4585
I0
sg39
F0.80055092004840844
sg34
g752
(S'\x07\xdf\n\x11\x105,\x04\xba\xf0'
tRp4586
sa(dp4587
S'trial_loop.thisTrialN'
p4588
I65
sg3632
g4559
sS'block_loop.thisIndex'
p4589
g3626
sg38
S'left'
p4590
sg58
g62
sS'trial_loop.thisN'
p4591
I65
sg33
g4563
sg63
g64
sS'trial_loop.thisIndex'
p4592
g59
(g98
S'A\x00\x00\x00'
tRp4593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4594
I0
sg3641
g4567
sS'block_loop.thisRepN'
p4595
I1
sg3644
g4563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4596
I1
sg3646
g4570
sg55
g11
sS'block_loop.thisTrial'
p4597
Nsg69
Vy
sS'block_loop.thisTrialN'
p4598
I0
sg39
F0.8334347800928299
sg34
g752
(S'\x07\xdf\n\x11\x1052\x022\x80'
tRp4599
sa(dp4600
S'trial_loop.thisTrialN'
p4601
I66
sg3632
g4102
sS'block_loop.thisIndex'
p4602
g3626
sg38
S'right'
p4603
sg58
g62
sS'trial_loop.thisN'
p4604
I66
sg33
g4106
sg63
g64
sS'trial_loop.thisIndex'
p4605
g59
(g98
S'B\x00\x00\x00'
tRp4606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4607
I0
sg3641
g4110
sS'block_loop.thisRepN'
p4608
I1
sg3644
g4106
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4609
I1
sg3646
g4113
sg55
g11
sS'block_loop.thisTrial'
p4610
Nsg69
Vy
sS'block_loop.thisTrialN'
p4611
I0
sg39
F0.66668367741112888
sg34
g752
(S"\x07\xdf\n\x11\x1058\x00'\x10"
tRp4612
sa(dp4613
S'trial_loop.thisTrialN'
p4614
I67
sg3632
g4358
sS'block_loop.thisIndex'
p4615
g3626
sg38
S'left'
p4616
sg58
g62
sS'trial_loop.thisN'
p4617
I67
sg33
g4151
sg63
g64
sS'trial_loop.thisIndex'
p4618
g59
(g98
S'C\x00\x00\x00'
tRp4619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4620
I0
sg3641
g4365
sS'block_loop.thisRepN'
p4621
I1
sg3644
g4151
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4622
I1
sg3646
g4158
sg55
g11
sS'block_loop.thisTrial'
p4623
Nsg69
Vy
sS'block_loop.thisTrialN'
p4624
I0
sg39
F0.68343279867349338
sg34
g752
(S'\x07\xdf\n\x11\x106\x01\n\xbe\x00'
tRp4625
sa(dp4626
S'trial_loop.thisTrialN'
p4627
I68
sg3632
g3926
sS'block_loop.thisIndex'
p4628
g3626
sg38
S'left'
p4629
sg58
g62
sS'trial_loop.thisN'
p4630
I68
sg33
g3830
sg63
g64
sS'trial_loop.thisIndex'
p4631
g59
(g98
S'D\x00\x00\x00'
tRp4632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4633
I0
sg3641
g3933
sS'block_loop.thisRepN'
p4634
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4635
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p4636
Nsg69
Vy
sS'block_loop.thisTrialN'
p4637
I0
sg39
F0.56686662369338592
sg34
g752
(S'\x07\xdf\n\x11\x106\x07\x06\x8b\xc8'
tRp4638
sa(dp4639
S'trial_loop.thisTrialN'
p4640
I69
sg3632
g4027
sS'block_loop.thisIndex'
p4641
g3626
sg38
S'left'
p4642
sg58
g62
sS'trial_loop.thisN'
p4643
I69
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p4644
g59
(g98
S'E\x00\x00\x00'
tRp4645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4646
I0
sg3641
g4034
sS'block_loop.thisRepN'
p4647
I1
sg3644
g3789
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4648
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p4649
Nsg69
Vy
sS'block_loop.thisTrialN'
p4650
I0
sg39
F0.8334364906695555
sg34
g752
(S'\x07\xdf\n\x11\x106\r\x00u0'
tRp4651
sa(dp4652
S'trial_loop.thisTrialN'
p4653
I70
sg3632
g4132
sS'block_loop.thisIndex'
p4654
g3626
sg38
S'left'
p4655
sg58
g62
sS'trial_loop.thisN'
p4656
I70
sg33
g4113
sg63
g64
sS'trial_loop.thisIndex'
p4657
g59
(g98
S'F\x00\x00\x00'
tRp4658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4659
I0
sg3641
g4139
sS'block_loop.thisRepN'
p4660
I1
sg3644
g4106
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4661
I1
sg3646
g4113
sg55
g11
sS'block_loop.thisTrial'
p4662
Nsg69
Vy
sS'block_loop.thisTrialN'
p4663
I0
sg39
F0.63358913121737714
sg34
g752
(S'\x07\xdf\n\x11\x106\x12\r\xa8\x18'
tRp4664
sa(dp4665
S'trial_loop.thisTrialN'
p4666
I71
sg3632
g3751
sS'block_loop.thisIndex'
p4667
g3626
sg38
S'left'
p4668
sg58
g62
sS'trial_loop.thisN'
p4669
I71
sg33
g3755
sg63
g64
sS'trial_loop.thisIndex'
p4670
g59
(g98
S'G\x00\x00\x00'
tRp4671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4672
I0
sg3641
g3759
sS'block_loop.thisRepN'
p4673
I1
sg3644
g3755
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4674
I1
sg3646
g3762
sg55
g11
sS'block_loop.thisTrial'
p4675
Nsg69
Vy
sS'block_loop.thisTrialN'
p4676
I0
sg39
F0.59987250494486943
sg34
g752
(S'\x07\xdf\n\x11\x106\x18\x08\x83\xb0'
tRp4677
sa(dp4678
S'trial_loop.thisTrialN'
p4679
I72
sg3632
g3734
sS'block_loop.thisIndex'
p4680
g3626
sg38
S'left'
p4681
sg58
g62
sS'trial_loop.thisN'
p4682
I72
sg33
g3738
sg63
g64
sS'trial_loop.thisIndex'
p4683
g59
(g98
S'H\x00\x00\x00'
tRp4684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4685
I0
sg3641
g3742
sS'block_loop.thisRepN'
p4686
I1
sg3644
g3738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4687
I1
sg3646
g3745
sg55
g11
sS'block_loop.thisTrial'
p4688
Nsg69
Vy
sS'block_loop.thisTrialN'
p4689
I0
sg39
F0.63353439273214462
sg34
g752
(S'\x07\xdf\n\x11\x106\x1e\x02\xe60'
tRp4690
sa(dp4691
S'trial_loop.thisTrialN'
p4692
I73
sg3632
g3653
sS'block_loop.thisIndex'
p4693
g3626
sg38
S'right'
p4694
sg58
g62
sS'trial_loop.thisN'
p4695
I73
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4696
g59
(g98
S'I\x00\x00\x00'
tRp4697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4698
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4699
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4700
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4701
Nsg69
Vy
sS'block_loop.thisTrialN'
p4702
I0
sg39
F1.6167291075034882
sg34
g752
(S'\x07\xdf\n\x11\x106#\r\x00 '
tRp4703
sa(dp4704
S'trial_loop.thisTrialN'
p4705
I74
sg3632
g3785
sS'block_loop.thisIndex'
p4706
g3626
sg38
S'left'
p4707
sg58
g62
sS'trial_loop.thisN'
p4708
I74
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p4709
g59
(g98
S'J\x00\x00\x00'
tRp4710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4711
I0
sg3641
g3793
sS'block_loop.thisRepN'
p4712
I1
sg3644
g3789
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4713
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p4714
Nsg69
Vy
sS'block_loop.thisTrialN'
p4715
I0
sg39
F0.66678460149341845
sg34
g752
(S'\x07\xdf\n\x11\x106*\x07\xd7\xd0'
tRp4716
sa(dp4717
S'trial_loop.thisTrialN'
p4718
I75
sg3632
g4207
sS'block_loop.thisIndex'
p4719
g3626
sg38
S'left'
p4720
sg58
g62
sS'trial_loop.thisN'
p4721
I75
sg33
g4211
sg63
g64
sS'trial_loop.thisIndex'
p4722
g59
(g98
S'K\x00\x00\x00'
tRp4723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4724
I0
sg3641
g4215
sS'block_loop.thisRepN'
p4725
I1
sg3644
g4211
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4726
I1
sg3646
g4218
sg55
g11
sS'block_loop.thisTrial'
p4727
Nsg69
Vy
sS'block_loop.thisTrialN'
p4728
I0
sg39
F0.58346150786837825
sg34
g752
(S'\x07\xdf\n\x11\x1060\x03,\x80'
tRp4729
sa(dp4730
S'trial_loop.thisTrialN'
p4731
I76
sg3632
g3802
sS'block_loop.thisIndex'
p4732
g3626
sg38
S'left'
p4733
sg58
g62
sS'trial_loop.thisN'
p4734
I76
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4735
g59
(g98
S'L\x00\x00\x00'
tRp4736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4737
I0
sg3641
g3810
sS'block_loop.thisRepN'
p4738
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4739
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4740
Nsg69
Vy
sS'block_loop.thisTrialN'
p4741
I0
sg39
F0.70025861083468044
sg34
g752
(S'\x07\xdf\n\x11\x1065\x0c\x92\xc0'
tRp4742
sa(dp4743
S'trial_loop.thisTrialN'
p4744
I77
sg3632
g3911
sS'block_loop.thisIndex'
p4745
g3626
sg38
S'right'
p4746
sg58
g62
sS'trial_loop.thisN'
p4747
I77
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p4748
g59
(g98
S'M\x00\x00\x00'
tRp4749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4750
I0
sg3641
g3918
sS'block_loop.thisRepN'
p4751
I1
sg3644
g3885
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4752
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p4753
Nsg69
Vy
sS'block_loop.thisTrialN'
p4754
I0
sg39
F1.2335006943521876
sg34
g752
(S'\x07\xdf\n\x11\x106;\x08\x9b '
tRp4755
sa(dp4756
S'trial_loop.thisTrialN'
p4757
I78
sg3632
g3768
sS'block_loop.thisIndex'
p4758
g3626
sg38
S'right'
p4759
sg58
g62
sS'trial_loop.thisN'
p4760
I78
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p4761
g59
(g98
S'N\x00\x00\x00'
tRp4762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4763
I0
sg3641
g3776
sS'block_loop.thisRepN'
p4764
I1
sg3644
g3772
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4765
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p4766
Nsg69
Vy
sS'block_loop.thisTrialN'
p4767
I0
sg39
F1.050177800293568
sg34
g752
(S'\x07\xdf\n\x11\x107\x05\x0c\x83 '
tRp4768
sa(dp4769
S'trial_loop.thisTrialN'
p4770
I79
sg3632
g3734
sS'block_loop.thisIndex'
p4771
g3626
sg38
S'left'
p4772
sg58
g62
sS'trial_loop.thisN'
p4773
I79
sg33
g3738
sg63
g64
sS'trial_loop.thisIndex'
p4774
g59
(g98
S'O\x00\x00\x00'
tRp4775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4776
I0
sg3641
g3742
sS'block_loop.thisRepN'
p4777
I1
sg3644
g3738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4778
I1
sg3646
g3745
sg55
g11
sS'block_loop.thisTrial'
p4779
Nsg69
Vy
sS'block_loop.thisTrialN'
p4780
I0
sg39
F0.61692439845410263
sg34
g752
(S'\x07\xdf\n\x11\x107\x0b\r\xcb@'
tRp4781
sa(dp4782
S'trial_loop.thisTrialN'
p4783
I80
sg3632
S'50-polo.png'
p4784
sS'block_loop.thisIndex'
p4785
g3626
sg38
S'right'
p4786
sg58
g62
sS'trial_loop.thisN'
p4787
I80
sg33
g4563
sg63
g64
sS'trial_loop.thisIndex'
p4788
g59
(g98
S'P\x00\x00\x00'
tRp4789
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4790
I0
sg3641
S'48-twix.png'
p4791
sS'block_loop.thisRepN'
p4792
I1
sg3644
g4563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4793
I1
sg3646
g4570
sg55
g11
sS'block_loop.thisTrial'
p4794
Nsg69
Vy
sS'block_loop.thisTrialN'
p4795
I0
sg39
F1.1334931963192503
sg34
g752
(S'\x07\xdf\n\x11\x107\x11\x08hX'
tRp4796
sa(dp4797
S'trial_loop.thisTrialN'
p4798
I81
sg3632
g3881
sS'block_loop.thisIndex'
p4799
g3626
sg38
S'left'
p4800
sg58
g62
sS'trial_loop.thisN'
p4801
I81
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p4802
g59
(g98
S'Q\x00\x00\x00'
tRp4803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4804
I0
sg3641
g3889
sS'block_loop.thisRepN'
p4805
I1
sg3644
g3885
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4806
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p4807
Nsg69
Vy
sS'block_loop.thisTrialN'
p4808
I0
sg39
F0.76677071730500757
sg34
g752
(S'\x07\xdf\n\x11\x107\x17\x0b\x1f\xa8'
tRp4809
sa(dp4810
S'trial_loop.thisTrialN'
p4811
I82
sg3632
g3819
sS'block_loop.thisIndex'
p4812
g3626
sg38
S'right'
p4813
sg58
g62
sS'trial_loop.thisN'
p4814
I82
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p4815
g59
(g98
S'R\x00\x00\x00'
tRp4816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4817
I0
sg3641
g3827
sS'block_loop.thisRepN'
p4818
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4819
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p4820
Nsg69
Vy
sS'block_loop.thisTrialN'
p4821
I0
sg39
F0.78346224911820173
sg34
g752
(S'\x07\xdf\n\x11\x107\x1d\x07\xe3\x88'
tRp4822
sa(dp4823
S'trial_loop.thisTrialN'
p4824
I83
sg3632
g4386
sS'block_loop.thisIndex'
p4825
g3626
sg38
S'right'
p4826
sg58
g62
sS'trial_loop.thisN'
p4827
I83
sg33
g4211
sg63
g64
sS'trial_loop.thisIndex'
p4828
g59
(g98
S'S\x00\x00\x00'
tRp4829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4830
I0
sg3641
g4393
sS'block_loop.thisRepN'
p4831
I1
sg3644
g4211
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4832
I1
sg3646
g4218
sg55
g11
sS'block_loop.thisTrial'
p4833
Nsg69
Vy
sS'block_loop.thisTrialN'
p4834
I0
sg39
F0.58342986218121951
sg34
g752
(S'\x07\xdf\n\x11\x107#\x05\x1c\x98'
tRp4835
sa(dp4836
S'trial_loop.thisTrialN'
p4837
I84
sg3632
g3849
sS'block_loop.thisIndex'
p4838
g3626
sg38
S'left'
p4839
sg58
g62
sS'trial_loop.thisN'
p4840
I84
sg33
g3738
sg63
g64
sS'trial_loop.thisIndex'
p4841
g59
(g98
S'T\x00\x00\x00'
tRp4842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4843
I0
sg3641
g3856
sS'block_loop.thisRepN'
p4844
I1
sg3644
g3738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4845
I1
sg3646
g3745
sg55
g11
sS'block_loop.thisTrial'
p4846
Nsg69
Vy
sS'block_loop.thisTrialN'
p4847
I0
sg39
F0.80018913287130999
sg34
g752
(S'\x07\xdf\n\x11\x107(\x0e\x82\xd8'
tRp4848
sa(dp4849
S'trial_loop.thisTrialN'
p4850
I85
sg3632
g4302
sS'block_loop.thisIndex'
p4851
g3626
sg38
S'left'
p4852
sg58
g62
sS'trial_loop.thisN'
p4853
I85
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p4854
g59
(g98
S'U\x00\x00\x00'
tRp4855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4856
I0
sg3641
g4309
sS'block_loop.thisRepN'
p4857
I1
sg3644
g3868
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4858
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p4859
Nsg69
Vy
sS'block_loop.thisTrialN'
p4860
I0
sg39
F0.64998387780542544
sg34
g752
(S'\x07\xdf\n\x11\x107.\x0b\xfeP'
tRp4861
sa(dp4862
S'trial_loop.thisTrialN'
p4863
I86
sg3632
g3819
sS'block_loop.thisIndex'
p4864
g3626
sg38
S'right'
p4865
sg58
g62
sS'trial_loop.thisN'
p4866
I86
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p4867
g59
(g98
S'V\x00\x00\x00'
tRp4868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4869
I0
sg3641
g3827
sS'block_loop.thisRepN'
p4870
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4871
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p4872
Nsg69
Vy
sS'block_loop.thisTrialN'
p4873
I0
sg39
F0.63357174034445052
sg34
g752
(S'\x07\xdf\n\x11\x1074\x07S\x00'
tRp4874
sa(dp4875
S'trial_loop.thisTrialN'
p4876
I87
sg3632
g4147
sS'block_loop.thisIndex'
p4877
g3626
sg38
S'right'
p4878
sg58
g62
sS'trial_loop.thisN'
p4879
I87
sg33
g4151
sg63
g64
sS'trial_loop.thisIndex'
p4880
g59
(g98
S'W\x00\x00\x00'
tRp4881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4882
I0
sg3641
g4155
sS'block_loop.thisRepN'
p4883
I1
sg3644
g4151
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4884
I1
sg3646
g4158
sg55
g11
sS'block_loop.thisTrial'
p4885
Nsg69
Vy
sS'block_loop.thisTrialN'
p4886
I0
sg39
F3.116795962580909
sg34
g752
(S'\x07\xdf\n\x11\x107:\x02.\x98'
tRp4887
sa(dp4888
S'trial_loop.thisTrialN'
p4889
I88
sg3632
g3984
sS'block_loop.thisIndex'
p4890
g3626
sg38
S'right'
p4891
sg58
g62
sS'trial_loop.thisN'
p4892
I88
sg33
g3988
sg63
g64
sS'trial_loop.thisIndex'
p4893
g59
(g98
S'X\x00\x00\x00'
tRp4894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4895
I0
sg3641
g3992
sS'block_loop.thisRepN'
p4896
I1
sg3644
g3988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4897
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p4898
Nsg69
Vy
sS'block_loop.thisTrialN'
p4899
I0
sg39
F1.0166151260118568
sg34
g752
(S'\x07\xdf\n\x11\x108\x06\x04]0'
tRp4900
sa(dp4901
S'trial_loop.thisTrialN'
p4902
I89
sg3632
g3704
sS'block_loop.thisIndex'
p4903
g3626
sg38
S'right'
p4904
sg58
g62
sS'trial_loop.thisN'
p4905
I89
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p4906
g59
(g98
S'Y\x00\x00\x00'
tRp4907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4908
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4909
I1
sg3644
g3708
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4910
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4911
Nsg69
Vy
sS'block_loop.thisTrialN'
p4912
I0
sg39
F1.4001839441189077
sg34
g752
(S'\x07\xdf\n\x11\x108\x0c\x05,8'
tRp4913
sa(dp4914
S'trial_loop.thisTrialN'
p4915
I90
sg3632
g3941
sS'block_loop.thisIndex'
p4916
g3626
sg38
S'right'
p4917
sg58
g62
sS'trial_loop.thisN'
p4918
I90
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4919
g59
(g98
S'Z\x00\x00\x00'
tRp4920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4921
I0
sg3641
g3948
sS'block_loop.thisRepN'
p4922
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4923
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4924
Nsg69
Vy
sS'block_loop.thisTrialN'
p4925
I0
sg39
F1.1001041456702296
sg34
g752
(S'\x07\xdf\n\x11\x108\x12\x0b\xea\xc8'
tRp4926
sa(dp4927
S'trial_loop.thisTrialN'
p4928
I91
sg3632
g4164
sS'block_loop.thisIndex'
p4929
g3626
sg38
S'right'
p4930
sg58
g62
sS'trial_loop.thisN'
p4931
I91
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4932
g59
(g98
S'[\x00\x00\x00'
tRp4933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4934
I0
sg3641
g4171
sS'block_loop.thisRepN'
p4935
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4936
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4937
Nsg69
Vy
sS'block_loop.thisTrialN'
p4938
I0
sg39
F0.68347955446279229
sg34
g752
(S'\x07\xdf\n\x11\x108\x18\r\xea\x80'
tRp4939
sa(dp4940
S'trial_loop.thisTrialN'
p4941
I92
sg3632
g3653
sS'block_loop.thisIndex'
p4942
g3626
sg38
S'left'
p4943
sg58
g62
sS'trial_loop.thisN'
p4944
I92
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4945
g59
(g98
S'\\\x00\x00\x00'
tRp4946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4947
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4948
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4949
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4950
Nsg69
Vy
sS'block_loop.thisTrialN'
p4951
I0
sg39
F0.78354236117320397
sg34
g752
(S'\x07\xdf\n\x11\x108\x1e\t}\xb0'
tRp4952
sa(dp4953
S'trial_loop.thisTrialN'
p4954
I93
sg3632
g3956
sS'block_loop.thisIndex'
p4955
g3626
sg38
S'right'
p4956
sg58
g62
sS'trial_loop.thisN'
p4957
I93
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p4958
g59
(g98
S']\x00\x00\x00'
tRp4959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4960
I0
sg3641
g3963
sS'block_loop.thisRepN'
p4961
I1
sg3644
g3708
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4962
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4963
Nsg69
Vy
sS'block_loop.thisTrialN'
p4964
I0
sg39
F0.91677041795355763
sg34
g752
(S'\x07\xdf\n\x11\x108$\x06\xba\xa8'
tRp4965
sa(dp4966
S'trial_loop.thisTrialN'
p4967
I94
sg3632
g3911
sS'block_loop.thisIndex'
p4968
g3626
sg38
S'right'
p4969
sg58
g62
sS'trial_loop.thisN'
p4970
I94
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p4971
g59
(g98
S'^\x00\x00\x00'
tRp4972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4973
I0
sg3641
g3918
sS'block_loop.thisRepN'
p4974
I1
sg3644
g3885
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4975
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p4976
Nsg69
Vy
sS'block_loop.thisTrialN'
p4977
I0
sg39
F2.2501420492208126
sg34
g752
(S'\x07\xdf\n\x11\x108*\x05\xdc\x00'
tRp4978
sa(dp4979
S'trial_loop.thisTrialN'
p4980
I95
sg3632
g4343
sS'block_loop.thisIndex'
p4981
g3626
sg38
S'left'
p4982
sg58
g62
sS'trial_loop.thisN'
p4983
I95
sg33
g4089
sg63
g64
sS'trial_loop.thisIndex'
p4984
g59
(g98
S'_\x00\x00\x00'
tRp4985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4986
I0
sg3641
g4350
sS'block_loop.thisRepN'
p4987
I1
sg3644
g4089
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4988
I1
sg3646
g4096
sg55
g11
sS'block_loop.thisTrial'
p4989
Nsg69
Vy
sS'block_loop.thisTrialN'
p4990
I0
sg39
F1.1501590694688275
sg34
g752
(S'\x07\xdf\n\x11\x1081\n5H'
tRp4991
sa(dp4992
S'trial_loop.thisTrialN'
p4993
I96
sg3632
S'25-kitkat.png'
p4994
sS'block_loop.thisIndex'
p4995
g3626
sg38
S'left'
p4996
sg58
g62
sS'trial_loop.thisN'
p4997
I96
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4998
g59
(g98
S'`\x00\x00\x00'
tRp4999
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5000
I0
sg3641
S'31-hobnobs.png'
p5001
sS'block_loop.thisRepN'
p5002
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5003
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5004
Nsg69
Vy
sS'block_loop.thisTrialN'
p5005
I0
sg39
F1.0666187324795828
sg34
g752
(S'\x07\xdf\n\x11\x1087\r+\x18'
tRp5006
sa(dp5007
S'trial_loop.thisTrialN'
p5008
I97
sg3632
g3849
sS'block_loop.thisIndex'
p5009
g3626
sg38
S'right'
p5010
sg58
g62
sS'trial_loop.thisN'
p5011
I97
sg33
g3738
sg63
g64
sS'trial_loop.thisIndex'
p5012
g59
(g98
S'a\x00\x00\x00'
tRp5013
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5014
I0
sg3641
g3856
sS'block_loop.thisRepN'
p5015
I1
sg3644
g3738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5016
I1
sg3646
g3745
sg55
g11
sS'block_loop.thisTrial'
p5017
Nsg69
Vy
sS'block_loop.thisTrialN'
p5018
I0
sg39
F0.85054141208820511
sg34
g752
(S'\x07\xdf\n\x11\x109\x01\x0e\xad\xd0'
tRp5019
sa(dp5020
S'trial_loop.thisTrialN'
p5021
I98
sg3632
g3864
sS'block_loop.thisIndex'
p5022
g3626
sg38
S'right'
p5023
sg58
g62
sS'trial_loop.thisN'
p5024
I98
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p5025
g59
(g98
S'b\x00\x00\x00'
tRp5026
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5027
I0
sg3641
g3872
sS'block_loop.thisRepN'
p5028
I1
sg3644
g3868
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5029
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p5030
Nsg69
Vy
sS'block_loop.thisTrialN'
p5031
I0
sg39
F0.76675161585444584
sg34
g752
(S'\x07\xdf\n\x11\x109\x07\x0c\xdc\xf8'
tRp5032
sa(dp5033
S'trial_loop.thisTrialN'
p5034
I99
sg3632
S'22-daim.png'
p5035
sS'block_loop.thisIndex'
p5036
g3626
sg38
S'left'
p5037
sg58
g62
sS'trial_loop.thisN'
p5038
I99
sg33
g3988
sg63
g64
sS'trial_loop.thisIndex'
p5039
g59
(g98
S'c\x00\x00\x00'
tRp5040
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5041
I0
sg3641
S'7-olives.png'
p5042
sS'block_loop.thisRepN'
p5043
I1
sg3644
g3988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5044
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p5045
Nsg69
Vy
sS'block_loop.thisTrialN'
p5046
I0
sg39
F0.86681128650525352
sg34
g752
(S'\x07\xdf\n\x11\x109\r\t\xdfX'
tRp5047
sa(dp5048
S'trial_loop.thisTrialN'
p5049
I100
sg3632
g3633
sS'block_loop.thisIndex'
p5050
g3626
sg38
S'right'
p5051
sg58
g62
sS'trial_loop.thisN'
p5052
I100
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5053
g59
(g98
S'd\x00\x00\x00'
tRp5054
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5055
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5056
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5057
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5058
Nsg69
Vy
sS'block_loop.thisTrialN'
p5059
I0
sg39
F0.7835095751015615
sg34
g752
(S'\x07\xdf\n\x11\x109\x13\x08M\x00'
tRp5060
sa(dp5061
S'trial_loop.thisTrialN'
p5062
I101
sg3632
g4164
sS'block_loop.thisIndex'
p5063
g3626
sg38
S'right'
p5064
sg58
g62
sS'trial_loop.thisN'
p5065
I101
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p5066
g59
(g98
S'e\x00\x00\x00'
tRp5067
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5068
I0
sg3641
g4171
sS'block_loop.thisRepN'
p5069
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5070
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p5071
Nsg69
Vy
sS'block_loop.thisTrialN'
p5072
I0
sg39
F0.58351653145018645
sg34
g752
(S'\x07\xdf\n\x11\x109\x19\x05\x86\x10'
tRp5073
sa(dp5074
S'trial_loop.thisTrialN'
p5075
I102
sg3632
g3849
sS'block_loop.thisIndex'
p5076
g3626
sg38
S'right'
p5077
sg58
g62
sS'trial_loop.thisN'
p5078
I102
sg33
g3738
sg63
g64
sS'trial_loop.thisIndex'
p5079
g59
(g98
S'f\x00\x00\x00'
tRp5080
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5081
I0
sg3641
g3856
sS'block_loop.thisRepN'
p5082
I1
sg3644
g3738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5083
I1
sg3646
g3745
sg55
g11
sS'block_loop.thisTrial'
p5084
Nsg69
Vy
sS'block_loop.thisTrialN'
p5085
I0
sg39
F0.65009877160628093
sg34
g752
(S'\x07\xdf\n\x11\x109\x1e\x0e\xecP'
tRp5086
sa(dp5087
S'trial_loop.thisTrialN'
p5088
I103
sg3632
g4302
sS'block_loop.thisIndex'
p5089
g3626
sg38
S'left'
p5090
sg58
g62
sS'trial_loop.thisN'
p5091
I103
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p5092
g59
(g98
S'g\x00\x00\x00'
tRp5093
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5094
I0
sg3641
g4309
sS'block_loop.thisRepN'
p5095
I1
sg3644
g3868
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5096
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p5097
Nsg69
Vy
sS'block_loop.thisTrialN'
p5098
I0
sg39
F0.56698750451596425
sg34
g752
(S'\x07\xdf\n\x11\x109$\n\x06h'
tRp5099
sa(dp5100
S'trial_loop.thisTrialN'
p5101
I104
sg3632
g4427
sS'block_loop.thisIndex'
p5102
g3626
sg38
S'right'
p5103
sg58
g62
sS'trial_loop.thisN'
p5104
I104
sg33
g3755
sg63
g64
sS'trial_loop.thisIndex'
p5105
g59
(g98
S'h\x00\x00\x00'
tRp5106
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5107
I0
sg3641
g4434
sS'block_loop.thisRepN'
p5108
I1
sg3644
g3755
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5109
I1
sg3646
g3762
sg55
g11
sS'block_loop.thisTrial'
p5110
Nsg69
Vy
sS'block_loop.thisTrialN'
p5111
I0
sg39
F0.53318278349161119
sg34
g752
(S'\x07\xdf\n\x11\x109*\x03\xeb\xe8'
tRp5112
sa(dp5113
S'trial_loop.thisTrialN'
p5114
I105
sg3632
g4559
sS'block_loop.thisIndex'
p5115
g3626
sg38
S'left'
p5116
sg58
g62
sS'trial_loop.thisN'
p5117
I105
sg33
g4570
sg63
g64
sS'trial_loop.thisIndex'
p5118
g59
(g98
S'i\x00\x00\x00'
tRp5119
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5120
I0
sg3641
g4567
sS'block_loop.thisRepN'
p5121
I1
sg3644
g4563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5122
I1
sg3646
g4570
sg55
g11
sS'block_loop.thisTrial'
p5123
Nsg69
Vy
sS'block_loop.thisTrialN'
p5124
I0
sg39
F0.96674408931266953
sg34
g752
(S'\x07\xdf\n\x11\x109/\x0c\x9a\x90'
tRp5125
sa(dp5126
S'trial_loop.thisTrialN'
p5127
I106
sg3632
S'5-pineapple.png'
p5128
sS'block_loop.thisIndex'
p5129
g3626
sg38
S'right'
p5130
sg58
g62
sS'trial_loop.thisN'
p5131
I106
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5132
g59
(g98
S'j\x00\x00\x00'
tRp5133
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5134
I0
sg3641
S'40-sardines.png'
p5135
sS'block_loop.thisRepN'
p5136
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5137
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5138
Nsg69
Vy
sS'block_loop.thisTrialN'
p5139
I0
sg39
F0.90043354591034586
sg34
g752
(S'\x07\xdf\n\x11\x1095\x0cwh'
tRp5140
sa(dp5141
S'trial_loop.thisTrialN'
p5142
I107
sg3632
g4302
sS'block_loop.thisIndex'
p5143
g3626
sg38
S'left'
p5144
sg58
g62
sS'trial_loop.thisN'
p5145
I107
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p5146
g59
(g98
S'k\x00\x00\x00'
tRp5147
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5148
I0
sg3641
g4309
sS'block_loop.thisRepN'
p5149
I1
sg3644
g3868
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5150
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p5151
Nsg69
Vy
sS'block_loop.thisTrialN'
p5152
I0
sg39
F0.66669650674430159
sg34
g752
(S'\x07\xdf\n\x11\x109;\x0b\x98\xc0'
tRp5153
sa(dp5154
S'trial_loop.thisTrialN'
p5155
I108
sg3632
S'1-treacle_cookies.png'
p5156
sS'block_loop.thisIndex'
p5157
g3626
sg38
S'left'
p5158
sg58
g62
sS'trial_loop.thisN'
p5159
I108
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p5160
g59
(g98
S'l\x00\x00\x00'
tRp5161
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5162
I0
sg3641
S'21-nakd_banana_crunch.png'
p5163
sS'block_loop.thisRepN'
p5164
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5165
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5166
Nsg69
Vy
sS'block_loop.thisTrialN'
p5167
I0
sg39
F0.86675825859765609
sg34
g752
(S'\x07\xdf\n\x11\x10:\x05\x06\xedp'
tRp5168
sa(dp5169
S'trial_loop.thisTrialN'
p5170
I109
sg3632
g3911
sS'block_loop.thisIndex'
p5171
g3626
sg38
S'right'
p5172
sg58
g62
sS'trial_loop.thisN'
p5173
I109
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p5174
g59
(g98
S'm\x00\x00\x00'
tRp5175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5176
I0
sg3641
g3918
sS'block_loop.thisRepN'
p5177
I1
sg3644
g3885
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5178
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p5179
Nsg69
Vy
sS'block_loop.thisTrialN'
p5180
I0
sg39
F1.0172158238692646
sg34
g752
(S'\x07\xdf\n\x11\x10:\x0b\x05[\x18'
tRp5181
sa(dp5182
S'trial_loop.thisTrialN'
p5183
I110
sg3632
g5156
sS'block_loop.thisIndex'
p5184
g3626
sg38
S'right'
p5185
sg58
g62
sS'trial_loop.thisN'
p5186
I110
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5187
g59
(g98
S'n\x00\x00\x00'
tRp5188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5189
I0
sg3641
g5163
sS'block_loop.thisRepN'
p5190
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5191
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5192
Nsg69
Vy
sS'block_loop.thisTrialN'
p5193
I0
sg39
F0.83354368687014357
sg34
g752
(S'\x07\xdf\n\x11\x10:\x11\x06* '
tRp5194
sa(dp5195
S'trial_loop.thisTrialN'
p5196
I111
sg3632
g4302
sS'block_loop.thisIndex'
p5197
g3626
sg38
S'left'
p5198
sg58
g62
sS'trial_loop.thisN'
p5199
I111
sg33
g3875
sg63
g64
sS'trial_loop.thisIndex'
p5200
g59
(g98
S'o\x00\x00\x00'
tRp5201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5202
I0
sg3641
g4309
sS'block_loop.thisRepN'
p5203
I1
sg3644
g3868
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5204
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p5205
Nsg69
Vy
sS'block_loop.thisTrialN'
p5206
I0
sg39
F0.53341513695886533
sg34
g752
(S'\x07\xdf\n\x11\x10:\x17\x04\x1e\xb0'
tRp5207
sa(dp5208
S'trial_loop.thisTrialN'
p5209
I112
sg3632
g3941
sS'block_loop.thisIndex'
p5210
g3626
sg38
S'right'
p5211
sg58
g62
sS'trial_loop.thisN'
p5212
I112
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5213
g59
(g98
S'p\x00\x00\x00'
tRp5214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5215
I0
sg3641
g3948
sS'block_loop.thisRepN'
p5216
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5217
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5218
Nsg69
Vy
sS'block_loop.thisTrialN'
p5219
I0
sg39
F0.75020548314205371
sg34
g752
(S'\x07\xdf\n\x11\x10:\x1c\x0c\xcdX'
tRp5220
sa(dp5221
S'trial_loop.thisTrialN'
p5222
I113
sg3632
g5035
sS'block_loop.thisIndex'
p5223
g3626
sg38
S'left'
p5224
sg58
g62
sS'trial_loop.thisN'
p5225
I113
sg33
g3988
sg63
g64
sS'trial_loop.thisIndex'
p5226
g59
(g98
S'q\x00\x00\x00'
tRp5227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5228
I0
sg3641
g5042
sS'block_loop.thisRepN'
p5229
I1
sg3644
g3988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5230
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p5231
Nsg69
Vy
sS'block_loop.thisTrialN'
p5232
I0
sg39
F0.71675399640844262
sg34
g752
(S'\x07\xdf\n\x11\x10:"\t\x8dP'
tRp5233
sa(dp5234
S'trial_loop.thisTrialN'
p5235
I114
sg3632
g4427
sS'block_loop.thisIndex'
p5236
g3626
sg38
S'right'
p5237
sg58
g62
sS'trial_loop.thisN'
p5238
I114
sg33
g3755
sg63
g64
sS'trial_loop.thisIndex'
p5239
g59
(g98
S'r\x00\x00\x00'
tRp5240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5241
I0
sg3641
g4434
sS'block_loop.thisRepN'
p5242
I1
sg3644
g3755
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5243
I1
sg3646
g3762
sg55
g11
sS'block_loop.thisTrial'
p5244
Nsg69
Vy
sS'block_loop.thisTrialN'
p5245
I0
sg39
F0.79994566064851824
sg34
g752
(S'\x07\xdf\n\x11\x10:(\x05\x99\x98'
tRp5246
sa(dp5247
S'trial_loop.thisTrialN'
p5248
I115
sg3632
g3802
sS'block_loop.thisIndex'
p5249
g3626
sg38
S'left'
p5250
sg58
g62
sS'trial_loop.thisN'
p5251
I115
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p5252
g59
(g98
S's\x00\x00\x00'
tRp5253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5254
I0
sg3641
g3810
sS'block_loop.thisRepN'
p5255
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5256
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p5257
Nsg69
Vy
sS'block_loop.thisTrialN'
p5258
I0
sg39
F0.53394684151771798
sg34
g752
(S'\x07\xdf\n\x11\x10:.\x03\x15\x10'
tRp5259
sa(dp5260
S'trial_loop.thisTrialN'
p5261
I116
sg3632
g3881
sS'block_loop.thisIndex'
p5262
g3626
sg38
S'left'
p5263
sg58
g62
sS'trial_loop.thisN'
p5264
I116
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p5265
g59
(g98
S't\x00\x00\x00'
tRp5266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5267
I0
sg3641
g3889
sS'block_loop.thisRepN'
p5268
I1
sg3644
g3885
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5269
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p5270
Nsg69
Vy
sS'block_loop.thisTrialN'
p5271
I0
sg39
F0.93345083101303317
sg34
g752
(S'\x07\xdf\n\x11\x10:3\x0b\xc3\xb8'
tRp5272
sa(dp5273
S'trial_loop.thisTrialN'
p5274
I117
sg3632
g3864
sS'block_loop.thisIndex'
p5275
g3626
sg38
S'right'
p5276
sg58
g62
sS'trial_loop.thisN'
p5277
I117
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p5278
g59
(g98
S'u\x00\x00\x00'
tRp5279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5280
I0
sg3641
g3872
sS'block_loop.thisRepN'
p5281
I1
sg3644
g3868
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5282
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p5283
Nsg69
Vy
sS'block_loop.thisTrialN'
p5284
I0
sg39
F0.60010257764133712
sg34
g752
(S'\x07\xdf\n\x11\x10:9\x0bb\x10'
tRp5285
sa(dp5286
S'trial_loop.thisTrialN'
p5287
I118
sg3632
g3984
sS'block_loop.thisIndex'
p5288
g3626
sg38
S'right'
p5289
sg58
g62
sS'trial_loop.thisN'
p5290
I118
sg33
g3988
sg63
g64
sS'trial_loop.thisIndex'
p5291
g59
(g98
S'v\x00\x00\x00'
tRp5292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5293
I0
sg3641
g3992
sS'block_loop.thisRepN'
p5294
I1
sg3644
g3988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5295
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p5296
Nsg69
Vy
sS'block_loop.thisTrialN'
p5297
I0
sg39
F0.65007539371072198
sg34
g752
(S'\x07\xdf\n\x11\x10;\x03\x05\xc0\xa8'
tRp5298
sa(dp5299
S'trial_loop.thisTrialN'
p5300
I119
sg3632
g4085
sS'block_loop.thisIndex'
p5301
g3626
sg38
S'right'
p5302
sg58
g62
sS'trial_loop.thisN'
p5303
I119
sg33
g4089
sg63
g64
sS'trial_loop.thisIndex'
p5304
g59
(g98
S'w\x00\x00\x00'
tRp5305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5306
I0
sg3641
g4093
sS'block_loop.thisRepN'
p5307
I1
sg3644
g4089
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5308
I1
sg3646
g4096
sg55
g11
sS'block_loop.thisTrial'
p5309
Nsg69
Vy
sS'block_loop.thisTrialN'
p5310
I0
sg39
F0.73352136383255129
sg34
g752
(S'\x07\xdf\n\x11\x10;\t\x00\xda\xc0'
tRp5311
sa(dp5312
S'trial_loop.thisTrialN'
p5313
I120
sg3632
g3633
sS'block_loop.thisIndex'
p5314
g3626
sg38
S'right'
p5315
sg58
g62
sS'trial_loop.thisN'
p5316
I120
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5317
g59
(g98
S'x\x00\x00\x00'
tRp5318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5319
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5320
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5321
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5322
Nsg69
Vy
sS'block_loop.thisTrialN'
p5323
I0
sg39
F0.73353333787599695
sg34
g752
(S'\x07\xdf\n\x11\x10;\x0e\x0c\xa2`'
tRp5324
sa(dp5325
S'trial_loop.thisTrialN'
p5326
I121
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p5327
sS'block_loop.thisIndex'
p5328
g3626
sg38
S'left'
p5329
sg58
g62
sS'trial_loop.thisN'
p5330
I121
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p5331
g59
(g98
S'y\x00\x00\x00'
tRp5332
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5333
I0
sg3641
S'36-fig_rolls.png'
p5334
sS'block_loop.thisRepN'
p5335
I1
sg3644
g3772
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5336
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vy
sS'block_loop.thisTrialN'
p5338
I0
sg39
F1.0834582292618506
sg34
g752
(S'\x07\xdf\n\x11\x10;\x14\x08\xe9@'
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g3785
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'left'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g3796
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g3793
sS'block_loop.thisRepN'
p5348
I1
sg3644
g3789
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vy
sS'block_loop.thisTrialN'
p5351
I0
sg39
F1.2001934663348948
sg34
g752
(S'\x07\xdf\n\x11\x10;\x1a\n\xaax'
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g3670
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'right'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5361
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vy
sS'block_loop.thisTrialN'
p5364
I0
sg39
F2.3001419494366928
sg34
g752
(S'\x07\xdf\n\x11\x10; \x0eS\xf8'
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g4147
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'left'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g4151
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g4155
sS'block_loop.thisRepN'
p5374
I1
sg3644
g4151
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g4158
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vy
sS'block_loop.thisTrialN'
p5377
I0
sg39
F0.81685415073116019
sg34
g752
(S'\x07\xdf\n\x11\x10;(\x04"\x98'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g5156
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'right'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g5163
sS'block_loop.thisRepN'
p5387
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vy
sS'block_loop.thisTrialN'
p5390
I0
sg39
F1.0001787553665054
sg34
g752
(S'\x07\xdf\n\x11\x10;.\x01\xd8\xa8'
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g3687
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'right'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5400
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vy
sS'block_loop.thisTrialN'
p5403
I0
sg39
F0.75015159994563874
sg34
g752
(S'\x07\xdf\n\x11\x10;4\x02m\x18'
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g4386
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'right'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g4218
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g4393
sS'block_loop.thisRepN'
p5413
I1
sg3644
g4211
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g4218
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vy
sS'block_loop.thisTrialN'
p5416
I0
sg39
F0.73341730368974822
sg34
g752
(S'\x07\xdf\n\x11\x10;9\x0e4\xb8'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g3785
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'left'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g3793
sS'block_loop.thisRepN'
p5426
I1
sg3644
g3789
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vy
sS'block_loop.thisTrialN'
p5429
I0
sg39
F0.7001864814756118
sg34
g752
(S'\x07\xdf\n\x11\x11\x00\x03\n\xba\x18'
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g3911
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'right'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g3918
sS'block_loop.thisRepN'
p5439
I1
sg3644
g3885
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vy
sS'block_loop.thisTrialN'
p5442
I0
sg39
F1.3334984991106467
sg34
g752
(S'\x07\xdf\n\x11\x11\x00\t\x06\xc2x'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g4207
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'left'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g4211
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g4215
sS'block_loop.thisRepN'
p5452
I1
sg3644
g4211
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g4218
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vy
sS'block_loop.thisTrialN'
p5455
I0
sg39
F0.58354076463365345
sg34
g752
(S'\x07\xdf\n\x11\x11\x00\x0f\x0cT@'
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g4164
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'right'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g4171
sS'block_loop.thisRepN'
p5465
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vy
sS'block_loop.thisTrialN'
p5468
I0
sg39
F0.51689095666097273
sg34
g752
(S'\x07\xdf\n\x11\x11\x00\x15\x06x@'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g3670
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'left'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5478
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vy
sS'block_loop.thisTrialN'
p5481
I0
sg39
F1.0003441112085056
sg34
g752
(S'\x07\xdf\n\x11\x11\x00\x1a\x0e\xecP'
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g4132
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'left'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g4106
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g4139
sS'block_loop.thisRepN'
p5491
I1
sg3644
g4106
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g4113
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vy
sS'block_loop.thisTrialN'
p5494
I0
sg39
F0.9000378322762117
sg34
g752
(S'\x07\xdf\n\x11\x11\x00 \x0f>X'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g4358
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'left'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g4151
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g4365
sS'block_loop.thisRepN'
p5504
I1
sg3644
g4151
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g4158
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vy
sS'block_loop.thisTrialN'
p5507
I0
sg39
F1.5001096195192076
sg34
g752
(S'\x07\xdf\n\x11\x11\x00&\x0ec\x98'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g5128
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'right'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g5135
sS'block_loop.thisRepN'
p5517
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vy
sS'block_loop.thisTrialN'
p5520
I0
sg39
F0.8835267664062485
sg34
g752
(S'\x07\xdf\n\x11\x11\x00-\x07\x14\x80'
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g5156
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'left'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g5163
sS'block_loop.thisRepN'
p5530
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vy
sS'block_loop.thisTrialN'
p5533
I0
sg39
F0.63344601288554259
sg34
g752
(S'\x07\xdf\n\x11\x11\x003\x05\xfb@'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g4179
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'right'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g4046
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g4186
sS'block_loop.thisRepN'
p5543
I1
sg3644
g4046
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g4053
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vy
sS'block_loop.thisTrialN'
p5546
I0
sg39
F1.5835307862644186
sg34
g752
(S'\x07\xdf\n\x11\x11\x009\x00\xd6\xd8'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g4386
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'right'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g4211
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g4393
sS'block_loop.thisRepN'
p5556
I1
sg3644
g4211
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g4218
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vy
sS'block_loop.thisTrialN'
p5559
I0
sg39
F0.68345018954642001
sg34
g752
(S'\x07\xdf\n\x11\x11\x01\x03\n5H'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g4102
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'left'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g4106
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g4110
sS'block_loop.thisRepN'
p5569
I1
sg3644
g4106
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g4113
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vy
sS'block_loop.thisTrialN'
p5572
I0
sg39
F0.65023989426390472
sg34
g752
(S'\x07\xdf\n\x11\x11\x01\t\x06\x03\x10'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g3633
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'right'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5582
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vy
sS'block_loop.thisTrialN'
p5585
I0
sg39
F0.71681557720421551
sg34
g752
(S'\x07\xdf\n\x11\x11\x01\x0f\x01\x1d('
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g4132
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'left'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g4113
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g4139
sS'block_loop.thisRepN'
p5595
I1
sg3644
g4106
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g4113
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vy
sS'block_loop.thisTrialN'
p5598
I0
sg39
F0.88353218323572946
sg34
g752
(S'\x07\xdf\n\x11\x11\x01\x14\x0ck\xb0'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g4343
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'left'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g4096
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g4350
sS'block_loop.thisRepN'
p5608
I1
sg3644
g4089
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g4096
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vy
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.7668656543655743
sg34
g752
(S'\x07\xdf\n\x11\x11\x01\x1a\x0bRp'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4994
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'left'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g5001
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vy
sS'block_loop.thisTrialN'
p5624
I0
sg39
F0.58356015118079085
sg34
g752
(S'\x07\xdf\n\x11\x11\x01 \x08P\xe8'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g4427
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'right'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3762
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g4434
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3755
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g3762
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vy
sS'block_loop.thisTrialN'
p5637
I0
sg39
F1.4335185413792715
sg34
g752
(S'\x07\xdf\n\x11\x11\x01&\x02t\xe8'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g4994
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'left'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g5001
sS'block_loop.thisRepN'
p5647
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vy
sS'block_loop.thisTrialN'
p5650
I0
sg39
F2.333373912037132
sg34
g752
(S'\x07\xdf\n\x11\x11\x01,\tq\xf8'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g3849
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'right'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3738
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g3856
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g3745
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vy
sS'block_loop.thisTrialN'
p5663
I0
sg39
F0.6167598979009199
sg34
g752
(S'\x07\xdf\n\x11\x11\x013\x0e\xfb\xf0'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g4179
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'right'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g4046
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g4186
sS'block_loop.thisRepN'
p5673
I1
sg3644
g4046
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g4053
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vy
sS'block_loop.thisTrialN'
p5676
I0
sg39
F1.0667718291806523
sg34
g752
(S'\x07\xdf\n\x11\x11\x019\t\x9c\xf0'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g4343
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'left'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g4089
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g4350
sS'block_loop.thisRepN'
p5686
I1
sg3644
g4089
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g4096
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vy
sS'block_loop.thisTrialN'
p5689
I0
sg39
F1.5001278656800423
sg34
g752
(S'\x07\xdf\n\x11\x11\x02\x03\x0b\x1f\xa8'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g3864
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g3872
sS'block_loop.thisRepN'
p5699
I1
sg3644
g3868
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vy
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.78337130340605654
sg34
g752
(S'\x07\xdf\n\x11\x11\x02\n\x04\x0f\x10'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g5156
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'left'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g5163
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vy
sS'block_loop.thisTrialN'
p5715
I0
sg39
F1.0501997527080675
sg34
g752
(S'\x07\xdf\n\x11\x11\x02\x10\x01H '
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g3670
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'right'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vy
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.61684799265094625
sg34
g752
(S'\x07\xdf\n\x11\x11\x02\x16\x02\x90@'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g4358
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'left'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g4151
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g4365
sS'block_loop.thisRepN'
p5738
I1
sg3644
g4151
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g4158
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vy
sS'block_loop.thisTrialN'
p5741
I0
sg39
F0.7832683836495562
sg34
g752
(S'\x07\xdf\n\x11\x11\x02\x1b\x0cs\x80'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g3984
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'right'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g3988
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g3992
sS'block_loop.thisRepN'
p5751
I1
sg3644
g3988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vy
sS'block_loop.thisTrialN'
p5754
I0
sg39
F0.71682755124766118
sg34
g752
(S'\x07\xdf\n\x11\x11\x02!\t\xac\x90'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g4559
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'left'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g4563
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g4567
sS'block_loop.thisRepN'
p5764
I1
sg3644
g4563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g4570
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vy
sS'block_loop.thisTrialN'
p5767
I0
sg39
F1.1668605796521661
sg34
g752
(S"\x07\xdf\n\x11\x11\x02'\x05\xf7X"
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g3926
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'left'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g3933
sS'block_loop.thisRepN'
p5777
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vy
sS'block_loop.thisTrialN'
p5780
I0
sg39
F0.68345874243459548
sg34
g752
(S'\x07\xdf\n\x11\x11\x02-\x08\xe9@'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g4784
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'left'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g4570
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g4791
sS'block_loop.thisRepN'
p5790
I1
sg3644
g4563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g4570
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vy
sS'block_loop.thisTrialN'
p5793
I0
sg39
F1.6334793691503364
sg34
g752
(S'\x07\xdf\n\x11\x11\x023\x04\xb7\x08'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g4207
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'left'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g4211
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g4215
sS'block_loop.thisRepN'
p5803
I1
sg3644
g4211
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g4218
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vy
sS'block_loop.thisTrialN'
p5806
I0
sg39
F1.6001638733414438
sg34
g752
(S'\x07\xdf\n\x11\x11\x029\x0e\xd0\xf8'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g5035
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'left'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g3995
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g5042
sS'block_loop.thisRepN'
p5816
I1
sg3644
g3988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vy
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.66689721452348749
sg34
g752
(S'\x07\xdf\n\x11\x11\x03\x04\t+\xa8'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g5128
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'right'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g5135
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vy
sS'block_loop.thisTrialN'
p5832
I0
sg39
F0.85024291628451465
sg34
g752
(S'\x07\xdf\n\x11\x11\x03\n\x04\xba\xf0'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g4784
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'left'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g4563
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g4791
sS'block_loop.thisRepN'
p5842
I1
sg3644
g4563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g4570
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vy
sS'block_loop.thisTrialN'
p5845
I0
sg39
F0.73344866428124078
sg34
g752
(S'\x07\xdf\n\x11\x11\x03\x10\x02\xea\x18'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g5327
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'left'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g5334
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3772
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vy
sS'block_loop.thisTrialN'
p5858
I0
sg39
F2.0001066260083462
sg34
g752
(S'\x07\xdf\n\x11\x11\x03\x15\x0ew '
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g3734
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'left'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3745
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g3742
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3745
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vy
sS'block_loop.thisTrialN'
p5871
I0
sg39
F1.0167893198367892
sg34
g752
(S'\x07\xdf\n\x11\x11\x03\x1c\x0e\xff\xd8'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g5128
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'left'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g5135
sS'block_loop.thisRepN'
p5881
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vy
sS'block_loop.thisTrialN'
p5884
I0
sg39
F0.91681631845494849
sg34
g752
(S'\x07\xdf\n\x11\x11\x03#\x00\x8c\xa0'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g5035
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'left'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g3988
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g5042
sS'block_loop.thisRepN'
p5894
I1
sg3644
g3988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vy
sS'block_loop.thisTrialN'
p5897
I0
sg39
F0.65053382852602226
sg34
g752
(S'\x07\xdf\n\x11\x11\x03(\x0e\xf4 '
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g5128
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'right'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g5135
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vy
sS'block_loop.thisTrialN'
p5910
I0
sg39
F0.81686840554448281
sg34
g752
(S'\x07\xdf\n\x11\x11\x03.\nH\xd0'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g3768
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'left'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g3776
sS'block_loop.thisRepN'
p5920
I1
sg3644
g3772
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vy
sS'block_loop.thisTrialN'
p5923
I0
sg39
F1.1001352211651465
sg34
g752
(S'\x07\xdf\n\x11\x11\x034\x07\xfe\xe0'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g4994
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'left'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g5001
sS'block_loop.thisRepN'
p5933
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vy
sS'block_loop.thisTrialN'
p5936
I0
sg39
F1.1668448993568745
sg34
g752
(S'\x07\xdf\n\x11\x11\x03:\t\xfe\x98'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g4027
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3796
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g4034
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3789
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vy
sS'block_loop.thisTrialN'
p5949
I0
sg39
F0.93358796232314489
sg34
g752
(S'\x07\xdf\n\x11\x11\x04\x04\x0c\xf0\x80'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g3881
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'left'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g3889
sS'block_loop.thisRepN'
p5959
I1
sg3644
g3885
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vy
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.90059405511510704
sg34
g752
(S'\x07\xdf\n\x11\x11\x04\n\x0c\x8e\xd8'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g4784
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'right'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g4570
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g4791
sS'block_loop.thisRepN'
p5972
I1
sg3644
g4563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g4570
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vy
sS'block_loop.thisTrialN'
p5975
I0
sg39
F0.91683741557881149
sg34
g752
(S'\x07\xdf\n\x11\x11\x04\x10\x0bu\x98'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g4343
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'left'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g4089
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g4350
sS'block_loop.thisRepN'
p5985
I1
sg3644
g4089
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g4096
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vy
sS'block_loop.thisTrialN'
p5988
I0
sg39
F0.58349172807447758
sg34
g752
(S'\x07\xdf\n\x11\x11\x04\x16\n\xd5p'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g5327
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'left'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g5334
sS'block_loop.thisRepN'
p5998
I1
sg3644
g3772
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vy
sS'block_loop.thisTrialN'
p6001
I0
sg39
F0.48359484739739855
sg34
g752
(S'\x07\xdf\n\x11\x11\x04\x1c\x04\xf9p'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g4427
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'right'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g3755
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g4434
sS'block_loop.thisRepN'
p6011
I1
sg3644
g3755
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g3762
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vy
sS'block_loop.thisTrialN'
p6014
I0
sg39
F1.0498214299459505
sg34
g752
(S'\x07\xdf\n\x11\x11\x04!\x0c\xb5\xe8'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g4994
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'left'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g5001
sS'block_loop.thisRepN'
p6024
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vy
sS'block_loop.thisTrialN'
p6027
I0
sg39
F0.80014066650346649
sg34
g752
(S"\x07\xdf\n\x11\x11\x04'\r\xfe\x08"
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g5327
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'left'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g5334
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3772
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vy
sS'block_loop.thisTrialN'
p6040
I0
sg39
F0.8335399806182977
sg34
g752
(S'\x07\xdf\n\x11\x11\x04-\x0bu\x98'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g3751
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'left'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g3762
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g3759
sS'block_loop.thisRepN'
p6050
I1
sg3644
g3755
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g3762
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vy
sS'block_loop.thisTrialN'
p6053
I0
sg39
F0.69984750200092094
sg34
g752
(S'\x07\xdf\n\x11\x11\x043\tj('
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g4102
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'left'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g4106
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g4110
sS'block_loop.thisRepN'
p6063
I1
sg3644
g4106
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g4113
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vy
sS'block_loop.thisTrialN'
p6066
I0
sg39
F0.8668423620001704
sg34
g752
(S'\x07\xdf\n\x11\x11\x049\x05vp'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g4559
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'left'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g4563
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g4567
sS'block_loop.thisRepN'
p6076
I1
sg3644
g4563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g4570
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vy
sS'block_loop.thisTrialN'
p6079
I0
sg39
F0.73343811571885453
sg34
g752
(S'\x07\xdf\n\x11\x11\x05\x03\x03\xe00'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g3653
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'left'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g3661
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vy
sS'block_loop.thisTrialN'
p6092
I0
sg39
F0.75018067976634484
sg34
g752
(S'\x07\xdf\n\x11\x11\x05\t\x00e\x90'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g4179
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'right'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g4046
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g4186
sS'block_loop.thisRepN'
p6102
I1
sg3644
g4046
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g4053
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vy
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.71687459213353577
sg34
g752
(S'\x07\xdf\n\x11\x11\x05\x0e\x0c-0'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g3670
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'right'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g3678
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vy
sS'block_loop.thisTrialN'
p6118
I0
sg39
F0.80058712727532111
sg34
g752
(S'\x07\xdf\n\x11\x11\x05\x14\x08w\xf8'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g4784
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'right'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g4563
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g4791
sS'block_loop.thisRepN'
p6128
I1
sg3644
g4563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g4570
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vy
sS'block_loop.thisTrialN'
p6131
I0
sg39
F0.81685129976813187
sg34
g752
(S'\x07\xdf\n\x11\x11\x05\x1a\x05\xef\x88'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g5327
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'left'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g5334
sS'block_loop.thisRepN'
p6141
I1
sg3644
g3772
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vy
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.86684891921413509
sg34
g752
(S'\x07\xdf\n\x11\x11\x05 \x03\xa5\x98'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g4179
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'right'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g4046
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g4186
sS'block_loop.thisRepN'
p6154
I1
sg3644
g4046
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g4053
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vy
sS'block_loop.thisTrialN'
p6157
I0
sg39
F0.66685958181551541
sg34
g752
(S'\x07\xdf\n\x11\x11\x05&\x02\x13@'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g3864
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'right'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g3872
sS'block_loop.thisRepN'
p6167
I1
sg3644
g3868
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vy
sS'block_loop.thisTrialN'
p6170
I0
sg39
F0.75008175135735655
sg34
g752
(S'\x07\xdf\n\x11\x11\x05+\x0c\xaa0'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g4042
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'left'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g4046
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g4050
sS'block_loop.thisRepN'
p6180
I1
sg3644
g4046
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g4053
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vy
sS'block_loop.thisTrialN'
p6183
I0
sg39
F0.63330717099779577
sg34
g752
(S'\x07\xdf\n\x11\x11\x051\tn\x10'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g5035
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'left'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g3988
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g5042
sS'block_loop.thisRepN'
p6193
I1
sg3644
g3988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vy
sS'block_loop.thisTrialN'
p6196
I0
sg39
F0.75045522748223448
sg34
g752
(S'\x07\xdf\n\x11\x11\x057\x04E\xc0'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g3785
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'right'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g3793
sS'block_loop.thisRepN'
p6206
I1
sg3644
g3789
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vy
sS'block_loop.thisTrialN'
p6209
I0
sg39
F0.56686234724838869
sg34
g752
(S'\x07\xdf\n\x11\x11\x06\x01\x01\t\xa0'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g3802
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'left'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g3810
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vy
sS'block_loop.thisTrialN'
p6222
I0
sg39
F0.50019315272857057
sg34
g752
(S'\x07\xdf\n\x11\x11\x06\x06\n1`'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g3704
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'right'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g3712
sS'block_loop.thisRepN'
p6232
I1
sg3644
g3708
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vy
sS'block_loop.thisTrialN'
p6235
I0
sg39
F2.2000363782854038
sg34
g752
(S'\x07\xdf\n\x11\x11\x06\x0c\x03$\xb0'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g4358
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'left'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g4151
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g4365
sS'block_loop.thisRepN'
p6245
I1
sg3644
g4151
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g4158
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vy
sS'block_loop.thisTrialN'
p6248
I0
sg39
F0.81677289829167421
sg34
g752
(S'\x07\xdf\n\x11\x11\x06\x13\x06\x8b\xc8'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g3956
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'right'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g3963
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3708
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vy
sS'block_loop.thisTrialN'
p6261
I0
sg39
F0.73353476335705636
sg34
g752
(S'\x07\xdf\n\x11\x11\x06\x19\x04A\xd8'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g4085
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'right'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g4089
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g4093
sS'block_loop.thisRepN'
p6271
I1
sg3644
g4089
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g4096
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vy
sS'block_loop.thisTrialN'
p6274
I0
sg39
F1.5001156065409305
sg34
g752
(S'\x07\xdf\n\x11\x11\x06\x1f\x00\xc78'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g3704
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'left'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g3712
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3708
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vy
sS'block_loop.thisTrialN'
p6287
I0
sg39
F1.000208690476029
sg34
g752
(S'\x07\xdf\n\x11\x11\x06%\x08\xf8\xe0'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g4132
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'left'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g4106
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g4139
sS'block_loop.thisRepN'
p6297
I1
sg3644
g4106
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g4113
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vy
sS'block_loop.thisTrialN'
p6300
I0
sg39
F0.98356191877792298
sg34
g752
(S'\x07\xdf\n\x11\x11\x06+\t\x89h'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g3768
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'left'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g3779
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g3776
sS'block_loop.thisRepN'
p6310
I1
sg3644
g3772
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vy
sS'block_loop.thisTrialN'
p6313
I0
sg39
F0.68346815061249799
sg34
g752
(S'\x07\xdf\n\x11\x11\x061\t\xa0\xd8'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g4164
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'right'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g4171
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vy
sS'block_loop.thisTrialN'
p6326
I0
sg39
F1.2338764512469425
sg34
g752
(S'\x07\xdf\n\x11\x11\x067\x05n\xa0'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4147
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'left'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g4158
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4155
sS'block_loop.thisRepN'
p6336
I1
sg3644
g4151
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g4158
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vy
sS'block_loop.thisTrialN'
p6339
I0
sg39
F0.75011083117897215
sg34
g752
(S'\x07\xdf\n\x11\x11\x07\x01\tV\xa0'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g3751
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'right'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3762
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g3759
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3755
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g3762
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vy
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.2998502959444522
sg34
g752
(S'\x07\xdf\n\x11\x11\x07\x07\x06\x16\x98'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F1.116900022721893
sg56
Vl
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vy
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vl
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vy
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'17-jacobs_mini_cheddars_redo.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'left'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'8-liquorice_catherine_wheels.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'8-liquorice_catherine_wheels.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vy
sS'block_loop.thisTrialN'
p6387
I0
sg39
F0.96684957493562251
sg34
g752
(S'\x07\xdf\n\x11\x11\x07\x13\ri\x98'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'35-raisins.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'right'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'49-yorkie.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'49-yorkie.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6401
I2
sg6384
S'35-raisins.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vy
sS'block_loop.thisTrialN'
p6404
I0
sg39
F0.58345466555783787
sg34
g752
(S'\x07\xdf\n\x11\x11\x07\x19\rFp'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'42-mrkipling_lemon_slices.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'right'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'16-skips_prawn.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'16-skips_prawn.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6418
I2
sg6384
S'42-mrkipling_lemon_slices.png'
p6419
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vy
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.55007758895226289
sg34
g752
(S'\x07\xdf\n\x11\x11\x07\x1f\x07jp'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'29-beans.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'right'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'46-pistachios.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'46-pistachios.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6435
I2
sg6384
S'29-beans.png'
p6436
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vy
sS'block_loop.thisTrialN'
p6438
I0
sg39
F3.7667610240314389
sg34
g752
(S'\x07\xdf\n\x11\x11\x07%\x01\x15X'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'51-mars.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'left'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'51-mars.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6452
I2
sg6384
S'27-hartleys_raspberries_jelly.png'
p6453
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vy
sS'block_loop.thisTrialN'
p6455
I0
sg39
F1.1667562344136968
sg34
g752
(S'\x07\xdf\n\x11\x11\x07-\rB\x88'
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
S'25-kitkat.png'
p6459
sS'block_loop.thisIndex'
p6460
g6364
sg38
S'left'
p6461
sg58
g62
sS'trial_loop.thisN'
p6462
I5
sg33
S'25-kitkat.png'
p6463
sg63
g64
sS'trial_loop.thisIndex'
p6464
g59
(g98
S'\x05\x00\x00\x00'
tRp6465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6466
I0
sg6379
S'31-hobnobs.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6469
I2
sg6384
S'31-hobnobs.png'
p6470
sg55
g11
sS'block_loop.thisTrial'
p6471
Nsg69
Vy
sS'block_loop.thisTrialN'
p6472
I0
sg39
F0.85009637679650041
sg34
g752
(S'\x07\xdf\n\x11\x11\x074\x00\xf20'
tRp6473
sa(dp6474
S'trial_loop.thisTrialN'
p6475
I6
sg6370
S'19-caramello_redo.png'
p6476
sS'block_loop.thisIndex'
p6477
g6364
sg38
S'left'
p6478
sg58
g62
sS'trial_loop.thisN'
p6479
I6
sg33
S'19-caramello_redo.png'
p6480
sg63
g64
sS'trial_loop.thisIndex'
p6481
g59
(g98
S'\x06\x00\x00\x00'
tRp6482
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6483
I0
sg6379
S'30-spaghetti_hoops.png'
p6484
sS'block_loop.thisRepN'
p6485
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6486
I2
sg6384
S'30-spaghetti_hoops.png'
p6487
sg55
g11
sS'block_loop.thisTrial'
p6488
Nsg69
Vy
sS'block_loop.thisTrialN'
p6489
I0
sg39
F1.350257598742246
sg34
g752
(S'\x07\xdf\n\x11\x11\x079\x0ec\x98'
tRp6490
sa(dp6491
S'trial_loop.thisTrialN'
p6492
I7
sg6370
S'40-sardines.png'
p6493
sS'block_loop.thisIndex'
p6494
g6364
sg38
S'left'
p6495
sg58
g62
sS'trial_loop.thisN'
p6496
I7
sg33
S'40-sardines.png'
p6497
sg63
g64
sS'trial_loop.thisIndex'
p6498
g59
(g98
S'\x07\x00\x00\x00'
tRp6499
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6500
I0
sg6379
S'5-pineapple.png'
p6501
sS'block_loop.thisRepN'
p6502
I2
sg6382
g6497
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6503
I2
sg6384
S'5-pineapple.png'
p6504
sg55
g11
sS'block_loop.thisTrial'
p6505
Nsg69
Vy
sS'block_loop.thisTrialN'
p6506
I0
sg39
F1.1667670680726587
sg34
g752
(S'\x07\xdf\n\x11\x11\x08\x04\x05,8'
tRp6507
sa(dp6508
S'trial_loop.thisTrialN'
p6509
I8
sg6370
S'18-mms.png'
p6510
sS'block_loop.thisIndex'
p6511
g6364
sg38
S'left'
p6512
sg58
g62
sS'trial_loop.thisN'
p6513
I8
sg33
S'18-mms.png'
p6514
sg63
g64
sS'trial_loop.thisIndex'
p6515
g59
(g98
S'\x08\x00\x00\x00'
tRp6516
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6517
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p6518
sS'block_loop.thisRepN'
p6519
I2
sg6382
g6514
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6520
I2
sg6384
S'43-mrporky_pork_crackles_redo.png'
p6521
sg55
g11
sS'block_loop.thisTrial'
p6522
Nsg69
Vy
sS'block_loop.thisTrialN'
p6523
I0
sg39
F1.0668043301566286
sg34
g752
(S'\x07\xdf\n\x11\x11\x08\n\x08"\x08'
tRp6524
sa(dp6525
S'trial_loop.thisTrialN'
p6526
I9
sg6370
S'30-spaghetti_hoops.png'
p6527
sS'block_loop.thisIndex'
p6528
g6364
sg38
S'left'
p6529
sg58
g62
sS'trial_loop.thisN'
p6530
I9
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p6531
g59
(g98
S'\t\x00\x00\x00'
tRp6532
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6533
I0
sg6379
S'19-caramello_redo.png'
p6534
sS'block_loop.thisRepN'
p6535
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6536
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p6537
Nsg69
Vy
sS'block_loop.thisTrialN'
p6538
I0
sg39
F0.85010521478125156
sg34
g752
(S'\x07\xdf\n\x11\x11\x08\x10\t\xa4\xc0'
tRp6539
sa(dp6540
S'trial_loop.thisTrialN'
p6541
I10
sg6370
S'33-ambrosia_rice.png'
p6542
sS'block_loop.thisIndex'
p6543
g6364
sg38
S'right'
p6544
sg58
g62
sS'trial_loop.thisN'
p6545
I10
sg33
S'23-crunchie_redo.png'
p6546
sg63
g64
sS'trial_loop.thisIndex'
p6547
g59
(g98
S'\n\x00\x00\x00'
tRp6548
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6549
I0
sg6379
S'23-crunchie_redo.png'
p6550
sS'block_loop.thisRepN'
p6551
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6552
I2
sg6384
S'33-ambrosia_rice.png'
p6553
sg55
g11
sS'block_loop.thisTrial'
p6554
Nsg69
Vy
sS'block_loop.thisTrialN'
p6555
I0
sg39
F1.0001912996031024
sg34
g752
(S'\x07\xdf\n\x11\x11\x08\x16\x07\xd3\xe8'
tRp6556
sa(dp6557
S'trial_loop.thisTrialN'
p6558
I11
sg6370
S'49-yorkie.png'
p6559
sS'block_loop.thisIndex'
p6560
g6364
sg38
S'left'
p6561
sg58
g62
sS'trial_loop.thisN'
p6562
I11
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6563
g59
(g98
S'\x0b\x00\x00\x00'
tRp6564
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6565
I0
sg6379
S'35-raisins.png'
p6566
sS'block_loop.thisRepN'
p6567
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6568
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6569
Nsg69
Vy
sS'block_loop.thisTrialN'
p6570
I0
sg39
F0.66684760777116026
sg34
g752
(S'\x07\xdf\n\x11\x11\x08\x1c\x08hX'
tRp6571
sa(dp6572
S'trial_loop.thisTrialN'
p6573
I12
sg6370
S'5-pineapple.png'
p6574
sS'block_loop.thisIndex'
p6575
g6364
sg38
S'right'
p6576
sg58
g62
sS'trial_loop.thisN'
p6577
I12
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p6578
g59
(g98
S'\x0c\x00\x00\x00'
tRp6579
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6580
I0
sg6379
S'40-sardines.png'
p6581
sS'block_loop.thisRepN'
p6582
I2
sg6382
g6497
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6583
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p6584
Nsg69
Vy
sS'block_loop.thisTrialN'
p6585
I0
sg39
F3.333438913988175
sg34
g752
(S'\x07\xdf\n\x11\x11\x08"\x03\xbd\x08'
tRp6586
sa(dp6587
S'trial_loop.thisTrialN'
p6588
I13
sg6370
S'8-liquorice_catherine_wheels.png'
p6589
sS'block_loop.thisIndex'
p6590
g6364
sg38
S'right'
p6591
sg58
g62
sS'trial_loop.thisN'
p6592
I13
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6593
g59
(g98
S'\r\x00\x00\x00'
tRp6594
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6595
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p6596
sS'block_loop.thisRepN'
p6597
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6598
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6599
Nsg69
Vy
sS'block_loop.thisTrialN'
p6600
I0
sg39
F3.750044118648475
sg34
g752
(S'\x07\xdf\n\x11\x11\x08*\t}\xb0'
tRp6601
sa(dp6602
S'trial_loop.thisTrialN'
p6603
I14
sg6370
S'26-walkers_smoky_bacon.png'
p6604
sS'block_loop.thisIndex'
p6605
g6364
sg38
S'right'
p6606
sg58
g62
sS'trial_loop.thisN'
p6607
I14
sg33
S'26-walkers_smoky_bacon.png'
p6608
sg63
g64
sS'trial_loop.thisIndex'
p6609
g59
(g98
S'\x0e\x00\x00\x00'
tRp6610
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6611
I0
sg6379
S'44-crunch.png'
p6612
sS'block_loop.thisRepN'
p6613
I2
sg6382
g6608
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6614
I2
sg6384
S'44-crunch.png'
p6615
sg55
g11
sS'block_loop.thisTrial'
p6616
Nsg69
Vy
sS'block_loop.thisTrialN'
p6617
I0
sg39
F0.96678713885012257
sg34
g752
(S'\x07\xdf\n\x11\x11\x083\x06.\x08'
tRp6618
sa(dp6619
S'trial_loop.thisTrialN'
p6620
I15
sg6370
S'1-treacle_cookies.png'
p6621
sS'block_loop.thisIndex'
p6622
g6364
sg38
S'left'
p6623
sg58
g62
sS'trial_loop.thisN'
p6624
I15
sg33
S'21-nakd_banana_crunch.png'
p6625
sg63
g64
sS'trial_loop.thisIndex'
p6626
g59
(g98
S'\x0f\x00\x00\x00'
tRp6627
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6628
I0
sg6379
S'21-nakd_banana_crunch.png'
p6629
sS'block_loop.thisRepN'
p6630
I2
sg6382
S'1-treacle_cookies.png'
p6631
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6632
I2
sg6384
g6625
sg55
g11
sS'block_loop.thisTrial'
p6633
Nsg69
Vy
sS'block_loop.thisTrialN'
p6634
I0
sg39
F1.0834314302110215
sg34
g752
(S'\x07\xdf\n\x11\x11\x089\x06\x06\xf8'
tRp6635
sa(dp6636
S'trial_loop.thisTrialN'
p6637
I16
sg6370
S'44-crunch.png'
p6638
sS'block_loop.thisIndex'
p6639
g6364
sg38
S'right'
p6640
sg58
g62
sS'trial_loop.thisN'
p6641
I16
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p6642
g59
(g98
S'\x10\x00\x00\x00'
tRp6643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6644
I0
sg6379
S'26-walkers_smoky_bacon.png'
p6645
sS'block_loop.thisRepN'
p6646
I2
sg6382
g6608
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6647
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p6648
Nsg69
Vy
sS'block_loop.thisTrialN'
p6649
I0
sg39
F0.68392031330949976
sg34
g752
(S'\x07\xdf\n\x11\x11\t\x03\x07\xc80'
tRp6650
sa(dp6651
S'trial_loop.thisTrialN'
p6652
I17
sg6370
S'20-fruit_pastilles.png'
p6653
sS'block_loop.thisIndex'
p6654
g6364
sg38
S'left'
p6655
sg58
g62
sS'trial_loop.thisN'
p6656
I17
sg33
S'2-steamed_puddings.png'
p6657
sg63
g64
sS'trial_loop.thisIndex'
p6658
g59
(g98
S'\x11\x00\x00\x00'
tRp6659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6660
I0
sg6379
S'2-steamed_puddings.png'
p6661
sS'block_loop.thisRepN'
p6662
I2
sg6382
g6657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6663
I2
sg6384
S'20-fruit_pastilles.png'
p6664
sg55
g11
sS'block_loop.thisTrial'
p6665
Nsg69
Vy
sS'block_loop.thisTrialN'
p6666
I0
sg39
F0.71679590556141193
sg34
g752
(S'\x07\xdf\n\x11\x11\t\t\x03\x99\xe0'
tRp6667
sa(dp6668
S'trial_loop.thisTrialN'
p6669
I18
sg6370
g6371
sS'block_loop.thisIndex'
p6670
g6364
sg38
S'right'
p6671
sg58
g62
sS'trial_loop.thisN'
p6672
I18
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6673
g59
(g98
S'\x12\x00\x00\x00'
tRp6674
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6675
I0
sg6379
g6380
sS'block_loop.thisRepN'
p6676
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6677
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6678
Nsg69
Vy
sS'block_loop.thisTrialN'
p6679
I0
sg39
F1.0334132838333971
sg34
g752
(S'\x07\xdf\n\x11\x11\t\x0e\x0e\xe4\x80'
tRp6680
sa(dp6681
S'trial_loop.thisTrialN'
p6682
I19
sg6370
S'31-hobnobs.png'
p6683
sS'block_loop.thisIndex'
p6684
g6364
sg38
S'right'
p6685
sg58
g62
sS'trial_loop.thisN'
p6686
I19
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p6687
g59
(g98
S'\x13\x00\x00\x00'
tRp6688
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6689
I0
sg6379
S'25-kitkat.png'
p6690
sS'block_loop.thisRepN'
p6691
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6692
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p6693
Nsg69
Vy
sS'block_loop.thisTrialN'
p6694
I0
sg39
F1.0501652560578805
sg34
g752
(S'\x07\xdf\n\x11\x11\t\x15\x00\xaf\xc8'
tRp6695
sa(dp6696
S'trial_loop.thisTrialN'
p6697
I20
sg6370
g6604
sS'block_loop.thisIndex'
p6698
g6364
sg38
S'left'
p6699
sg58
g62
sS'trial_loop.thisN'
p6700
I20
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p6701
g59
(g98
S'\x14\x00\x00\x00'
tRp6702
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6703
I0
sg6379
g6612
sS'block_loop.thisRepN'
p6704
I2
sg6382
g6608
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6705
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p6706
Nsg69
Vy
sS'block_loop.thisTrialN'
p6707
I0
sg39
F1.2168465101503898
sg34
g752
(S'\x07\xdf\n\x11\x11\t\x1b\x01\xf7\xe8'
tRp6708
sa(dp6709
S'trial_loop.thisTrialN'
p6710
I21
sg6370
S'41-peanuts_redo.png'
p6711
sS'block_loop.thisIndex'
p6712
g6364
sg38
S'left'
p6713
sg58
g62
sS'trial_loop.thisN'
p6714
I21
sg33
S'41-peanuts_redo.png'
p6715
sg63
g64
sS'trial_loop.thisIndex'
p6716
g59
(g98
S'\x15\x00\x00\x00'
tRp6717
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6718
I0
sg6379
S'45-chewy_nougat_redo.png'
p6719
sS'block_loop.thisRepN'
p6720
I2
sg6382
g6715
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6721
I2
sg6384
S'45-chewy_nougat_redo.png'
p6722
sg55
g11
sS'block_loop.thisTrial'
p6723
Nsg69
Vy
sS'block_loop.thisTrialN'
p6724
I0
sg39
F0.70024378582820646
sg34
g752
(S'\x07\xdf\n\x11\x11\t!\x05\xdc\x00'
tRp6725
sa(dp6726
S'trial_loop.thisTrialN'
p6727
I22
sg6370
g6425
sS'block_loop.thisIndex'
p6728
g6364
sg38
S'right'
p6729
sg58
g62
sS'trial_loop.thisN'
p6730
I22
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6731
g59
(g98
S'\x16\x00\x00\x00'
tRp6732
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6733
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6734
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6735
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p6736
Nsg69
Vy
sS'block_loop.thisTrialN'
p6737
I0
sg39
F0.78391982864559395
sg34
g752
(S"\x07\xdf\n\x11\x11\t'\x01\xad\xb0"
tRp6738
sa(dp6739
S'trial_loop.thisTrialN'
p6740
I23
sg6370
S'21-nakd_banana_crunch.png'
p6741
sS'block_loop.thisIndex'
p6742
g6364
sg38
S'right'
p6743
sg58
g62
sS'trial_loop.thisN'
p6744
I23
sg33
g6631
sg63
g64
sS'trial_loop.thisIndex'
p6745
g59
(g98
S'\x17\x00\x00\x00'
tRp6746
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6747
I0
sg6379
S'1-treacle_cookies.png'
p6748
sS'block_loop.thisRepN'
p6749
I2
sg6382
g6631
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6750
I2
sg6384
g6625
sg55
g11
sS'block_loop.thisTrial'
p6751
Nsg69
Vy
sS'block_loop.thisTrialN'
p6752
I0
sg39
F0.7669255245846216
sg34
g752
(S'\x07\xdf\n\x11\x11\t,\x0e)\x00'
tRp6753
sa(dp6754
S'trial_loop.thisTrialN'
p6755
I24
sg6370
g6391
sS'block_loop.thisIndex'
p6756
g6364
sg38
S'right'
p6757
sg58
g62
sS'trial_loop.thisN'
p6758
I24
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p6759
g59
(g98
S'\x18\x00\x00\x00'
tRp6760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6761
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6762
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6763
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6764
Nsg69
Vy
sS'block_loop.thisTrialN'
p6765
I0
sg39
F0.71685834164691187
sg34
g752
(S'\x07\xdf\n\x11\x11\t2\x0b+`'
tRp6766
sa(dp6767
S'trial_loop.thisTrialN'
p6768
I25
sg6370
g6638
sS'block_loop.thisIndex'
p6769
g6364
sg38
S'right'
p6770
sg58
g62
sS'trial_loop.thisN'
p6771
I25
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p6772
g59
(g98
S'\x19\x00\x00\x00'
tRp6773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6774
I0
sg6379
g6645
sS'block_loop.thisRepN'
p6775
I2
sg6382
g6608
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6776
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p6777
Nsg69
Vy
sS'block_loop.thisTrialN'
p6778
I0
sg39
F1.1168526967394428
sg34
g752
(S'\x07\xdf\n\x11\x11\t8\x07r@'
tRp6779
sa(dp6780
S'trial_loop.thisTrialN'
p6781
I26
sg6370
S'6-sour_patch_kids.png'
p6782
sS'block_loop.thisIndex'
p6783
g6364
sg38
S'left'
p6784
sg58
g62
sS'trial_loop.thisN'
p6785
I26
sg33
S'6-sour_patch_kids.png'
p6786
sg63
g64
sS'trial_loop.thisIndex'
p6787
g59
(g98
S'\x1a\x00\x00\x00'
tRp6788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6789
I0
sg6379
S'38-maltesers.png'
p6790
sS'block_loop.thisRepN'
p6791
I2
sg6382
S'38-maltesers.png'
p6792
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6793
I2
sg6384
g6786
sg55
g11
sS'block_loop.thisTrial'
p6794
Nsg69
Vy
sS'block_loop.thisTrialN'
p6795
I0
sg39
F0.83328795550914947
sg34
g752
(S'\x07\xdf\n\x11\x11\n\x02\t\xac\x90'
tRp6796
sa(dp6797
S'trial_loop.thisTrialN'
p6798
I27
sg6370
g6527
sS'block_loop.thisIndex'
p6799
g6364
sg38
S'right'
p6800
sg58
g62
sS'trial_loop.thisN'
p6801
I27
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p6802
g59
(g98
S'\x1b\x00\x00\x00'
tRp6803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6804
I0
sg6379
g6534
sS'block_loop.thisRepN'
p6805
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6806
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p6807
Nsg69
Vy
sS'block_loop.thisTrialN'
p6808
I0
sg39
F1.3834781574905719
sg34
g752
(S'\x07\xdf\n\x11\x11\n\x08\x07\xa1 '
tRp6809
sa(dp6810
S'trial_loop.thisTrialN'
p6811
I28
sg6370
S'45-chewy_nougat_redo.png'
p6812
sS'block_loop.thisIndex'
p6813
g6364
sg38
S'right'
p6814
sg58
g62
sS'trial_loop.thisN'
p6815
I28
sg33
g6722
sg63
g64
sS'trial_loop.thisIndex'
p6816
g59
(g98
S'\x1c\x00\x00\x00'
tRp6817
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6818
I0
sg6379
S'41-peanuts_redo.png'
p6819
sS'block_loop.thisRepN'
p6820
I2
sg6382
g6715
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6821
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p6822
Nsg69
Vy
sS'block_loop.thisTrialN'
p6823
I0
sg39
F0.63351643166697613
sg34
g752
(S'\x07\xdf\n\x11\x11\n\x0e\r\xea\x80'
tRp6824
sa(dp6825
S'trial_loop.thisTrialN'
p6826
I29
sg6370
S'27-hartleys_raspberries_jelly.png'
p6827
sS'block_loop.thisIndex'
p6828
g6364
sg38
S'right'
p6829
sg58
g62
sS'trial_loop.thisN'
p6830
I29
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p6831
g59
(g98
S'\x1d\x00\x00\x00'
tRp6832
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6833
I0
sg6379
S'51-mars.png'
p6834
sS'block_loop.thisRepN'
p6835
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6836
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6837
Nsg69
Vy
sS'block_loop.thisTrialN'
p6838
I0
sg39
F1.0001291486141781
sg34
g752
(S'\x07\xdf\n\x11\x11\n\x14\x08\xc20'
tRp6839
sa(dp6840
S'trial_loop.thisTrialN'
p6841
I30
sg6370
S'36-fig_rolls.png'
p6842
sS'block_loop.thisIndex'
p6843
g6364
sg38
S'right'
p6844
sg58
g62
sS'trial_loop.thisN'
p6845
I30
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6846
sg63
g64
sS'trial_loop.thisIndex'
p6847
g59
(g98
S'\x1e\x00\x00\x00'
tRp6848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6849
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6850
sS'block_loop.thisRepN'
p6851
I2
sg6382
g6846
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6852
I2
sg6384
S'36-fig_rolls.png'
p6853
sg55
g11
sS'block_loop.thisTrial'
p6854
Nsg69
Vy
sS'block_loop.thisTrialN'
p6855
I0
sg39
F0.61684058014816401
sg34
g752
(S'\x07\xdf\n\x11\x11\n\x1a\tV\xa0'
tRp6856
sa(dp6857
S'trial_loop.thisTrialN'
p6858
I31
sg6370
g6408
sS'block_loop.thisIndex'
p6859
g6364
sg38
S'right'
p6860
sg58
g62
sS'trial_loop.thisN'
p6861
I31
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6862
g59
(g98
S'\x1f\x00\x00\x00'
tRp6863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6864
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6865
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6866
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6867
Nsg69
Vy
sS'block_loop.thisTrialN'
p6868
I0
sg39
F0.73335230173870514
sg34
g752
(S'\x07\xdf\n\x11\x11\n \x03\xf3\xb8'
tRp6869
sa(dp6870
S'trial_loop.thisTrialN'
p6871
I32
sg6370
g6842
sS'block_loop.thisIndex'
p6872
g6364
sg38
S'right'
p6873
sg58
g62
sS'trial_loop.thisN'
p6874
I32
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p6875
g59
(g98
S' \x00\x00\x00'
tRp6876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6877
I0
sg6379
g6850
sS'block_loop.thisRepN'
p6878
I2
sg6382
g6846
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6879
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p6880
Nsg69
Vy
sS'block_loop.thisTrialN'
p6881
I0
sg39
F1.0168950905563179
sg34
g752
(S'\x07\xdf\n\x11\x11\n&\x00y\x18'
tRp6882
sa(dp6883
S'trial_loop.thisTrialN'
p6884
I33
sg6370
S'16-skips_prawn.png'
p6885
sS'block_loop.thisIndex'
p6886
g6364
sg38
S'left'
p6887
sg58
g62
sS'trial_loop.thisN'
p6888
I33
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p6889
g59
(g98
S'!\x00\x00\x00'
tRp6890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6891
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6892
sS'block_loop.thisRepN'
p6893
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6894
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6895
Nsg69
Vy
sS'block_loop.thisTrialN'
p6896
I0
sg39
F0.65007482351757062
sg34
g752
(S'\x07\xdf\n\x11\x11\n,\x01H '
tRp6897
sa(dp6898
S'trial_loop.thisTrialN'
p6899
I34
sg6370
g6741
sS'block_loop.thisIndex'
p6900
g6364
sg38
S'right'
p6901
sg58
g62
sS'trial_loop.thisN'
p6902
I34
sg33
g6631
sg63
g64
sS'trial_loop.thisIndex'
p6903
g59
(g98
S'"\x00\x00\x00'
tRp6904
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6905
I0
sg6379
g6748
sS'block_loop.thisRepN'
p6906
I2
sg6382
g6631
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6907
I2
sg6384
g6625
sg55
g11
sS'block_loop.thisTrial'
p6908
Nsg69
Vy
sS'block_loop.thisTrialN'
p6909
I0
sg39
F0.60011683245465974
sg34
g752
(S'\x07\xdf\n\x11\x11\n1\x0b\xa0\x90'
tRp6910
sa(dp6911
S'trial_loop.thisTrialN'
p6912
I35
sg6370
g6527
sS'block_loop.thisIndex'
p6913
g6364
sg38
S'right'
p6914
sg58
g62
sS'trial_loop.thisN'
p6915
I35
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p6916
g59
(g98
S'#\x00\x00\x00'
tRp6917
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6918
I0
sg6379
g6534
sS'block_loop.thisRepN'
p6919
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6920
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p6921
Nsg69
Vy
sS'block_loop.thisTrialN'
p6922
I0
sg39
F0.95009760271113919
sg34
g752
(S'\x07\xdf\n\x11\x11\n7\x06\x03\x10'
tRp6923
sa(dp6924
S'trial_loop.thisTrialN'
p6925
I36
sg6370
S'38-maltesers.png'
p6926
sS'block_loop.thisIndex'
p6927
g6364
sg38
S'right'
p6928
sg58
g62
sS'trial_loop.thisN'
p6929
I36
sg33
g6786
sg63
g64
sS'trial_loop.thisIndex'
p6930
g59
(g98
S'$\x00\x00\x00'
tRp6931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6932
I0
sg6379
S'6-sour_patch_kids.png'
p6933
sS'block_loop.thisRepN'
p6934
I2
sg6382
g6792
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6935
I2
sg6384
g6786
sg55
g11
sS'block_loop.thisTrial'
p6936
Nsg69
Vy
sS'block_loop.thisTrialN'
p6937
I0
sg39
F1.3164945017761056
sg34
g752
(S'\x07\xdf\n\x11\x11\x0b\x01\x05\xdc\x00'
tRp6938
sa(dp6939
S'trial_loop.thisTrialN'
p6940
I37
sg6370
g6621
sS'block_loop.thisIndex'
p6941
g6364
sg38
S'left'
p6942
sg58
g62
sS'trial_loop.thisN'
p6943
I37
sg33
g6631
sg63
g64
sS'trial_loop.thisIndex'
p6944
g59
(g98
S'%\x00\x00\x00'
tRp6945
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6946
I0
sg6379
g6629
sS'block_loop.thisRepN'
p6947
I2
sg6382
g6631
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6948
I2
sg6384
g6625
sg55
g11
sS'block_loop.thisTrial'
p6949
Nsg69
Vy
sS'block_loop.thisTrialN'
p6950
I0
sg39
F0.78350073711681034
sg34
g752
(S'\x07\xdf\n\x11\x11\x0b\x07\x0b/H'
tRp6951
sa(dp6952
S'trial_loop.thisTrialN'
p6953
I38
sg6370
S'23-crunchie_redo.png'
p6954
sS'block_loop.thisIndex'
p6955
g6364
sg38
S'left'
p6956
sg58
g62
sS'trial_loop.thisN'
p6957
I38
sg33
g6546
sg63
g64
sS'trial_loop.thisIndex'
p6958
g59
(g98
S'&\x00\x00\x00'
tRp6959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6960
I0
sg6379
S'33-ambrosia_rice.png'
p6961
sS'block_loop.thisRepN'
p6962
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6963
I2
sg6384
g6553
sg55
g11
sS'block_loop.thisTrial'
p6964
Nsg69
Vy
sS'block_loop.thisTrialN'
p6965
I0
sg39
F0.81679998243816954
sg34
g752
(S'\x07\xdf\n\x11\x11\x0b\r\x08l@'
tRp6966
sa(dp6967
S'trial_loop.thisTrialN'
p6968
I39
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6969
sS'block_loop.thisIndex'
p6970
g6364
sg38
S'left'
p6971
sg58
g62
sS'trial_loop.thisN'
p6972
I39
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p6973
g59
(g98
S"'\x00\x00\x00"
tRp6974
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6975
I0
sg6379
S'36-fig_rolls.png'
p6976
sS'block_loop.thisRepN'
p6977
I2
sg6382
g6846
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6978
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p6979
Nsg69
Vy
sS'block_loop.thisTrialN'
p6980
I0
sg39
F0.95024585277587903
sg34
g752
(S'\x07\xdf\n\x11\x11\x0b\x13\x06"P'
tRp6981
sa(dp6982
S'trial_loop.thisTrialN'
p6983
I40
sg6370
g6391
sS'block_loop.thisIndex'
p6984
g6364
sg38
S'right'
p6985
sg58
g62
sS'trial_loop.thisN'
p6986
I40
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p6987
g59
(g98
S'(\x00\x00\x00'
tRp6988
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6989
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6990
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6991
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6992
Nsg69
Vy
sS'block_loop.thisTrialN'
p6993
I0
sg39
F1.1501624906240977
sg34
g752
(S'\x07\xdf\n\x11\x11\x0b\x19\x05\xc0\xa8'
tRp6994
sa(dp6995
S'trial_loop.thisTrialN'
p6996
I41
sg6370
S'2-steamed_puddings.png'
p6997
sS'block_loop.thisIndex'
p6998
g6364
sg38
S'right'
p6999
sg58
g62
sS'trial_loop.thisN'
p7000
I41
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p7001
g59
(g98
S')\x00\x00\x00'
tRp7002
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7003
I0
sg6379
S'20-fruit_pastilles.png'
p7004
sS'block_loop.thisRepN'
p7005
I2
sg6382
g6657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7006
I2
sg6384
g6664
sg55
g11
sS'block_loop.thisTrial'
p7007
Nsg69
Vy
sS'block_loop.thisTrialN'
p7008
I0
sg39
F0.90022685110852763
sg34
g752
(S'\x07\xdf\n\x11\x11\x0b\x1f\x08\xb2\x90'
tRp7009
sa(dp7010
S'trial_loop.thisTrialN'
p7011
I42
sg6370
S'43-mrporky_pork_crackles_redo.png'
p7012
sS'block_loop.thisIndex'
p7013
g6364
sg38
S'right'
p7014
sg58
g62
sS'trial_loop.thisN'
p7015
I42
sg33
g6521
sg63
g64
sS'trial_loop.thisIndex'
p7016
g59
(g98
S'*\x00\x00\x00'
tRp7017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7018
I0
sg6379
S'18-mms.png'
p7019
sS'block_loop.thisRepN'
p7020
I2
sg6382
g6514
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7021
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7022
Nsg69
Vy
sS'block_loop.thisTrialN'
p7023
I0
sg39
F1.1001118432695876
sg34
g752
(S'\x07\xdf\n\x11\x11\x0b%\x07\x99P'
tRp7024
sa(dp7025
S'trial_loop.thisTrialN'
p7026
I43
sg6370
g6969
sS'block_loop.thisIndex'
p7027
g6364
sg38
S'left'
p7028
sg58
g62
sS'trial_loop.thisN'
p7029
I43
sg33
g6853
sg63
g64
sS'trial_loop.thisIndex'
p7030
g59
(g98
S'+\x00\x00\x00'
tRp7031
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7032
I0
sg6379
g6976
sS'block_loop.thisRepN'
p7033
I2
sg6382
g6846
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7034
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p7035
Nsg69
Vy
sS'block_loop.thisTrialN'
p7036
I0
sg39
F0.68355253911067848
sg34
g752
(S'\x07\xdf\n\x11\x11\x0b+\t\x99\x08'
tRp7037
sa(dp7038
S'trial_loop.thisTrialN'
p7039
I44
sg6370
g6653
sS'block_loop.thisIndex'
p7040
g6364
sg38
S'left'
p7041
sg58
g62
sS'trial_loop.thisN'
p7042
I44
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p7043
g59
(g98
S',\x00\x00\x00'
tRp7044
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7045
I0
sg6379
g6661
sS'block_loop.thisRepN'
p7046
I2
sg6382
g6657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7047
I2
sg6384
g6664
sg55
g11
sS'block_loop.thisTrial'
p7048
Nsg69
Vy
sS'block_loop.thisTrialN'
p7049
I0
sg39
F0.666764359658373
sg34
g752
(S'\x07\xdf\n\x11\x11\x0b1\x05f\xd0'
tRp7050
sa(dp7051
S'trial_loop.thisTrialN'
p7052
I45
sg6370
g6559
sS'block_loop.thisIndex'
p7053
g6364
sg38
S'left'
p7054
sg58
g62
sS'trial_loop.thisN'
p7055
I45
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7056
g59
(g98
S'-\x00\x00\x00'
tRp7057
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7058
I0
sg6379
g6566
sS'block_loop.thisRepN'
p7059
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7060
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7061
Nsg69
Vy
sS'block_loop.thisTrialN'
p7062
I0
sg39
F0.61682347437090357
sg34
g752
(S'\x07\xdf\n\x11\x11\x0b7\x00\xbb\x80'
tRp7063
sa(dp7064
S'trial_loop.thisTrialN'
p7065
I46
sg6370
g6885
sS'block_loop.thisIndex'
p7066
g6364
sg38
S'left'
p7067
sg58
g62
sS'trial_loop.thisN'
p7068
I46
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7069
g59
(g98
S'.\x00\x00\x00'
tRp7070
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7071
I0
sg6379
g6892
sS'block_loop.thisRepN'
p7072
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7073
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7074
Nsg69
Vy
sS'block_loop.thisTrialN'
p7075
I0
sg39
F0.60008005503459572
sg34
g752
(S'\x07\xdf\n\x11\x11\x0c\x00\n\x9a\xd8'
tRp7076
sa(dp7077
S'trial_loop.thisTrialN'
p7078
I47
sg6370
g6559
sS'block_loop.thisIndex'
p7079
g6364
sg38
S'left'
p7080
sg58
g62
sS'trial_loop.thisN'
p7081
I47
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7082
g59
(g98
S'/\x00\x00\x00'
tRp7083
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7084
I0
sg6379
g6566
sS'block_loop.thisRepN'
p7085
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7086
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7087
Nsg69
Vy
sS'block_loop.thisTrialN'
p7088
I0
sg39
F0.55021842651331099
sg34
g752
(S'\x07\xdf\n\x11\x11\x0c\x06\x04\xfdX'
tRp7089
sa(dp7090
S'trial_loop.thisTrialN'
p7091
I48
sg6370
g6604
sS'block_loop.thisIndex'
p7092
g6364
sg38
S'left'
p7093
sg58
g62
sS'trial_loop.thisN'
p7094
I48
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p7095
g59
(g98
S'0\x00\x00\x00'
tRp7096
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7097
I0
sg6379
g6612
sS'block_loop.thisRepN'
p7098
I2
sg6382
g6608
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7099
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p7100
Nsg69
Vy
sS'block_loop.thisTrialN'
p7101
I0
sg39
F0.70014514251488436
sg34
g752
(S'\x07\xdf\n\x11\x11\x0c\x0b\r\xea\x80'
tRp7102
sa(dp7103
S'trial_loop.thisTrialN'
p7104
I49
sg6370
g6542
sS'block_loop.thisIndex'
p7105
g6364
sg38
S'right'
p7106
sg58
g62
sS'trial_loop.thisN'
p7107
I49
sg33
g6546
sg63
g64
sS'trial_loop.thisIndex'
p7108
g59
(g98
S'1\x00\x00\x00'
tRp7109
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7110
I0
sg6379
g6550
sS'block_loop.thisRepN'
p7111
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7112
I2
sg6384
g6553
sg55
g11
sS'block_loop.thisTrial'
p7113
Nsg69
Vy
sS'block_loop.thisTrialN'
p7114
I0
sg39
F1.0669049691432519
sg34
g752
(S'\x07\xdf\n\x11\x11\x0c\x11\t\xf6\xc8'
tRp7115
sa(dp7116
S'trial_loop.thisTrialN'
p7117
I50
sg6370
S'50-polo.png'
p7118
sS'block_loop.thisIndex'
p7119
g6364
sg38
S'right'
p7120
sg58
g62
sS'trial_loop.thisN'
p7121
I50
sg33
S'48-twix.png'
p7122
sg63
g64
sS'trial_loop.thisIndex'
p7123
g59
(g98
S'2\x00\x00\x00'
tRp7124
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7125
I0
sg6379
S'48-twix.png'
p7126
sS'block_loop.thisRepN'
p7127
I2
sg6382
g7122
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7128
I2
sg6384
S'50-polo.png'
p7129
sg55
g11
sS'block_loop.thisTrial'
p7130
Nsg69
Vy
sS'block_loop.thisTrialN'
p7131
I0
sg39
F1.3501244587805559
sg34
g752
(S'\x07\xdf\n\x11\x11\x0c\x17\x0by\x80'
tRp7132
sa(dp7133
S'trial_loop.thisTrialN'
p7134
I51
sg6370
g6559
sS'block_loop.thisIndex'
p7135
g6364
sg38
S'left'
p7136
sg58
g62
sS'trial_loop.thisN'
p7137
I51
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7138
g59
(g98
S'3\x00\x00\x00'
tRp7139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7140
I0
sg6379
g6566
sS'block_loop.thisRepN'
p7141
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7142
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7143
Nsg69
Vy
sS'block_loop.thisTrialN'
p7144
I0
sg39
F0.4501573303805344
sg34
g752
(S'\x07\xdf\n\x11\x11\x0c\x1e\x02\x07\x88'
tRp7145
sa(dp7146
S'trial_loop.thisTrialN'
p7147
I52
sg6370
g6476
sS'block_loop.thisIndex'
p7148
g6364
sg38
S'right'
p7149
sg58
g62
sS'trial_loop.thisN'
p7150
I52
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7151
g59
(g98
S'4\x00\x00\x00'
tRp7152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7153
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7154
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7155
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7156
Nsg69
Vy
sS'block_loop.thisTrialN'
p7157
I0
sg39
F1.5833865275471908
sg34
g752
(S'\x07\xdf\n\x11\x11\x0c#\tG\x00'
tRp7158
sa(dp7159
S'trial_loop.thisTrialN'
p7160
I53
sg6370
S'48-twix.png'
p7161
sS'block_loop.thisIndex'
p7162
g6364
sg38
S'left'
p7163
sg58
g62
sS'trial_loop.thisN'
p7164
I53
sg33
g7122
sg63
g64
sS'trial_loop.thisIndex'
p7165
g59
(g98
S'5\x00\x00\x00'
tRp7166
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7167
I0
sg6379
S'50-polo.png'
p7168
sS'block_loop.thisRepN'
p7169
I2
sg6382
g7122
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7170
I2
sg6384
g7129
sg55
g11
sS'block_loop.thisTrial'
p7171
Nsg69
Vy
sS'block_loop.thisTrialN'
p7172
I0
sg39
F1.3167639177581805
sg34
g752
(S'\x07\xdf\n\x11\x11\x0c*\x03\xa1\xb0'
tRp7173
sa(dp7174
S'trial_loop.thisTrialN'
p7175
I54
sg6370
g6589
sS'block_loop.thisIndex'
p7176
g6364
sg38
S'left'
p7177
sg58
g62
sS'trial_loop.thisN'
p7178
I54
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7179
g59
(g98
S'6\x00\x00\x00'
tRp7180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7181
I0
sg6379
g6596
sS'block_loop.thisRepN'
p7182
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7183
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7184
Nsg69
Vy
sS'block_loop.thisTrialN'
p7185
I0
sg39
F0.6835263102530007
sg34
g752
(S'\x07\xdf\n\x11\x11\x0c0\x08\xf8\xe0'
tRp7186
sa(dp7187
S'trial_loop.thisTrialN'
p7188
I55
sg6370
g6683
sS'block_loop.thisIndex'
p7189
g6364
sg38
S'left'
p7190
sg58
g62
sS'trial_loop.thisN'
p7191
I55
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7192
g59
(g98
S'7\x00\x00\x00'
tRp7193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7194
I0
sg6379
g6690
sS'block_loop.thisRepN'
p7195
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7196
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7197
Nsg69
Vy
sS'block_loop.thisTrialN'
p7198
I0
sg39
F1.1000944523966609
sg34
g752
(S'\x07\xdf\n\x11\x11\x0c6\x04\x88('
tRp7199
sa(dp7200
S'trial_loop.thisTrialN'
p7201
I56
sg6370
g6842
sS'block_loop.thisIndex'
p7202
g6364
sg38
S'left'
p7203
sg58
g62
sS'trial_loop.thisN'
p7204
I56
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p7205
g59
(g98
S'8\x00\x00\x00'
tRp7206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7207
I0
sg6379
g6850
sS'block_loop.thisRepN'
p7208
I2
sg6382
g6846
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7209
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p7210
Nsg69
Vy
sS'block_loop.thisTrialN'
p7211
I0
sg39
F1.0668721830707
sg34
g752
(S'\x07\xdf\n\x11\x11\r\x00\x06\x87\xe0'
tRp7212
sa(dp7213
S'trial_loop.thisTrialN'
p7214
I57
sg6370
g6683
sS'block_loop.thisIndex'
p7215
g6364
sg38
S'right'
p7216
sg58
g62
sS'trial_loop.thisN'
p7217
I57
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7218
g59
(g98
S'9\x00\x00\x00'
tRp7219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7220
I0
sg6379
g6690
sS'block_loop.thisRepN'
p7221
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7222
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7223
Nsg69
Vy
sS'block_loop.thisTrialN'
p7224
I0
sg39
F0.66673271397121425
sg34
g752
(S'\x07\xdf\n\x11\x11\r\x06\x08\x0e\x80'
tRp7225
sa(dp7226
S'trial_loop.thisTrialN'
p7227
I58
sg6370
g6782
sS'block_loop.thisIndex'
p7228
g6364
sg38
S'left'
p7229
sg58
g62
sS'trial_loop.thisN'
p7230
I58
sg33
g6786
sg63
g64
sS'trial_loop.thisIndex'
p7231
g59
(g98
S':\x00\x00\x00'
tRp7232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7233
I0
sg6379
g6790
sS'block_loop.thisRepN'
p7234
I2
sg6382
g6792
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7235
I2
sg6384
g6786
sg55
g11
sS'block_loop.thisTrial'
p7236
Nsg69
Vy
sS'block_loop.thisTrialN'
p7237
I0
sg39
F0.86653759407818143
sg34
g752
(S'\x07\xdf\n\x11\x11\r\x0c\x03\x9d\xc8'
tRp7238
sa(dp7239
S'trial_loop.thisTrialN'
p7240
I59
sg6370
g7118
sS'block_loop.thisIndex'
p7241
g6364
sg38
S'right'
p7242
sg58
g62
sS'trial_loop.thisN'
p7243
I59
sg33
g7129
sg63
g64
sS'trial_loop.thisIndex'
p7244
g59
(g98
S';\x00\x00\x00'
tRp7245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7246
I0
sg6379
g7126
sS'block_loop.thisRepN'
p7247
I2
sg6382
g7122
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7248
I2
sg6384
g7129
sg55
g11
sS'block_loop.thisTrial'
p7249
Nsg69
Vy
sS'block_loop.thisTrialN'
p7250
I0
sg39
F0.66677975485708885
sg34
g752
(S'\x07\xdf\n\x11\x11\r\x12\x02\x0bp'
tRp7251
sa(dp7252
S'trial_loop.thisTrialN'
p7253
I60
sg6370
g6621
sS'block_loop.thisIndex'
p7254
g6364
sg38
S'left'
p7255
sg58
g62
sS'trial_loop.thisN'
p7256
I60
sg33
g6631
sg63
g64
sS'trial_loop.thisIndex'
p7257
g59
(g98
S'<\x00\x00\x00'
tRp7258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7259
I0
sg6379
g6629
sS'block_loop.thisRepN'
p7260
I2
sg6382
g6631
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7261
I2
sg6384
g6625
sg55
g11
sS'block_loop.thisTrial'
p7262
Nsg69
Vy
sS'block_loop.thisTrialN'
p7263
I0
sg39
F0.81686013775288302
sg34
g752
(S'\x07\xdf\n\x11\x11\r\x17\x0c\xa2`'
tRp7264
sa(dp7265
S'trial_loop.thisTrialN'
p7266
I61
sg6370
g6391
sS'block_loop.thisIndex'
p7267
g6364
sg38
S'right'
p7268
sg58
g62
sS'trial_loop.thisN'
p7269
I61
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7270
g59
(g98
S'=\x00\x00\x00'
tRp7271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7272
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7273
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7274
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7275
Nsg69
Vy
sS'block_loop.thisTrialN'
p7276
I0
sg39
F0.68342424578531791
sg34
g752
(S'\x07\xdf\n\x11\x11\r\x1d\nXp'
tRp7277
sa(dp7278
S'trial_loop.thisTrialN'
p7279
I62
sg6370
S'46-pistachios.png'
p7280
sS'block_loop.thisIndex'
p7281
g6364
sg38
S'left'
p7282
sg58
g62
sS'trial_loop.thisN'
p7283
I62
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7284
g59
(g98
S'>\x00\x00\x00'
tRp7285
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7286
I0
sg6379
S'29-beans.png'
p7287
sS'block_loop.thisRepN'
p7288
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7289
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7290
Nsg69
Vy
sS'block_loop.thisTrialN'
p7291
I0
sg39
F0.80020737903305417
sg34
g752
(S'\x07\xdf\n\x11\x11\r#\x06&8'
tRp7292
sa(dp7293
S'trial_loop.thisTrialN'
p7294
I63
sg6370
g6741
sS'block_loop.thisIndex'
p7295
g6364
sg38
S'right'
p7296
sg58
g62
sS'trial_loop.thisN'
p7297
I63
sg33
g6631
sg63
g64
sS'trial_loop.thisIndex'
p7298
g59
(g98
S'?\x00\x00\x00'
tRp7299
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7300
I0
sg6379
g6748
sS'block_loop.thisRepN'
p7301
I2
sg6382
g6631
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7302
I2
sg6384
g6625
sg55
g11
sS'block_loop.thisTrial'
p7303
Nsg69
Vy
sS'block_loop.thisTrialN'
p7304
I0
sg39
F0.73368158794073679
sg34
g752
(S'\x07\xdf\n\x11\x11\r)\x03\xa1\xb0'
tRp7305
sa(dp7306
S'trial_loop.thisTrialN'
p7307
I64
sg6370
g6997
sS'block_loop.thisIndex'
p7308
g6364
sg38
S'left'
p7309
sg58
g62
sS'trial_loop.thisN'
p7310
I64
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p7311
g59
(g98
S'@\x00\x00\x00'
tRp7312
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7313
I0
sg6379
g7004
sS'block_loop.thisRepN'
p7314
I2
sg6382
g6657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7315
I2
sg6384
g6664
sg55
g11
sS'block_loop.thisTrial'
p7316
Nsg69
Vy
sS'block_loop.thisTrialN'
p7317
I0
sg39
F0.60017670267279755
sg34
g752
(S'\x07\xdf\n\x11\x11\r.\x0f*\xd0'
tRp7318
sa(dp7319
S'trial_loop.thisTrialN'
p7320
I65
sg6370
g6683
sS'block_loop.thisIndex'
p7321
g6364
sg38
S'right'
p7322
sg58
g62
sS'trial_loop.thisN'
p7323
I65
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7324
g59
(g98
S'A\x00\x00\x00'
tRp7325
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7326
I0
sg6379
g6690
sS'block_loop.thisRepN'
p7327
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7328
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7329
Nsg69
Vy
sS'block_loop.thisTrialN'
p7330
I0
sg39
F1.3002366014015934
sg34
g752
(S'\x07\xdf\n\x11\x11\r4\t\x8dP'
tRp7331
sa(dp7332
S'trial_loop.thisTrialN'
p7333
I66
sg6370
g6926
sS'block_loop.thisIndex'
p7334
g6364
sg38
S'right'
p7335
sg58
g62
sS'trial_loop.thisN'
p7336
I66
sg33
g6792
sg63
g64
sS'trial_loop.thisIndex'
p7337
g59
(g98
S'B\x00\x00\x00'
tRp7338
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7339
I0
sg6379
g6933
sS'block_loop.thisRepN'
p7340
I2
sg6382
g6792
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7341
I2
sg6384
g6786
sg55
g11
sS'block_loop.thisTrial'
p7342
Nsg69
Vy
sS'block_loop.thisTrialN'
p7343
I0
sg39
F1.0165817697461534
sg34
g752
(S'\x07\xdf\n\x11\x11\r:\x0e\xa2\x18'
tRp7344
sa(dp7345
S'trial_loop.thisTrialN'
p7346
I67
sg6370
S'7-olives.png'
p7347
sS'block_loop.thisIndex'
p7348
g6364
sg38
S'left'
p7349
sg58
g62
sS'trial_loop.thisN'
p7350
I67
sg33
S'22-daim.png'
p7351
sg63
g64
sS'trial_loop.thisIndex'
p7352
g59
(g98
S'C\x00\x00\x00'
tRp7353
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7354
I0
sg6379
S'22-daim.png'
p7355
sS'block_loop.thisRepN'
p7356
I2
sg6382
g7351
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7357
I2
sg6384
S'7-olives.png'
p7358
sg55
g11
sS'block_loop.thisTrial'
p7359
Nsg69
Vy
sS'block_loop.thisTrialN'
p7360
I0
sg39
F0.58352280356848496
sg34
g752
(S'\x07\xdf\n\x11\x11\x0e\x05\x00.\xe0'
tRp7361
sa(dp7362
S'trial_loop.thisTrialN'
p7363
I68
sg6370
g6442
sS'block_loop.thisIndex'
p7364
g6364
sg38
S'left'
p7365
sg58
g62
sS'trial_loop.thisN'
p7366
I68
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7367
g59
(g98
S'D\x00\x00\x00'
tRp7368
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7369
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7370
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7371
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7372
Nsg69
Vy
sS'block_loop.thisTrialN'
p7373
I0
sg39
F0.96720508999442245
sg34
g752
(S'\x07\xdf\n\x11\x11\x0e\n\t\x95 '
tRp7374
sa(dp7375
S'trial_loop.thisTrialN'
p7376
I69
sg6370
g6782
sS'block_loop.thisIndex'
p7377
g6364
sg38
S'left'
p7378
sg58
g62
sS'trial_loop.thisN'
p7379
I69
sg33
g6786
sg63
g64
sS'trial_loop.thisIndex'
p7380
g59
(g98
S'E\x00\x00\x00'
tRp7381
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7382
I0
sg6379
g6790
sS'block_loop.thisRepN'
p7383
I2
sg6382
g6792
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7384
I2
sg6384
g6786
sg55
g11
sS'block_loop.thisTrial'
p7385
Nsg69
Vy
sS'block_loop.thisTrialN'
p7386
I0
sg39
F0.54983867827104405
sg34
g752
(S'\x07\xdf\n\x11\x11\x0e\x10\t\xac\x90'
tRp7387
sa(dp7388
S'trial_loop.thisTrialN'
p7389
I70
sg6370
g6997
sS'block_loop.thisIndex'
p7390
g6364
sg38
S'right'
p7391
sg58
g62
sS'trial_loop.thisN'
p7392
I70
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p7393
g59
(g98
S'F\x00\x00\x00'
tRp7394
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7395
I0
sg6379
g7004
sS'block_loop.thisRepN'
p7396
I2
sg6382
g6657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7397
I2
sg6384
g6664
sg55
g11
sS'block_loop.thisTrial'
p7398
Nsg69
Vy
sS'block_loop.thisTrialN'
p7399
I0
sg39
F0.90020147754057689
sg34
g752
(S'\x07\xdf\n\x11\x11\x0e\x16\x03Wx'
tRp7400
sa(dp7401
S'trial_loop.thisTrialN'
p7402
I71
sg6370
g6741
sS'block_loop.thisIndex'
p7403
g6364
sg38
S'right'
p7404
sg58
g62
sS'trial_loop.thisN'
p7405
I71
sg33
g6625
sg63
g64
sS'trial_loop.thisIndex'
p7406
g59
(g98
S'G\x00\x00\x00'
tRp7407
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7408
I0
sg6379
g6748
sS'block_loop.thisRepN'
p7409
I2
sg6382
g6631
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7410
I2
sg6384
g6625
sg55
g11
sS'block_loop.thisTrial'
p7411
Nsg69
Vy
sS'block_loop.thisTrialN'
p7412
I0
sg39
F0.85020157732378721
sg34
g752
(S'\x07\xdf\n\x11\x11\x0e\x1c\x02>8'
tRp7413
sa(dp7414
S'trial_loop.thisTrialN'
p7415
I72
sg6370
g6827
sS'block_loop.thisIndex'
p7416
g6364
sg38
S'right'
p7417
sg58
g62
sS'trial_loop.thisN'
p7418
I72
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7419
g59
(g98
S'H\x00\x00\x00'
tRp7420
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7421
I0
sg6379
g6834
sS'block_loop.thisRepN'
p7422
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7423
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7424
Nsg69
Vy
sS'block_loop.thisTrialN'
p7425
I0
sg39
F0.91686592520727572
sg34
g752
(S'\x07\xdf\n\x11\x11\x0e"\x00m`'
tRp7426
sa(dp7427
S'trial_loop.thisTrialN'
p7428
I73
sg6370
S'4-corn.png'
p7429
sS'block_loop.thisIndex'
p7430
g6364
sg38
S'right'
p7431
sg58
g62
sS'trial_loop.thisN'
p7432
I73
sg33
S'10-bounty_redo.png'
p7433
sg63
g64
sS'trial_loop.thisIndex'
p7434
g59
(g98
S'I\x00\x00\x00'
tRp7435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7436
I0
sg6379
S'10-bounty_redo.png'
p7437
sS'block_loop.thisRepN'
p7438
I2
sg6382
g7433
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7439
I2
sg6384
S'4-corn.png'
p7440
sg55
g11
sS'block_loop.thisTrial'
p7441
Nsg69
Vy
sS'block_loop.thisTrialN'
p7442
I0
sg39
F0.61681606186812132
sg34
g752
(S"\x07\xdf\n\x11\x11\x0e'\x0f\x0fx"
tRp7443
sa(dp7444
S'trial_loop.thisTrialN'
p7445
I74
sg6370
g6589
sS'block_loop.thisIndex'
p7446
g6364
sg38
S'right'
p7447
sg58
g62
sS'trial_loop.thisN'
p7448
I74
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7449
g59
(g98
S'J\x00\x00\x00'
tRp7450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7451
I0
sg6379
g6596
sS'block_loop.thisRepN'
p7452
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7453
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7454
Nsg69
Vy
sS'block_loop.thisTrialN'
p7455
I0
sg39
F0.85028796149526897
sg34
g752
(S'\x07\xdf\n\x11\x11\x0e-\t\xb0x'
tRp7456
sa(dp7457
S'trial_loop.thisTrialN'
p7458
I75
sg6370
S'13-mccoys_steak_crisps.png'
p7459
sS'block_loop.thisIndex'
p7460
g6364
sg38
S'left'
p7461
sg58
g62
sS'trial_loop.thisN'
p7462
I75
sg33
S'3-ellas_strawberries_apples.png'
p7463
sg63
g64
sS'trial_loop.thisIndex'
p7464
g59
(g98
S'K\x00\x00\x00'
tRp7465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7466
I0
sg6379
S'3-ellas_strawberries_apples.png'
p7467
sS'block_loop.thisRepN'
p7468
I2
sg6382
S'13-mccoys_steak_crisps.png'
p7469
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7470
I2
sg6384
g7463
sg55
g11
sS'block_loop.thisTrial'
p7471
Nsg69
Vy
sS'block_loop.thisTrialN'
p7472
I0
sg39
F0.56684866262730793
sg34
g752
(S'\x07\xdf\n\x11\x11\x0e3\x07\xdf\xa0'
tRp7473
sa(dp7474
S'trial_loop.thisTrialN'
p7475
I76
sg6370
g6371
sS'block_loop.thisIndex'
p7476
g6364
sg38
S'right'
p7477
sg58
g62
sS'trial_loop.thisN'
p7478
I76
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7479
g59
(g98
S'L\x00\x00\x00'
tRp7480
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7481
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7482
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7483
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7484
Nsg69
Vy
sS'block_loop.thisTrialN'
p7485
I0
sg39
F0.90019377994030947
sg34
g752
(S'\x07\xdf\n\x11\x11\x0e9\x01\xc5 '
tRp7486
sa(dp7487
S'trial_loop.thisTrialN'
p7488
I77
sg6370
g6827
sS'block_loop.thisIndex'
p7489
g6364
sg38
S'right'
p7490
sg58
g62
sS'trial_loop.thisN'
p7491
I77
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7492
g59
(g98
S'M\x00\x00\x00'
tRp7493
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7494
I0
sg6379
g6834
sS'block_loop.thisRepN'
p7495
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7496
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7497
Nsg69
Vy
sS'block_loop.thisTrialN'
p7498
I0
sg39
F0.81671930019183492
sg34
g752
(S'\x07\xdf\n\x11\x11\x0f\x03\x00\xab\xe0'
tRp7499
sa(dp7500
S'trial_loop.thisTrialN'
p7501
I78
sg6370
g6604
sS'block_loop.thisIndex'
p7502
g6364
sg38
S'left'
p7503
sg58
g62
sS'trial_loop.thisN'
p7504
I78
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p7505
g59
(g98
S'N\x00\x00\x00'
tRp7506
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7507
I0
sg6379
g6612
sS'block_loop.thisRepN'
p7508
I2
sg6382
g6608
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7509
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p7510
Nsg69
Vy
sS'block_loop.thisTrialN'
p7511
I0
sg39
F0.71687772819313977
sg34
g752
(S'\x07\xdf\n\x11\x11\x0f\x08\r\xa40'
tRp7512
sa(dp7513
S'trial_loop.thisTrialN'
p7514
I79
sg6370
S'3-ellas_strawberries_apples.png'
p7515
sS'block_loop.thisIndex'
p7516
g6364
sg38
S'right'
p7517
sg58
g62
sS'trial_loop.thisN'
p7518
I79
sg33
g7469
sg63
g64
sS'trial_loop.thisIndex'
p7519
g59
(g98
S'O\x00\x00\x00'
tRp7520
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7521
I0
sg6379
S'13-mccoys_steak_crisps.png'
p7522
sS'block_loop.thisRepN'
p7523
I2
sg6382
g7469
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7524
I2
sg6384
g7463
sg55
g11
sS'block_loop.thisTrial'
p7525
Nsg69
Vy
sS'block_loop.thisTrialN'
p7526
I0
sg39
F0.60009773100409802
sg34
g752
(S'\x07\xdf\n\x11\x11\x0f\x0e\t\xee\xf8'
tRp7527
sa(dp7528
S'trial_loop.thisTrialN'
p7529
I80
sg6370
g7161
sS'block_loop.thisIndex'
p7530
g6364
sg38
S'left'
p7531
sg58
g62
sS'trial_loop.thisN'
p7532
I80
sg33
g7122
sg63
g64
sS'trial_loop.thisIndex'
p7533
g59
(g98
S'P\x00\x00\x00'
tRp7534
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7535
I0
sg6379
g7168
sS'block_loop.thisRepN'
p7536
I2
sg6382
g7122
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7537
I2
sg6384
g7129
sg55
g11
sS'block_loop.thisTrial'
p7538
Nsg69
Vy
sS'block_loop.thisTrialN'
p7539
I0
sg39
F0.85022894656594872
sg34
g752
(S'\x07\xdf\n\x11\x11\x0f\x14\x04M\x90'
tRp7540
sa(dp7541
S'trial_loop.thisTrialN'
p7542
I81
sg6370
g6442
sS'block_loop.thisIndex'
p7543
g6364
sg38
S'left'
p7544
sg58
g62
sS'trial_loop.thisN'
p7545
I81
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7546
g59
(g98
S'Q\x00\x00\x00'
tRp7547
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7548
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7549
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7550
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7551
Nsg69
Vy
sS'block_loop.thisTrialN'
p7552
I0
sg39
F0.70010608432494337
sg34
g752
(S'\x07\xdf\n\x11\x11\x0f\x1a\x02|\xb8'
tRp7553
sa(dp7554
S'trial_loop.thisTrialN'
p7555
I82
sg6370
S'10-bounty_redo.png'
p7556
sS'block_loop.thisIndex'
p7557
g6364
sg38
S'left'
p7558
sg58
g62
sS'trial_loop.thisN'
p7559
I82
sg33
g7433
sg63
g64
sS'trial_loop.thisIndex'
p7560
g59
(g98
S'R\x00\x00\x00'
tRp7561
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7562
I0
sg6379
S'4-corn.png'
p7563
sS'block_loop.thisRepN'
p7564
I2
sg6382
g7433
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7565
I2
sg6384
g7440
sg55
g11
sS'block_loop.thisTrial'
p7566
Nsg69
Vy
sS'block_loop.thisTrialN'
p7567
I0
sg39
F0.58349828528844228
sg34
g752
(S'\x07\xdf\n\x11\x11\x0f\x1f\r\x90\xa8'
tRp7568
sa(dp7569
S'trial_loop.thisTrialN'
p7570
I83
sg6370
g7515
sS'block_loop.thisIndex'
p7571
g6364
sg38
S'right'
p7572
sg58
g62
sS'trial_loop.thisN'
p7573
I83
sg33
g7469
sg63
g64
sS'trial_loop.thisIndex'
p7574
g59
(g98
S'S\x00\x00\x00'
tRp7575
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7576
I0
sg6379
g7522
sS'block_loop.thisRepN'
p7577
I2
sg6382
g7469
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7578
I2
sg6384
g7463
sg55
g11
sS'block_loop.thisTrial'
p7579
Nsg69
Vy
sS'block_loop.thisTrialN'
p7580
I0
sg39
F0.75010769511936815
sg34
g752
(S'\x07\xdf\n\x11\x11\x0f%\x07\xef@'
tRp7581
sa(dp7582
S'trial_loop.thisTrialN'
p7583
I84
sg6370
g6842
sS'block_loop.thisIndex'
p7584
g6364
sg38
S'right'
p7585
sg58
g62
sS'trial_loop.thisN'
p7586
I84
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p7587
g59
(g98
S'T\x00\x00\x00'
tRp7588
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7589
I0
sg6379
g6850
sS'block_loop.thisRepN'
p7590
I2
sg6382
g6846
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7591
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p7592
Nsg69
Vy
sS'block_loop.thisTrialN'
p7593
I0
sg39
F1.4000790286881966
sg34
g752
(S'\x07\xdf\n\x11\x11\x0f+\x04t\xa0'
tRp7594
sa(dp7595
S'trial_loop.thisTrialN'
p7596
I85
sg6370
g6653
sS'block_loop.thisIndex'
p7597
g6364
sg38
S'left'
p7598
sg58
g62
sS'trial_loop.thisN'
p7599
I85
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p7600
g59
(g98
S'U\x00\x00\x00'
tRp7601
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7602
I0
sg6379
g6661
sS'block_loop.thisRepN'
p7603
I2
sg6382
g6657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7604
I2
sg6384
g6664
sg55
g11
sS'block_loop.thisTrial'
p7605
Nsg69
Vy
sS'block_loop.thisTrialN'
p7606
I0
sg39
F0.83347212770513579
sg34
g752
(S'\x07\xdf\n\x11\x11\x0f1\x0b7\x18'
tRp7607
sa(dp7608
S'trial_loop.thisTrialN'
p7609
I86
sg6370
g6926
sS'block_loop.thisIndex'
p7610
g6364
sg38
S'left'
p7611
sg58
g62
sS'trial_loop.thisN'
p7612
I86
sg33
g6792
sg63
g64
sS'trial_loop.thisIndex'
p7613
g59
(g98
S'V\x00\x00\x00'
tRp7614
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7615
I0
sg6379
g6933
sS'block_loop.thisRepN'
p7616
I2
sg6382
g6792
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7617
I2
sg6384
g6786
sg55
g11
sS'block_loop.thisTrial'
p7618
Nsg69
Vy
sS'block_loop.thisTrialN'
p7619
I0
sg39
F0.81696875943453051
sg34
g752
(S'\x07\xdf\n\x11\x11\x0f7\t+\xa8'
tRp7620
sa(dp7621
S'trial_loop.thisTrialN'
p7622
I87
sg6370
g7429
sS'block_loop.thisIndex'
p7623
g6364
sg38
S'right'
p7624
sg58
g62
sS'trial_loop.thisN'
p7625
I87
sg33
g7440
sg63
g64
sS'trial_loop.thisIndex'
p7626
g59
(g98
S'W\x00\x00\x00'
tRp7627
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7628
I0
sg6379
g7437
sS'block_loop.thisRepN'
p7629
I2
sg6382
g7433
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7630
I2
sg6384
g7440
sg55
g11
sS'block_loop.thisTrial'
p7631
Nsg69
Vy
sS'block_loop.thisTrialN'
p7632
I0
sg39
F0.70014143626394798
sg34
g752
(S'\x07\xdf\n\x11\x11\x10\x01\x06\xe1\xb8'
tRp7633
sa(dp7634
S'trial_loop.thisTrialN'
p7635
I88
sg6370
g6827
sS'block_loop.thisIndex'
p7636
g6364
sg38
S'right'
p7637
sg58
g62
sS'trial_loop.thisN'
p7638
I88
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p7639
g59
(g98
S'X\x00\x00\x00'
tRp7640
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7641
I0
sg6379
g6834
sS'block_loop.thisRepN'
p7642
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7643
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7644
Nsg69
Vy
sS'block_loop.thisTrialN'
p7645
I0
sg39
F0.9834969168268799
sg34
g752
(S'\x07\xdf\n\x11\x11\x10\x07\x02\xaf\x80'
tRp7646
sa(dp7647
S'trial_loop.thisTrialN'
p7648
I89
sg6370
g6559
sS'block_loop.thisIndex'
p7649
g6364
sg38
S'left'
p7650
sg58
g62
sS'trial_loop.thisN'
p7651
I89
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7652
g59
(g98
S'Y\x00\x00\x00'
tRp7653
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7654
I0
sg6379
g6566
sS'block_loop.thisRepN'
p7655
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7656
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7657
Nsg69
Vy
sS'block_loop.thisTrialN'
p7658
I0
sg39
F0.55020816304750042
sg34
g752
(S'\x07\xdf\n\x11\x11\x10\r\x03\x05p'
tRp7659
sa(dp7660
S'trial_loop.thisTrialN'
p7661
I90
sg6370
g7429
sS'block_loop.thisIndex'
p7662
g6364
sg38
S'right'
p7663
sg58
g62
sS'trial_loop.thisN'
p7664
I90
sg33
g7440
sg63
g64
sS'trial_loop.thisIndex'
p7665
g59
(g98
S'Z\x00\x00\x00'
tRp7666
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7667
I0
sg6379
g7437
sS'block_loop.thisRepN'
p7668
I2
sg6382
g7433
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7669
I2
sg6384
g7440
sg55
g11
sS'block_loop.thisTrial'
p7670
Nsg69
Vy
sS'block_loop.thisTrialN'
p7671
I0
sg39
F0.616879638338105
sg34
g752
(S'\x07\xdf\n\x11\x11\x10\x12\x0b\xee\xb0'
tRp7672
sa(dp7673
S'trial_loop.thisTrialN'
p7674
I91
sg6370
g6842
sS'block_loop.thisIndex'
p7675
g6364
sg38
S'left'
p7676
sg58
g62
sS'trial_loop.thisN'
p7677
I91
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p7678
g59
(g98
S'[\x00\x00\x00'
tRp7679
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7680
I0
sg6379
g6850
sS'block_loop.thisRepN'
p7681
I2
sg6382
g6846
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7682
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p7683
Nsg69
Vy
sS'block_loop.thisTrialN'
p7684
I0
sg39
F1.5668352631028029
sg34
g752
(S'\x07\xdf\n\x11\x11\x10\x18\x06\x8f\xb0'
tRp7685
sa(dp7686
S'trial_loop.thisTrialN'
p7687
I92
sg6370
g6510
sS'block_loop.thisIndex'
p7688
g6364
sg38
S'left'
p7689
sg58
g62
sS'trial_loop.thisN'
p7690
I92
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7691
g59
(g98
S'\\\x00\x00\x00'
tRp7692
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7693
I0
sg6379
g6518
sS'block_loop.thisRepN'
p7694
I2
sg6382
g6514
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7695
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7696
Nsg69
Vy
sS'block_loop.thisTrialN'
p7697
I0
sg39
F0.63363503171785851
sg34
g752
(S'\x07\xdf\n\x11\x11\x10\x1f\x00m`'
tRp7698
sa(dp7699
S'trial_loop.thisTrialN'
p7700
I93
sg6370
g6574
sS'block_loop.thisIndex'
p7701
g6364
sg38
S'right'
p7702
sg58
g62
sS'trial_loop.thisN'
p7703
I93
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p7704
g59
(g98
S']\x00\x00\x00'
tRp7705
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7706
I0
sg6379
g6581
sS'block_loop.thisRepN'
p7707
I2
sg6382
g6497
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7708
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7709
Nsg69
Vy
sS'block_loop.thisTrialN'
p7710
I0
sg39
F0.8000967616771959
sg34
g752
(S'\x07\xdf\n\x11\x11\x10$\n\x8b8'
tRp7711
sa(dp7712
S'trial_loop.thisTrialN'
p7713
I94
sg6370
g6476
sS'block_loop.thisIndex'
p7714
g6364
sg38
S'left'
p7715
sg58
g62
sS'trial_loop.thisN'
p7716
I94
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7717
g59
(g98
S'^\x00\x00\x00'
tRp7718
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7719
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7720
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7721
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7722
Nsg69
Vy
sS'block_loop.thisTrialN'
p7723
I0
sg39
F1.2334790270342637
sg34
g752
(S'\x07\xdf\n\x11\x11\x10*\x08\x06\xb0'
tRp7724
sa(dp7725
S'trial_loop.thisTrialN'
p7726
I95
sg6370
g7280
sS'block_loop.thisIndex'
p7727
g6364
sg38
S'right'
p7728
sg58
g62
sS'trial_loop.thisN'
p7729
I95
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p7730
g59
(g98
S'_\x00\x00\x00'
tRp7731
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7732
I0
sg6379
g7287
sS'block_loop.thisRepN'
p7733
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7734
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7735
Nsg69
Vy
sS'block_loop.thisTrialN'
p7736
I0
sg39
F0.55021357987698138
sg34
g752
(S'\x07\xdf\n\x11\x11\x100\x0c)H'
tRp7737
sa(dp7738
S'trial_loop.thisTrialN'
p7739
I96
sg6370
g7459
sS'block_loop.thisIndex'
p7740
g6364
sg38
S'left'
p7741
sg58
g62
sS'trial_loop.thisN'
p7742
I96
sg33
g7469
sg63
g64
sS'trial_loop.thisIndex'
p7743
g59
(g98
S'`\x00\x00\x00'
tRp7744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7745
I0
sg6379
g7467
sS'block_loop.thisRepN'
p7746
I2
sg6382
g7469
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7747
I2
sg6384
g7463
sg55
g11
sS'block_loop.thisTrial'
p7748
Nsg69
Vy
sS'block_loop.thisTrialN'
p7749
I0
sg39
F0.58354960261840461
sg34
g752
(S'\x07\xdf\n\x11\x11\x106\x05\xd40'
tRp7750
sa(dp7751
S'trial_loop.thisTrialN'
p7752
I97
sg6370
g6408
sS'block_loop.thisIndex'
p7753
g6364
sg38
S'right'
p7754
sg58
g62
sS'trial_loop.thisN'
p7755
I97
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7756
g59
(g98
S'a\x00\x00\x00'
tRp7757
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7758
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7759
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7760
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7761
Nsg69
Vy
sS'block_loop.thisTrialN'
p7762
I0
sg39
F2.0837270750516836
sg34
g752
(S'\x07\xdf\n\x11\x11\x10;\x0f:p'
tRp7763
sa(dp7764
S'trial_loop.thisTrialN'
p7765
I98
sg6370
g6954
sS'block_loop.thisIndex'
p7766
g6364
sg38
S'left'
p7767
sg58
g62
sS'trial_loop.thisN'
p7768
I98
sg33
g6553
sg63
g64
sS'trial_loop.thisIndex'
p7769
g59
(g98
S'b\x00\x00\x00'
tRp7770
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7771
I0
sg6379
g6961
sS'block_loop.thisRepN'
p7772
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7773
I2
sg6384
g6553
sg55
g11
sS'block_loop.thisTrial'
p7774
Nsg69
Vy
sS'block_loop.thisTrialN'
p7775
I0
sg39
F0.7501878071734609
sg34
g752
(S'\x07\xdf\n\x11\x11\x11\x07\x01\xb1\x98'
tRp7776
sa(dp7777
S'trial_loop.thisTrialN'
p7778
I99
sg6370
g6683
sS'block_loop.thisIndex'
p7779
g6364
sg38
S'right'
p7780
sg58
g62
sS'trial_loop.thisN'
p7781
I99
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7782
g59
(g98
S'c\x00\x00\x00'
tRp7783
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7784
I0
sg6379
g6690
sS'block_loop.thisRepN'
p7785
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7786
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7787
Nsg69
Vy
sS'block_loop.thisTrialN'
p7788
I0
sg39
F0.70022468437673524
sg34
g752
(S'\x07\xdf\n\x11\x11\x11\x0c\r\xb7\xb8'
tRp7789
sa(dp7790
S'trial_loop.thisTrialN'
p7791
I100
sg6370
g7280
sS'block_loop.thisIndex'
p7792
g6364
sg38
S'right'
p7793
sg58
g62
sS'trial_loop.thisN'
p7794
I100
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7795
g59
(g98
S'd\x00\x00\x00'
tRp7796
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7797
I0
sg6379
g7287
sS'block_loop.thisRepN'
p7798
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7799
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7800
Nsg69
Vy
sS'block_loop.thisTrialN'
p7801
I0
sg39
F0.65015892692008492
sg34
g752
(S'\x07\xdf\n\x11\x11\x11\x12\t\x85\x80'
tRp7802
sa(dp7803
S'trial_loop.thisTrialN'
p7804
I101
sg6370
g6542
sS'block_loop.thisIndex'
p7805
g6364
sg38
S'left'
p7806
sg58
g62
sS'trial_loop.thisN'
p7807
I101
sg33
g6546
sg63
g64
sS'trial_loop.thisIndex'
p7808
g59
(g98
S'e\x00\x00\x00'
tRp7809
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7810
I0
sg6379
g6550
sS'block_loop.thisRepN'
p7811
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7812
I2
sg6384
g6553
sg55
g11
sS'block_loop.thisTrial'
p7813
Nsg69
Vy
sS'block_loop.thisTrialN'
p7814
I0
sg39
F0.83350719454756472
sg34
g752
(S'\x07\xdf\n\x11\x11\x11\x18\x04\xda0'
tRp7815
sa(dp7816
S'trial_loop.thisTrialN'
p7817
I102
sg6370
g6476
sS'block_loop.thisIndex'
p7818
g6364
sg38
S'left'
p7819
sg58
g62
sS'trial_loop.thisN'
p7820
I102
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7821
g59
(g98
S'f\x00\x00\x00'
tRp7822
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7823
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7824
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7825
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7826
Nsg69
Vy
sS'block_loop.thisTrialN'
p7827
I0
sg39
F0.71680873489367514
sg34
g752
(S'\x07\xdf\n\x11\x11\x11\x1e\x02\xce\xc0'
tRp7828
sa(dp7829
S'trial_loop.thisTrialN'
p7830
I103
sg6370
g6885
sS'block_loop.thisIndex'
p7831
g6364
sg38
S'left'
p7832
sg58
g62
sS'trial_loop.thisN'
p7833
I103
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7834
g59
(g98
S'g\x00\x00\x00'
tRp7835
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7836
I0
sg6379
g6892
sS'block_loop.thisRepN'
p7837
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7838
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7839
Nsg69
Vy
sS'block_loop.thisTrialN'
p7840
I0
sg39
F0.83382764276484522
sg34
g752
(S'\x07\xdf\n\x11\x11\x11#\x0e\x19`'
tRp7841
sa(dp7842
S'trial_loop.thisTrialN'
p7843
I104
sg6370
g7280
sS'block_loop.thisIndex'
p7844
g6364
sg38
S'right'
p7845
sg58
g62
sS'trial_loop.thisN'
p7846
I104
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7847
g59
(g98
S'h\x00\x00\x00'
tRp7848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7849
I0
sg6379
g7287
sS'block_loop.thisRepN'
p7850
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7851
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7852
Nsg69
Vy
sS'block_loop.thisTrialN'
p7853
I0
sg39
F0.583447823246388
sg34
g752
(S'\x07\xdf\n\x11\x11\x11)\x0c\r\xf0'
tRp7854
sa(dp7855
S'trial_loop.thisTrialN'
p7856
I105
sg6370
g6711
sS'block_loop.thisIndex'
p7857
g6364
sg38
S'left'
p7858
sg58
g62
sS'trial_loop.thisN'
p7859
I105
sg33
g6722
sg63
g64
sS'trial_loop.thisIndex'
p7860
g59
(g98
S'i\x00\x00\x00'
tRp7861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7862
I0
sg6379
g6719
sS'block_loop.thisRepN'
p7863
I2
sg6382
g6715
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7864
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p7865
Nsg69
Vy
sS'block_loop.thisTrialN'
p7866
I0
sg39
F0.68343165828810015
sg34
g752
(S'\x07\xdf\n\x11\x11\x11/\x061\xf0'
tRp7867
sa(dp7868
S'trial_loop.thisTrialN'
p7869
I106
sg6370
g6574
sS'block_loop.thisIndex'
p7870
g6364
sg38
S'right'
p7871
sg58
g62
sS'trial_loop.thisN'
p7872
I106
sg33
g6504
sg63
g64
sS'trial_loop.thisIndex'
p7873
g59
(g98
S'j\x00\x00\x00'
tRp7874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7875
I0
sg6379
g6581
sS'block_loop.thisRepN'
p7876
I2
sg6382
g6497
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7877
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7878
Nsg69
Vy
sS'block_loop.thisTrialN'
p7879
I0
sg39
F1.1335430881681532
sg34
g752
(S'\x07\xdf\n\x11\x11\x115\x01\xff\xb8'
tRp7880
sa(dp7881
S'trial_loop.thisTrialN'
p7882
I107
sg6370
g7556
sS'block_loop.thisIndex'
p7883
g6364
sg38
S'left'
p7884
sg58
g62
sS'trial_loop.thisN'
p7885
I107
sg33
g7433
sg63
g64
sS'trial_loop.thisIndex'
p7886
g59
(g98
S'k\x00\x00\x00'
tRp7887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7888
I0
sg6379
g7563
sS'block_loop.thisRepN'
p7889
I2
sg6382
g7433
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7890
I2
sg6384
g7440
sg55
g11
sS'block_loop.thisTrial'
p7891
Nsg69
Vy
sS'block_loop.thisTrialN'
p7892
I0
sg39
F0.61687165564217139
sg34
g752
(S'\x07\xdf\n\x11\x11\x11;\x04x\x88'
tRp7893
sa(dp7894
S'trial_loop.thisTrialN'
p7895
I108
sg6370
g7161
sS'block_loop.thisIndex'
p7896
g6364
sg38
S'left'
p7897
sg58
g62
sS'trial_loop.thisN'
p7898
I108
sg33
g7122
sg63
g64
sS'trial_loop.thisIndex'
p7899
g59
(g98
S'l\x00\x00\x00'
tRp7900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7901
I0
sg6379
g7168
sS'block_loop.thisRepN'
p7902
I2
sg6382
g7122
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7903
I2
sg6384
g7129
sg55
g11
sS'block_loop.thisTrial'
p7904
Nsg69
Vy
sS'block_loop.thisTrialN'
p7905
I0
sg39
F0.61674535799102159
sg34
g752
(S'\x07\xdf\n\x11\x11\x12\x04\x0e[\xc8'
tRp7906
sa(dp7907
S'trial_loop.thisTrialN'
p7908
I109
sg6370
g6510
sS'block_loop.thisIndex'
p7909
g6364
sg38
S'left'
p7910
sg58
g62
sS'trial_loop.thisN'
p7911
I109
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7912
g59
(g98
S'm\x00\x00\x00'
tRp7913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7914
I0
sg6379
g6518
sS'block_loop.thisRepN'
p7915
I2
sg6382
g6514
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7916
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7917
Nsg69
Vy
sS'block_loop.thisTrialN'
p7918
I0
sg39
F0.53355854038636608
sg34
g752
(S'\x07\xdf\n\x11\x11\x12\n\x08\xf8\xe0'
tRp7919
sa(dp7920
S'trial_loop.thisTrialN'
p7921
I110
sg6370
g7118
sS'block_loop.thisIndex'
p7922
g6364
sg38
S'left'
p7923
sg58
g62
sS'trial_loop.thisN'
p7924
I110
sg33
g7122
sg63
g64
sS'trial_loop.thisIndex'
p7925
g59
(g98
S'n\x00\x00\x00'
tRp7926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7927
I0
sg6379
g7126
sS'block_loop.thisRepN'
p7928
I2
sg6382
g7122
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7929
I2
sg6384
g7129
sg55
g11
sS'block_loop.thisTrial'
p7930
Nsg69
Vy
sS'block_loop.thisTrialN'
p7931
I0
sg39
F0.68351975303812651
sg34
g752
(S'\x07\xdf\n\x11\x11\x12\x10\x02eH'
tRp7932
sa(dp7933
S'trial_loop.thisTrialN'
p7934
I111
sg6370
g6425
sS'block_loop.thisIndex'
p7935
g6364
sg38
S'right'
p7936
sg58
g62
sS'trial_loop.thisN'
p7937
I111
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7938
g59
(g98
S'o\x00\x00\x00'
tRp7939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7940
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7941
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7942
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7943
Nsg69
Vy
sS'block_loop.thisTrialN'
p7944
I0
sg39
F0.61693836817175907
sg34
g752
(S'\x07\xdf\n\x11\x11\x12\x15\ruP'
tRp7945
sa(dp7946
S'trial_loop.thisTrialN'
p7947
I112
sg6370
g6812
sS'block_loop.thisIndex'
p7948
g6364
sg38
S'right'
p7949
sg58
g62
sS'trial_loop.thisN'
p7950
I112
sg33
g6722
sg63
g64
sS'trial_loop.thisIndex'
p7951
g59
(g98
S'p\x00\x00\x00'
tRp7952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7953
I0
sg6379
g6819
sS'block_loop.thisRepN'
p7954
I2
sg6382
g6715
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7955
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p7956
Nsg69
Vy
sS'block_loop.thisTrialN'
p7957
I0
sg39
F0.76679951202913799
sg34
g752
(S'\x07\xdf\n\x11\x11\x12\x1b\x08\x12h'
tRp7958
sa(dp7959
S'trial_loop.thisTrialN'
p7960
I113
sg6370
g6527
sS'block_loop.thisIndex'
p7961
g6364
sg38
S'left'
p7962
sg58
g62
sS'trial_loop.thisN'
p7963
I113
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7964
g59
(g98
S'q\x00\x00\x00'
tRp7965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7966
I0
sg6379
g6534
sS'block_loop.thisRepN'
p7967
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7968
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7969
Nsg69
Vy
sS'block_loop.thisTrialN'
p7970
I0
sg39
F1.1001782707025995
sg34
g752
(S'\x07\xdf\n\x11\x11\x12!\x05\x14\xc8'
tRp7971
sa(dp7972
S'trial_loop.thisTrialN'
p7973
I114
sg6370
g6954
sS'block_loop.thisIndex'
p7974
g6364
sg38
S'left'
p7975
sg58
g62
sS'trial_loop.thisN'
p7976
I114
sg33
g6546
sg63
g64
sS'trial_loop.thisIndex'
p7977
g59
(g98
S'r\x00\x00\x00'
tRp7978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7979
I0
sg6379
g6961
sS'block_loop.thisRepN'
p7980
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7981
I2
sg6384
g6553
sg55
g11
sS'block_loop.thisTrial'
p7982
Nsg69
Vy
sS'block_loop.thisTrialN'
p7983
I0
sg39
F1.8505533861316508
sg34
g752
(S"\x07\xdf\n\x11\x11\x12'\x07\x10\x98"
tRp7984
sa(dp7985
S'trial_loop.thisTrialN'
p7986
I115
sg6370
g7347
sS'block_loop.thisIndex'
p7987
g6364
sg38
S'left'
p7988
sg58
g62
sS'trial_loop.thisN'
p7989
I115
sg33
g7351
sg63
g64
sS'trial_loop.thisIndex'
p7990
g59
(g98
S's\x00\x00\x00'
tRp7991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7992
I0
sg6379
g7355
sS'block_loop.thisRepN'
p7993
I2
sg6382
g7351
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7994
I2
sg6384
g7358
sg55
g11
sS'block_loop.thisTrial'
p7995
Nsg69
Vy
sS'block_loop.thisTrialN'
p7996
I0
sg39
F0.66689436356136866
sg34
g752
(S'\x07\xdf\n\x11\x11\x12.\x05;\xd8'
tRp7997
sa(dp7998
S'trial_loop.thisTrialN'
p7999
I116
sg6370
g6741
sS'block_loop.thisIndex'
p8000
g6364
sg38
S'right'
p8001
sg58
g62
sS'trial_loop.thisN'
p8002
I116
sg33
g6631
sg63
g64
sS'trial_loop.thisIndex'
p8003
g59
(g98
S't\x00\x00\x00'
tRp8004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8005
I0
sg6379
g6748
sS'block_loop.thisRepN'
p8006
I2
sg6382
g6631
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8007
I2
sg6384
g6625
sg55
g11
sS'block_loop.thisTrial'
p8008
Nsg69
Vy
sS'block_loop.thisTrialN'
p8009
I0
sg39
F0.61687165564217139
sg34
g752
(S'\x07\xdf\n\x11\x11\x124\x00\x90\x88'
tRp8010
sa(dp8011
S'trial_loop.thisTrialN'
p8012
I117
sg6370
g6459
sS'block_loop.thisIndex'
p8013
g6364
sg38
S'left'
p8014
sg58
g62
sS'trial_loop.thisN'
p8015
I117
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8016
g59
(g98
S'u\x00\x00\x00'
tRp8017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8018
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8019
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8020
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8021
Nsg69
Vy
sS'block_loop.thisTrialN'
p8022
I0
sg39
F3.4000684801267198
sg34
g752
(S'\x07\xdf\n\x11\x11\x129\n\xae`'
tRp8023
sa(dp8024
S'trial_loop.thisTrialN'
p8025
I118
sg6370
g6812
sS'block_loop.thisIndex'
p8026
g6364
sg38
S'right'
p8027
sg58
g62
sS'trial_loop.thisN'
p8028
I118
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p8029
g59
(g98
S'v\x00\x00\x00'
tRp8030
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8031
I0
sg6379
g6819
sS'block_loop.thisRepN'
p8032
I2
sg6382
g6715
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8033
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p8034
Nsg69
Vy
sS'block_loop.thisTrialN'
p8035
I0
sg39
F0.76676187932025641
sg34
g752
(S'\x07\xdf\n\x11\x11\x13\x06\x01\xe4`'
tRp8036
sa(dp8037
S'trial_loop.thisTrialN'
p8038
I119
sg6370
g6954
sS'block_loop.thisIndex'
p8039
g6364
sg38
S'left'
p8040
sg58
g62
sS'trial_loop.thisN'
p8041
I119
sg33
g6546
sg63
g64
sS'trial_loop.thisIndex'
p8042
g59
(g98
S'w\x00\x00\x00'
tRp8043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8044
I0
sg6379
g6961
sS'block_loop.thisRepN'
p8045
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8046
I2
sg6384
g6553
sg55
g11
sS'block_loop.thisTrial'
p8047
Nsg69
Vy
sS'block_loop.thisTrialN'
p8048
I0
sg39
F1.1001061413444404
sg34
g752
(S'\x07\xdf\n\x11\x11\x13\x0b\x0e%\x18'
tRp8049
sa(dp8050
S'trial_loop.thisTrialN'
p8051
I120
sg6370
g7118
sS'block_loop.thisIndex'
p8052
g6364
sg38
S'right'
p8053
sg58
g62
sS'trial_loop.thisN'
p8054
I120
sg33
g7129
sg63
g64
sS'trial_loop.thisIndex'
p8055
g59
(g98
S'x\x00\x00\x00'
tRp8056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8057
I0
sg6379
g7126
sS'block_loop.thisRepN'
p8058
I2
sg6382
g7122
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8059
I2
sg6384
g7129
sg55
g11
sS'block_loop.thisTrial'
p8060
Nsg69
Vy
sS'block_loop.thisTrialN'
p8061
I0
sg39
F1.3168446000054246
sg34
g752
(S'\x07\xdf\n\x11\x11\x13\x12\x00\xe2\x90'
tRp8062
sa(dp8063
S'trial_loop.thisTrialN'
p8064
I121
sg6370
g6425
sS'block_loop.thisIndex'
p8065
g6364
sg38
S'left'
p8066
sg58
g62
sS'trial_loop.thisN'
p8067
I121
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8068
g59
(g98
S'y\x00\x00\x00'
tRp8069
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8070
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8071
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8072
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8073
Nsg69
Vy
sS'block_loop.thisTrialN'
p8074
I0
sg39
F0.66684304623049684
sg34
g752
(S'\x07\xdf\n\x11\x11\x13\x18\x065\xd8'
tRp8075
sa(dp8076
S'trial_loop.thisTrialN'
p8077
I122
sg6370
g6653
sS'block_loop.thisIndex'
p8078
g6364
sg38
S'left'
p8079
sg58
g62
sS'trial_loop.thisN'
p8080
I122
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p8081
g59
(g98
S'z\x00\x00\x00'
tRp8082
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8083
I0
sg6379
g6661
sS'block_loop.thisRepN'
p8084
I2
sg6382
g6657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8085
I2
sg6384
g6664
sg55
g11
sS'block_loop.thisTrial'
p8086
Nsg69
Vy
sS'block_loop.thisTrialN'
p8087
I0
sg39
F0.61681178542403359
sg34
g752
(S'\x07\xdf\n\x11\x11\x13\x1e\x01\xc9\x08'
tRp8088
sa(dp8089
S'trial_loop.thisTrialN'
p8090
I123
sg6370
g6574
sS'block_loop.thisIndex'
p8091
g6364
sg38
S'right'
p8092
sg58
g62
sS'trial_loop.thisN'
p8093
I123
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8094
g59
(g98
S'{\x00\x00\x00'
tRp8095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8096
I0
sg6379
g6581
sS'block_loop.thisRepN'
p8097
I2
sg6382
g6497
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8098
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8099
Nsg69
Vy
sS'block_loop.thisTrialN'
p8100
I0
sg39
F0.66685273950497503
sg34
g752
(S'\x07\xdf\n\x11\x11\x13#\x0b\xa8`'
tRp8101
sa(dp8102
S'trial_loop.thisTrialN'
p8103
I124
sg6370
g6638
sS'block_loop.thisIndex'
p8104
g6364
sg38
S'left'
p8105
sg58
g62
sS'trial_loop.thisN'
p8106
I124
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p8107
g59
(g98
S'|\x00\x00\x00'
tRp8108
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8109
I0
sg6379
g6645
sS'block_loop.thisRepN'
p8110
I2
sg6382
g6608
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8111
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p8112
Nsg69
Vy
sS'block_loop.thisTrialN'
p8113
I0
sg39
F0.76683628944920201
sg34
g752
(S'\x07\xdf\n\x11\x11\x13)\x06\xfd\x10'
tRp8114
sa(dp8115
S'trial_loop.thisTrialN'
p8116
I125
sg6370
g6621
sS'block_loop.thisIndex'
p8117
g6364
sg38
S'left'
p8118
sg58
g62
sS'trial_loop.thisN'
p8119
I125
sg33
g6625
sg63
g64
sS'trial_loop.thisIndex'
p8120
g59
(g98
S'}\x00\x00\x00'
tRp8121
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8122
I0
sg6379
g6629
sS'block_loop.thisRepN'
p8123
I2
sg6382
g6631
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8124
I2
sg6384
g6625
sg55
g11
sS'block_loop.thisTrial'
p8125
Nsg69
Vy
sS'block_loop.thisTrialN'
p8126
I0
sg39
F0.80048563300078968
sg34
g752
(S'\x07\xdf\n\x11\x11\x13/\x03\xfb\x88'
tRp8127
sa(dp8128
S'trial_loop.thisTrialN'
p8129
I126
sg6370
g6459
sS'block_loop.thisIndex'
p8130
g6364
sg38
S'left'
p8131
sg58
g62
sS'trial_loop.thisN'
p8132
I126
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8133
g59
(g98
S'~\x00\x00\x00'
tRp8134
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8135
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8136
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8137
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8138
Nsg69
Vy
sS'block_loop.thisTrialN'
p8139
I0
sg39
F0.80017231219062523
sg34
g752
(S'\x07\xdf\n\x11\x11\x135\x01s\x18'
tRp8140
sa(dp8141
S'trial_loop.thisTrialN'
p8142
I127
sg6370
g6527
sS'block_loop.thisIndex'
p8143
g6364
sg38
S'left'
p8144
sg58
g62
sS'trial_loop.thisN'
p8145
I127
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8146
g59
(g98
S'\x7f\x00\x00\x00'
tRp8147
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8148
I0
sg6379
g6534
sS'block_loop.thisRepN'
p8149
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8150
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8151
Nsg69
Vy
sS'block_loop.thisTrialN'
p8152
I0
sg39
F1.2001162052438303
sg34
g752
(S'\x07\xdf\n\x11\x11\x13:\x0e0\xd0'
tRp8153
sa(dp8154
S'trial_loop.thisTrialN'
p8155
I128
sg6370
S'22-daim.png'
p8156
sS'block_loop.thisIndex'
p8157
g6364
sg38
S'right'
p8158
sg58
g62
sS'trial_loop.thisN'
p8159
I128
sg33
g7351
sg63
g64
sS'trial_loop.thisIndex'
p8160
g59
(g98
S'\x80\x00\x00\x00'
tRp8161
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8162
I0
sg6379
S'7-olives.png'
p8163
sS'block_loop.thisRepN'
p8164
I2
sg6382
g7351
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6384
g7358
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vy
sS'block_loop.thisTrialN'
p8167
I0
sg39
F0.90060859502591484
sg34
g752
(S'\x07\xdf\n\x11\x11\x14\x05\x02Y\x90'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g6926
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'left'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6786
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g6933
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6792
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6384
g6786
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vy
sS'block_loop.thisTrialN'
p8180
I0
sg39
F0.74984968298667809
sg34
g752
(S'\x07\xdf\n\x11\x11\x14\x0b\x01~\xd0'
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g6812
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'right'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g6819
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6715
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vy
sS'block_loop.thisTrialN'
p8193
I0
sg39
F0.71684437192834594
sg34
g752
(S'\x07\xdf\n\x11\x11\x14\x10\rFp'
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g7012
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'right'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g7019
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6514
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vy
sS'block_loop.thisTrialN'
p8206
I0
sg39
F0.88387344348120678
sg34
g752
(S'\x07\xdf\n\x11\x11\x14\x16\t\x8dP'
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g6885
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'left'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g6892
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vy
sS'block_loop.thisTrialN'
p8219
I0
sg39
F0.68340856549002638
sg34
g752
(S'\x07\xdf\n\x11\x11\x14\x1c\x089x'
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g8156
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'left'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g7351
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g8163
sS'block_loop.thisRepN'
p8229
I2
sg6382
g7351
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6384
g7358
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vy
sS'block_loop.thisTrialN'
p8232
I0
sg39
F0.83347811472685862
sg34
g752
(S'\x07\xdf\n\x11\x11\x14"\x04\x07@'
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g6954
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'left'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6546
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g6961
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6384
g6553
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vy
sS'block_loop.thisTrialN'
p8245
I0
sg39
F1.1334780862171101
sg34
g752
(S'\x07\xdf\n\x11\x11\x14(\x01\xfb\xd0'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g8156
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'left'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g7351
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g8163
sS'block_loop.thisRepN'
p8255
I2
sg6382
g7351
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6384
g7358
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vy
sS'block_loop.thisTrialN'
p8258
I0
sg39
F0.58345010401717445
sg34
g752
(S'\x07\xdf\n\x11\x11\x14.\x04t\xa0'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g7161
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'left'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g7122
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g7168
sS'block_loop.thisRepN'
p8268
I2
sg6382
g7122
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6384
g7129
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vy
sS'block_loop.thisTrialN'
p8271
I0
sg39
F0.96683817108441872
sg34
g752
(S'\x07\xdf\n\x11\x11\x143\r\xda\xe0'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g7459
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'left'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g7469
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g7467
sS'block_loop.thisRepN'
p8281
I2
sg6382
g7469
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6384
g7463
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vy
sS'block_loop.thisTrialN'
p8284
I0
sg39
F0.51691347926589515
sg34
g752
(S'\x07\xdf\n\x11\x11\x149\r\xf2P'
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g7556
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'left'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g7440
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g7563
sS'block_loop.thisRepN'
p8294
I2
sg6382
g7433
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6384
g7440
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vy
sS'block_loop.thisTrialN'
p8297
I0
sg39
F0.66690405683493736
sg34
g752
(S'\x07\xdf\n\x11\x11\x15\x03\x06\xe5\xa0'
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g6493
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'left'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6497
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vy
sS'block_loop.thisTrialN'
p8310
I0
sg39
F1.3334306461965753
sg34
g752
(S'\x07\xdf\n\x11\x11\x15\t\x02t\xe8'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g6408
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'right'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vy
sS'block_loop.thisTrialN'
p8323
I0
sg39
F1.933345060294414
sg34
g752
(S'\x07\xdf\n\x11\x11\x15\x0f\x08\x06\xb0'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g7012
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'right'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g7019
sS'block_loop.thisRepN'
p8333
I2
sg6382
g6514
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vy
sS'block_loop.thisTrialN'
p8336
I0
sg39
F0.8668181288157939
sg34
g752
(S'\x07\xdf\n\x11\x11\x15\x16\x07\x9d8'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g6442
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'left'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vy
sS'block_loop.thisTrialN'
p8349
I0
sg39
F0.49998645792675234
sg34
g752
(S'\x07\xdf\n\x11\x11\x15\x1c\x06\n\xe0'
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g6476
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'left'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vy
sS'block_loop.thisTrialN'
p8362
I0
sg39
F0.85018960328034154
sg34
g752
(S'\x07\xdf\n\x11\x11\x15!\x0e\x01\xf0'
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g7515
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'right'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g7463
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g7522
sS'block_loop.thisRepN'
p8372
I2
sg6382
g7469
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g7463
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vy
sS'block_loop.thisTrialN'
p8375
I0
sg39
F1.4834377593488171
sg34
g752
(S"\x07\xdf\n\x11\x11\x15'\x0co\x98"
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g6969
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'left'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g6976
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6846
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vy
sS'block_loop.thisTrialN'
p8388
I0
sg39
F0.60014420169773075
sg34
g752
(S'\x07\xdf\n\x11\x11\x15.\x04\xe2\x00'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g6408
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'right'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vy
sS'block_loop.thisTrialN'
p8401
I0
sg39
F0.54994245331636193
sg34
g752
(S'\x07\xdf\n\x11\x11\x153\x0e\x86\xc0'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g6621
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'left'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6631
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g6629
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6631
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g6625
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vy
sS'block_loop.thisTrialN'
p8414
I0
sg39
F0.83343991182482569
sg34
g752
(S'\x07\xdf\n\x11\x11\x159\x081\xa8'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g7280
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'right'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g7287
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vy
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.56721729211585625
sg34
g752
(S'\x07\xdf\n\x11\x11\x16\x03\x06&8'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g6493
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'left'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6497
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vy
sS'block_loop.thisTrialN'
p8440
I0
sg39
F0.88347601926852803
sg34
g752
(S'\x07\xdf\n\x11\x11\x16\t\x00\x0b\xb8'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6969
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'left'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6976
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6846
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vy
sS'block_loop.thisTrialN'
p8453
I0
sg39
F0.6336011052617323
sg34
g752
(S'\x07\xdf\n\x11\x11\x16\x0e\x0e4\xb8'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g6371
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'left'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vy
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.75009629126816435
sg34
g752
(S'\x07\xdf\n\x11\x11\x16\x14\t\x10P'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g6638
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'right'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g6645
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6608
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vy
sS'block_loop.thisTrialN'
p8479
I0
sg39
F0.91689985166431143
sg34
g752
(S'\x07\xdf\n\x11\x11\x16\x1a\x05\xd0H'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g6574
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'right'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6504
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g6581
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6497
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vy
sS'block_loop.thisTrialN'
p8492
I0
sg39
F0.86687514807181287
sg34
g752
(S'\x07\xdf\n\x11\x11\x16 \x04\xf5\x88'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6459
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'left'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vy
sS'block_loop.thisTrialN'
p8505
I0
sg39
F2.1672323451994089
sg34
g752
(S'\x07\xdf\n\x11\x11\x16&\x03c0'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g6493
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'left'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6497
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vy
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.63348050953572965
sg34
g752
(S'\x07\xdf\n\x11\x11\x16-\x06\x8b\xc8'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g6442
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'left'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vy
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.81685985265630734
sg34
g752
(S'\x07\xdf\n\x11\x11\x163\x01g`'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g6493
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'left'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6497
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vy
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.55024579575638199
sg34
g752
(S'\x07\xdf\n\x11\x11\x168\x0e_\xb0'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g7429
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'right'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g7440
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g7437
sS'block_loop.thisRepN'
p8554
I2
sg6382
g7433
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g7440
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vy
sS'block_loop.thisTrialN'
p8557
I0
sg39
F0.6335235590731827
sg34
g752
(S'\x07\xdf\n\x11\x11\x17\x02\x08\n\x98'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6604
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'left'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6612
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6608
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vy
sS'block_loop.thisTrialN'
p8570
I0
sg39
F0.61691898162462167
sg34
g752
(S'\x07\xdf\n\x11\x11\x17\x08\x02\xe2H'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6885
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'left'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6892
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vy
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.51711675291244319
sg34
g752
(S'\x07\xdf\n\x11\x11\x17\r\x0c\xc5\x88'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g6711
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'left'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g6719
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6715
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vy
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.66686556883632875
sg34
g752
(S'\x07\xdf\n\x11\x11\x17\x13\x05\xf3p'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g7347
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'left'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g7351
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g7355
sS'block_loop.thisRepN'
p8606
I2
sg6382
g7351
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g7358
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vy
sS'block_loop.thisTrialN'
p8609
I0
sg39
F0.53345391005314013
sg34
g752
(S'\x07\xdf\n\x11\x11\x17\x19\x01H '
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g6459
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'left'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vy
sS'block_loop.thisTrialN'
p8622
I0
sg39
F0.68348668186990835
sg34
g752
(S'\x07\xdf\n\x11\x11\x17\x1e\t\xf6\xc8'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g6711
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'left'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6722
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g6719
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6715
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vy
sS'block_loop.thisTrialN'
p8635
I0
sg39
F2.0500800122699729
sg34
g752
(S'\x07\xdf\n\x11\x11\x17$\x05\xc8x'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g7459
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'left'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g7463
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g7467
sS'block_loop.thisRepN'
p8645
I2
sg6382
g7469
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g7463
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vy
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.80019511989303282
sg34
g752
(S'\x07\xdf\n\x11\x11\x17+\x07\x08\xc8'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6711
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'left'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6719
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6715
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vy
sS'block_loop.thisTrialN'
p8661
I0
sg39
F0.71688514069592202
sg34
g752
(S'\x07\xdf\n\x11\x11\x171\x04\x84@'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g7459
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'left'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g7463
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g7467
sS'block_loop.thisRepN'
p8671
I2
sg6382
g7469
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g7463
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vy
sS'block_loop.thisTrialN'
p8674
I0
sg39
F0.65018914712618425
sg34
g752
(S'\x07\xdf\n\x11\x11\x177\x00\x8c\xa0'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g7012
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'right'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g7019
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6514
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vy
sS'block_loop.thisTrialN'
p8687
I0
sg39
F0.56687888283249777
sg34
g752
(S'\x07\xdf\n\x11\x11\x18\x00\x0b#\x90'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g6782
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'right'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6792
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g6790
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6792
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g6786
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vy
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.84987998872202297
sg34
g752
(S'\x07\xdf\n\x11\x11\x18\x06\x05\x0c\xf8'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g7012
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'right'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g7019
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6514
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vy
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.90016013857893995
sg34
g752
(S'\x07\xdf\n\x11\x11\x18\x0c\x03< '
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g7429
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'right'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g7433
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g7437
sS'block_loop.thisRepN'
p8723
I2
sg6382
g7433
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g7440
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vy
sS'block_loop.thisTrialN'
p8726
I0
sg39
F3.0834964321620646
sg34
g752
(S'\x07\xdf\n\x11\x11\x18\x12\x02"\xe0'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g7515
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'right'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g7469
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g7522
sS'block_loop.thisRepN'
p8736
I2
sg6382
g7469
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g7463
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vy
sS'block_loop.thisTrialN'
p8739
I0
sg39
F0.70008270643029391
sg34
g752
(S'\x07\xdf\n\x11\x11\x18\x1a\x03\xd8`'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g6542
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'right'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6553
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g6550
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g6553
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vy
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.81688437093635002
sg34
g752
(S'\x07\xdf\n\x11\x11\x18\x1f\x0f&\xe8'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g6782
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'right'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6792
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g6790
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6792
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6786
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vy
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.56651452978894667
sg34
g752
(S'\x07\xdf\n\x11\x11\x18%\x0c\xdc\xf8'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6653
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'left'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6661
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6664
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vy
sS'block_loop.thisTrialN'
p8778
I0
sg39
F0.55019818467826553
sg34
g752
(S'\x07\xdf\n\x11\x11\x18+\x06\xc2x'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g6510
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'left'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g6518
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6514
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vy
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.61682090850536042
sg34
g752
(S'\x07\xdf\n\x11\x11\x181\x00m`'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g6638
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'left'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g6645
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6608
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vy
sS'block_loop.thisTrialN'
p8804
I0
sg39
F0.5672423805881408
sg34
g752
(S'\x07\xdf\n\x11\x11\x186\nL\xb8'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6425
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'left'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vy
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.63344715327093581
sg34
g752
(S'\x07\xdf\n\x11\x11\x19\x00\x046 '
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g6542
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'left'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6546
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g6550
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g6553
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vy
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.56686120686390495
sg34
g752
(S'\x07\xdf\n\x11\x11\x19\x05\x0eP\x10'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g6589
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'right'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g6596
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vy
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.83352230464970489
sg34
g752
(S'\x07\xdf\n\x11\x11\x19\x0b\x089x'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g8156
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'left'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g7351
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g8163
sS'block_loop.thisRepN'
p8853
I2
sg6382
g7351
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g7358
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vy
sS'block_loop.thisTrialN'
p8856
I0
sg39
F0.96688948841438105
sg34
g752
(S'\x07\xdf\n\x11\x11\x19\x11\x06* '
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g6391
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'right'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vy
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.56677995442532847
sg34
g752
(S'\x07\xdf\n\x11\x11\x19\x17\x06A\x90'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g8156
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'left'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g7351
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g8163
sS'block_loop.thisRepN'
p8879
I2
sg6382
g7351
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g7358
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vy
sS'block_loop.thisTrialN'
p8882
I0
sg39
F0.61687992343468068
sg34
g752
(S'\x07\xdf\n\x11\x11\x19\x1d\x00*\xf8'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g7556
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'left'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g7433
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g7563
sS'block_loop.thisRepN'
p8892
I2
sg6382
g7433
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g7440
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vy
sS'block_loop.thisTrialN'
p8895
I0
sg39
F0.65011473699723865
sg34
g752
(S'\x07\xdf\n\x11\x11\x19"\n\nP'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g6510
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'left'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g6518
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6514
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vy
sS'block_loop.thisTrialN'
p8908
I0
sg39
F0.5835222333753336
sg34
g752
(S'\x07\xdf\n\x11\x11\x19(\x05$h'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6812
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'right'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6819
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6715
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vy
sS'block_loop.thisTrialN'
p8921
I0
sg39
F0.93352809210500709
sg34
g752
(S'\x07\xdf\n\x11\x11\x19-\x0e\x8a\xa8'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g6997
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'right'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g7004
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6664
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vy
sS'block_loop.thisTrialN'
p8934
I0
sg39
F1.3667652434569391
sg34
g752
(S'\x07\xdf\n\x11\x11\x193\x0e%\x18'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g6371
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'left'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vy
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.60020720797456306
sg34
g752
(S'\x07\xdf\n\x11\x11\x19:\x04\xed\xb8'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g7347
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'left'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g7351
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g7355
sS'block_loop.thisRepN'
p8957
I2
sg6382
g7351
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g7358
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vy
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.48394722639841348
sg34
g752
(S'\x07\xdf\n\x11\x11\x1a\x03\x0e\x92x'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g7515
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'left'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g7469
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g7522
sS'block_loop.thisRepN'
p8970
I2
sg6382
g7469
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g7463
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vy
sS'block_loop.thisTrialN'
p8973
I0
sg39
F0.80011101649051852
sg34
g752
(S'\x07\xdf\n\x11\x11\x1a\t\x07GH'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g6969
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'left'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g6976
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6846
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vy
sS'block_loop.thisTrialN'
p8986
I0
sg39
F2.4500897625639482
sg34
g752
(S'\x07\xdf\n\x11\x11\x1a\x0f\x04\xc2\xc0'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g6997
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'right'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g7004
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6664
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vy
sS'block_loop.thisTrialN'
p8999
I0
sg39
F1.0668505157536856
sg34
g752
(S'\x07\xdf\n\x11\x11\x1a\x16\x0b\xf6\x80'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g6827
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'right'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g6834
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vy
sS'block_loop.thisTrialN'
p9012
I0
sg39
F0.7501909432330649
sg34
g752
(S'\x07\xdf\n\x11\x11\x1a\x1c\r} '
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g7161
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'left'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g7129
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g7168
sS'block_loop.thisRepN'
p9022
I2
sg6382
g7122
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g7129
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vy
sS'block_loop.thisTrialN'
p9025
I0
sg39
F0.60058866679537459
sg34
g752
(S'\x07\xdf\n\x11\x11\x1a"\n=\x18'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g6926
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'right'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6792
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g6933
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6792
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g6786
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vy
sS'block_loop.thisTrialN'
p9038
I0
sg39
F0.53323010947497096
sg34
g752
(S'\x07\xdf\n\x11\x11\x1a(\x04\x9f\x98'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g6589
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'left'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g6596
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vy
sS'block_loop.thisTrialN'
p9051
I0
sg39
F0.73342357580804673
sg34
g752
(S'\x07\xdf\n\x11\x11\x1a-\rN@'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g7118
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'right'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g7129
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g7126
sS'block_loop.thisRepN'
p9061
I2
sg6382
g7122
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g7129
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vy
sS'block_loop.thisTrialN'
p9064
I0
sg39
F2.6667130423284107
sg34
g752
(S'\x07\xdf\n\x11\x11\x1a3\t\xd3\xa0'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g7556
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'left'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g7433
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g7563
sS'block_loop.thisRepN'
p9074
I2
sg6382
g7433
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g7440
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vy
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.46677587754766137
sg34
g752
(S'\x07\xdf\n\x11\x11\x1a;\x05\x1c\x98'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g7347
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'left'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g7358
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g7355
sS'block_loop.thisRepN'
p9087
I2
sg6382
g7351
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g7358
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vy
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.56689912466936221
sg34
g752
(S'\x07\xdf\n\x11\x11\x1b\x04\x0c\xd9\x10'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vl
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vy
sa(dp9098
g63
g64
sg43
I155
sg56
Vl
sg57
Vn
sg42
I445
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vy
sa(dp9099
g63
g64
sg43
I155
sg55
g11
sg56
Vl
sg45
F2.7000000000000002
sg42
I445
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I00
sg48
I25
sg47
g507
sg51
F29.449999999999999
sg46
F0.21999999999999892
sg65
g66
sg67
g68
sg50
I0
sg69
Vy
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I81429328
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'=\n\x17@33\xb3?\x8f\xc2\xf5?\xcd\xccL?\x8f\xc2u?33\xf3?H\xe1\xba?\x00\x00\x00\x00\n\xd7#?\\\x8fB?\xaeGa>\\\x8f\x82?\x14\xae\x87?\n\xd7#?{\x14.?\xe1z\x14?)\\\x0f>\xc3\xf5(?333?=\nW?q=\xca?\xe1z\x14?R\xb8\x9e?{\x14\xae?\n\xd7#?\\\x8f\xc2>\xc3\xf5\xa8?\x9a\x99\x19?\xaeGa?\xf6(\xdc?\x1f\x85\xab?\xd7\xa3p?\x00\x00\x00\x00\x9a\x99\x99>\xc3\xf5(?\xf6(\x9c?333?q=\n?\x00\x00\x00?333?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'\x0e-b@u\x93\xe8?/\xddL@\xf8S\xd3?\x10X\xd5@/\xdd\x1c@\xcb\xa1\xf9@\xbaI\xcc@\x91\xed\xac?\xaa\xf1\xf6@\xb6\xf3\xdd?\x87\x16\x99@+\x87\xc6?\xf2\xd2\x1d@d;\xb3@\xdb\xf9~@!\xb0\x1a@\x91\xed\xac?\xee|\xbf@\xc5 \xa0?\x1dZ\xe4?\xfc\xa99@\xee|\x97@\x0e-\xc2?\x83\xc0\xca?\xee|G@\xdb\xf9\x0e@\xcd\xcc\x18A/\xdd,@\xb6\xf3\xbd?\xf8S\xf3?D\x8b\xc8@\xfc\xa9\x19@\x1dZ\xe4?\x83\xc0\xea?\xa8\xc6\x0b@!\xb0:@\x98n\xa6@T\xe3-@^\xba\xd9?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x000A\x00\x00 A\x00\x00\x18B\x00\x00\x08B\x00\x00\x00A\x00\x00\x14B\x00\x00\x80@\x00\x00\x80?\x00\x00`A\x00\x00\xb8A\x00\x00\xf8A\x00\x00\x00@\x00\x00\xf0A\x00\x00\xd0A\x00\x00\xa8A\x00\x00pA\x00\x00\xa0A\x00\x00PA\x00\x00\xe0@\x00\x00\xb0A\x00\x00\x88A\x00\x00\xc0@\x00\x00@A\x00\x00\x1cB\x00\x00\x0cB\x00\x00\x90A\x00\x00\x04B\x00\x00\x00\x00\x00\x00\x10B\x00\x00\xe8A\x00\x00\xc8A\x00\x00\xc0A\x00\x00@@\x00\x00\x00B\x00\x00\xd8A\x00\x00\x10A\x00\x00\x98A\x00\x00\x80A\x00\x00\xa0@\x00\x00\xe0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'ff\xa6?33\xb3?ff\xe6?\x9a\x99\x99?\x9a\x99\x99?\x9a\x99\xd9?\x00\x00\xc0?\x00\x00\x00@\x00\x00\xc0?ff\xa6?33\xb3?\x00\x00\x00@\x00\x00\x00@\xcd\xcc\x8c?33\xf3?33\xb3?ff\xe6?\x9a\x99\x99?\x9a\x99\x99?\x9a\x99\x99?ff\xe6?\x00\x00\xc0?ff\xe6?ff\xe6?\x9a\x99\xd9?ff\xe6?\x00\x00\x00@\x9a\x99\x99?ff\xa6?\x9a\x99\x99?\xcd\xcc\xcc?\xcd\xcc\x8c?\xcd\xcc\x8c?ff\xe6?\x9a\x99\xd9?ff\xe6?\xcd\xcc\xcc?ff\xa6?ff\xe6?\x00\x00\xc0?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\x1b\x00\x00\x00\x07\x00\x00\x00\x0b\x00\x00\x00 \x00\x00\x00\x06\x00\x00\x00&\x00\x00\x00\x15\x00\x00\x00\x12\x00\x00\x00\x04\x00\x00\x00#\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x11\x00\x00\x00\x08\x00\x00\x00\x0f\x00\x00\x00%\x00\x00\x00\x14\x00\x00\x00\x19\x00\x00\x00$\x00\x00\x00\x10\x00\x00\x00\x0e\x00\x00\x00\x13\x00\x00\x00\t\x00\x00\x00\x1f\x00\x00\x00\x1e\x00\x00\x00\r\x00\x00\x00"\x00\x00\x00\'\x00\x00\x00\x1d\x00\x00\x00\x0c\x00\x00\x00\n\x00\x00\x00!\x00\x00\x00\x1a\x00\x00\x00\x03\x00\x00\x00\x18\x00\x00\x00\x1c\x00\x00\x00\x05\x00\x00\x00\x02\x00\x00\x00\x17\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g179
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g172
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g368
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g340
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g158
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g361
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g130
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g109
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g200
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g263
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g319
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g116
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g312
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g284
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g249
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g207
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g242
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g193
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g151
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g256
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g221
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g144
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g186
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g375
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g347
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g228
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g333
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g102
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g354
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g305
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g277
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g270
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g123
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g326
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g291
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g165
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g235
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g214
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g137
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g298
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I81429328
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xc0@\x00\x00\xc0@ff\x06@\x00\x00\x80?ff\x86@\x00\x00\x80?\x00\x00\x80?\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\xcd\xcc\x9c@\x00\x00\xc0@\x00\x00\xc0@\xcd\xccL@ffF@\x00\x00 @\x00\x00\xc0@\xcd\xcc\x8c@\x00\x00\x80@\x00\x00\xc0@ff\x96@\x00\x00\xc0@33\x83@\x00\x00\xc0@\x9a\x99y@\x00\x00`@\xcd\xcc\x8c@\x9a\x99\x89@\x00\x00\x90@ff\x96@\x00\x00\xc0@\xcd\xcc\x8c@\xcd\xcc\x8c@ff\x96@\xcd\xcc\x8c@\x00\x00@@\x00\x00\xc0@33\x13@33\x93@33\x83@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S"\x10V\x95?a,\x93?\xa3ff@\xac\xbd\xfb?^I\xe4?\xedf\x96@\xc3\xf0\xae?\x81F\x84?s'b?k\x83w?&yW@\xc9@\xb3?)\xdf\xbd?\xd2\x01\x80?Q\xdb]@\xd6\xde\xfd?Dh\x86?\x1aW%@n\xbf{?/~w?H4\x03@R\x13Q?U\x9a\xf9?\x9a4\xb3?q\x9d\xd9?$\x8c\xa8?\x17W\x95?O\x8a\x88?\x1fF\xa4?\xb4\x11\xd1?\xfeXU?.\x8c\xa8?D\x17\x91?\x17\x02@?\x9b\xbbK@\xc8e\xe6@\xa8\x9dY?\xdf\xfc.?`\x95\x99?\x9d\xa7*?"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80@\x9a\x999@\x9a\x99y@33\x83@33S@ffF@\x9a\x99Y@\x00\x00`@\xcd\xccL@\xcd\xccL@\xcd\xcc,@\x00\x00@@ff\x86@\xcd\xccL@ffF@\x9a\x99Y@\x00\x00@@33s@\x9a\x99Y@\x9a\x99\x89@ffF@\x9a\x99y@\xcd\xccL@33s@\x9a\x99y@333@33\x83@\x9a\x99\x89@\x00\x00@@ff\x86@\x00\x00\x80@333@\x9a\x999@fff@\x9a\x999@\x00\x00@@\x9a\x99\x89@\x00\x00@@\xcd\xccl@\x00\x00`@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'@\x0c\x1c\x03\xc0\x15~\x0c\xc0\x16~\x0c\xe0\x15~\x0c\x00s1\x0c\xa0<|\x0c\xc00/\x0c`<|\x0c\xc0=|\x0c`\x11~\x0c\xe0Q\x1b\x03\x80\x12~\x0c@Y\x1b\x03@?|\x0c\xa0\x15~\x0c\x80\x10~\x0c\x80?|\x0c\xa0?|\x0c\xc0\xcb0\x0c\xc0\x13~\x0c\x00\xc50\x0c`\xcd0\x0c\xe0\xca0\x0c`\r\x1c\x03@\x0b\x1c\x03\x80\r\x1c\x03\xe0\x0c\x1c\x03\xc0\x0c\x1c\x03\xa0\x0b\x1c\x03\x80\n\x1c\x03\x00\n\x1c\x03@\r\x1c\x03 \x0f\x1c\x03 \x0c\x1c\x03 \n\x1c\x03`\x0e\x1c\x03\xc0\r\x1c\x03 \r\x1c\x03\xa0\x0f\x1c\x03\x00\x02\x1c\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xa8\xc6\x0b@\x83\xc0\x8a?\x96C\x03@\xf0\xa7f?\xdd$\x9a@\xf0\xa7&?\xa8\xc6\x9b?\xbaI4@\x06\x81\x15?\x06\x81U?\x89A@?9\xb4H?\x91\xed\x8c?\xd9\xce7?\xe9&\xd1?\xd3M"??5^?\xf0\xa7f?V\x0eM?\x1dZD?V\x0eM?\xe9&\xb1?\xb6\xf3]?9\xb4\x08?\xd3M"?\x96C\x13@u\x93\x88?\x83\xc0\xaa?D\x8b\xa0@\xb6\xf3]?\xd3Mb?\xf8S\xd3?\x1dZ\xa4?V\x0e\r?u\x93\xa8?\x10X\x85@\xf0\xa7f?\x1dZ\xa4?V\x0eM?9\xb4\x08?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I81429328
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'\x905\x1d\x03\xd8A\xc1\x0c\x00B\xc1\x0c\x005\x1d\x03\x00B\xc1\x0c`5\x1d\x03PB\xc1\x0c\xd8A\xc1\x0c(B\xc1\x0cxB\xc1\x0cPB\xc1\x0c\x905\x1d\x03xB\xc1\x0c`5\x1d\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'\xe8\xa1M\x02x\xce\xac\x03\xb0\xf0\xfc\x04 \xf0\xfc\x04 \xff\xfc\x04\xe0\xf6\xfc\x04H\xfe\xfc\x04@\xea\xfc\x04\x98\xec\xfc\x04@\xe1\xfc\x04\xc0\xe5\xfc\x04\x00\xee\xfc\x04 \xe0\xfc\x04\xf0\xe5\xfc\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g766
sg82
g788
sg83
g771
sg84
g792
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g797
sg82
g798
sg83
g802
sg84
g803
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g808
sg82
g809
sg83
g813
sg84
g814
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g755
sg82
g819
sg83
g760
sg84
g823
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g777
sg82
g828
sg83
g782
sg84
g832
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g837
sg82
g838
sg83
g842
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g808
sg82
g848
sg83
g813
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g743
sg82
g857
sg83
g748
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g837
sg82
g866
sg83
g842
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g797
sg82
g875
sg83
g802
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I81429328
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I81429328
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S' \x0b\x1c\x03\xe0\x0e\x1c\x03\xe0`\xc3\x0c \x0b\x1c\x03\x10a\xc3\x0c@\x16\xc3\x0c\x08T\xc3\x0c\xc8R\xc3\x0c0b\xc3\x0c@a\xc3\x0c\xf0R\xc3\x0c\xe0\x0e\x1c\x03\xa0R\xc3\x0c\x00\x17\x1b\x03@a\xc3\x0c\x18S\xc3\x0c \x0b\x1c\x03\xa0\x13\x1b\x03\x18S\xc3\x0c@S\xc3\x0c\x80T\xc3\x0c\xf0R\xc3\x0c0T\xc3\x0cX\x17\xc3\x0c\x90b\xc3\x0c\x90S\xc3\x0c@S\xc3\x0c\x00b\xc3\x0cpa\xc3\x0c\xd0T\xc3\x0c\x18S\xc3\x0c\xe0`\xc3\x0c\xb8S\xc3\x0c\xa0\x13\x1b\x03XT\xc3\x0c\xa8T\xc3\x0c@\x16\xc3\x0c\xe0`\xc3\x0c\x90\x17\xc3\x0c\x10a\xc3\x0c\xc8R\xc3\x0c \x0b\x1c\x03\xe0`\xc3\x0c\xb8S\xc3\x0c\x18S\xc3\x0cx\x16\xc3\x0c\xc8R\xc3\x0c\xa0a\xc3\x0c@\x16\xc3\x0c\xe0`\xc3\x0c\xf0R\xc3\x0c\xa0R\xc3\x0c\xb8S\xc3\x0c\xe0\x0e\x1c\x03\xa0R\xc3\x0c\xa8T\xc3\x0c\xd0a\xc3\x0chS\xc3\x0c@S\xc3\x0chS\xc3\x0c0b\xc3\x0c@S\xc3\x0c\x90b\xc3\x0c0T\xc3\x0c@\x1b\x1b\x03\xa0a\xc3\x0c\xa0R\xc3\x0c\xf0R\xc3\x0c\xb8S\xc3\x0c\x18S\xc3\x0c\xe0\x0e\x1c\x03pa\xc3\x0c\xf8T\xc3\x0c@a\xc3\x0c\x90S\xc3\x0c\xa0\x13\x1b\x03@S\xc3\x0c\x90S\xc3\x0cpa\xc3\x0c\xf0R\xc3\x0c\x90S\xc3\x0cX\x17\xc3\x0c@\x16\xc3\x0c\xe0\x0e\x1c\x03@a\xc3\x0c\x10a\xc3\x0cX\x17\xc3\x0cx\x16\xc3\x0cpa\xc3\x0c\xa0\x13\x1b\x03hS\xc3\x0c\xc8R\xc3\x0c\xb8S\xc3\x0c\xd0a\xc3\x0c@\x16\xc3\x0chS\xc3\x0c\x80\x19\x1b\x03 \x0b\x1c\x03\xd0a\xc3\x0c@\x16\xc3\x0c\xa0a\xc3\x0c@a\xc3\x0chS\xc3\x0c\xb8S\xc3\x0c \x0b\x1c\x03\x10a\xc3\x0cx\x16\xc3\x0c\x18S\xc3\x0c@\x16\xc3\x0c\x80\x19\x1b\x03@S\xc3\x0c \x0b\x1c\x03\x90S\xc3\x0c\xd0a\xc3\x0c\x80T\xc3\x0c\xd0T\xc3\x0c\x80T\xc3\x0c\xf0b\xc3\x0cpa\xc3\x0c\xf8T\xc3\x0c\x08T\xc3\x0c\x90S\xc3\x0c@S\xc3\x0c\xa0a\xc3\x0c\xf0R\xc3\x0c\x18S\xc3\x0cx\x16\xc3\x0c@\x16\xc3\x0c\xc0b\xc3\x0c@a\xc3\x0c\x10a\xc3\x0c\xa0R\xc3\x0cx\x16\xc3\x0c@a\xc3\x0c\xe0\x0e\x1c\x03\x18S\xc3\x0c \x0b\x1c\x03\xb8S\xc3\x0cpa\xc3\x0c\xe0\x0e\x1c\x03\x80T\xc3\x0chS\xc3\x0cpa\xc3\x0c@\x1b\x1b\x03XT\xc3\x0c\xd0a\xc3\x0c\xf0R\xc3\x0c@\x1b\x1b\x03\xa0a\xc3\x0c@\x1b\x1b\x03\xe0\x0e\x1c\x030b\xc3\x0c\xf0R\xc3\x0c\x80T\xc3\x0c@\x16\xc3\x0c\xd0a\xc3\x0cpa\xc3\x0c\xc8R\xc3\x0c\xf8T\xc3\x0c\xa8T\xc3\x0c\xf8T\xc3\x0cX\x17\xc3\x0c\xe8\x16\xc3\x0c\xb8S\xc3\x0c\xa0a\xc3\x0c\xa0R\xc3\x0c\x18S\xc3\x0c@a\xc3\x0cx\x16\xc3\x0c\xe0`\xc3\x0chS\xc3\x0c \x0b\x1c\x03pa\xc3\x0c\x18S\xc3\x0c\xa0R\xc3\x0c\x10a\xc3\x0c\x90\x17\xc3\x0c\xc8R\xc3\x0c@a\xc3\x0c\x08T\xc3\x0c\xa0a\xc3\x0c\x10a\xc3\x0c\x90b\xc3\x0c@\x1b\x1b\x03 \x0b\x1c\x03\xe0`\xc3\x0c\x00\x17\x1b\x03`b\xc3\x0c@\x1b\x1b\x03\xf0b\xc3\x0c\xc8R\xc3\x0c\xd0a\xc3\x0c\xe0`\xc3\x0c\x90S\xc3\x0c\xa0\x13\x1b\x03\x80\x19\x1b\x03\xd0a\xc3\x0c\x00b\xc3\x0c\xc8R\xc3\x0c\xa0a\xc3\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\xc0\xdd~\x0c\xa0\xce\x1c\x03\x80\xce\x1c\x03\x80\xca\x1c\x03\xe0\xcf\x1c\x03 \xc8\x1c\x03`\xc8\x1c\x03\x80\xc6\x1c\x03\xe0\xcc\x1c\x03\xa0\xcf\x1c\x03 \xc3\x1c\x03@\xc8\x1c\x03\xa0\xc9\x1c\x03\xa0\xc8\x1c\x03\x80\xcd\x1c\x03`\xcb\x1c\x03`\xc9\x1c\x03\xe0\xc8\x1c\x03\x80\xc0\x1c\x03`\xcf\x1c\x03\xc0\xca\x1c\x03\xc0\xc9\x1c\x03\xe0\xcd\x1c\x03@\xcc\x1c\x03`\xc3\x1c\x03@\xc9\x1c\x03`\xcc\x1c\x03\x80\xcc\x1c\x03\xa0\xcb\x1c\x03\x80\xcb\x1c\x03@\xca\x1c\x03 \xc6\x1c\x03`\xca\x1c\x03`\xcd\x1c\x03\xe0\xcb\x1c\x03@\xcf\x1c\x03\x00\xc9\x1c\x03 \xcb\x1c\x03\x80\xcf\x1c\x03\xe0\xca\x1c\x03@\xcb\x1c\x03\xe0\xc9\x1c\x03\xa0\xca\x1c\x03\x00\xbe.\x0c`\xbf.\x0c\x80\xba.\x0c\x80\xbf.\x0c\x80f~\x0c\xe0\xbe.\x0c \xbf.\x0c\xc0\xcb\x1c\x03\xa0\xa6\xcc\x04 \xab\xcc\x04\xe0\xa6\xcc\x04\x80\xa3\xcc\x04\x80\xad\xcc\x04 \xa6\xcc\x04\x00\xa3\xcc\x04\xc0\xab\xcc\x04\xa0\xa2\xcc\x04`\xa6\xcc\x04\x00\xab\xcc\x04\x00\xa7\xcc\x04\x00\xac\xcc\x04\xe0\xa7\xcc\x04@\xab\xcc\x04 \xa0\xcc\x04 \xad\xcc\x04\xa0\xa7\xcc\x04@\xa0\xcc\x04\xe0\xaf\xcc\x04\xc0\xa7\xcc\x04\x80\xa6\xcc\x04\xa0\xa3\xcc\x04@\xa7\xcc\x04\x80\xa7\xcc\x04\x80\xac\xcc\x04`\xac\xcc\x04 \xa7\xcc\x04@\xad\xcc\x04\xe0\xa2\xcc\x04`\xad\xcc\x04\x80\xa2\xcc\x04@\xa6\xcc\x04\xe0\xab\xcc\x04\xa0\xac\xcc\x04@\xa3\xcc\x04\xc0\xa2\xcc\x04\x00\xa6\xcc\x04`\xa7\xcc\x04@C{\x0c\x00K{\x0c\xc0J{\x0c\xe0@{\x0c\x80@{\x0c\x00I{\x0c@A{\x0c\xc0@{\x0c \x17~\x0c\xa0@{\x0c\x00A{\x0c\xa0B{\x0c @{\x0c@sR\x0c\xa0rR\x0c sR\x0c\x80sR\x0c`sR\x0c\x00sR\x0c\xa0sR\x0c\xc0sR\x0c`\xc80\x0c\xa0qR\x0c\x00tR\x0c\x80tR\x0c\xa0tR\x0c\xc0pR\x0c`tR\x0c\xe0tR\x0c\xc0rR\x0c`rR\x0c\x00uR\x0c\x00rR\x0c\xc0tR\x0c`qR\x0c uR\x0c qR\x0c vR\x0c@vR\x0c\x80rR\x0c\xe0rR\x0c\xe0pR\x0c\x80qR\x0c\x80uR\x0c\x00wR\x0c wR\x0c\xe0vR\x0c@wR\x0c\xc0qR\x0c`wR\x0c\x00vR\x0c\x80vR\x0c\x00xR\x0c\xa0vR\x0c@tR\x0c\xe0uR\x0c\x00qR\x0c\xc0vR\x0c tR\x0c@uR\x0c\x00yR\x0c\xe0wR\x0c\xa0wR\x0c\xe0sR\x0c\x80xR\x0c`uR\x0c`vR\x0c\xc0xR\x0c\x00zR\x0c\xe0xR\x0c@yR\x0c zR\x0c\xc0wR\x0c\xa0zR\x0c yR\x0c\xe0yR\x0c\xc0uR\x0c\xc0zR\x0c@xR\x0c\xa0yR\x0c`{R\x0c`xR\x0c\xa0xR\x0c\x80wR\x0c\x00{R\x0c {R\x0c\xa0|R\x0c\x80|R\x0c`yR\x0c\x80{R\x0c |R\x0c\xe0{R\x0c\xa0{R\x0c\xe0zR\x0c`zR\x0c\xc0yR\x0c\x00}R\x0c\xa0uR\x0c\xa0}R\x0c\xc0}R\x0c\x00~R\x0c ~R\x0c@zR\x0c }R\x0c\x80~R\x0c\xa0~R\x0c`~R\x0c\xe0~R\x0c xR\x0c@\x7fR\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'[#\x02@>}\x97?\xd0\x9f\xb9?R\xce,@\xbe\x9f\x99?\xed\x07\xc0?N\xbc;@@i\xa6?\x02\xad\xca?\xf0x\xe6?\xdf\xc0\x9b?L\xad\xca?\xc0\xc2;?\x93U\xb5@a\xe5L?\x07\x8b\x88?\x9a[\x95?\xa2%\xc2?\x1e\xbd\xdb?\xa7\xb2*@\xd4\xb8j?\xb3\x13\x91?L\x05\x80?\x80\t\x80?\xe2\xa2\x99?b\xc0{?\xefZ\xd5?\xbc\x13\x01@\xea\x04\x00@zJ\xc4?\x115\x93?\xbbh\xe6?\x01\xfbn?g\xf5\x8e?^9\xb3?v5\x93?\xbf&\xc2?-\x08\xa0?\x93\x8f\x88?d\x17\x91?\xbb\xfb.?\x86LD?\xdc\xe4]?\x95y7@\x1b~7?z\x13\x01@\xd6\xac*@\xd5\xfd\xdf?CH\xa4?\x9e\x93H?L\x1f"?;\x8c\x88?\xa9:s?\xff[\x95?\no&?\xecWs?Z\xc7{?\x16\x1c\xc2?\xfea\x15?(c&?\xae\x83w?DYD?S\xe4n?\x9f\xfbn?\xcf\xb1\xca?\'X\xa4?D\'\x82?4\x03\xe0?D6\x93?\xa4\x87H?\x19\xca{?\x86\xe8]?^j\x86?\r?s?g=3?\xc7\xcc\xdb?M\xfd.?\x9d\xb2\xea?\xf9\\U?\x0e\x17\xb1?\xaeK\x84?\xcb(b?m\x90\x88?\xc1G\x84?,\xfd\xce?\xb1\xac\x99?<z\x97?v\x04\xc0?\xb3\xa6Y?\x8b\xc4;?\x03\x04o?\xe3\xa6Y?y\xb4j?\x8a53@y%\xa2?\xccjU?\xe1."?8l\xa6?\xb7BD?D\x89\x18@\xd4\x01\x8f?\xcd\x95H?|\xda\x1d?\xabl&?n\x17\xb1?\x83J\x84?\x03\x9c\xa8?\xa2V\x15?\x03\x06\xc0?\xd0aU?6\xe5\x1d?\x0bBD?\xfb\xeeL?\xb3\xf3n?\x8f\xa3Y?\xbd[U?\n\xd6L?f\xe3\x1d?\x04As?\xd4\xc6{?\xec\xe1\x9d?~\xc8{?&9s?+RD?\xcc\xb7*?\x10$"?\xe1\xf7.?|\xc8;?\x88\xf5n?y\x87\x97?\xc0\x07@?T\xf4\x8e?\xe5\xb7j?\xe6\xf5.?\x86\x8b\x88?X\xa4*?S\xd9L?>\xcc;?\xa3ND?E\xb2j?\x8d\xa4Y?\x83\x88\x88?u\x9e\xd9?$\x92H?\xda\xb1\x8a?0\xe3\xdd?\r\xd2;?\xb4/"?\x8b@3?@\xd4\xac?"\xceL@\xca\xc0\xdb?\xadG\xc4?t8\xb3?M\xf5\x8e?UX\x95?\x02.b?~\xa6Y?\xae\xe5]?\xab%"?\x92\x13/?n\x9c9@9\xbd\x1b@Da\x15?r\x84w?\x94Z\xb5?\xa4\xef.@h\xe3\x9d?\xd0\xb7*?.G\xc4?u\x85\x88?dTD? WU?\xcay7?X\xa6Y?\x8093?\xafKD?Z\x1fQ?\x86\x19Q?\xd6&\x82?\x1a.b?\xa2\r@?\x1f\x96\x19?q\xd5L?\x97\xe5]?\xd2-b?\xea`U?\t\xfcn?\x92G\x84?\xb5\xa5Y?#:s?\x1a\x14\x91?Pj\xa6?l\xf6.?L\x01^?;aU?\xa6i\x86?\xd2\x9d\xb9?\xa5\x1cQ?E9Q?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'\xf8\xe6\xfc\x04\xc8\xef\xfc\x04\xe0\x93\xd4\x04\x90\x9e\xd4\x04H\x9b\xd4\x04\xa8\x9b\xd4\x04\xe8\x9a\xd4\x04\xa0\x94\xd4\x04\x90\x92\xd4\x04\x00\x9e\xd4\x04P\x99\xd4\x04\x00\x98\xd4\x048\x99\xd4\x048\x9f\xd4\x04@\x9d\xd4\x04\xc8\x99\xd4\x04\xb0\x93\xd4\x04\x10\x97\xd4\x04\xe8\x9d\xd4\x04P\x9f\xd4\x04\x18\x9e\xd4\x04h\x93\xd4\x048\x96\xd4\x04x\x95\xd4\x04\xb8\x97\xd4\x04\x08\x9c\xd4\x040\x9b\xd4\x04\xd8\x9b\xd4\x04 \x9f\xd4\x04\x80\x9f\xd4\x040\x9e\xd4\x04\x98\x9f\xd4\x04x\x9e\xd4\x04\x08\x9f\xd4\x04\xa0\x91\xd4\x04\xf8\x9c\xd4\x04\xd0\x9a\xd4\x040\x92\xd4\x04\xd8\x95\xd4\x04\x90\x98\xd4\x04\xf0\x95\xd4\x04\x00\x9b\xd4\x04@\x9a\xd4\x04\xb8\x9a\xd4\x04p\x9a\xd4\x04\xd0\x97\xd4\x04\xb8\x94\xd4\x04(\x9a\xd4\x04\xb0\x9f\xd4\x04@\x97\xd4\x04H\x95\xd4\x04\xe0\x9f\xd4\x04P\x96\xd4\x04x\x92\xd4\x04(\x97\xd4\x04\xd8\x9e\xd4\x04X\x9a\xd4\x04h\x9f\xd4\x04 9\xd5\x04\xb0<\xd5\x04\xb06\xd5\x040;\xd5\x04\x90>\xd5\x04X1\xd5\x04\x980\xd5\x04\xd82\xd5\x04X4\xd5\x04\xe03\xd5\x04h<\xd5\x04\x104\xd5\x04\x185\xd5\x04p7\xd5\x04@=\xd5\x04\xe84\xd5\x04\xb03\xd5\x04\xd0:\xd5\x04\x182\xd5\x04\x881\xd5\x04H>\xd5\x04\x005\xd5\x04\x800\xd5\x04@1\xd5\x04 0\xd5\x04\x00;\xd5\x04h6\xd5\x04`;\xd5\x04\xf80\xd5\x0402\xd5\x04\xe8:\xd5\x04\x101\xd5\x04\xe0<\xd5\x04\xa82\xd5\x04\xb09\xd5\x0405\xd5\x04`2\xd5\x04\x90;\xd5\x04\x08<\xd5\x04\xd04\xd5\x04\xe06\xd5\x04\xd07\xd5\x040>\xd5\x04\xb81\xd5\x04\x908\xd5\x04\xf83\xd5\x04 3\xd5\x04\xe81\xd5\x04X:\xd5\x04\xa0=\xd5\x04\xf86\xd5\x04\x989\xd5\x04\x887\xd5\x04\xf02\xd5\x04\x803\xd5\x048<\xd5\x04\x806\xd5\x04@7\xd5\x04(7\xd5\x04\xf8<\xd5\x04\x08?\xd5\x04 6\xd5\x04`8\xd5\x04@:\xd5\x04\xe8=\xd5\x04\xb84\xd5\x04\x10=\xd5\x04 <\xd5\x04\x089\xd5\x04\xb8=\xd5\x04\xc02\xd5\x04h?\xd5\x04\xe00\xd5\x04\xa8;\xd5\x04\xc0>\xd5\x04\xb00\xd5\x04\xa8>\xd5\x04\xd8;\xd5\x04H;\xd5\x04(:\xd5\x04(1\xd5\x04P3\xd5\x0483\xd5\x04x8\xd5\x04P<\xd5\x04\xd88\xd5\x04\x083\xd5\x04X7\xd5\x04@4\xd5\x04\xf0>\xd5\x04\xb0?\xd5\x04P6\xd5\x04`>\xd5\x04\xa88\xd5\x04\xe0?\xd5\x04\x18>\xd5\x04\x98?\xd5\x04\x88=\xd5\x04\x008\xd5\x04p:\xd5\x04\xa0:\xd5\x04\x002\xd5\x04\xc8<\xd5\x04\xd01\xd5\x0489\xd5\x04\x884\xd5\x04\xc86\xd5\x04\x18;\xd5\x04\x80?\xd5\x0486\xd5\x04\x809\xd5\x04h9\xd5\x04\x00>\xd5\x04 ?\xd5\x04\xf89\xd5\x04x;\xd5\x04\xa07\xd5\x04P?\xd5\x04\xc0;\xd5\x04\x986\xd5\x04X=\xd5\x04H2\xd5\x04P9\xd5\x04\xf0;\xd5\x04\xc80\xd5\x04x>\xd5\x04x2\xd5\x04(4\xd5\x04p=\xd5\x04\xc89\xd5\x04(=\xd5\x04\xc83\xd5\x0480\xd5\x04\xe87\xd5\x04P0\xd5\x04\xe09\xd5\x04\x80<\xd5\x04\xa04\xd5\x04\xa01\xd5\x04h0\xd5\x04\xb8:\xd5\x04H8\xd5\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g983
sg894
g979
sg908
g990
sg903
g987
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1006
sg894
g996
sg908
g1000
sg903
g1004
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g1017
sg894
g1013
sg908
g1024
sg903
g1021
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g966
sg894
g1030
sg908
g973
sg903
g1037
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g919
sg894
g1079
sg908
g926
sg903
g1086
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g1006
sg894
g1094
sg908
g1000
sg903
g1101
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g919
sg894
g1079
sg908
g926
sg903
g1086
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1049
sg894
g1122
sg908
g1056
sg903
g1129
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1141
sg894
g1137
sg908
g1148
sg903
g1145
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g1171
sg894
g1167
sg908
g1178
sg903
g1175
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1141
sg894
g1184
sg908
g1148
sg903
g1191
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1203
sg894
g1199
sg908
g1210
sg903
g1207
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1171
sg894
g1216
sg908
g1178
sg903
g1223
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1017
sg894
g1244
sg908
g1024
sg903
g1251
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g1269
sg894
g1259
sg908
g1263
sg903
g1267
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g1286
sg894
g1276
sg908
g1280
sg903
g1284
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1297
sg894
g1293
sg908
g1304
sg903
g1301
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g1203
sg894
g1310
sg908
g1210
sg903
g1317
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g936
sg894
g1325
sg908
g943
sg903
g1332
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g1344
sg894
g1340
sg908
g1351
sg903
g1348
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1367
sg894
g1357
sg908
g1361
sg903
g1365
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1141
sg894
g1184
sg908
g1148
sg903
g1191
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1404
sg894
g1400
sg908
g1411
sg903
g1408
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1171
sg894
g1167
sg908
g1178
sg903
g1175
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1066
sg894
g1430
sg908
g1073
sg903
g1437
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1203
sg894
g1310
sg908
g1210
sg903
g1317
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g983
sg894
g979
sg908
g990
sg903
g987
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g1494
sg894
g1484
sg908
g1488
sg903
g1492
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g966
sg894
g1030
sg908
g973
sg903
g1037
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1017
sg894
g1013
sg908
g1024
sg903
g1021
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g899
sg894
g1527
sg908
g909
sg903
g1534
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g936
sg894
g1325
sg908
g943
sg903
g1332
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g1404
sg894
g1555
sg908
g1411
sg903
g1562
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g1141
sg894
g1184
sg908
g1148
sg903
g1191
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1587
sg894
g1583
sg908
g1594
sg903
g1591
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g1017
sg894
g1244
sg908
g1024
sg903
g1251
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g1367
sg894
g1613
sg908
g1361
sg903
g1620
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g983
sg894
g979
sg908
g990
sg903
g987
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1066
sg894
g1430
sg908
g1073
sg903
g1437
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1006
sg894
g1094
sg908
g1000
sg903
g1101
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1404
sg894
g1400
sg908
g1411
sg903
g1408
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1006
sg894
g1094
sg908
g1000
sg903
g1101
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g1203
sg894
g1310
sg908
g1210
sg903
g1317
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1494
sg894
g1484
sg908
g1488
sg903
g1492
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g1286
sg894
g1276
sg908
g1280
sg903
g1284
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1203
sg894
g1199
sg908
g1210
sg903
g1207
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1286
sg894
g1276
sg908
g1280
sg903
g1284
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1203
sg894
g1310
sg908
g1210
sg903
g1317
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1286
sg894
g1810
sg908
g1280
sg903
g1817
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1017
sg894
g1013
sg908
g1024
sg903
g1021
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g1269
sg894
g1259
sg908
g1263
sg903
g1267
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1367
sg894
g1357
sg908
g1361
sg903
g1365
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1006
sg894
g996
sg908
g1000
sg903
g1004
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1066
sg894
g1430
sg908
g1073
sg903
g1437
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1404
sg894
g1400
sg908
g1411
sg903
g1408
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1141
sg894
g1137
sg908
g1148
sg903
g1145
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1344
sg894
g1340
sg908
g1351
sg903
g1348
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1587
sg894
g1942
sg908
g1594
sg903
g1949
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1297
sg894
g1970
sg908
g1304
sg903
g1977
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1171
sg894
g1167
sg908
g1178
sg903
g1175
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1203
sg894
g1199
sg908
g1210
sg903
g1207
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g1297
sg894
g1970
sg908
g1304
sg903
g1977
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g1344
sg894
g2024
sg908
g1351
sg903
g2031
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g1297
sg894
g1293
sg908
g1304
sg903
g1301
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g1269
sg894
g2065
sg908
g1263
sg903
g2072
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g983
sg894
g979
sg908
g990
sg903
g987
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g919
sg894
g1079
sg908
g926
sg903
g1086
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g1269
sg894
g1259
sg908
g1263
sg903
g1267
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1587
sg894
g1942
sg908
g1594
sg903
g1949
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1344
sg894
g1340
sg908
g1351
sg903
g1348
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g1171
sg894
g1167
sg908
g1178
sg903
g1175
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1286
sg894
g1810
sg908
g1280
sg903
g1817
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1017
sg894
g1244
sg908
g1024
sg903
g1251
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g1404
sg894
g1555
sg908
g1411
sg903
g1562
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1494
sg894
g2223
sg908
g1488
sg903
g2230
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g983
sg894
g979
sg908
g990
sg903
g987
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1286
sg894
g1810
sg908
g1280
sg903
g1817
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1297
sg894
g1970
sg908
g1304
sg903
g1977
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g899
sg894
g1527
sg908
g909
sg903
g1534
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1494
sg894
g1484
sg908
g1488
sg903
g1492
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g983
sg894
g2303
sg908
g990
sg903
g2310
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g1367
sg894
g1613
sg908
g1361
sg903
g1620
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g1049
sg894
g1122
sg908
g1056
sg903
g1129
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1286
sg894
g1276
sg908
g1280
sg903
g1284
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1404
sg894
g1400
sg908
g1411
sg903
g1408
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g899
sg894
g1527
sg908
g909
sg903
g1534
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1587
sg894
g1583
sg908
g1594
sg903
g1591
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1141
sg894
g1137
sg908
g1148
sg903
g1145
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g983
sg894
g2303
sg908
g990
sg903
g2310
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1297
sg894
g1293
sg908
g1304
sg903
g1301
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g1203
sg894
g1199
sg908
g1210
sg903
g1207
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g1297
sg894
g1970
sg908
g1304
sg903
g1977
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g1494
sg894
g1484
sg908
g1488
sg903
g1492
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1171
sg894
g1216
sg908
g1178
sg903
g1223
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1367
sg894
g1357
sg908
g1361
sg903
g1365
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1171
sg894
g1216
sg908
g1178
sg903
g1223
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1404
sg894
g1555
sg908
g1411
sg903
g1562
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1344
sg894
g2024
sg908
g1351
sg903
g2031
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1587
sg894
g1583
sg908
g1594
sg903
g1591
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1006
sg894
g1094
sg908
g1000
sg903
g1101
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1297
sg894
g1293
sg908
g1304
sg903
g1301
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1203
sg894
g1310
sg908
g1210
sg903
g1317
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g1367
sg894
g1613
sg908
g1361
sg903
g1620
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1066
sg894
g1430
sg908
g1073
sg903
g1437
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1141
sg894
g1184
sg908
g1148
sg903
g1191
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1587
sg894
g1942
sg908
g1594
sg903
g1949
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g983
sg894
g2303
sg908
g990
sg903
g2310
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g1344
sg894
g2024
sg908
g1351
sg903
g2031
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g966
sg894
g1030
sg908
g973
sg903
g1037
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1006
sg894
g996
sg908
g1000
sg903
g1004
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g1587
sg894
g1942
sg908
g1594
sg903
g1949
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g1049
sg894
g1122
sg908
g1056
sg903
g1129
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g919
sg894
g1079
sg908
g926
sg903
g1086
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1141
sg894
g1137
sg908
g1148
sg903
g1145
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g899
sg894
g1527
sg908
g909
sg903
g1534
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1404
sg894
g1555
sg908
g1411
sg903
g1562
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1344
sg894
g2024
sg908
g1351
sg903
g2031
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g1171
sg894
g1167
sg908
g1178
sg903
g1175
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g1286
sg894
g1810
sg908
g1280
sg903
g1817
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1344
sg894
g1340
sg908
g1351
sg903
g1348
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g1269
sg894
g2065
sg908
g1263
sg903
g2072
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g1494
sg894
g2223
sg908
g1488
sg903
g2230
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1269
sg894
g1259
sg908
g1263
sg903
g1267
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1367
sg894
g1357
sg908
g1361
sg903
g1365
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g1269
sg894
g1259
sg908
g1263
sg903
g1267
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g919
sg894
g1079
sg908
g926
sg903
g1086
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g966
sg894
g1030
sg908
g973
sg903
g1037
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1066
sg894
g1430
sg908
g1073
sg903
g1437
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1171
sg894
g1216
sg908
g1178
sg903
g1223
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g983
sg894
g2303
sg908
g990
sg903
g2310
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g1494
sg894
g2223
sg908
g1488
sg903
g2230
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g1344
sg894
g1340
sg908
g1351
sg903
g1348
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1017
sg894
g1244
sg908
g1024
sg903
g1251
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1587
sg894
g1583
sg908
g1594
sg903
g1591
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1203
sg894
g1199
sg908
g1210
sg903
g1207
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1587
sg894
g1583
sg908
g1594
sg903
g1591
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1269
sg894
g2065
sg908
g1263
sg903
g2072
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g983
sg894
g2303
sg908
g990
sg903
g2310
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1404
sg894
g1555
sg908
g1411
sg903
g1562
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g1367
sg894
g1613
sg908
g1361
sg903
g1620
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g1006
sg894
g1094
sg908
g1000
sg903
g1101
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g1141
sg894
g1137
sg908
g1148
sg903
g1145
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1587
sg894
g1942
sg908
g1594
sg903
g1949
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g936
sg894
g1325
sg908
g943
sg903
g1332
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g1286
sg894
g1276
sg908
g1280
sg903
g1284
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g1344
sg894
g2024
sg908
g1351
sg903
g2031
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1141
sg894
g1184
sg908
g1148
sg903
g1191
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1006
sg894
g996
sg908
g1000
sg903
g1004
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g966
sg894
g1030
sg908
g973
sg903
g1037
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g1494
sg894
g2223
sg908
g1488
sg903
g2230
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1017
sg894
g1013
sg908
g1024
sg903
g1021
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1049
sg894
g1122
sg908
g1056
sg903
g1129
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1006
sg894
g996
sg908
g1000
sg903
g1004
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1367
sg894
g1357
sg908
g1361
sg903
g1365
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g1286
sg894
g1810
sg908
g1280
sg903
g1817
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1269
sg894
g2065
sg908
g1263
sg903
g2072
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g899
sg894
g1527
sg908
g909
sg903
g1534
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g936
sg894
g1325
sg908
g943
sg903
g1332
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g1049
sg894
g1122
sg908
g1056
sg903
g1129
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g1269
sg894
g2065
sg908
g1263
sg903
g2072
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1404
sg894
g1400
sg908
g1411
sg903
g1408
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1017
sg894
g1013
sg908
g1024
sg903
g1021
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1494
sg894
g1484
sg908
g1488
sg903
g1492
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g936
sg894
g1325
sg908
g943
sg903
g1332
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1297
sg894
g1970
sg908
g1304
sg903
g1977
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g1171
sg894
g1216
sg908
g1178
sg903
g1223
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1297
sg894
g1293
sg908
g1304
sg903
g1301
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g1494
sg894
g2223
sg908
g1488
sg903
g2230
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g1017
sg894
g1244
sg908
g1024
sg903
g1251
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1367
sg894
g1613
sg908
g1361
sg903
g1620
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I81429328
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'pW!\x12\xa0\x87!\x12\xc8\x87!\x12\xf0\x87!\x12\xa0W!\x12X\x89!\x12\x18\x88!\x12@\x88!\x12`,!\x12\x98,!\x12h\x88!\x12\xd0W!\x12\x80\x89!\x12\x18\x88!\x12\x90\x88!\x12\x00X!\x12\xd0W!\x12\x00X!\x12\x08-!\x12\xc8\x87!\x12\xa0W!\x12\x08-!\x12\x80}R\x0ch\x88!\x12\x80}R\x0c\x98,!\x12\x80\x7fR\x0c\xc0X!\x12\xf0\x87!\x120X!\x12`X!\x120\x89!\x12`X!\x12`\x7fR\x0c \x7fR\x0c\x80\x7fR\x0c\xa0\x87!\x12\xb8\x88!\x12\x00X!\x12\x80Y!\x12\xf0X!\x12\xd0W!\x12\xf0\x87!\x12\xd0W!\x12\x90\x88!\x12\xb8\x88!\x12\xd0\x89!\x12\x80Y!\x12`\x7fR\x0c\x80\x7fR\x0c\xf8\x89!\x12pW!\x12\xc8\x87!\x12@\x88!\x12\x98,!\x12`\x7fR\x0c\x98,!\x12\xa0W!\x12\xf8\x89!\x12\xa0W!\x12\x80\x7fR\x0c Y!\x12x-!\x12\xc0\x7fR\x0c\x80Y!\x12\xc0\x7fR\x0c`X!\x12`\x7fR\x0c\x08-!\x12\x98,!\x12\xd0\x89!\x12@\x88!\x12\x18\x88!\x12\xa0\x87!\x12\x98,!\x12\xb8\x88!\x12h\x88!\x12\x00X!\x12`,!\x12\x18\x88!\x12\xc0\x7fR\x0c\x00X!\x12\xd0W!\x12\xb8\x88!\x12\x18\x88!\x12\x90\x88!\x12\xd0W!\x12`\x7fR\x0c\x80}R\x0c\xc0X!\x12\xc8\x87!\x12h\x88!\x12\xa0\x87!\x12\xc0X!\x12\x00X!\x120X!\x12\xf0\x87!\x12\x18\x88!\x12\x90\x88!\x12\x80}R\x0cpW!\x12h\x88!\x12\x18\x88!\x12\x90\x88!\x12@\x88!\x12\xe0\x7fR\x0c\xa0\x87!\x12\x90\x88!\x12\x90X!\x12\x00X!\x12pW!\x12@-!\x12\xc8\x87!\x12\x80}R\x0c@\x88!\x12h\x88!\x12\x00X!\x12\x90\x88!\x12\x80}R\x0c0X!\x12pW!\x12`,!\x12\xd0,!\x12\xc8\x87!\x12`\x7fR\x0cpW!\x12\xf0\x87!\x12\xf8\x89!\x12\x98,!\x12\x00X!\x12\xb8\x88!\x12h\x88!\x12\xc8\x87!\x12`X!\x12`\x7fR\x0c\xa0\x87!\x12pW!\x12\x80\x7fR\x0c\xb8\x88!\x12`X!\x12pW!\x12\xd0\x89!\x12\x80Y!\x12X\x89!\x12 Y!\x12\xf0\x87!\x12\x18\x88!\x12\x80\x7fR\x0c0X!\x12\x90\x88!\x12pW!\x12\xc8\x87!\x12`\x7fR\x0c\x80}R\x0c\xc0\x7fR\x0c\xd0W!\x12\xe0\x7fR\x0c\xb8\x88!\x12\xa8\x89!\x12\xa0\x87!\x12\xc0\x7fR\x0c`,!\x12\xf0X!\x12\xa0\x87!\x12\x80}R\x0c\xa0\x87!\x12`,!\x12\xf0\x87!\x12\xd0,!\x12\x00X!\x12\xe0\x7fR\x0c0X!\x12`,!\x12@\x88!\x12\xf0\x87!\x12`,!\x12 Y!\x12`X!\x12\xc0\x7fR\x0c\xa0\x87!\x12\x80\x7fR\x0c\xc8\x87!\x12\xc0\x7fR\x0c`,!\x12\x80\x7fR\x0c\x90\x88!\x12\x80\x7fR\x0c\x80}R\x0c\x98,!\x12h\x88!\x12\xa0W!\x12`\x7fR\x0c\xc0X!\x120X!\x12\xc0X!\x12`X!\x12\x80\x89!\x12h\x88!\x12\xb0-!\x12 Y!\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S'\xe0\x91!\x12`\x92!\x12\xc0\x91!\x12\xe0\x90!\x12\xc0\x92!\x12\xc0|R\x0c P\x1b\x03\xc0P\x1b\x03\x80\x93!\x12 \x90!\x12\xa0\x91!\x12\xe0\x92!\x12`\x91!\x12@\x93!\x12 \x93!\x12\x80\x91!\x12\xc0\x93!\x12\xa0\x93!\x12\xc0\x90!\x12 \x94!\x12@\x94!\x12`\x94!\x12\x80\x94!\x12@\x90!\x12\x00\x93!\x12\xa0\x94!\x12\x00\x95!\x12 \x95!\x12@\x95!\x12 \x91!\x12`\x93!\x12`\x95!\x12\xc0\x95!\x12\xa0\x95!\x12\x00\x92!\x12 \x96!\x12\xe0\x93!\x12\x80\x92!\x12\x80\x96!\x12\xa0\x96!\x12 \x92!\x12\xe0\x96!\x12\x00\x97!\x12\xc0\x94!\x12\xa0\x92!\x12`\x97!\x12\x80\x97!\x12\xe0\x95!\x12\x80\x90!\x12\xa0\x97!\x12\x00\x98!\x12\xe0\x97!\x12@\x98!\x12`\x98!\x12\xe0\x94!\x12\xa0\x98!\x12\x80\x98!\x12\xe0\x98!\x12\x00\x99!\x12\x00\x91!\x12@\x99!\x12`\x99!\x12`\x90!\x12\xa0\x99!\x12\x80\x99!\x12@\x97!\x12@|R\x0c\x80\x95!\x12\x00\x96!\x12\x80\xc4\x1c\x03\xc0\xcd\x1c\x03 \xc5\x1c\x03\xc0\xcc\x1c\x03\x80\xc9\x1c\x03\x00\xca\x1c\x03\x00\xcd\x1c\x03 \xca\x1c\x03\xa0\xc5\x1c\x03\x00\xcb\x1c\x03`\xc6\x1c\x03\xc0\xc4\x1c\x03\xc0\xc8\x1c\x03\xa0\xcd\x1c\x03\xe0\xc4\x1c\x03\x00\xc3\x1c\x03@\xcd\x1c\x03 \xcd\x1c\x03@"\x1d\x03@\xc6\x1c\x03\xa0 \x1d\x03\xc0!\x1d\x03\x00#\x1d\x03@!\x1d\x03\x80%\x1d\x03\x80"\x1d\x03\x00"\x1d\x03 !\x1d\x03\xe0"\x1d\x03\xa0!\x1d\x03`!\x1d\x03 #\x1d\x03` \x1d\x03\x80!\x1d\x03  \x1d\x03\x80 \x1d\x03\xe0 \x1d\x03\xc0"\x1d\x03\xc0 \x1d\x03 "\x1d\x03`\xc5\x1c\x03@\xc4\x1c\x03@#\x1d\x03`\xa2\xcc\x04\x00!\x1d\x03\xa0"\x1d\x03\x80\xab\xcc\x04 \xc9\x1c\x03@\xd2/\x0c\xc0\x0e\x1c\x03@\x0e\x1c\x03\x00\x0c\x1c\x03\x00\x0e\x1c\x03\x80\x0c\x1c\x03 \x0e\x1c\x03\x00\r\x1c\x03@\x0f\x1c\x03\x80\x0f\x1c\x03\x00\x0f\x1c\x03\xc0\x0f\x1c\x03\xc0\t\x1c\x03\x00\xc20\x0c@\xc50\x0c@\xcb0\x0c\x00\xc60\x0c\x00\xca0\x0c\x80\xc40\x0c\xe0\xc50\x0c@\xc40\x0c\x00\xcb0\x0c\xc0\xc50\x0c`\xc40\x0c\x00\xc40\x0c \xc50\x0c\xc0\xc90\x0c \xa2\xcc\x04\xe0\x7f1\x0c\xe0v1\x0c\xe0t1\x0c\xa0t1\x0c q1\x0c`s1\x0c\xa0{1\x0c\x80\xd1/\x0c\x00q1\x0c\x80t1\x0c\x00|1\x0c\xc0r1\x0c\xc0w1\x0c\x00r1\x0c\xe0{1\x0c`~1\x0c\xe0q1\x0c\xe0\xffO\x0c\xc0B{\x0c`A{\x0c@@{\x0c\x00G{\x0c\xa0q1\x0c C{\x0c\xa0J{\x0c\x00\xc6\x1c\x03@\x10~\x0c\x00\x17~\x0c\xa0\x16~\x0c\xc0\x10~\x0c`\x10~\x0c`\x19~\x0c\xe0\x16~\x0c\xc0\x14~\x0c \x1f~\x0c\x00C{\x0c`J{\x0c [\x1b\x03 Y\x1b\x03@R\x1b\x03\x80Q\x1b\x03\xa0\xc40\x0c\x00R\x1b\x03\xe0\x12~\x0c\xe0[\x1b\x03\xc0[\x1b\x03 a~\x0c\xa0i~\x0c@`~\x0c@g~\x0c\xc0f~\x0c k~\x0c`"\x1d\x03`\x1c\x1b\x03\x80\x1d\x1b\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'-\xd1\x8c?\x14:3?^\xb7*?\xd2\xbc\x8a?@QD?gQD?\xa5[U?\x1c\x84H?\xc7\xfc.?@K\x84?$1"?\xd7\xf8n?I}7?\xb2o&?\x9e\x01\x80?\x08"\xb1?w;s?g/"?\xbe\xe4\x1d?\xc5)\x82?\xc5\'\x82?z\x0e@?\xb7\xf5.?\x7f\xe3]?\x849\x93?\xdcI\xa4?x\xde\x8c?\x94\xc3{?\xad\x00 @8H\xe4?\xe8,b?\x9c\xed\x9d?_H\x84?Z\x15\x91?\xaaMD?\xc8&\xa2?~L\xa4?\xb7\xeb]?u\x8c\x88?l\x18Q?\xf6A3?K\xe4\x1d?d\xa07?\xc1\xee\x86@R<3?\xf1\xd3\x0c?\xc7\xfc.?\xbb\xc8;?\xc0\xf4\x8e?3p&?\x8d?3?\xf3\xd2\x8c?\xea\x13\x91?\xa7\x18b?TQD?\xd7\x8d\xa8?$C3?\x14]\x15?\xa5\n@?o6\xb3?c\xe6\x1d?Lc\x86?\xca\x18\x11?F\xf6.?\xe8\xf0L?\xfb[U?\xc8\xab*?t\xf5.?,\x1e\x11?\x18\\U?\xe62"??\x91\x19?O/"?\xfb\xf0\xce?e\xb2*?\xbc]\x15?&D3?Z\xe3\x9d?:l\x86?\xc2\xee\x1d?N\x16\x91?\x16KD?\xfb\x90H?\xa9[\x15?2\xd9L?Xe&?\xc21"?\x96yG@r \x82?:9\xb3?6\xd0\x8c?\x84\xf8.?;\x96H?w\xb1j?T\x02\x10@j8\x93?\xf6\x86\x88?\x15\xbdY?\xd5ID?X\xe7]?\x15\x94H?Wa\x15?\xe0l&?\x18&\x11?\xab~\x08?\x8a|w?\xd0\x82f?\x9f\xac*?\xdf\xe3]?!4\x82?\x1ecU?\xe5\x8d\x08?w\r@?1}7?=\xc9L?\xbd\xb0\x08?\xa2\xf6n?S\xa0\x19?Wk&?\x0e\xc8;?\xd7\xc8;?\xc2\xae\x8a?\xf1\x9f\x99?\x875\x13@[\x1dQ?\xdc\x05\x80?\xef\t@?=\xc1;?l?3?\x14\xb0\xaa?\xedb\x15?\xf7R\x04?G\x0b\x80?\xe1hf?\x98\x03\xc0?\xcf.b?\x85)"?#\xb1\xca?\x97\xf6.?\x1fv&?:\x817?*/b?OQD?3d\x15?\x89}\xb7?\x00V\x15@\xfa\xe3\x1d?\xfb\x8b\x88?1\x04\xc0?\x06\x8bH?\xf2l\x86?\xc0\xe9\x1d?G\x84H?\x03\x827?\xb0[\x95?\'\xf7.?\xda\x15\xd1?+\xd2\xcc?\xc7\xb9*?\x85\xa9Y?K\xc3;?\xbf\x01\x00@\'&\x82?y\xb4j?c\x89&?J\x1eQ?;\xd1\x8c?,[\x95?\x9f\xffn?U\x8df?\xdb\xb5j?\xb7_\x15?\xbe\x99\xf7>\x8c`\x86?\x05\xd6L?\xe0bU?5)3?b\xe9]?\x9a\xc2;?\xd7\x0b@?\x18\x857?G\xf3L?+\x1dQ?\xd0\xe9]?O\xb7*?\\\x05@?k "?\xd5\x1d@?\xe4\x1d\x11?\xa9\x0c\x00?e\xcd\x0c@\x07\x18Q?\xef\xc8;?\xca\x03\xc0?\xd7\x06\x80?\xb7\xca{?\xc5\xf7.?\xaa\xef\x9d?C\x07@?\x7fa\xa6?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'\x98\x90\xd4\x04\xa8\x95\xd4\x04\xf0\xc8\xd5\x04\xc8\xc3\xd5\x04X\xc1\xd5\x04\xd8\xc5\xd5\x04\xa0\xc1\xd5\x04\xf0\xc5\xd5\x04\xe8\xc4\xd5\x04h\xc3\xd5\x04\xb8\xc4\xd5\x04\xa0\xc4\xd5\x04P\xc0\xd5\x04\xc8\xc0\xd5\x04\xa8\xc8\xd5\x04X\xc4\xd5\x04\xb8\xca\xd5\x04\x90\xc5\xd5\x04\x10\xcd\xd5\x04\xe0\xc3\xd5\x04\xf0\xc2\xd5\x04\xa8\xc2\xd5\x04H\xc2\xd5\x04p\xc4\xd5\x04\x10\xc1\xd5\x040\xc2\xd5\x04\xc0\xc2\xd5\x04\x00\xc8\xd5\x04H\xc5\xd5\x04P\xc3\xd5\x04\xd8\xc8\xd5\x04\xd8\xc2\xd5\x04\x88\xc4\xd5\x04(\xc1\xd5\x04\x80\xc3\xd5\x04\xe0\xc9\xd5\x04\xa8\xcb\xd5\x04H\xc8\xd5\x04\xa8\xc5\xd5\x04\xb0\xc9\xd5\x048\xc6\xd5\x04\x18\xcb\xd5\x04@\xc1\xd5\x04(\xc4\xd5\x04\xe8\xc7\xd5\x04\xe8\xca\xd5\x048\xc9\xd5\x048\xc3\xd5\x04\x00\xc5\xd5\x04\xc8\xcc\xd5\x04\x00\xc2\xd5\x04\xd0\xc7\xd5\x04\x98\xcc\xd5\x04\x98\xc9\xd5\x04X\xca\xd5\x04\xc8\xcf\xd5\x04p\xc7\xd5\x04 \xc0\xd5\x04(\xca\xd5\x04\xa0\xca\xd5\x04\xc8\xc6\xd5\x04\x18\xc5\xd5\x04\xa0\xcd\xd5\x04 \xc3\xd5\x04x\xc8\xd5\x040\xc5\xd5\x04\xf0\xce\xd5\x04\x90\xc8\xd5\x04X\xcd\xd5\x04\xb0\xf3\xfc\x04p\xca\xd5\x04\x88\xc1\xd5\x04\x98\xc0\xd5\x04\xf8\xc3\xd5\x040\xc8\xd5\x04h\xc0\xd5\x04P\xc6\xd5\x04H\xcb\xd5\x04`\xce\xd5\x04h\xcf\xd5\x04\x98\xc3\xd5\x04h\xc9\xd5\x04@\xcd\xd5\x04\x90\xcb\xd5\x04\x08\xc6\xd5\x04P\xcc\xd5\x04\xc0\xcb\xd5\x04\x08\xc9\xd5\x04\xd0\xc1\xd5\x04 \xcc\xd5\x04`\xcb\xd5\x04\x88\xca\xd5\x04\xf0\xcb\xd5\x04\x08\xcf\xd5\x04\x98\xcf\xd5\x04\xb8\xcd\xd5\x04\x18\xc2\xd5\x04\x80\xc0\xd5\x04\x18\xc8\xd5\x04\xd0\xcd\xd5\x04\x10\xca\xd5\x04\xf8\xc0\xd5\x04\xb0\xcf\xd5\x040\xce\xd5\x04\x80\xcf\xd5\x04\x10\xc4\xd5\x04\x00\xcb\xd5\x04\x88\xcd\xd5\x04h\xcc\xd5\x04p\xc1\xd5\x04\x00\xce\xd5\x04\xf8\xc9\xd5\x048\xcf\xd5\x04x\xc2\xd5\x04 \xc6\xd5\x04\xd8\xce\xd5\x048\xcc\xd5\x04P\xcf\xd5\x04x\xce\xd5\x04x\xc5\xd5\x04\x18\xce\xd5\x04\xd0\xca\xd5\x04 \xc9\xd5\x04\xb0\xc6\xd5\x04\xf8\xcc\xd5\x04\xc0\xc5\xd5\x04`\xc8\xd5\x048\xc0\xd5\x04X\xc7\xd5\x04\xb0\xcc\xd5\x04H\xce\xd5\x04\x98\xc6\xd5\x04@\xc4\xd5\x04\xa0\xc7\xd5\x04\x08\xcc\xd5\x04\x80\xc9\xd5\x04\x80\xc6\xd5\x04\xc0\xce\xd5\x04@\xca\xd5\x04\xe8\xc1\xd5\x04p\xcd\xd5\x04\x88\xc7\xd5\x04\x08\xc3\xd5\x04\x90\xce\xd5\x04\xb8\xc7\xd5\x04\xe0\xcf\xd5\x04`\xc2\xd5\x04\xe0\xc0\xd5\x04\xe8\xcd\xd5\x04\xd0\xc4\xd5\x04\x80\xcc\xd5\x04\xd8\xcb\xd5\x040\xcb\xd5\x04\x98\xef\xfc\x04\xd0\xe7\xfc\x04 \xe3\xfc\x04x\xe8\xfc\x04x\xee\xfc\x04\xf8\xe3\xfc\x04\x80\xe3\xfc\x04\xb8\xe1\xfc\x048\xef\xfc\x04X\xed\xfc\x04\x88\xe4\xfc\x04\x88\xe7\xfc\x04@\xe7\xfc\x04\xa0\xe1\xfc\x04(\xe1\xfc\x04 \xe9\xfc\x04@\xe4\xfc\x04\x98\xe3\xfc\x04`\xee\xfc\x04\x10\xed\xfc\x04@\xed\xfc\x04h\xe3\xfc\x04\xc0\xeb\xfc\x04\xe0\xec\xfc\x040\xe8\xfc\x04\xe0\xe0\xfc\x04\xd0\xe4\xfc\x04 \xef\xfc\x04p\xe7\xfc\x04\x18\xeb\xfc\x04\xa0\xe7\xfc\x04\x08\xe3\xfc\x04\x00\xe8\xfc\x04\xa8\xe2\xfc\x04\x08\xe6\xfc\x04\xc8\xe3\xfc\x04`\xe8\xfc\x04\xe0\xe3\xfc\x048\xe0\xfc\x04\x18\xee\xfc\x04\xa8\xe8\xfc\x04\x10\xe7\xfc\x04\xb8\xe7\xfc\x04\xb0\xc0\xd5\x04(\xcd\xd5\x04x\xcb\xd5\x04 \xcf\xd5\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3738
sg3632
g3734
sg3646
g3745
sg3641
g3742
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3755
sg3632
g3751
sg3646
g3762
sg3641
g3759
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3772
sg3632
g3768
sg3646
g3779
sg3641
g3776
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3772
sg3632
g3768
sg3646
g3779
sg3641
g3776
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3738
sg3632
g3849
sg3646
g3745
sg3641
g3856
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3868
sg3632
g3864
sg3646
g3875
sg3641
g3872
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3885
sg3632
g3881
sg3646
g3892
sg3641
g3889
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3885
sg3632
g3911
sg3646
g3892
sg3641
g3918
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3823
sg3632
g3926
sg3646
g3830
sg3641
g3933
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3674
sg3632
g3941
sg3646
g3681
sg3641
g3948
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3708
sg3632
g3956
sg3646
g3715
sg3641
g3963
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3823
sg3632
g3926
sg3646
g3830
sg3641
g3933
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3988
sg3632
g3984
sg3646
g3995
sg3641
g3992
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g3988
sg3632
g3984
sg3646
g3995
sg3641
g3992
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g3789
sg3632
g4027
sg3646
g3796
sg3641
g4034
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g4046
sg3632
g4042
sg3646
g4053
sg3641
g4050
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g4089
sg3632
g4085
sg3646
g4096
sg3641
g4093
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g4106
sg3632
g4102
sg3646
g4113
sg3641
g4110
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3674
sg3632
g3941
sg3646
g3681
sg3641
g3948
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g4106
sg3632
g4132
sg3646
g4113
sg3641
g4139
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g4151
sg3632
g4147
sg3646
g4158
sg3641
g4155
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3806
sg3632
g4164
sg3646
g3813
sg3641
g4171
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g4046
sg3632
g4179
sg3646
g4053
sg3641
g4186
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g4211
sg3632
g4207
sg3646
g4218
sg3641
g4215
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3885
sg3632
g3881
sg3646
g3892
sg3641
g3889
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g4089
sg3632
g4085
sg3646
g4096
sg3641
g4093
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3738
sg3632
g3734
sg3646
g3745
sg3641
g3742
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g3823
sg3632
g3926
sg3646
g3830
sg3641
g3933
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3868
sg3632
g4302
sg3646
g3875
sg3641
g4309
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g4211
sg3632
g4207
sg3646
g4218
sg3641
g4215
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g4106
sg3632
g4102
sg3646
g4113
sg3641
g4110
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g4089
sg3632
g4343
sg3646
g4096
sg3641
g4350
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g4151
sg3632
g4358
sg3646
g4158
sg3641
g4365
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g4046
sg3632
g4042
sg3646
g4053
sg3641
g4050
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g4211
sg3632
g4386
sg3646
g4218
sg3641
g4393
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g3674
sg3632
g3941
sg3646
g3681
sg3641
g3948
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3755
sg3632
g4427
sg3646
g3762
sg3641
g4434
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g3789
sg3632
g4027
sg3646
g3796
sg3641
g4034
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g4151
sg3632
g4147
sg3646
g4158
sg3641
g4155
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3789
sg3632
g4027
sg3646
g3796
sg3641
g4034
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g3708
sg3632
g3956
sg3646
g3715
sg3641
g3963
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g4211
sg3632
g4386
sg3646
g4218
sg3641
g4393
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g3708
sg3632
g3956
sg3646
g3715
sg3641
g3963
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g4046
sg3632
g4042
sg3646
g4053
sg3641
g4050
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g3755
sg3632
g3751
sg3646
g3762
sg3641
g3759
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g4046
sg3632
g4042
sg3646
g4053
sg3641
g4050
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g4563
sg3632
g4559
sg3646
g4570
sg3641
g4567
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g4089
sg3632
g4085
sg3646
g4096
sg3641
g4093
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g4563
sg3632
g4559
sg3646
g4570
sg3641
g4567
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g4106
sg3632
g4102
sg3646
g4113
sg3641
g4110
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g4151
sg3632
g4358
sg3646
g4158
sg3641
g4365
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3823
sg3632
g3926
sg3646
g3830
sg3641
g3933
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g3789
sg3632
g4027
sg3646
g3796
sg3641
g4034
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g4106
sg3632
g4132
sg3646
g4113
sg3641
g4139
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3755
sg3632
g3751
sg3646
g3762
sg3641
g3759
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3738
sg3632
g3734
sg3646
g3745
sg3641
g3742
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g4211
sg3632
g4207
sg3646
g4218
sg3641
g4215
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g3885
sg3632
g3911
sg3646
g3892
sg3641
g3918
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g3772
sg3632
g3768
sg3646
g3779
sg3641
g3776
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g3738
sg3632
g3734
sg3646
g3745
sg3641
g3742
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g4563
sg3632
g4784
sg3646
g4570
sg3641
g4791
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3885
sg3632
g3881
sg3646
g3892
sg3641
g3889
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g4211
sg3632
g4386
sg3646
g4218
sg3641
g4393
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3738
sg3632
g3849
sg3646
g3745
sg3641
g3856
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g3868
sg3632
g4302
sg3646
g3875
sg3641
g4309
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g4151
sg3632
g4147
sg3646
g4158
sg3641
g4155
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g3988
sg3632
g3984
sg3646
g3995
sg3641
g3992
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g3674
sg3632
g3941
sg3646
g3681
sg3641
g3948
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3806
sg3632
g4164
sg3646
g3813
sg3641
g4171
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g3708
sg3632
g3956
sg3646
g3715
sg3641
g3963
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g3885
sg3632
g3911
sg3646
g3892
sg3641
g3918
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g4089
sg3632
g4343
sg3646
g4096
sg3641
g4350
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3691
sg3632
g4994
sg3646
g3698
sg3641
g5001
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3738
sg3632
g3849
sg3646
g3745
sg3641
g3856
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g3868
sg3632
g3864
sg3646
g3875
sg3641
g3872
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3988
sg3632
g5035
sg3646
g3995
sg3641
g5042
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g3806
sg3632
g4164
sg3646
g3813
sg3641
g4171
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g3738
sg3632
g3849
sg3646
g3745
sg3641
g3856
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g3868
sg3632
g4302
sg3646
g3875
sg3641
g4309
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g3755
sg3632
g4427
sg3646
g3762
sg3641
g4434
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g4563
sg3632
g4559
sg3646
g4570
sg3641
g4567
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g3657
sg3632
g5128
sg3646
g3664
sg3641
g5135
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3868
sg3632
g4302
sg3646
g3875
sg3641
g4309
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3637
sg3632
g5156
sg3646
g3647
sg3641
g5163
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3885
sg3632
g3911
sg3646
g3892
sg3641
g3918
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3637
sg3632
g5156
sg3646
g3647
sg3641
g5163
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3868
sg3632
g4302
sg3646
g3875
sg3641
g4309
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3674
sg3632
g3941
sg3646
g3681
sg3641
g3948
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g3988
sg3632
g5035
sg3646
g3995
sg3641
g5042
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g3755
sg3632
g4427
sg3646
g3762
sg3641
g4434
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3885
sg3632
g3881
sg3646
g3892
sg3641
g3889
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g3868
sg3632
g3864
sg3646
g3875
sg3641
g3872
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3988
sg3632
g3984
sg3646
g3995
sg3641
g3992
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g4089
sg3632
g4085
sg3646
g4096
sg3641
g4093
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g3772
sg3632
g5327
sg3646
g3779
sg3641
g5334
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g4151
sg3632
g4147
sg3646
g4158
sg3641
g4155
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g3637
sg3632
g5156
sg3646
g3647
sg3641
g5163
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g4211
sg3632
g4386
sg3646
g4218
sg3641
g4393
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g3885
sg3632
g3911
sg3646
g3892
sg3641
g3918
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g4211
sg3632
g4207
sg3646
g4218
sg3641
g4215
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g3806
sg3632
g4164
sg3646
g3813
sg3641
g4171
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g4106
sg3632
g4132
sg3646
g4113
sg3641
g4139
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g4151
sg3632
g4358
sg3646
g4158
sg3641
g4365
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3657
sg3632
g5128
sg3646
g3664
sg3641
g5135
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g3637
sg3632
g5156
sg3646
g3647
sg3641
g5163
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g4046
sg3632
g4179
sg3646
g4053
sg3641
g4186
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g4211
sg3632
g4386
sg3646
g4218
sg3641
g4393
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g4106
sg3632
g4102
sg3646
g4113
sg3641
g4110
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g4106
sg3632
g4132
sg3646
g4113
sg3641
g4139
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g4089
sg3632
g4343
sg3646
g4096
sg3641
g4350
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3691
sg3632
g4994
sg3646
g3698
sg3641
g5001
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3755
sg3632
g4427
sg3646
g3762
sg3641
g4434
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g3691
sg3632
g4994
sg3646
g3698
sg3641
g5001
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3738
sg3632
g3849
sg3646
g3745
sg3641
g3856
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g4046
sg3632
g4179
sg3646
g4053
sg3641
g4186
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g4089
sg3632
g4343
sg3646
g4096
sg3641
g4350
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g3868
sg3632
g3864
sg3646
g3875
sg3641
g3872
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3637
sg3632
g5156
sg3646
g3647
sg3641
g5163
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g4151
sg3632
g4358
sg3646
g4158
sg3641
g4365
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g3988
sg3632
g3984
sg3646
g3995
sg3641
g3992
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g4563
sg3632
g4559
sg3646
g4570
sg3641
g4567
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g3823
sg3632
g3926
sg3646
g3830
sg3641
g3933
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g4563
sg3632
g4784
sg3646
g4570
sg3641
g4791
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g4211
sg3632
g4207
sg3646
g4218
sg3641
g4215
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g3988
sg3632
g5035
sg3646
g3995
sg3641
g5042
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3657
sg3632
g5128
sg3646
g3664
sg3641
g5135
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g4563
sg3632
g4784
sg3646
g4570
sg3641
g4791
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3772
sg3632
g5327
sg3646
g3779
sg3641
g5334
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3738
sg3632
g3734
sg3646
g3745
sg3641
g3742
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g3657
sg3632
g5128
sg3646
g3664
sg3641
g5135
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g3988
sg3632
g5035
sg3646
g3995
sg3641
g5042
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3657
sg3632
g5128
sg3646
g3664
sg3641
g5135
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g3772
sg3632
g3768
sg3646
g3779
sg3641
g3776
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g3691
sg3632
g4994
sg3646
g3698
sg3641
g5001
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3789
sg3632
g4027
sg3646
g3796
sg3641
g4034
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g3885
sg3632
g3881
sg3646
g3892
sg3641
g3889
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g4563
sg3632
g4784
sg3646
g4570
sg3641
g4791
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g4089
sg3632
g4343
sg3646
g4096
sg3641
g4350
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g3772
sg3632
g5327
sg3646
g3779
sg3641
g5334
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g3755
sg3632
g4427
sg3646
g3762
sg3641
g4434
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g3691
sg3632
g4994
sg3646
g3698
sg3641
g5001
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3772
sg3632
g5327
sg3646
g3779
sg3641
g5334
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g3755
sg3632
g3751
sg3646
g3762
sg3641
g3759
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g4106
sg3632
g4102
sg3646
g4113
sg3641
g4110
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g4563
sg3632
g4559
sg3646
g4570
sg3641
g4567
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g4046
sg3632
g4179
sg3646
g4053
sg3641
g4186
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g4563
sg3632
g4784
sg3646
g4570
sg3641
g4791
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g3772
sg3632
g5327
sg3646
g3779
sg3641
g5334
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g4046
sg3632
g4179
sg3646
g4053
sg3641
g4186
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g3868
sg3632
g3864
sg3646
g3875
sg3641
g3872
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g4046
sg3632
g4042
sg3646
g4053
sg3641
g4050
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g3988
sg3632
g5035
sg3646
g3995
sg3641
g5042
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g4151
sg3632
g4358
sg3646
g4158
sg3641
g4365
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3708
sg3632
g3956
sg3646
g3715
sg3641
g3963
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g4089
sg3632
g4085
sg3646
g4096
sg3641
g4093
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g4106
sg3632
g4132
sg3646
g4113
sg3641
g4139
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g3772
sg3632
g3768
sg3646
g3779
sg3641
g3776
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3806
sg3632
g4164
sg3646
g3813
sg3641
g4171
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g4151
sg3632
g4147
sg3646
g4158
sg3641
g4155
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3755
sg3632
g3751
sg3646
g3762
sg3641
g3759
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I81429328
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'\xa8\xb1c\x12\x10\xc1c\x128\xc1c\x12`\xc1c\x12\xe0\x16\x1b\x03\x88\xc1c\x12 \xbcb\x12\xb0\xc1c\x12`\x18\x1b\x03 \xbcb\x12P\xbcb\x12\x10\xc1c\x12\xb0\xc1c\x12\xa8\xb1c\x12\x80\xbcb\x12\xa0\xbdb\x12\x80\xbcb\x12\xe0\xbcb\x12\xa8\xb1c\x12\x88\xc1c\x12\x80\xbcb\x12\xd8\xc1c\x12`\xc1c\x12\xb0\xbcb\x12x\xc2c\x12\x80\xbcb\x120\xbeb\x12 \xbcb\x12\x00\xbeb\x12\x88\xb2c\x12\xe0\xb1c\x128\xc1c\x12\xe0\xb1c\x12P\xb2c\x12\xb0\xbcb\x12 \xbcb\x120\xbeb\x12\xb0\xbcb\x12P\xbcb\x12\xe0\xb1c\x12x\xc2c\x12\xd0\xbdb\x12\xc0\xb2c\x12@\xc3c\x12\xe0\xbcb\x12\x10\xc1c\x128\xc1c\x12\x10\xc1c\x12\x80\xbcb\x12P\xbcb\x12\xa0\x16\x1b\x03\x10\xc1c\x12 \xbcb\x12\xa0\x16\x1b\x03\xa8\xb1c\x12\x88\xc1c\x12\xe0\xb1c\x12\xc8\xc2c\x120\xbeb\x12\xe0\xd3~\x0c\xb0\xbcb\x12\x10\xc1c\x12`\xc1c\x12\xb0\xbcb\x12\xe0\xbcb\x12\x88\xc1c\x12\x00\xc2c\x12@\x1e\x1b\x03\xe0\x16\x1b\x030\xbeb\x12\xe0\xbcb\x12\xa0\xbdb\x12\xe0\x16\x1b\x03(\xc2c\x12\xa8\xb1c\x12\xf8\xb2c\x12\xa8\xb1c\x12\xe0\x16\x1b\x03\x80\xbcb\x12\x10\xbdb\x12\xa0\x16\x1b\x03\xe0\x16\x1b\x03(\xc2c\x12\x10\xbdb\x12\xe0\xb1c\x12\xe0\xbcb\x12\x00\xc2c\x12 \xdf~\x0c\x88\xb2c\x12\x10\xc1c\x12 \xdf~\x0c\xe0\xb1c\x12`\x18\x1b\x03\xb0\xc1c\x12 \xbcb\x12\xa0\xc2c\x12\x10\xbdb\x128\xc1c\x12p\xbdb\x12\x88\xc1c\x12`\xc1c\x12P\xbcb\x12 \xbcb\x128\xc1c\x12`\xc1c\x12\x00\xbeb\x12\xf0\xc2c\x12(\xc2c\x12\xa0\x16\x1b\x03`\x18\x1b\x03\xa0\x16\x1b\x03`\xc1c\x12\x00\xbeb\x12 \xbcb\x12P\xbcb\x12@\x1e\x1b\x03\xb0\xbcb\x12\x88\xc1c\x12\xd8\xc1c\x12P\xbcb\x12\xe0\xd3~\x0c`\xc1c\x12\xd0\xbdb\x12\xb0\xc1c\x12\x80\xbcb\x12\xa0\xbdb\x12\x88\xc1c\x12 \xbcb\x12@\x1e\x1b\x030\xbeb\x12\xd8\xc1c\x12`\x18\x1b\x038\xc1c\x12@\x1e\x1b\x03P\xbcb\x12@\x1e\x1b\x03\xa0\x16\x1b\x03\x10\xbdb\x12 \xdf~\x0c\xb0\xc1c\x128\xc1c\x12`\x18\x1b\x03\xe0\x16\x1b\x03 \xbcb\x12\xf8\xb2c\x12\xe0\xb1c\x12P\xb2c\x12\xb0\xbcb\x12`\xc1c\x12\xb0\xc1c\x12\xe0\xb1c\x12\xa8\xb1c\x12\x80\xbcb\x12\xf0\xc2c\x12\x88\xc1c\x12\xb0\xc1c\x12\xe0\x16\x1b\x03\xb0\xc1c\x12 \xdf~\x0c\x80\xbcb\x128\xc1c\x12\xd8\xc1c\x12@\x1e\x1b\x03\x88\xc1c\x12\x00\xbeb\x12\xf8\xb2c\x12\xd8\xc1c\x12\xf8\xb2c\x12`\x18\x1b\x03\x00\xc2c\x12`\x18\x1b\x03(\xc2c\x12\x10\xbdb\x12p\xbdb\x12\x00\xc2c\x12\xe0\xbcb\x12`\x18\x1b\x03\x80\xbcb\x12\xa0\xc2c\x12P\xbcb\x12\xa8\xb1c\x12@\x1e\x1b\x03x\xc2c\x12@\x1e\x1b\x03(\xc2c\x12`\x18\x1b\x03\xd8\xc1c\x12\xe0\xbcb\x12\xa8\xb1c\x12@\x1e\x1b\x03\x10\xbdb\x12\xe0\xb1c\x12\xe0\xbcb\x12\xe0\x16\x1b\x03\xe0\xd3~\x0c\x00\xc2c\x12\xa8\xb1c\x12\xe0\xd3~\x0c(\xc2c\x12h\xc3c\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x80\x8bd\x12\xa0\x8ad\x12\xe0\x89d\x12\xa0\x8bd\x12@\x8cd\x12 \x8bd\x12\xc0\x8cd\x12\xe0\x8cd\x12 \x8cd\x12 \x8ad\x12\x00\x8bd\x12`\x8bd\x12\xc0\x8ad\x12\x00\x8ed\x12@\x8bd\x12\x80\x8cd\x12\xa0\x8cd\x12\xe0\x8dd\x12\xe0\x8ad\x12`\x8ad\x12@\x8dd\x12\xe0\x8bd\x12\xa0\x8ed\x12 \x8ed\x12\x00\x8fd\x12 \x8fd\x12`\x8dd\x12\xc0\x8dd\x12@\x8fd\x12 \x8dd\x12\xc0\x8fd\x12\x80\x8fd\x12@\x8ad\x12\xe0\x8ed\x12`\x8ed\x12\xc0\x8bd\x12@\x8ed\x12\x80\x8ed\x12\xa0\x8dd\x12`\x8cd\x12\x00\x8dd\x12\xa0\x8fd\x12\x00\x8cd\x12`\x8fd\x12\x80\x8dd\x12\xe0\x8fd\x12\x00\x8ad\x12\xc0i~\x0c@\xe0x\x12\xe0\xe1x\x12`\xe2x\x12\xc0\xe1x\x12\x80\xe2x\x12\xc0\xe2x\x12\xa0\xe0x\x12\x00\xe3x\x12\xe0\xe2x\x12@\xe3x\x12 \xe3x\x12 \xe2x\x12`\xe3x\x12\x80\xe3x\x12\xa0\xe3x\x12\xc0\xe3x\x12 \xe4x\x12\x00\xe4x\x12\xe0\xe0x\x12@\xe4x\x12`\xe4x\x12\x80\xe4x\x12\xa0\xe4x\x12\xc0\xe4x\x12 \xe5x\x12\x00\xe5x\x12`\xe5x\x12\x80\xe5x\x12\xa0\xe5x\x12\x00\xe2x\x12@\xe1x\x12\xc0\xe5x\x12\xe0\xe5x\x12\x00\xe6x\x12 \xe6x\x12@\xe6x\x12`\xe6x\x12\xc0\xe6x\x12\xa0\xe6x\x12\x00\xe1x\x12 \xe7x\x12\x00\xe7x\x12`\xe7x\x12\x80\xe7x\x12\xa0\xe7x\x12\xc0\xe7x\x12`\xe1x\x12\xe0\xe3x\x12\xe0\xe7x\x12@\xe8x\x12 \xe8x\x12\x80\xe8x\x12`\xe8x\x12\x80\xe1x\x12\xe0\xe8x\x12\xc0\xe8x\x12 \xe9x\x12\x00\xe9x\x12`\xe9x\x12@\xe9x\x12\xa0\xe1x\x12\x80\xe9x\x12\xe0\xe9x\x12\xc0\xe9x\x12 \xeax\x12@\xeax\x12`\xeax\x12\xa0\xe2x\x12\xe0\xeax\x12\xc0\xe0x\x12@\xebx\x12`\xe0x\x12@\xe5x\x12@\xe7x\x12\xc0\xebx\x12\xe0\xe6x\x12\x80\xeax\x12\xa0\xebx\x12\x00\xebx\x12\x00\xecx\x12 \xecx\x12\xc0\xeax\x12\x00\xe8x\x12\x80\xecx\x12`\xecx\x12\xc0\xecx\x12\xa0\xecx\x12\x00\xedx\x12\xe0\xecx\x12\x80\xe0x\x12`\xedx\x12@\xedx\x12\x00\xeax\x12\x80\xedx\x12\xa0\x10~\x0c\xc0\xedx\x12 \xeex\x12`\xebx\x12\xa0\xe9x\x12\xe0\xedx\x12\xa0\xeax\x12\x80\xe6x\x12 \xe1x\x12@\xecx\x12 \xefx\x12\xe0\xebx\x12\x80\xebx\x12\x80\xefx\x12\xc0\xefx\x12 \xe0x\x12@\xeex\x12\x80\xeex\x12@\xefx\x12`\xefx\x12 \xedx\x12\xe0\xeex\x12\xa0\xeex\x12`\xeex\x12 \xebx\x12\xa0\xe8x\x12\xa0\xedx\x12\xc0\xeex\x12@\xe2x\x12\x00\xefx\x12\xe0\xefx\x12\x00\xeex\x12\xa0\xefx\x12\x80\xb0\xa3\x12\xe0\xb1\xa3\x12`\xb2\xa3\x12\xc0\xb1\xa3\x12\x80\xb2\xa3\x12\xa0\xb2\xa3\x12\xe0\xb2\xa3\x12 \xb0\xa3\x12 \xb2\xa3\x12\x00\xb3\xa3\x12 \xb3\xa3\x12\x80\xb3\xa3\x12\xa0\xb3\xa3\x12 \xb1\xa3\x12`\xb0\xa3\x12\xc0\xb3\xa3\x12\xe0\xb3\xa3\x12\x00\xb4\xa3\x12 \xb4\xa3\x12@\xb4\xa3\x12`\xb4\xa3\x12\x80\xb4\xa3\x12\xe0\xb4\xa3\x12\xc0\xb4\xa3\x12@\xb0\xa3\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S't\x83w?I]\x15?\xe3\xd1\x0c?\x9d\x12q@EX\x95?\xeb\x9fY?>\xd5\xac?\xa0X\x95?\x0b\x8d\x88?\x7f\xa0Y?E\x06\x80?\x86\xb6*?\x10WU@\xb9\x00p@]\x7fw?\xe2\xad\x8a?g\x15/?\xf0\x7f7?\xe3F\x84?\xd1k\x86?\xa0\xc1\x9b?-C3?\xf8\xaeH?;UD?\x07\x847?\x07\xf5\x8e?\\RU?\xd0\x15\xb1?"."?;\x04\x80?D\xe9\x1d?\xfa\xbc;?\x9e)\x82?Nk&?B\xa1\x19?\x999s?\xe4\x82\xa8?\x81\x93H?\xce\x19Q?PCs?\x868\x93?Duf?w\xd0\x8c?M\xfd.?\x12\xb1*?%\xe8\x1d?\xd9\x9e\x19?\x1d\xdb\x0c?\xb6<3?X\x90\x88?\xe1\xd0\xac?\x06{\xe6>i\xac\xca?\xb8\x8b\xa8?\x95\xfb.?\xe5\xcf\x8c?E\x8f\x88?\xff\xae*?h\xd5]?\x14\xb2*?\xbf\x1dQ?\xe4\xf4.?d\xdaL?\x8e\xd2;?.\xa5\x19?\'n\xa6?Z\x1f\x82?\xc0a\x15?\xc1\x9aw?:\xc2\x0c?\x9bsf?\xd0\xa6Y?\xba\xb7j?\xa8\xe7\x1d?y\xacY?\xfe\x1c\x11?\x19sf?\x84\x14Q?L\x857?\x01\xa0\x19?\x9b\xa8Y?\':3?%`\x15?\x0f\x07@?\xca5\xb3?n^U?\xdd$Q?x<3?t\xc6{?q\xda\x0c?\xd3\xeb\x1d?\x0f\x8e\xc8?\xe85"?$\xd3L?\xa4\xe2\x9d?\xcc\xda\x0c?\x82c\x15?\xc9[\x05@O\x0c@?\xedA3?\xd1p&?\xba`U?\xc7\x807?\xbauU?\xd6\\\x15?a\xf5.?\xf1\x17\x91?M\xeb\x1d?\x06\xe3\x1d?K\x97\x08?\'\xfb.?\xac\xef\x1d?\xf9LD?\xa4\xd2\x8c?\xef\xde\xec?\x97\xb9*?M\xeb\x1d?\xb9\x9aY@\x82JD?G\xd0\x8c?]\x8e\xa8?:\xb6*?a\xe7\x1d?\xdc\xb6*?bOD?\xa0\xecL?\x18\xd8L?h\x9d\x99?I\x8ef?&\xf6??\x1d\x837?\x88Eb?\xdd\xf3.?\xd2^U?\xcf\x15\x91?\xfc\\\x15?\xb5\x82w?qT\x04?9\xba*?\xdb\xad\xaa?\xdaw\xf7?\xcb\xe7]?:\xfe\xff>\x07\xa6Y?J\xe1\xbd?\r\xa3\x19?\x07\xc9\x0c?Q\\U?\'5\x11?|+b?\xaf3"?O\x06@?\xf3\xb9j?\x88\xeb]?\xef\xb3\n@\xc7+"?\xba\x1dQ?\xe9\xdc\x0c?\x9a."?g\xee\x1d?\xc3a\x04?\xb4\xb7*?o\x90\x08?\xfc\xf8.?\x834\x03@\x96\xd9L?\xc9\x857?\xccr&?\xf9\x1e\x11?\xbc\x91Y?\xe5pf?\x01XE@\x9f83?V\x1fQ?\x19\x07\x11?\xca\xd9\x0c?\xfa\xe7\x1d?\xcc6\x11?\x98)"?\xd1\x1d\x11?\xb8aU?\x12\x86w?~\x18\x11?\xd8\xeb\x1d?\xebm&?\xb7a\x15?\xb2\xfbn?*\xf2\xae?.\xa7\x19?\xee\xc7\xf7>\x13\xd4L?E\xce\x1c@\x8f\x8e\x88?\x83\x0c@?.\xc0\x19?\xc5\x81\x08?\xa6\xc1;?m\xab*@?\xfd\xee>M \x11?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'\xd8\xeb\xfc\x04\xc8\xe0\xfc\x04\xf8\xb0\xf9\x040\xb8\xf9\x04p\xba\xf9\x04(\xb7\xf9\x04(\xb4\xf9\x04(\xb1\xf9\x04\x08\xb6\xf9\x040\xbb\xf9\x04(\xba\xf9\x04\xb0\xbf\xf9\x04\x18\xb2\xf9\x04x\xb8\xf9\x04@\xba\xf9\x04h\xbf\xf9\x04\xc0\xbb\xf9\x04X\xb1\xf9\x04\xd0\xb1\xf9\x04H\xbe\xf9\x04\x08\xb9\xf9\x04\xe0\xb3\xf9\x04\x08\xb3\xf9\x04P\xbf\xf9\x04\xc8\xb0\xf9\x04\xb8\xba\xf9\x04x\xb5\xf9\x04\xe0\xbc\xf9\x04\x90\xb8\xf9\x04h\xb0\xf9\x04X\xbd\xf9\x04\xa0\xb1\xf9\x04\x18\xb8\xf9\x04\x88\xb1\xf9\x048\xb9\xf9\x04\xd0\xb7\xf9\x04 \xb9\xf9\x04\xc8\xbc\xf9\x04\xf8\xb9\xf9\x04\xf8\xb3\xf9\x04P\xbc\xf9\x040\xb2\xf9\x04\x00\xb5\xf9\x04\xa0\xb7\xf9\x04`\xbe\xf9\x048\xbc\xf9\x04\xe0\xb9\xf9\x04\xd0\xba\xf9\x048\xb6\xf9\x04(\xbd\xf9\x04\x88\xb7\xf9\x04h\xb9\xf9\x04\xf0\xbb\xf9\x04\xc8\xbf\xf9\x04\xe0\xb0\xf9\x04\x90\xbb\xf9\x04\x10\xbd\xf9\x04\xd8\xbe\xf9\x04\xa8\xbb\xf9\x04\x80\xbc\xf9\x04x\xbb\xf9\x04\x10\xb7\xf9\x04\xf0\xbe\xf9\x04X\xba\xf9\x04\xa8\xbe\xf9\x04\xd0\xb4\xf9\x04\xe0\xb6\xf9\x04\xb0\xbc\xf9\x04P\xb3\xf9\x04\xb8\xbd\xf9\x04@\xb1\xf9\x04`\xb2\xf9\x04\x80\xb9\xf9\x04\xd8\xb8\xf9\x04\xc0\xbe\xf9\x04 \xb0\xf9\x04\x98\xbc\xf9\x04@\xbd\xf9\x04\xc8\x93\xd4\x04\xe8\xbd\xf9\x04\xc8\xb9\xf9\x04\x18\xbe\xf9\x04`\xbb\xf9\x04\x80\xbf\xf9\x04\x88\xbd\xf9\x04\x98\xbf\xf9\x04\x98\xb6\xf9\x04\xe0\xbf\xf9\x04h\xbc\xf9\x04\xb0\xb0\xf9\x04\x08\xbc\xf9\x04x\xbe\xf9\x040\xb5\xf9\x04 \xbc\xf9\x04\x00\xb2\xf9\x04\xf8\xbc\xf9\x04\xe8\xba\xf9\x04 \xb3\xf9\x04\xd8\xb2\xf9\x04\x10\xb4\xf9\x04p\xbd\xf9\x04\x18\xbb\xf9\x040\xbe\xf9\x04P\xb9\xf9\x04 \xbf\xf9\x04\xd0\xbd\xf9\x04\x10\xba\xf9\x04\xf0\xb8\xf9\x04`\xb8\xf9\x04\x00\xbe\xf9\x04\xa0\xbd\xf9\x04H\xbb\xf9\x04\xa8\x9e\xd4\x04\xc0\x98\xd4\x04h\x9c\xd4\x04\xc8\x9f\xd4\x04\xd8\x92\xd4\x04\xb0\x90\xd4\x04 \x90\xd4\x04\xd0\x9d\xd4\x04\xd0\x94\xd4\x04p\x91\xd4\x04\x98\x9c\xd4\x048\x93\xd4\x040\x95\xd4\x04x\x98\xd4\x04\xf8\x96\xd4\x04\xe0\x90\xd4\x04\x90\x95\xd4\x04\xb0\x96\xd4\x04\x88\x91\xd4\x04p\x9d\xd4\x04\xa8\x92\xd4\x048\x90\xd4\x04p\x97\xd4\x04\xc0\x92\xd4\x04\xd8\x98\xd4\x04\xf0\x9b\xd4\x04\x18\x92\xd4\x04P\x93\xd4\x04X\x91\xd4\x04p\x94\xd4\x04\xe8\x97\xd4\x04\x08\x96\xd4\x04P\x90\xd4\x04h\x90\xd4\x04\x98\x93\xd4\x04\x18\x95\xd4\x04\xf8\xb6\xf9\x04\x88\xba\xf9\x04\x00\xbb\xf9\x04\x90\xb5\xf9\x04`\xb5\xf9\x04\xb0\xb6\xf9\x04\x10\xb1\xf9\x04\xa8\xb5\xf9\x04X\xb4\xf9\x04\xb0\xb3\xf9\x04p\xb4\xf9\x04\xa8\xb8\xf9\x04\x80\xb6\xf9\x04\xf0\xb5\xf9\x04\x90\xbe\xf9\x04h\xb3\xf9\x04\xe8\xb4\xf9\x04p\xb7\xf9\x04H\xb8\xf9\x04\xb0\xb9\xf9\x04\xb8\xb1\xf9\x04h\xb6\xf9\x04\xc0\xb5\xf9\x04@\xb4\xf9\x04\x98\xb9\xf9\x04\x98\xb3\xf9\x04P\xb6\xf9\x04X\xb7\xf9\x04\xf0\xb2\xf9\x04\xe8\xb7\xf9\x04\xc8\xb3\xf9\x04@\xb7\xf9\x048\xb3\xf9\x04\xe8\xb1\xf9\x04\xb8\xb4\xf9\x048\xb0\xf9\x04\x98\xb0\xf9\x04\xd8\xb5\xf9\x04p\xb1\xf9\x04\x80\xb0\xf9\x04 \xb6\xf9\x04\x88\xb4\xf9\x04\x00\xb8\xf9\x04H\xb2\xf9\x04\xa8\xb2\xf9\x04\xa0\xba\xf9\x04\xd8\xbb\xf9\x04\xb8\xb7\xf9\x04\x18\xb5\xf9\x04\x80\xb3\xf9\x04\xa0\xb4\xf9\x04H\xb5\xf9\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6480
sg6370
g6527
sg6384
g6487
sg6379
g6534
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6546
sg6370
g6542
sg6384
g6553
sg6379
g6550
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6395
sg6370
g6559
sg6384
g6402
sg6379
g6566
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6497
sg6370
g6574
sg6384
g6504
sg6379
g6581
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6375
sg6370
g6589
sg6384
g6385
sg6379
g6596
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6631
sg6370
g6621
sg6384
g6625
sg6379
g6629
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6608
sg6370
g6638
sg6384
g6615
sg6379
g6645
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6657
sg6370
g6653
sg6384
g6664
sg6379
g6661
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6463
sg6370
g6683
sg6384
g6470
sg6379
g6690
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6715
sg6370
g6711
sg6384
g6722
sg6379
g6719
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6631
sg6370
g6741
sg6384
g6625
sg6379
g6748
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6608
sg6370
g6638
sg6384
g6615
sg6379
g6645
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6792
sg6370
g6782
sg6384
g6786
sg6379
g6790
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6480
sg6370
g6527
sg6384
g6487
sg6379
g6534
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6715
sg6370
g6812
sg6384
g6722
sg6379
g6819
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6446
sg6370
g6827
sg6384
g6453
sg6379
g6834
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6846
sg6370
g6842
sg6384
g6853
sg6379
g6850
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6846
sg6370
g6842
sg6384
g6853
sg6379
g6850
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6412
sg6370
g6885
sg6384
g6419
sg6379
g6892
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6631
sg6370
g6741
sg6384
g6625
sg6379
g6748
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6480
sg6370
g6527
sg6384
g6487
sg6379
g6534
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6792
sg6370
g6926
sg6384
g6786
sg6379
g6933
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6631
sg6370
g6621
sg6384
g6625
sg6379
g6629
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6546
sg6370
g6954
sg6384
g6553
sg6379
g6961
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6846
sg6370
g6969
sg6384
g6853
sg6379
g6976
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6657
sg6370
g6997
sg6384
g6664
sg6379
g7004
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6514
sg6370
g7012
sg6384
g6521
sg6379
g7019
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6846
sg6370
g6969
sg6384
g6853
sg6379
g6976
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6657
sg6370
g6653
sg6384
g6664
sg6379
g6661
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6395
sg6370
g6559
sg6384
g6402
sg6379
g6566
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6412
sg6370
g6885
sg6384
g6419
sg6379
g6892
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6395
sg6370
g6559
sg6384
g6402
sg6379
g6566
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6546
sg6370
g6542
sg6384
g6553
sg6379
g6550
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g7122
sg6370
g7118
sg6384
g7129
sg6379
g7126
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6395
sg6370
g6559
sg6384
g6402
sg6379
g6566
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g7122
sg6370
g7161
sg6384
g7129
sg6379
g7168
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6375
sg6370
g6589
sg6384
g6385
sg6379
g6596
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6463
sg6370
g6683
sg6384
g6470
sg6379
g6690
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6846
sg6370
g6842
sg6384
g6853
sg6379
g6850
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6463
sg6370
g6683
sg6384
g6470
sg6379
g6690
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6792
sg6370
g6782
sg6384
g6786
sg6379
g6790
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g7122
sg6370
g7118
sg6384
g7129
sg6379
g7126
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6631
sg6370
g6621
sg6384
g6625
sg6379
g6629
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6429
sg6370
g7280
sg6384
g6436
sg6379
g7287
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6631
sg6370
g6741
sg6384
g6625
sg6379
g6748
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6657
sg6370
g6997
sg6384
g6664
sg6379
g7004
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6463
sg6370
g6683
sg6384
g6470
sg6379
g6690
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6792
sg6370
g6926
sg6384
g6786
sg6379
g6933
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g7351
sg6370
g7347
sg6384
g7358
sg6379
g7355
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6792
sg6370
g6782
sg6384
g6786
sg6379
g6790
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6657
sg6370
g6997
sg6384
g6664
sg6379
g7004
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6631
sg6370
g6741
sg6384
g6625
sg6379
g6748
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6446
sg6370
g6827
sg6384
g6453
sg6379
g6834
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g7433
sg6370
g7429
sg6384
g7440
sg6379
g7437
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6375
sg6370
g6589
sg6384
g6385
sg6379
g6596
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g7469
sg6370
g7459
sg6384
g7463
sg6379
g7467
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6446
sg6370
g6827
sg6384
g6453
sg6379
g6834
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g7469
sg6370
g7515
sg6384
g7463
sg6379
g7522
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g7122
sg6370
g7161
sg6384
g7129
sg6379
g7168
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g7433
sg6370
g7556
sg6384
g7440
sg6379
g7563
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g7469
sg6370
g7515
sg6384
g7463
sg6379
g7522
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6846
sg6370
g6842
sg6384
g6853
sg6379
g6850
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6657
sg6370
g6653
sg6384
g6664
sg6379
g6661
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6792
sg6370
g6926
sg6384
g6786
sg6379
g6933
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g7433
sg6370
g7429
sg6384
g7440
sg6379
g7437
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6446
sg6370
g6827
sg6384
g6453
sg6379
g6834
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6395
sg6370
g6559
sg6384
g6402
sg6379
g6566
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g7433
sg6370
g7429
sg6384
g7440
sg6379
g7437
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6846
sg6370
g6842
sg6384
g6853
sg6379
g6850
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6497
sg6370
g6574
sg6384
g6504
sg6379
g6581
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6429
sg6370
g7280
sg6384
g6436
sg6379
g7287
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g7469
sg6370
g7459
sg6384
g7463
sg6379
g7467
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6546
sg6370
g6954
sg6384
g6553
sg6379
g6961
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6463
sg6370
g6683
sg6384
g6470
sg6379
g6690
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6429
sg6370
g7280
sg6384
g6436
sg6379
g7287
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6546
sg6370
g6542
sg6384
g6553
sg6379
g6550
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6412
sg6370
g6885
sg6384
g6419
sg6379
g6892
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6429
sg6370
g7280
sg6384
g6436
sg6379
g7287
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6715
sg6370
g6711
sg6384
g6722
sg6379
g6719
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6497
sg6370
g6574
sg6384
g6504
sg6379
g6581
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g7433
sg6370
g7556
sg6384
g7440
sg6379
g7563
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g7122
sg6370
g7161
sg6384
g7129
sg6379
g7168
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g7122
sg6370
g7118
sg6384
g7129
sg6379
g7126
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6715
sg6370
g6812
sg6384
g6722
sg6379
g6819
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6480
sg6370
g6527
sg6384
g6487
sg6379
g6534
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6546
sg6370
g6954
sg6384
g6553
sg6379
g6961
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g7351
sg6370
g7347
sg6384
g7358
sg6379
g7355
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6631
sg6370
g6741
sg6384
g6625
sg6379
g6748
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6715
sg6370
g6812
sg6384
g6722
sg6379
g6819
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6546
sg6370
g6954
sg6384
g6553
sg6379
g6961
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g7122
sg6370
g7118
sg6384
g7129
sg6379
g7126
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6657
sg6370
g6653
sg6384
g6664
sg6379
g6661
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6497
sg6370
g6574
sg6384
g6504
sg6379
g6581
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6608
sg6370
g6638
sg6384
g6615
sg6379
g6645
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6631
sg6370
g6621
sg6384
g6625
sg6379
g6629
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6480
sg6370
g6527
sg6384
g6487
sg6379
g6534
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g7351
sg6370
g8156
sg6384
g7358
sg6379
g8163
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6792
sg6370
g6926
sg6384
g6786
sg6379
g6933
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6715
sg6370
g6812
sg6384
g6722
sg6379
g6819
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6514
sg6370
g7012
sg6384
g6521
sg6379
g7019
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6412
sg6370
g6885
sg6384
g6419
sg6379
g6892
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g7351
sg6370
g8156
sg6384
g7358
sg6379
g8163
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6546
sg6370
g6954
sg6384
g6553
sg6379
g6961
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g7351
sg6370
g8156
sg6384
g7358
sg6379
g8163
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g7122
sg6370
g7161
sg6384
g7129
sg6379
g7168
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g7469
sg6370
g7459
sg6384
g7463
sg6379
g7467
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g7433
sg6370
g7556
sg6384
g7440
sg6379
g7563
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6514
sg6370
g7012
sg6384
g6521
sg6379
g7019
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g7469
sg6370
g7515
sg6384
g7463
sg6379
g7522
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6846
sg6370
g6969
sg6384
g6853
sg6379
g6976
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6631
sg6370
g6621
sg6384
g6625
sg6379
g6629
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6429
sg6370
g7280
sg6384
g6436
sg6379
g7287
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6846
sg6370
g6969
sg6384
g6853
sg6379
g6976
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6608
sg6370
g6638
sg6384
g6615
sg6379
g6645
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6497
sg6370
g6574
sg6384
g6504
sg6379
g6581
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g7433
sg6370
g7429
sg6384
g7440
sg6379
g7437
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6412
sg6370
g6885
sg6384
g6419
sg6379
g6892
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6715
sg6370
g6711
sg6384
g6722
sg6379
g6719
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g7351
sg6370
g7347
sg6384
g7358
sg6379
g7355
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6715
sg6370
g6711
sg6384
g6722
sg6379
g6719
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g7469
sg6370
g7459
sg6384
g7463
sg6379
g7467
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6715
sg6370
g6711
sg6384
g6722
sg6379
g6719
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g7469
sg6370
g7459
sg6384
g7463
sg6379
g7467
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6514
sg6370
g7012
sg6384
g6521
sg6379
g7019
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6792
sg6370
g6782
sg6384
g6786
sg6379
g6790
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6514
sg6370
g7012
sg6384
g6521
sg6379
g7019
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g7433
sg6370
g7429
sg6384
g7440
sg6379
g7437
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g7469
sg6370
g7515
sg6384
g7463
sg6379
g7522
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6546
sg6370
g6542
sg6384
g6553
sg6379
g6550
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6792
sg6370
g6782
sg6384
g6786
sg6379
g6790
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6657
sg6370
g6653
sg6384
g6664
sg6379
g6661
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6608
sg6370
g6638
sg6384
g6615
sg6379
g6645
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6546
sg6370
g6542
sg6384
g6553
sg6379
g6550
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6375
sg6370
g6589
sg6384
g6385
sg6379
g6596
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g7351
sg6370
g8156
sg6384
g7358
sg6379
g8163
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g7351
sg6370
g8156
sg6384
g7358
sg6379
g8163
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g7433
sg6370
g7556
sg6384
g7440
sg6379
g7563
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6715
sg6370
g6812
sg6384
g6722
sg6379
g6819
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6657
sg6370
g6997
sg6384
g6664
sg6379
g7004
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g7351
sg6370
g7347
sg6384
g7358
sg6379
g7355
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g7469
sg6370
g7515
sg6384
g7463
sg6379
g7522
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6846
sg6370
g6969
sg6384
g6853
sg6379
g6976
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6657
sg6370
g6997
sg6384
g6664
sg6379
g7004
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6446
sg6370
g6827
sg6384
g6453
sg6379
g6834
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g7122
sg6370
g7161
sg6384
g7129
sg6379
g7168
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6792
sg6370
g6926
sg6384
g6786
sg6379
g6933
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6375
sg6370
g6589
sg6384
g6385
sg6379
g6596
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g7122
sg6370
g7118
sg6384
g7129
sg6379
g7126
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g7433
sg6370
g7556
sg6384
g7440
sg6379
g7563
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g7351
sg6370
g7347
sg6384
g7358
sg6379
g7355
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.