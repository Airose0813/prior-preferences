ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C24_infer_design1_no_eyetracking_2015_Oct_17_1818
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xdb\x07\xa2Y\xf5\xffM@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Oct_17_1818
p66
sVparticipant
p67
VC24
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F4.3000732412347134
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F21.349687406185694
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P11'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F13.651
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F2.2800000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\r\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p102
sg21
F2
sg69
Vn
sa(dp103
g63
g64
sg20
F12.784000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F1.1000000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'%\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p109
sg21
F1.1000000000000001
sg69
Vn
sa(dp110
g63
g64
sg20
F4.234
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'"\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p116
sg21
F1.8
sg69
Vn
sa(dp117
g63
g64
sg20
F15.016999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F0.51999999999999935
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\x19\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p123
sg21
F1.2
sg69
Vn
sa(dp124
g63
g64
sg20
F6.3010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'#\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p130
sg21
F1.7
sg69
Vn
sa(dp131
g63
g64
sg20
F4.0679999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F1.5600000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x0e\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p137
sg21
F1.2
sg69
Vn
sa(dp138
g63
g64
sg20
F3.5670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.019999999999999383
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\x02\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p144
sg21
F1.1000000000000001
sg69
Vn
sa(dp145
g63
g64
sg20
F3.6669999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F2.5800000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x17\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p151
sg21
F2
sg69
Vn
sa(dp152
g63
g64
sg20
F3.3010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x18\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p158
sg21
F1.7
sg69
Vn
sa(dp159
g63
g64
sg20
F8.2170000000000005
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x1e\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p165
sg21
F1.8999999999999999
sg69
Vn
sa(dp166
g63
g64
sg20
F3.5009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F1.7200000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'$\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V48-twix.png
p172
sg21
F1.2
sg69
Vn
sa(dp173
g63
g64
sg20
F6.2169999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0.69999999999999907
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'\x0f\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p179
sg21
F1.7
sg69
Vn
sa(dp180
g63
g64
sg20
F5.0839999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F1.7600000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x03\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V4-corn.png
p186
sg21
F1.3
sg69
Vn
sa(dp187
g63
g64
sg20
F3.6840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F1.7800000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'!\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V44-crunch.png
p193
sg21
F1.3
sg69
Vn
sa(dp194
g63
g64
sg20
F2.6509999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F1.1999999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\x05\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p200
sg21
F1.6000000000000001
sg69
Vn
sa(dp201
g63
g64
sg20
F3.2669999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F2.1000000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\x04\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p207
sg21
F1.8999999999999999
sg69
Vn
sa(dp208
g63
g64
sg20
F6.4169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F2
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\x15\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V29-beans.png
p214
sg21
F1.7
sg69
Vn
sa(dp215
g63
g64
sg20
F2.484
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F1.7800000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x0b\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p221
sg21
F1.3999999999999999
sg69
Vn
sa(dp222
g63
g64
sg20
F8.8670000000000009
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F2.8000000000000012
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x06\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V7-olives.png
p228
sg21
F1.2
sg69
Vn
sa(dp229
g63
g64
sg20
F3.0339999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F0.85999999999999943
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\x07\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p235
sg21
F1.3999999999999999
sg69
Vn
sa(dp236
g63
g64
sg20
F2.9009999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F2.8000000000000007
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x1d\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V40-sardines.png
p242
sg21
F1.8
sg69
Vn
sa(dp243
g63
g64
sg20
F4.484
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F1.8200000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x1b\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p249
sg21
F1.2
sg69
Vn
sa(dp250
g63
g64
sg20
F4.734
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F1.1999999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'\x14\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p256
sg21
F1.7
sg69
Vn
sa(dp257
g63
g64
sg20
F3.9009999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F1.7200000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\n\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p263
sg21
F1.3
sg69
Vn
sa(dp264
g63
g64
sg20
F2.2839999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F1.7600000000000007
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x11\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p270
sg21
F1.1000000000000001
sg69
Vn
sa(dp271
g63
g64
sg20
F3.2669999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F2.580000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x01\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p277
sg21
F1.2
sg69
Vn
sa(dp278
g63
g64
sg20
F4.5670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F2.8600000000000012
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x00\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p284
sg21
F1.6000000000000001
sg69
Vn
sa(dp285
g63
g64
sg20
F4.484
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F1.9600000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'\x13\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p291
sg21
F1.6000000000000001
sg69
Vn
sa(dp292
g63
g64
sg20
F2.601
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F1.8400000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\x1f\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p298
sg21
F1.3999999999999999
sg69
Vn
sa(dp299
g63
g64
sg20
F2.1840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F0.77999999999999936
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S' \x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p305
sg21
F1.5
sg69
Vn
sa(dp306
g63
g64
sg20
F2.0510000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F1.6000000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x16\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p312
sg21
F1.6000000000000001
sg69
Vn
sa(dp313
g63
g64
sg20
F3.484
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F1.3999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'&\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V50-polo.png
p319
sg21
F1.3999999999999999
sg69
Vn
sa(dp320
g63
g64
sg20
F4.5510000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F2.2400000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x12\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p326
sg21
F1.8999999999999999
sg69
Vn
sa(dp327
g63
g64
sg20
F2.117
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F1.6600000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x1a\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V35-raisins.png
p333
sg21
F1.3
sg69
Vn
sa(dp334
g63
g64
sg20
F3.234
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F1.6000000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S"'\x00\x00\x00"
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V51-mars.png
p340
sg21
F1.2
sg69
Vn
sa(dp341
g63
g64
sg20
F4.2670000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F1.8
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'\t\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p347
sg21
F1.8
sg69
Vn
sa(dp348
g63
g64
sg20
F1.8340000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F1.3
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'\x1c\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p354
sg21
F1.3
sg69
Vn
sa(dp355
g63
g64
sg20
F2.2839999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F1.9600000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'\x0c\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V18-mms.png
p361
sg21
F1.3
sg69
Vn
sa(dp362
g63
g64
sg20
F2.1339999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F2.1400000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x08\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p368
sg21
F1.3999999999999999
sg69
Vn
sa(dp369
g63
g64
sg20
F2.5840000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F2.5000000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x10\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V22-daim.png
p375
sg21
F1.3999999999999999
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F4.133387995792873
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p380
sg26
F5.8999999999999977
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'left'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F3.3333553807788121
sg27
F5.8840000000000003
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'46-pistachios.png'
p389
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'left'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F2.0668143085258635
sg27
F2.7839999999999998
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p398
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'right'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F2.6167798546412087
sg27
F1.5840000000000001
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p407
sg26
F4.2000000000000002
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'left'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F8.516424824245405
sg27
F11.067
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'4-corn.png'
p416
sg26
F5.1000000000000005
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'left'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F2.5833155385753344
sg27
F2.0009999999999999
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'31-hobnobs.png'
p425
sg26
F5.4999999999999991
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'left'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F2.2000038773094275
sg27
F2.3340000000000001
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p434
sg26
F5.9999999999999982
sg28
F3
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'left'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F1.566675324091193
sg27
F1.9339999999999999
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p443
sg26
F3.0999999999999992
sg28
F4
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'left'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F3.4497741609829973
sg27
F3.734
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p452
sg26
F3.8000000000000007
sg28
F3
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'right'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F3.666519747052007
sg27
F7.2009999999999996
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'25-kitkat.png'
p461
sg26
F5.5999999999999996
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'right'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F1.8334441882689134
sg27
F2.4169999999999998
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p470
sg26
F5.7999999999999989
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'right'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F1.8333840329560189
sg27
F3.2669999999999999
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p479
sg26
F5.4999999999999991
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'right'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.8171800157761027
sg27
F1.667
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'22-daim.png'
p488
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'right'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.9334767747732258
sg27
F2.2170000000000001
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p497
sg26
F5.799999999999998
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'left'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F1.8001540660279716
sg27
F1.734
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'51-mars.png'
p506
sg26
F3.4999999999999996
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'left'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F4.3333944389687531
sg27
F2.2839999999999998
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'38-maltesers.png'
p515
sg26
F2.9999999999999991
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'right'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F3.483179747216127
sg27
F3.7010000000000001
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p524
sg26
F4
sg28
F4
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'left'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F2.9333561790481326
sg27
F3.4009999999999998
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p533
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'left'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F1.766850259165949
sg27
F1.5009999999999999
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p542
sg26
F5.7999999999999989
sg28
F3
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F3.2500898766029422
sg27
F2.6669999999999998
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p551
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'right'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F1.3168628461662593
sg27
F1.417
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'29-beans.png'
p560
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'right'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F1.4834679795549164
sg27
F1.534
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'18-mms.png'
p569
sg26
F5.5999999999999988
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'left'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.5502594803783722
sg27
F6.4509999999999996
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p578
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'right'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F1.2501711290406092
sg27
F1.3340000000000001
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'44-crunch.png'
p587
sg26
F5.4999999999999991
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'left'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F2.9501791402472008
sg27
F1.901
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'40-sardines.png'
p596
sg26
F5.8999999999999986
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'left'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F1.6168588263099082
sg27
F2.2170000000000001
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'49-yorkie.png'
p605
sg26
F4.7000000000000011
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'right'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F5.1167172760069661
sg27
F2.484
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p614
sg26
F5.5999999999999996
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'left'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F1.1002432726545521
sg27
F1.784
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p623
sg26
F4.7000000000000011
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'right'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F1.9334913146831241
sg27
F6.101
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'35-raisins.png'
p632
sg26
F5.3000000000000007
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'left'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.5833654304224183
sg27
F4.4340000000000002
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p641
sg26
F5.5
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'left'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F1.1334347515821719
sg27
F2.851
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p650
sg26
F4.5000000000000009
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'left'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F5.0499636929889675
sg27
F3.351
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'7-olives.png'
p659
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'left'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F1.2667132704063988
sg27
F1.5509999999999999
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'5-pineapple.png'
p668
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'right'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F1.1000274547714071
sg27
F2.3340000000000001
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p677
sg26
F5.5999999999999988
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'right'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F1.2333786731451255
sg27
F1.651
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p686
sg26
F4.8000000000000016
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'right'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F4.0999918177367363
sg27
F5.7670000000000003
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p695
sg26
F4.1000000000000014
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'right'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.3667803535590792
sg27
F7.1340000000000003
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'50-polo.png'
p704
sg26
F4.9000000000000004
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'right'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F1.4834055434675975
sg27
F1.151
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p713
sg26
F5.2000000000000011
sg28
F3
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'right'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F1.5667055442954734
sg27
F1.6839999999999999
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'48-twix.png'
p722
sg26
F4.7000000000000011
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'left'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F1.0333750809313642
sg27
F2.9510000000000001
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p731
sg26
F5.3000000000000007
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'right'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F1.3166957797475334
sg27
F2.351
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F511.14979015488461
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F1.0168785549722088
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'32-hovis_crackers.png'
p743
sg82
S'32-hovis_crackers.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p748
sg33
g748
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\n\x11\x12%\x02\x01\r\x88'
tRp753
sa(dp754
g63
g64
sg81
S'15-walnut_whip.png'
p755
sg82
S'15-walnut_whip.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'28-maple_pecan.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\n\x11\x12%\x10\x06\xab\x08'
tRp764
sa(dp765
g63
g64
sg81
S'12-topic.png'
p766
sg82
S'12-topic.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'39-mackerel.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\n\x11\x12%\x18\x08"\x08'
tRp775
sa(dp776
g63
g64
sg81
S'52-aero_mousse.png'
p777
sg82
S'52-aero_mousse.png'
p778
sg56
Vr
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'14-discos_salt_vinegar.png'
p782
sg33
g782
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\n\x11\x12%\x1e\x0c\n\x08'
tRp786
sa(dp787
g63
g64
sg81
g766
sg82
S'39-mackerel.png'
p788
sg56
Vr
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p791
I0
sg83
g771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p792
sS'practice_loop.thisIndex'
p793
g59
(g98
S'\x04\x00\x00\x00'
tRp794
sg34
g752
(S'\x07\xdf\n\x11\x12%%\x02\xd2\xa8'
tRp795
sa(dp796
g63
g64
sg81
S'53-cheestrings.png'
p797
sg82
S'47-picnic.png'
p798
sg56
Vr
sS'practice_loop.thisN'
p799
I5
sS'practice_loop.thisTrialN'
p800
I5
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p801
I0
sg83
S'47-picnic.png'
p802
sg33
g797
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p803
sS'practice_loop.thisIndex'
p804
g59
(g98
S'\x05\x00\x00\x00'
tRp805
sg34
g752
(S'\x07\xdf\n\x11\x12%,\x08\xd5\xb8'
tRp806
sa(dp807
g63
g64
sg81
S'11-snickers.png'
p808
sg82
S'11-snickers.png'
p809
sg56
Vr
sS'practice_loop.thisN'
p810
I6
sS'practice_loop.thisTrialN'
p811
I6
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p812
I0
sg83
S'54-frubes_yogurt.png'
p813
sg33
g813
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p814
sS'practice_loop.thisIndex'
p815
g59
(g98
S'\x06\x00\x00\x00'
tRp816
sg34
g752
(S'\x07\xdf\n\x11\x12%2\x0c\xfc8'
tRp817
sa(dp818
g63
g64
sg81
g755
sg82
S'28-maple_pecan.png'
p819
sg56
Vr
sS'practice_loop.thisN'
p820
I7
sS'practice_loop.thisTrialN'
p821
I7
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p822
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p823
sS'practice_loop.thisIndex'
p824
g59
(g98
S'\x07\x00\x00\x00'
tRp825
sg34
g752
(S'\x07\xdf\n\x11\x12%9\x08\x0e\x80'
tRp826
sa(dp827
g63
g64
sg81
g777
sg82
S'14-discos_salt_vinegar.png'
p828
sg56
Vr
sS'practice_loop.thisN'
p829
I8
sS'practice_loop.thisTrialN'
p830
I8
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p831
I0
sg83
g782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p832
sS'practice_loop.thisIndex'
p833
g59
(g98
S'\x08\x00\x00\x00'
tRp834
sg34
g752
(S'\x07\xdf\n\x11\x12&\x05\x0b\xa8`'
tRp835
sa(dp836
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p837
sg82
S'37-nakd_cashew_cookie.png'
p838
sg56
Vr
sS'practice_loop.thisN'
p839
I9
sS'practice_loop.thisTrialN'
p840
I9
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p841
I0
sg83
S'9-yu_mango_pieces.png'
p842
sg33
g842
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S'\x07\xdf\n\x11\x12&\x0e\x06\xae\xf0'
tRp846
sa(dp847
g63
g64
sg81
g797
sg82
S'53-cheestrings.png'
p848
sg56
Vr
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g802
sg33
g797
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\n\x11\x12&\x14\x0e)\x00'
tRp855
sa(dp856
g63
g64
sg81
g837
sg82
S'9-yu_mango_pieces.png'
p857
sg56
Vr
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g842
sg33
g837
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\n\x11\x12&\x1b\r\xfa '
tRp864
sa(dp865
g63
g64
sg81
g743
sg82
S'24-food_doctor_apple_walnut_bar.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\n\x11\x12&#\x03\x15\x10'
tRp873
sa(dp874
g63
g64
sg81
g808
sg82
S'54-frubes_yogurt.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g813
sg33
g808
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\n\x11\x12&*\x00J8'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F57.348768825977459
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'30-spaghetti_hoops.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'right'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'30-spaghetti_hoops.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'19-caramello_redo.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
S'19-caramello_redo.png'
p907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
g899
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F2.2000432205950347
sg34
g752
(S"\x07\xdf\n\x11\x12'6\r\x88\xd8"
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'1-treacle_cookies.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'left'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'1-treacle_cookies.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'21-nakd_banana_crunch.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
S'21-nakd_banana_crunch.png'
p925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p926
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F3.1334398833168962
sg34
g752
(S'\x07\xdf\n\x11\x12(\x02\x01\xa9\xc8'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'50-polo.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'right'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'48-twix.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'48-twix.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p942
I0
sg909
S'50-polo.png'
p943
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vn
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.7834856270146702
sg34
g752
(S'\x07\xdf\n\x11\x12(\n\x04U`'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'17-jacobs_mini_cheddars_redo.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'left'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
S'8-liquorice_catherine_wheels.png'
p953
sg63
g64
sS'trial_loop.thisIndex'
p954
g59
(g98
S'\x03\x00\x00\x00'
tRp955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p956
I0
sg903
S'8-liquorice_catherine_wheels.png'
p957
sS'block_loop.thisRepN'
p958
I0
sg906
S'17-jacobs_mini_cheddars_redo.png'
p959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p960
I0
sg909
g953
sg55
g11
sS'block_loop.thisTrial'
p961
Nsg69
Vn
sS'block_loop.thisTrialN'
p962
I0
sg39
F1.6667415519568749
sg34
g752
(S'\x07\xdf\n\x11\x12(\x11\x01\x8a\x88'
tRp963
sa(dp964
S'trial_loop.thisTrialN'
p965
I4
sg894
S'29-beans.png'
p966
sS'block_loop.thisIndex'
p967
g888
sg38
S'right'
p968
sg58
g62
sS'trial_loop.thisN'
p969
I4
sg33
S'46-pistachios.png'
p970
sg63
g64
sS'trial_loop.thisIndex'
p971
g59
(g98
S'\x04\x00\x00\x00'
tRp972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p973
I0
sg903
S'46-pistachios.png'
p974
sS'block_loop.thisRepN'
p975
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p976
I0
sg909
S'29-beans.png'
p977
sg55
g11
sS'block_loop.thisTrial'
p978
Nsg69
Vn
sS'block_loop.thisTrialN'
p979
I0
sg39
F1.366833096370101
sg34
g752
(S'\x07\xdf\n\x11\x12(\x17\x0c\x19\xa8'
tRp980
sa(dp981
S'trial_loop.thisTrialN'
p982
I5
sg894
S'5-pineapple.png'
p983
sS'block_loop.thisIndex'
p984
g888
sg38
S'right'
p985
sg58
g62
sS'trial_loop.thisN'
p986
I5
sg33
S'5-pineapple.png'
p987
sg63
g64
sS'trial_loop.thisIndex'
p988
g59
(g98
S'\x05\x00\x00\x00'
tRp989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p990
I0
sg903
S'40-sardines.png'
p991
sS'block_loop.thisRepN'
p992
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p993
I0
sg909
S'40-sardines.png'
p994
sg55
g11
sS'block_loop.thisTrial'
p995
Nsg69
Vn
sS'block_loop.thisTrialN'
p996
I0
sg39
F2.2834638171480037
sg34
g752
(S'\x07\xdf\n\x11\x12(\x1e\x03 \xc8'
tRp997
sa(dp998
S'trial_loop.thisTrialN'
p999
I6
sg894
S'33-ambrosia_rice.png'
p1000
sS'block_loop.thisIndex'
p1001
g888
sg38
S'right'
p1002
sg58
g62
sS'trial_loop.thisN'
p1003
I6
sg33
S'33-ambrosia_rice.png'
p1004
sg63
g64
sS'trial_loop.thisIndex'
p1005
g59
(g98
S'\x06\x00\x00\x00'
tRp1006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1007
I0
sg903
S'23-crunchie_redo.png'
p1008
sS'block_loop.thisRepN'
p1009
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1010
I0
sg909
S'23-crunchie_redo.png'
p1011
sg55
g11
sS'block_loop.thisTrial'
p1012
Nsg69
Vn
sS'block_loop.thisTrialN'
p1013
I0
sg39
F1.7668297322343278
sg34
g752
(S'\x07\xdf\n\x11\x12(%\x07\xf3('
tRp1014
sa(dp1015
S'trial_loop.thisTrialN'
p1016
I7
sg894
S'46-pistachios.png'
p1017
sS'block_loop.thisIndex'
p1018
g888
sg38
S'left'
p1019
sg58
g62
sS'trial_loop.thisN'
p1020
I7
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p1021
g59
(g98
S'\x07\x00\x00\x00'
tRp1022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1023
I0
sg903
S'29-beans.png'
p1024
sS'block_loop.thisRepN'
p1025
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1026
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p1027
Nsg69
Vn
sS'block_loop.thisTrialN'
p1028
I0
sg39
F2.1500532987483894
sg34
g752
(S'\x07\xdf\n\x11\x12(,\x04\xaf8'
tRp1029
sa(dp1030
S'trial_loop.thisTrialN'
p1031
I8
sg894
S'20-fruit_pastilles.png'
p1032
sS'block_loop.thisIndex'
p1033
g888
sg38
S'left'
p1034
sg58
g62
sS'trial_loop.thisN'
p1035
I8
sg33
S'2-steamed_puddings.png'
p1036
sg63
g64
sS'trial_loop.thisIndex'
p1037
g59
(g98
S'\x08\x00\x00\x00'
tRp1038
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1039
I0
sg903
S'2-steamed_puddings.png'
p1040
sS'block_loop.thisRepN'
p1041
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1042
I0
sg909
S'20-fruit_pastilles.png'
p1043
sg55
g11
sS'block_loop.thisTrial'
p1044
Nsg69
Vn
sS'block_loop.thisTrialN'
p1045
I0
sg39
F2.4668046722708823
sg34
g752
(S'\x07\xdf\n\x11\x12(3\x07\x9d8'
tRp1046
sa(dp1047
S'trial_loop.thisTrialN'
p1048
I9
sg894
g895
sS'block_loop.thisIndex'
p1049
g888
sg38
S'left'
p1050
sg58
g62
sS'trial_loop.thisN'
p1051
I9
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1052
g59
(g98
S'\t\x00\x00\x00'
tRp1053
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1054
I0
sg903
g904
sS'block_loop.thisRepN'
p1055
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1056
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1057
Nsg69
Vn
sS'block_loop.thisTrialN'
p1058
I0
sg39
F1.3172106636266108
sg34
g752
(S'\x07\xdf\n\x11\x12(;\x00\x0b\xb8'
tRp1059
sa(dp1060
S'trial_loop.thisTrialN'
p1061
I10
sg894
S'4-corn.png'
p1062
sS'block_loop.thisIndex'
p1063
g888
sg38
S'left'
p1064
sg58
g62
sS'trial_loop.thisN'
p1065
I10
sg33
S'10-bounty_redo.png'
p1066
sg63
g64
sS'trial_loop.thisIndex'
p1067
g59
(g98
S'\n\x00\x00\x00'
tRp1068
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1069
I0
sg903
S'10-bounty_redo.png'
p1070
sS'block_loop.thisRepN'
p1071
I0
sg906
S'4-corn.png'
p1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1073
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p1074
Nsg69
Vn
sS'block_loop.thisTrialN'
p1075
I0
sg39
F1.5168279503832309
sg34
g752
(S'\x07\xdf\n\x11\x12)\x05\x05_\x00'
tRp1076
sa(dp1077
S'trial_loop.thisTrialN'
p1078
I11
sg894
S'51-mars.png'
p1079
sS'block_loop.thisIndex'
p1080
g888
sg38
S'left'
p1081
sg58
g62
sS'trial_loop.thisN'
p1082
I11
sg33
S'51-mars.png'
p1083
sg63
g64
sS'trial_loop.thisIndex'
p1084
g59
(g98
S'\x0b\x00\x00\x00'
tRp1085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1086
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p1087
sS'block_loop.thisRepN'
p1088
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1089
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p1090
sg55
g11
sS'block_loop.thisTrial'
p1091
Nsg69
Vn
sS'block_loop.thisTrialN'
p1092
I0
sg39
F1.9168260117276077
sg34
g752
(S'\x07\xdf\n\x11\x12)\x0b\r\xcb@'
tRp1093
sa(dp1094
S'trial_loop.thisTrialN'
p1095
I12
sg894
g915
sS'block_loop.thisIndex'
p1096
g888
sg38
S'left'
p1097
sg58
g62
sS'trial_loop.thisN'
p1098
I12
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1099
g59
(g98
S'\x0c\x00\x00\x00'
tRp1100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1101
I0
sg903
g923
sS'block_loop.thisRepN'
p1102
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1103
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p1104
Nsg69
Vn
sS'block_loop.thisTrialN'
p1105
I0
sg39
F3.2500086241616373
sg34
g752
(S'\x07\xdf\n\x11\x12)\x12\x0c\xe8\xb0'
tRp1106
sa(dp1107
S'trial_loop.thisTrialN'
p1108
I13
sg894
S'19-caramello_redo.png'
p1109
sS'block_loop.thisIndex'
p1110
g888
sg38
S'right'
p1111
sg58
g62
sS'trial_loop.thisN'
p1112
I13
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1113
g59
(g98
S'\r\x00\x00\x00'
tRp1114
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1115
I0
sg903
S'30-spaghetti_hoops.png'
p1116
sS'block_loop.thisRepN'
p1117
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1118
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1119
Nsg69
Vn
sS'block_loop.thisTrialN'
p1120
I0
sg39
F4.050453773492336
sg34
g752
(S'\x07\xdf\n\x11\x12)\x1b\x01\xf7\xe8'
tRp1121
sa(dp1122
S'trial_loop.thisTrialN'
p1123
I14
sg894
S'8-liquorice_catherine_wheels.png'
p1124
sS'block_loop.thisIndex'
p1125
g888
sg38
S'left'
p1126
sg58
g62
sS'trial_loop.thisN'
p1127
I14
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p1128
g59
(g98
S'\x0e\x00\x00\x00'
tRp1129
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1130
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1131
sS'block_loop.thisRepN'
p1132
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1133
I0
sg909
g953
sg55
g11
sS'block_loop.thisTrial'
p1134
Nsg69
Vn
sS'block_loop.thisTrialN'
p1135
I0
sg39
F2.3001208523128298
sg34
g752
(S'\x07\xdf\n\x11\x12)$\x030h'
tRp1136
sa(dp1137
S'trial_loop.thisTrialN'
p1138
I15
sg894
S'10-bounty_redo.png'
p1139
sS'block_loop.thisIndex'
p1140
g888
sg38
S'right'
p1141
sg58
g62
sS'trial_loop.thisN'
p1142
I15
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p1143
g59
(g98
S'\x0f\x00\x00\x00'
tRp1144
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1145
I0
sg903
S'4-corn.png'
p1146
sS'block_loop.thisRepN'
p1147
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1148
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p1149
Nsg69
Vn
sS'block_loop.thisTrialN'
p1150
I0
sg39
F2.3667176323779131
sg34
g752
(S'\x07\xdf\n\x11\x12)+\x08AH'
tRp1151
sa(dp1152
S'trial_loop.thisTrialN'
p1153
I16
sg894
S'16-skips_prawn.png'
p1154
sS'block_loop.thisIndex'
p1155
g888
sg38
S'left'
p1156
sg58
g62
sS'trial_loop.thisN'
p1157
I16
sg33
S'42-mrkipling_lemon_slices.png'
p1158
sg63
g64
sS'trial_loop.thisIndex'
p1159
g59
(g98
S'\x10\x00\x00\x00'
tRp1160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1161
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1162
sS'block_loop.thisRepN'
p1163
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1164
I0
sg909
S'16-skips_prawn.png'
p1165
sg55
g11
sS'block_loop.thisTrial'
p1166
Nsg69
Vn
sS'block_loop.thisTrialN'
p1167
I0
sg39
F1.9000495212239912
sg34
g752
(S'\x07\xdf\n\x11\x12)2\x0e\x82\xd8'
tRp1168
sa(dp1169
S'trial_loop.thisTrialN'
p1170
I17
sg894
g1017
sS'block_loop.thisIndex'
p1171
g888
sg38
S'left'
p1172
sg58
g62
sS'trial_loop.thisN'
p1173
I17
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p1174
g59
(g98
S'\x11\x00\x00\x00'
tRp1175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1176
I0
sg903
g1024
sS'block_loop.thisRepN'
p1177
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1178
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p1179
Nsg69
Vn
sS'block_loop.thisTrialN'
p1180
I0
sg39
F2.13340054002947
sg34
g752
(S'\x07\xdf\n\x11\x12)9\ra\xc8'
tRp1181
sa(dp1182
S'trial_loop.thisTrialN'
p1183
I18
sg894
S'2-steamed_puddings.png'
p1184
sS'block_loop.thisIndex'
p1185
g888
sg38
S'left'
p1186
sg58
g62
sS'trial_loop.thisN'
p1187
I18
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1188
g59
(g98
S'\x12\x00\x00\x00'
tRp1189
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1190
I0
sg903
S'20-fruit_pastilles.png'
p1191
sS'block_loop.thisRepN'
p1192
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1193
I0
sg909
g1043
sg55
g11
sS'block_loop.thisTrial'
p1194
Nsg69
Vn
sS'block_loop.thisTrialN'
p1195
I0
sg39
F1.9671403731408645
sg34
g752
(S'\x07\xdf\n\x11\x12*\x05\x00\xcf\x08'
tRp1196
sa(dp1197
S'trial_loop.thisTrialN'
p1198
I19
sg894
S'40-sardines.png'
p1199
sS'block_loop.thisIndex'
p1200
g888
sg38
S'right'
p1201
sg58
g62
sS'trial_loop.thisN'
p1202
I19
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1203
g59
(g98
S'\x13\x00\x00\x00'
tRp1204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1205
I0
sg903
S'5-pineapple.png'
p1206
sS'block_loop.thisRepN'
p1207
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1208
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p1209
Nsg69
Vn
sS'block_loop.thisTrialN'
p1210
I0
sg39
F1.2501634314412513
sg34
g752
(S'\x07\xdf\n\x11\x12*\x0c\x00\xa4\x10'
tRp1211
sa(dp1212
S'trial_loop.thisTrialN'
p1213
I20
sg894
S'38-maltesers.png'
p1214
sS'block_loop.thisIndex'
p1215
g888
sg38
S'right'
p1216
sg58
g62
sS'trial_loop.thisN'
p1217
I20
sg33
S'38-maltesers.png'
p1218
sg63
g64
sS'trial_loop.thisIndex'
p1219
g59
(g98
S'\x14\x00\x00\x00'
tRp1220
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1221
I0
sg903
S'6-sour_patch_kids.png'
p1222
sS'block_loop.thisRepN'
p1223
I0
sg906
g1218
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1224
I0
sg909
S'6-sour_patch_kids.png'
p1225
sg55
g11
sS'block_loop.thisTrial'
p1226
Nsg69
Vn
sS'block_loop.thisTrialN'
p1227
I0
sg39
F1.8832371085882187
sg34
g752
(S'\x07\xdf\n\x11\x12*\x12\x05\x05('
tRp1228
sa(dp1229
S'trial_loop.thisTrialN'
p1230
I21
sg894
S'31-hobnobs.png'
p1231
sS'block_loop.thisIndex'
p1232
g888
sg38
S'left'
p1233
sg58
g62
sS'trial_loop.thisN'
p1234
I21
sg33
S'31-hobnobs.png'
p1235
sg63
g64
sS'trial_loop.thisIndex'
p1236
g59
(g98
S'\x15\x00\x00\x00'
tRp1237
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1238
I0
sg903
S'25-kitkat.png'
p1239
sS'block_loop.thisRepN'
p1240
I0
sg906
S'25-kitkat.png'
p1241
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1242
I0
sg909
g1235
sg55
g11
sS'block_loop.thisTrial'
p1243
Nsg69
Vn
sS'block_loop.thisTrialN'
p1244
I0
sg39
F1.2667517584031884
sg34
g752
(S'\x07\xdf\n\x11\x12*\x19\x03\xa9\x80'
tRp1245
sa(dp1246
S'trial_loop.thisTrialN'
p1247
I22
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1248
sS'block_loop.thisIndex'
p1249
g888
sg38
S'right'
p1250
sg58
g62
sS'trial_loop.thisN'
p1251
I22
sg33
S'36-fig_rolls.png'
p1252
sg63
g64
sS'trial_loop.thisIndex'
p1253
g59
(g98
S'\x16\x00\x00\x00'
tRp1254
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1255
I0
sg903
S'36-fig_rolls.png'
p1256
sS'block_loop.thisRepN'
p1257
I0
sg906
S'34-hula_hoops_bbq_beef_redo.png'
p1258
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1259
I0
sg909
g1252
sg55
g11
sS'block_loop.thisTrial'
p1260
Nsg69
Vn
sS'block_loop.thisTrialN'
p1261
I0
sg39
F1.1334729544851143
sg34
g752
(S'\x07\xdf\n\x11\x12*\x1f\x08E0'
tRp1262
sa(dp1263
S'trial_loop.thisTrialN'
p1264
I23
sg894
S'25-kitkat.png'
p1265
sS'block_loop.thisIndex'
p1266
g888
sg38
S'right'
p1267
sg58
g62
sS'trial_loop.thisN'
p1268
I23
sg33
g1235
sg63
g64
sS'trial_loop.thisIndex'
p1269
g59
(g98
S'\x17\x00\x00\x00'
tRp1270
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1271
I0
sg903
S'31-hobnobs.png'
p1272
sS'block_loop.thisRepN'
p1273
I0
sg906
g1241
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1274
I0
sg909
g1235
sg55
g11
sS'block_loop.thisTrial'
p1275
Nsg69
Vn
sS'block_loop.thisTrialN'
p1276
I0
sg39
F1.2505685532523785
sg34
g752
(S'\x07\xdf\n\x11\x12*%\n\xfc\x80'
tRp1277
sa(dp1278
S'trial_loop.thisTrialN'
p1279
I24
sg894
S'35-raisins.png'
p1280
sS'block_loop.thisIndex'
p1281
g888
sg38
S'left'
p1282
sg58
g62
sS'trial_loop.thisN'
p1283
I24
sg33
S'35-raisins.png'
p1284
sg63
g64
sS'trial_loop.thisIndex'
p1285
g59
(g98
S'\x18\x00\x00\x00'
tRp1286
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1287
I0
sg903
S'49-yorkie.png'
p1288
sS'block_loop.thisRepN'
p1289
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1290
I0
sg909
S'49-yorkie.png'
p1291
sg55
g11
sS'block_loop.thisTrial'
p1292
Nsg69
Vn
sS'block_loop.thisTrialN'
p1293
I0
sg39
F1.4834166622240446
sg34
g752
(S'\x07\xdf\n\x11\x12*+\x0f\x1f\x18'
tRp1294
sa(dp1295
S'trial_loop.thisTrialN'
p1296
I25
sg894
S'42-mrkipling_lemon_slices.png'
p1297
sS'block_loop.thisIndex'
p1298
g888
sg38
S'left'
p1299
sg58
g62
sS'trial_loop.thisN'
p1300
I25
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p1301
g59
(g98
S'\x19\x00\x00\x00'
tRp1302
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1303
I0
sg903
S'16-skips_prawn.png'
p1304
sS'block_loop.thisRepN'
p1305
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1306
I0
sg909
g1165
sg55
g11
sS'block_loop.thisTrial'
p1307
Nsg69
Vn
sS'block_loop.thisTrialN'
p1308
I0
sg39
F2.5500180038307008
sg34
g752
(S'\x07\xdf\n\x11\x12*2\x07\xd0\x00'
tRp1309
sa(dp1310
S'trial_loop.thisTrialN'
p1311
I26
sg894
g1214
sS'block_loop.thisIndex'
p1312
g888
sg38
S'left'
p1313
sg58
g62
sS'trial_loop.thisN'
p1314
I26
sg33
g1218
sg63
g64
sS'trial_loop.thisIndex'
p1315
g59
(g98
S'\x1a\x00\x00\x00'
tRp1316
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1317
I0
sg903
g1222
sS'block_loop.thisRepN'
p1318
I0
sg906
g1218
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1319
I0
sg909
g1225
sg55
g11
sS'block_loop.thisTrial'
p1320
Nsg69
Vn
sS'block_loop.thisTrialN'
p1321
I0
sg39
F1.6998959683678549
sg34
g752
(S'\x07\xdf\n\x11\x12*:\x01kH'
tRp1322
sa(dp1323
S'trial_loop.thisTrialN'
p1324
I27
sg894
g1184
sS'block_loop.thisIndex'
p1325
g888
sg38
S'left'
p1326
sg58
g62
sS'trial_loop.thisN'
p1327
I27
sg33
g1043
sg63
g64
sS'trial_loop.thisIndex'
p1328
g59
(g98
S'\x1b\x00\x00\x00'
tRp1329
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1330
I0
sg903
g1191
sS'block_loop.thisRepN'
p1331
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1332
I0
sg909
g1043
sg55
g11
sS'block_loop.thisTrial'
p1333
Nsg69
Vn
sS'block_loop.thisTrialN'
p1334
I0
sg39
F1.5000397709318349
sg34
g752
(S'\x07\xdf\n\x11\x12+\x04\x0c\xb2\x00'
tRp1335
sa(dp1336
S'trial_loop.thisTrialN'
p1337
I28
sg894
S'45-chewy_nougat_redo.png'
p1338
sS'block_loop.thisIndex'
p1339
g888
sg38
S'right'
p1340
sg58
g62
sS'trial_loop.thisN'
p1341
I28
sg33
S'41-peanuts_redo.png'
p1342
sg63
g64
sS'trial_loop.thisIndex'
p1343
g59
(g98
S'\x1c\x00\x00\x00'
tRp1344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1345
I0
sg903
S'41-peanuts_redo.png'
p1346
sS'block_loop.thisRepN'
p1347
I0
sg906
g1342
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1348
I0
sg909
S'45-chewy_nougat_redo.png'
p1349
sg55
g11
sS'block_loop.thisTrial'
p1350
Nsg69
Vn
sS'block_loop.thisTrialN'
p1351
I0
sg39
F1.1172139137252088
sg34
g752
(S'\x07\xdf\n\x11\x12+\x0b\x05\xa1h'
tRp1352
sa(dp1353
S'trial_loop.thisTrialN'
p1354
I29
sg894
S'6-sour_patch_kids.png'
p1355
sS'block_loop.thisIndex'
p1356
g888
sg38
S'right'
p1357
sg58
g62
sS'trial_loop.thisN'
p1358
I29
sg33
g1218
sg63
g64
sS'trial_loop.thisIndex'
p1359
g59
(g98
S'\x1d\x00\x00\x00'
tRp1360
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1361
I0
sg903
S'38-maltesers.png'
p1362
sS'block_loop.thisRepN'
p1363
I0
sg906
g1218
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1364
I0
sg909
g1225
sg55
g11
sS'block_loop.thisTrial'
p1365
Nsg69
Vn
sS'block_loop.thisTrialN'
p1366
I0
sg39
F1.8665726609197009
sg34
g752
(S'\x07\xdf\n\x11\x12+\x11\x07\xdb\xb8'
tRp1367
sa(dp1368
S'trial_loop.thisTrialN'
p1369
I30
sg894
g1154
sS'block_loop.thisIndex'
p1370
g888
sg38
S'right'
p1371
sg58
g62
sS'trial_loop.thisN'
p1372
I30
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p1373
g59
(g98
S'\x1e\x00\x00\x00'
tRp1374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1375
I0
sg903
g1162
sS'block_loop.thisRepN'
p1376
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1377
I0
sg909
g1165
sg55
g11
sS'block_loop.thisTrial'
p1378
Nsg69
Vn
sS'block_loop.thisTrialN'
p1379
I0
sg39
F1.4998045665015525
sg34
g752
(S'\x07\xdf\n\x11\x12+\x18\x06A\x90'
tRp1380
sa(dp1381
S'trial_loop.thisTrialN'
p1382
I31
sg894
g915
sS'block_loop.thisIndex'
p1383
g888
sg38
S'left'
p1384
sg58
g62
sS'trial_loop.thisN'
p1385
I31
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1386
g59
(g98
S'\x1f\x00\x00\x00'
tRp1387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1388
I0
sg903
g923
sS'block_loop.thisRepN'
p1389
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1390
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p1391
Nsg69
Vn
sS'block_loop.thisTrialN'
p1392
I0
sg39
F2.3168078225844511
sg34
g752
(S'\x07\xdf\n\x11\x12+\x1e\x0es8'
tRp1393
sa(dp1394
S'trial_loop.thisTrialN'
p1395
I32
sg894
S'27-hartleys_raspberries_jelly.png'
p1396
sS'block_loop.thisIndex'
p1397
g888
sg38
S'right'
p1398
sg58
g62
sS'trial_loop.thisN'
p1399
I32
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1400
g59
(g98
S' \x00\x00\x00'
tRp1401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1402
I0
sg903
S'51-mars.png'
p1403
sS'block_loop.thisRepN'
p1404
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1405
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p1406
Nsg69
Vn
sS'block_loop.thisTrialN'
p1407
I0
sg39
F1.9001521558839158
sg34
g752
(S'\x07\xdf\n\x11\x12+&\x04\x80X'
tRp1408
sa(dp1409
S'trial_loop.thisTrialN'
p1410
I33
sg894
S'49-yorkie.png'
p1411
sS'block_loop.thisIndex'
p1412
g888
sg38
S'right'
p1413
sg58
g62
sS'trial_loop.thisN'
p1414
I33
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p1415
g59
(g98
S'!\x00\x00\x00'
tRp1416
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1417
I0
sg903
S'35-raisins.png'
p1418
sS'block_loop.thisRepN'
p1419
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1420
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p1421
Nsg69
Vn
sS'block_loop.thisTrialN'
p1422
I0
sg39
F1.266862090662471
sg34
g752
(S'\x07\xdf\n\x11\x12+-\x03\x9d\xc8'
tRp1423
sa(dp1424
S'trial_loop.thisTrialN'
p1425
I34
sg894
g1396
sS'block_loop.thisIndex'
p1426
g888
sg38
S'right'
p1427
sg58
g62
sS'trial_loop.thisN'
p1428
I34
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1429
g59
(g98
S'"\x00\x00\x00'
tRp1430
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1431
I0
sg903
g1403
sS'block_loop.thisRepN'
p1432
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1433
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p1434
Nsg69
Vn
sS'block_loop.thisTrialN'
p1435
I0
sg39
F2.0834339960783836
sg34
g752
(S'\x07\xdf\n\x11\x12+3\x07\xfa\xf8'
tRp1436
sa(dp1437
S'trial_loop.thisTrialN'
p1438
I35
sg894
g1411
sS'block_loop.thisIndex'
p1439
g888
sg38
S'right'
p1440
sg58
g62
sS'trial_loop.thisN'
p1441
I35
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p1442
g59
(g98
S'#\x00\x00\x00'
tRp1443
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1444
I0
sg903
g1418
sS'block_loop.thisRepN'
p1445
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1446
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p1447
Nsg69
Vn
sS'block_loop.thisTrialN'
p1448
I0
sg39
F1.2501634314430703
sg34
g752
(S'\x07\xdf\n\x11\x12+:\t\xf6\xc8'
tRp1449
sa(dp1450
S'trial_loop.thisTrialN'
p1451
I36
sg894
g983
sS'block_loop.thisIndex'
p1452
g888
sg38
S'left'
p1453
sg58
g62
sS'trial_loop.thisN'
p1454
I36
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1455
g59
(g98
S'$\x00\x00\x00'
tRp1456
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1457
I0
sg903
g991
sS'block_loop.thisRepN'
p1458
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1459
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p1460
Nsg69
Vn
sS'block_loop.thisTrialN'
p1461
I0
sg39
F1.6835374290058098
sg34
g752
(S'\x07\xdf\n\x11\x12,\x04\x0e\x19`'
tRp1462
sa(dp1463
S'trial_loop.thisTrialN'
p1464
I37
sg894
S'7-olives.png'
p1465
sS'block_loop.thisIndex'
p1466
g888
sg38
S'left'
p1467
sg58
g62
sS'trial_loop.thisN'
p1468
I37
sg33
S'22-daim.png'
p1469
sg63
g64
sS'trial_loop.thisIndex'
p1470
g59
(g98
S'%\x00\x00\x00'
tRp1471
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1472
I0
sg903
S'22-daim.png'
p1473
sS'block_loop.thisRepN'
p1474
I0
sg906
g1469
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1475
I0
sg909
S'7-olives.png'
p1476
sg55
g11
sS'block_loop.thisTrial'
p1477
Nsg69
Vn
sS'block_loop.thisTrialN'
p1478
I0
sg39
F1.4834950637014117
sg34
g752
(S'\x07\xdf\n\x11\x12,\x0b\t\xdfX'
tRp1479
sa(dp1480
S'trial_loop.thisTrialN'
p1481
I38
sg894
g932
sS'block_loop.thisIndex'
p1482
g888
sg38
S'left'
p1483
sg58
g62
sS'trial_loop.thisN'
p1484
I38
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1485
g59
(g98
S'&\x00\x00\x00'
tRp1486
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1487
I0
sg903
g940
sS'block_loop.thisRepN'
p1488
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1489
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1490
Nsg69
Vn
sS'block_loop.thisTrialN'
p1491
I0
sg39
F1.8505519606496819
sg34
g752
(S'\x07\xdf\n\x11\x12,\x12\x02\x90@'
tRp1492
sa(dp1493
S'trial_loop.thisTrialN'
p1494
I39
sg894
g1396
sS'block_loop.thisIndex'
p1495
g888
sg38
S'right'
p1496
sg58
g62
sS'trial_loop.thisN'
p1497
I39
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1498
g59
(g98
S"'\x00\x00\x00"
tRp1499
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1500
I0
sg903
g1403
sS'block_loop.thisRepN'
p1501
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1502
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p1503
Nsg69
Vn
sS'block_loop.thisTrialN'
p1504
I0
sg39
F1.4667564909996145
sg34
g752
(S'\x07\xdf\n\x11\x12,\x19\x00\xbb\x80'
tRp1505
sa(dp1506
S'trial_loop.thisTrialN'
p1507
I40
sg894
g1017
sS'block_loop.thisIndex'
p1508
g888
sg38
S'right'
p1509
sg58
g62
sS'trial_loop.thisN'
p1510
I40
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1511
g59
(g98
S'(\x00\x00\x00'
tRp1512
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1513
I0
sg903
g1024
sS'block_loop.thisRepN'
p1514
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1515
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p1516
Nsg69
Vn
sS'block_loop.thisTrialN'
p1517
I0
sg39
F1.7834799250867945
sg34
g752
(S'\x07\xdf\n\x11\x12,\x1f\x08p('
tRp1518
sa(dp1519
S'trial_loop.thisTrialN'
p1520
I41
sg894
g1297
sS'block_loop.thisIndex'
p1521
g888
sg38
S'left'
p1522
sg58
g62
sS'trial_loop.thisN'
p1523
I41
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p1524
g59
(g98
S')\x00\x00\x00'
tRp1525
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1526
I0
sg903
g1304
sS'block_loop.thisRepN'
p1527
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1528
I0
sg909
g1165
sg55
g11
sS'block_loop.thisTrial'
p1529
Nsg69
Vn
sS'block_loop.thisTrialN'
p1530
I0
sg39
F1.0500686084196786
sg34
g752
(S'\x07\xdf\n\x11\x12,&\x05j\xb8'
tRp1531
sa(dp1532
S'trial_loop.thisTrialN'
p1533
I42
sg894
g1000
sS'block_loop.thisIndex'
p1534
g888
sg38
S'left'
p1535
sg58
g62
sS'trial_loop.thisN'
p1536
I42
sg33
g1011
sg63
g64
sS'trial_loop.thisIndex'
p1537
g59
(g98
S'*\x00\x00\x00'
tRp1538
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1539
I0
sg903
g1008
sS'block_loop.thisRepN'
p1540
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1541
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p1542
Nsg69
Vn
sS'block_loop.thisTrialN'
p1543
I0
sg39
F3.1000608110371104
sg34
g752
(S'\x07\xdf\n\x11\x12,,\x06\xb2\xd8'
tRp1544
sa(dp1545
S'trial_loop.thisTrialN'
p1546
I43
sg894
g1109
sS'block_loop.thisIndex'
p1547
g888
sg38
S'left'
p1548
sg58
g62
sS'trial_loop.thisN'
p1549
I43
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1550
g59
(g98
S'+\x00\x00\x00'
tRp1551
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1552
I0
sg903
g1116
sS'block_loop.thisRepN'
p1553
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1554
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1555
Nsg69
Vn
sS'block_loop.thisTrialN'
p1556
I0
sg39
F2.1004873150686763
sg34
g752
(S'\x07\xdf\n\x11\x12,4\x08\xe1p'
tRp1557
sa(dp1558
S'trial_loop.thisTrialN'
p1559
I44
sg894
g1231
sS'block_loop.thisIndex'
p1560
g888
sg38
S'left'
p1561
sg58
g62
sS'trial_loop.thisN'
p1562
I44
sg33
g1241
sg63
g64
sS'trial_loop.thisIndex'
p1563
g59
(g98
S',\x00\x00\x00'
tRp1564
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1565
I0
sg903
g1239
sS'block_loop.thisRepN'
p1566
I0
sg906
g1241
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1567
I0
sg909
g1235
sg55
g11
sS'block_loop.thisTrial'
p1568
Nsg69
Vn
sS'block_loop.thisTrialN'
p1569
I0
sg39
F0.93346651130923419
sg34
g752
(S'\x07\xdf\n\x11\x12,;\n\xd9X'
tRp1570
sa(dp1571
S'trial_loop.thisTrialN'
p1572
I45
sg894
g1214
sS'block_loop.thisIndex'
p1573
g888
sg38
S'left'
p1574
sg58
g62
sS'trial_loop.thisN'
p1575
I45
sg33
g1218
sg63
g64
sS'trial_loop.thisIndex'
p1576
g59
(g98
S'-\x00\x00\x00'
tRp1577
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1578
I0
sg903
g1222
sS'block_loop.thisRepN'
p1579
I0
sg906
g1218
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1580
I0
sg909
g1225
sg55
g11
sS'block_loop.thisTrial'
p1581
Nsg69
Vn
sS'block_loop.thisTrialN'
p1582
I0
sg39
F1.6832420692626329
sg34
g752
(S'\x07\xdf\n\x11\x12-\x05\nw\xb0'
tRp1583
sa(dp1584
S'trial_loop.thisTrialN'
p1585
I46
sg894
S'41-peanuts_redo.png'
p1586
sS'block_loop.thisIndex'
p1587
g888
sg38
S'left'
p1588
sg58
g62
sS'trial_loop.thisN'
p1589
I46
sg33
g1342
sg63
g64
sS'trial_loop.thisIndex'
p1590
g59
(g98
S'.\x00\x00\x00'
tRp1591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1592
I0
sg903
S'45-chewy_nougat_redo.png'
p1593
sS'block_loop.thisRepN'
p1594
I0
sg906
g1342
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1595
I0
sg909
g1349
sg55
g11
sS'block_loop.thisTrial'
p1596
Nsg69
Vn
sS'block_loop.thisTrialN'
p1597
I0
sg39
F1.8501827609688917
sg34
g752
(S'\x07\xdf\n\x11\x12-\x0c\x06\x03\x10'
tRp1598
sa(dp1599
S'trial_loop.thisTrialN'
p1600
I47
sg894
S'36-fig_rolls.png'
p1601
sS'block_loop.thisIndex'
p1602
g888
sg38
S'left'
p1603
sg58
g62
sS'trial_loop.thisN'
p1604
I47
sg33
g1258
sg63
g64
sS'trial_loop.thisIndex'
p1605
g59
(g98
S'/\x00\x00\x00'
tRp1606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1607
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1608
sS'block_loop.thisRepN'
p1609
I0
sg906
g1258
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1610
I0
sg909
g1252
sg55
g11
sS'block_loop.thisTrial'
p1611
Nsg69
Vn
sS'block_loop.thisTrialN'
p1612
I0
sg39
F1.4834902170641726
sg34
g752
(S'\x07\xdf\n\x11\x12-\x13\x04*h'
tRp1613
sa(dp1614
S'trial_loop.thisTrialN'
p1615
I48
sg894
S'23-crunchie_redo.png'
p1616
sS'block_loop.thisIndex'
p1617
g888
sg38
S'left'
p1618
sg58
g62
sS'trial_loop.thisN'
p1619
I48
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1620
g59
(g98
S'0\x00\x00\x00'
tRp1621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1622
I0
sg903
S'33-ambrosia_rice.png'
p1623
sS'block_loop.thisRepN'
p1624
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1625
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p1626
Nsg69
Vn
sS'block_loop.thisTrialN'
p1627
I0
sg39
F1.5502475063349266
sg34
g752
(S'\x07\xdf\n\x11\x12-\x19\x0c\x1d\x90'
tRp1628
sa(dp1629
S'trial_loop.thisTrialN'
p1630
I49
sg894
g1184
sS'block_loop.thisIndex'
p1631
g888
sg38
S'left'
p1632
sg58
g62
sS'trial_loop.thisN'
p1633
I49
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1634
g59
(g98
S'1\x00\x00\x00'
tRp1635
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1636
I0
sg903
g1191
sS'block_loop.thisRepN'
p1637
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1638
I0
sg909
g1043
sg55
g11
sS'block_loop.thisTrial'
p1639
Nsg69
Vn
sS'block_loop.thisTrialN'
p1640
I0
sg39
F1.666857301044729
sg34
g752
(S'\x07\xdf\n\x11\x12- \x05\xc4\x90'
tRp1641
sa(dp1642
S'trial_loop.thisTrialN'
p1643
I50
sg894
g1411
sS'block_loop.thisIndex'
p1644
g888
sg38
S'right'
p1645
sg58
g62
sS'trial_loop.thisN'
p1646
I50
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p1647
g59
(g98
S'2\x00\x00\x00'
tRp1648
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1649
I0
sg903
g1418
sS'block_loop.thisRepN'
p1650
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1651
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p1652
Nsg69
Vn
sS'block_loop.thisTrialN'
p1653
I0
sg39
F1.183414980156158
sg34
g752
(S"\x07\xdf\n\x11\x12-'\x01O\xf0"
tRp1654
sa(dp1655
S'trial_loop.thisTrialN'
p1656
I51
sg894
g915
sS'block_loop.thisIndex'
p1657
g888
sg38
S'right'
p1658
sg58
g62
sS'trial_loop.thisN'
p1659
I51
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1660
g59
(g98
S'3\x00\x00\x00'
tRp1661
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1662
I0
sg903
g923
sS'block_loop.thisRepN'
p1663
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1664
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p1665
Nsg69
Vn
sS'block_loop.thisTrialN'
p1666
I0
sg39
F1.7835121409680141
sg34
g752
(S'\x07\xdf\n\x11\x12--\x04|p'
tRp1667
sa(dp1668
S'trial_loop.thisTrialN'
p1669
I52
sg894
g1032
sS'block_loop.thisIndex'
p1670
g888
sg38
S'right'
p1671
sg58
g62
sS'trial_loop.thisN'
p1672
I52
sg33
g1043
sg63
g64
sS'trial_loop.thisIndex'
p1673
g59
(g98
S'4\x00\x00\x00'
tRp1674
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1675
I0
sg903
g1040
sS'block_loop.thisRepN'
p1676
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1677
I0
sg909
g1043
sg55
g11
sS'block_loop.thisTrial'
p1678
Nsg69
Vn
sS'block_loop.thisTrialN'
p1679
I0
sg39
F1.4500689505348419
sg34
g752
(S'\x07\xdf\n\x11\x12-4\x01\xb5\x80'
tRp1680
sa(dp1681
S'trial_loop.thisTrialN'
p1682
I53
sg894
g1248
sS'block_loop.thisIndex'
p1683
g888
sg38
S'left'
p1684
sg58
g62
sS'trial_loop.thisN'
p1685
I53
sg33
g1258
sg63
g64
sS'trial_loop.thisIndex'
p1686
g59
(g98
S'5\x00\x00\x00'
tRp1687
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1688
I0
sg903
g1256
sS'block_loop.thisRepN'
p1689
I0
sg906
g1258
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1690
I0
sg909
g1252
sg55
g11
sS'block_loop.thisTrial'
p1691
Nsg69
Vn
sS'block_loop.thisTrialN'
p1692
I0
sg39
F2.2671551696366805
sg34
g752
(S'\x07\xdf\n\x11\x12-:\t+\xa8'
tRp1693
sa(dp1694
S'trial_loop.thisTrialN'
p1695
I54
sg894
S'22-daim.png'
p1696
sS'block_loop.thisIndex'
p1697
g888
sg38
S'left'
p1698
sg58
g62
sS'trial_loop.thisN'
p1699
I54
sg33
g1469
sg63
g64
sS'trial_loop.thisIndex'
p1700
g59
(g98
S'6\x00\x00\x00'
tRp1701
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1702
I0
sg903
S'7-olives.png'
p1703
sS'block_loop.thisRepN'
p1704
I0
sg906
g1469
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1705
I0
sg909
g1476
sg55
g11
sS'block_loop.thisTrial'
p1706
Nsg69
Vn
sS'block_loop.thisTrialN'
p1707
I0
sg39
F1.8500986575672869
sg34
g752
(S'\x07\xdf\n\x11\x12.\x05\r\xc3p'
tRp1708
sa(dp1709
S'trial_loop.thisTrialN'
p1710
I55
sg894
g1248
sS'block_loop.thisIndex'
p1711
g888
sg38
S'left'
p1712
sg58
g62
sS'trial_loop.thisN'
p1713
I55
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p1714
g59
(g98
S'7\x00\x00\x00'
tRp1715
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1716
I0
sg903
g1256
sS'block_loop.thisRepN'
p1717
I0
sg906
g1258
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1718
I0
sg909
g1252
sg55
g11
sS'block_loop.thisTrial'
p1719
Nsg69
Vn
sS'block_loop.thisTrialN'
p1720
I0
sg39
F2.1000639470948954
sg34
g752
(S'\x07\xdf\n\x11\x12.\x0c\x0b\xee\xb0'
tRp1721
sa(dp1722
S'trial_loop.thisTrialN'
p1723
I56
sg894
g1355
sS'block_loop.thisIndex'
p1724
g888
sg38
S'right'
p1725
sg58
g62
sS'trial_loop.thisN'
p1726
I56
sg33
g1218
sg63
g64
sS'trial_loop.thisIndex'
p1727
g59
(g98
S'8\x00\x00\x00'
tRp1728
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1729
I0
sg903
g1362
sS'block_loop.thisRepN'
p1730
I0
sg906
g1218
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1731
I0
sg909
g1225
sg55
g11
sS'block_loop.thisTrial'
p1732
Nsg69
Vn
sS'block_loop.thisTrialN'
p1733
I0
sg39
F1.0499046780605568
sg34
g752
(S'\x07\xdf\n\x11\x12.\x13\r\xe6\x98'
tRp1734
sa(dp1735
S'trial_loop.thisTrialN'
p1736
I57
sg894
g1338
sS'block_loop.thisIndex'
p1737
g888
sg38
S'right'
p1738
sg58
g62
sS'trial_loop.thisN'
p1739
I57
sg33
g1342
sg63
g64
sS'trial_loop.thisIndex'
p1740
g59
(g98
S'9\x00\x00\x00'
tRp1741
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1742
I0
sg903
g1346
sS'block_loop.thisRepN'
p1743
I0
sg906
g1342
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1744
I0
sg909
g1349
sg55
g11
sS'block_loop.thisTrial'
p1745
Nsg69
Vn
sS'block_loop.thisTrialN'
p1746
I0
sg39
F1.1667633618199034
sg34
g752
(S'\x07\xdf\n\x11\x12.\x19\x0f.\xb8'
tRp1747
sa(dp1748
S'trial_loop.thisTrialN'
p1749
I58
sg894
g1297
sS'block_loop.thisIndex'
p1750
g888
sg38
S'left'
p1751
sg58
g62
sS'trial_loop.thisN'
p1752
I58
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p1753
g59
(g98
S':\x00\x00\x00'
tRp1754
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1755
I0
sg903
g1304
sS'block_loop.thisRepN'
p1756
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1757
I0
sg909
g1165
sg55
g11
sS'block_loop.thisTrial'
p1758
Nsg69
Vn
sS'block_loop.thisTrialN'
p1759
I0
sg39
F1.7000598987287958
sg34
g752
(S'\x07\xdf\n\x11\x12. \x02\xde`'
tRp1760
sa(dp1761
S'trial_loop.thisTrialN'
p1762
I59
sg894
S'48-twix.png'
p1763
sS'block_loop.thisIndex'
p1764
g888
sg38
S'right'
p1765
sg58
g62
sS'trial_loop.thisN'
p1766
I59
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1767
g59
(g98
S';\x00\x00\x00'
tRp1768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1769
I0
sg903
S'50-polo.png'
p1770
sS'block_loop.thisRepN'
p1771
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1772
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1773
Nsg69
Vn
sS'block_loop.thisTrialN'
p1774
I0
sg39
F1.616838299378287
sg34
g752
(S'\x07\xdf\n\x11\x12.&\x0e%\x18'
tRp1775
sa(dp1776
S'trial_loop.thisTrialN'
p1777
I60
sg894
S'43-mrporky_pork_crackles_redo.png'
p1778
sS'block_loop.thisIndex'
p1779
g888
sg38
S'right'
p1780
sg58
g62
sS'trial_loop.thisN'
p1781
I60
sg33
S'18-mms.png'
p1782
sg63
g64
sS'trial_loop.thisIndex'
p1783
g59
(g98
S'<\x00\x00\x00'
tRp1784
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1785
I0
sg903
S'18-mms.png'
p1786
sS'block_loop.thisRepN'
p1787
I0
sg906
g1782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1788
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1789
sg55
g11
sS'block_loop.thisTrial'
p1790
Nsg69
Vn
sS'block_loop.thisTrialN'
p1791
I0
sg39
F2.166801849818512
sg34
g752
(S'\x07\xdf\n\x11\x12.-\x08\xbeH'
tRp1792
sa(dp1793
S'trial_loop.thisTrialN'
p1794
I61
sg894
S'26-walkers_smoky_bacon.png'
p1795
sS'block_loop.thisIndex'
p1796
g888
sg38
S'left'
p1797
sg58
g62
sS'trial_loop.thisN'
p1798
I61
sg33
S'44-crunch.png'
p1799
sg63
g64
sS'trial_loop.thisIndex'
p1800
g59
(g98
S'=\x00\x00\x00'
tRp1801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1802
I0
sg903
S'44-crunch.png'
p1803
sS'block_loop.thisRepN'
p1804
I0
sg906
g1799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1805
I0
sg909
S'26-walkers_smoky_bacon.png'
p1806
sg55
g11
sS'block_loop.thisTrial'
p1807
Nsg69
Vn
sS'block_loop.thisTrialN'
p1808
I0
sg39
F2.5501177875285066
sg34
g752
(S'\x07\xdf\n\x11\x12.4\x0b\xe6\xe0'
tRp1809
sa(dp1810
S'trial_loop.thisTrialN'
p1811
I62
sg894
S'21-nakd_banana_crunch.png'
p1812
sS'block_loop.thisIndex'
p1813
g888
sg38
S'left'
p1814
sg58
g62
sS'trial_loop.thisN'
p1815
I62
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1816
g59
(g98
S'>\x00\x00\x00'
tRp1817
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1818
I0
sg903
S'1-treacle_cookies.png'
p1819
sS'block_loop.thisRepN'
p1820
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1821
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p1822
Nsg69
Vn
sS'block_loop.thisTrialN'
p1823
I0
sg39
F1.4334418504804489
sg34
g752
(S'\x07\xdf\n\x11\x12/\x00\x05\x86\x10'
tRp1824
sa(dp1825
S'trial_loop.thisTrialN'
p1826
I63
sg894
g1601
sS'block_loop.thisIndex'
p1827
g888
sg38
S'left'
p1828
sg58
g62
sS'trial_loop.thisN'
p1829
I63
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p1830
g59
(g98
S'?\x00\x00\x00'
tRp1831
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1832
I0
sg903
g1608
sS'block_loop.thisRepN'
p1833
I0
sg906
g1258
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1834
I0
sg909
g1252
sg55
g11
sS'block_loop.thisTrial'
p1835
Nsg69
Vn
sS'block_loop.thisTrialN'
p1836
I0
sg39
F2.2334949924261309
sg34
g752
(S'\x07\xdf\n\x11\x12/\x06\x0c\x83 '
tRp1837
sa(dp1838
S'trial_loop.thisTrialN'
p1839
I64
sg894
g1017
sS'block_loop.thisIndex'
p1840
g888
sg38
S'left'
p1841
sg58
g62
sS'trial_loop.thisN'
p1842
I64
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1843
g59
(g98
S'@\x00\x00\x00'
tRp1844
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1845
I0
sg903
g1024
sS'block_loop.thisRepN'
p1846
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1847
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p1848
Nsg69
Vn
sS'block_loop.thisTrialN'
p1849
I0
sg39
F1.6000754934939323
sg34
g752
(S'\x07\xdf\n\x11\x12/\x0e\x01_\x90'
tRp1850
sa(dp1851
S'trial_loop.thisTrialN'
p1852
I65
sg894
g1214
sS'block_loop.thisIndex'
p1853
g888
sg38
S'left'
p1854
sg58
g62
sS'trial_loop.thisN'
p1855
I65
sg33
g1218
sg63
g64
sS'trial_loop.thisIndex'
p1856
g59
(g98
S'A\x00\x00\x00'
tRp1857
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1858
I0
sg903
g1222
sS'block_loop.thisRepN'
p1859
I0
sg906
g1218
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1860
I0
sg909
g1225
sg55
g11
sS'block_loop.thisTrial'
p1861
Nsg69
Vn
sS'block_loop.thisTrialN'
p1862
I0
sg39
F1.5664786076577002
sg34
g752
(S'\x07\xdf\n\x11\x12/\x14\n\xfc\x80'
tRp1863
sa(dp1864
S'trial_loop.thisTrialN'
p1865
I66
sg894
g1231
sS'block_loop.thisIndex'
p1866
g888
sg38
S'left'
p1867
sg58
g62
sS'trial_loop.thisN'
p1868
I66
sg33
g1241
sg63
g64
sS'trial_loop.thisIndex'
p1869
g59
(g98
S'B\x00\x00\x00'
tRp1870
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1871
I0
sg903
g1239
sS'block_loop.thisRepN'
p1872
I0
sg906
g1241
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1873
I0
sg909
g1235
sg55
g11
sS'block_loop.thisTrial'
p1874
Nsg69
Vn
sS'block_loop.thisTrialN'
p1875
I0
sg39
F1.5334972446871689
sg34
g752
(S'\x07\xdf\n\x11\x12/\x1b\x05\x18\xb0'
tRp1876
sa(dp1877
S'trial_loop.thisTrialN'
p1878
I67
sg894
g983
sS'block_loop.thisIndex'
p1879
g888
sg38
S'left'
p1880
sg58
g62
sS'trial_loop.thisN'
p1881
I67
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1882
g59
(g98
S'C\x00\x00\x00'
tRp1883
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1884
I0
sg903
g991
sS'block_loop.thisRepN'
p1885
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1886
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p1887
Nsg69
Vn
sS'block_loop.thisTrialN'
p1888
I0
sg39
F2.2167854995459493
sg34
g752
(S'\x07\xdf\n\x11\x12/!\r\x84\xf0'
tRp1889
sa(dp1890
S'trial_loop.thisTrialN'
p1891
I68
sg894
g1214
sS'block_loop.thisIndex'
p1892
g888
sg38
S'left'
p1893
sg58
g62
sS'trial_loop.thisN'
p1894
I68
sg33
g1218
sg63
g64
sS'trial_loop.thisIndex'
p1895
g59
(g98
S'D\x00\x00\x00'
tRp1896
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1897
I0
sg903
g1222
sS'block_loop.thisRepN'
p1898
I0
sg906
g1218
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1899
I0
sg909
g1225
sg55
g11
sS'block_loop.thisTrial'
p1900
Nsg69
Vn
sS'block_loop.thisTrialN'
p1901
I0
sg39
F2.2832152131941257
sg34
g752
(S'\x07\xdf\n\x11\x12/)\x02"\xe0'
tRp1902
sa(dp1903
S'trial_loop.thisTrialN'
p1904
I69
sg894
g1280
sS'block_loop.thisIndex'
p1905
g888
sg38
S'left'
p1906
sg58
g62
sS'trial_loop.thisN'
p1907
I69
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p1908
g59
(g98
S'E\x00\x00\x00'
tRp1909
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1910
I0
sg903
g1288
sS'block_loop.thisRepN'
p1911
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1912
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p1913
Nsg69
Vn
sS'block_loop.thisTrialN'
p1914
I0
sg39
F1.4167540249181911
sg34
g752
(S'\x07\xdf\n\x11\x12/0\x06\xf9('
tRp1915
sa(dp1916
S'trial_loop.thisTrialN'
p1917
I70
sg894
g932
sS'block_loop.thisIndex'
p1918
g888
sg38
S'right'
p1919
sg58
g62
sS'trial_loop.thisN'
p1920
I70
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1921
g59
(g98
S'F\x00\x00\x00'
tRp1922
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1923
I0
sg903
g940
sS'block_loop.thisRepN'
p1924
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1925
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1926
Nsg69
Vn
sS'block_loop.thisTrialN'
p1927
I0
sg39
F2.4334623774120701
sg34
g752
(S'\x07\xdf\n\x11\x12/6\r\xf68'
tRp1928
sa(dp1929
S'trial_loop.thisTrialN'
p1930
I71
sg894
S'44-crunch.png'
p1931
sS'block_loop.thisIndex'
p1932
g888
sg38
S'left'
p1933
sg58
g62
sS'trial_loop.thisN'
p1934
I71
sg33
g1799
sg63
g64
sS'trial_loop.thisIndex'
p1935
g59
(g98
S'G\x00\x00\x00'
tRp1936
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1937
I0
sg903
S'26-walkers_smoky_bacon.png'
p1938
sS'block_loop.thisRepN'
p1939
I0
sg906
g1799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1940
I0
sg909
g1806
sg55
g11
sS'block_loop.thisTrial'
p1941
Nsg69
Vn
sS'block_loop.thisTrialN'
p1942
I0
sg39
F1.8333903050734079
sg34
g752
(S'\x07\xdf\n\x11\x120\x02\x05\xad '
tRp1943
sa(dp1944
S'trial_loop.thisTrialN'
p1945
I72
sg894
g966
sS'block_loop.thisIndex'
p1946
g888
sg38
S'right'
p1947
sg58
g62
sS'trial_loop.thisN'
p1948
I72
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1949
g59
(g98
S'H\x00\x00\x00'
tRp1950
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1951
I0
sg903
g974
sS'block_loop.thisRepN'
p1952
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1953
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p1954
Nsg69
Vn
sS'block_loop.thisTrialN'
p1955
I0
sg39
F1.1335026044980623
sg34
g752
(S'\x07\xdf\n\x11\x120\t\x03\x99\xe0'
tRp1956
sa(dp1957
S'trial_loop.thisTrialN'
p1958
I73
sg894
g1000
sS'block_loop.thisIndex'
p1959
g888
sg38
S'right'
p1960
sg58
g62
sS'trial_loop.thisN'
p1961
I73
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1962
g59
(g98
S'I\x00\x00\x00'
tRp1963
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1964
I0
sg903
g1008
sS'block_loop.thisRepN'
p1965
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1966
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p1967
Nsg69
Vn
sS'block_loop.thisTrialN'
p1968
I0
sg39
F1.633517001859218
sg34
g752
(S'\x07\xdf\n\x11\x120\x0f\x06MH'
tRp1969
sa(dp1970
S'trial_loop.thisTrialN'
p1971
I74
sg894
g1079
sS'block_loop.thisIndex'
p1972
g888
sg38
S'left'
p1973
sg58
g62
sS'trial_loop.thisN'
p1974
I74
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1975
g59
(g98
S'J\x00\x00\x00'
tRp1976
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1977
I0
sg903
g1087
sS'block_loop.thisRepN'
p1978
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1979
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p1980
Nsg69
Vn
sS'block_loop.thisTrialN'
p1981
I0
sg39
F1.2167914865694911
sg34
g752
(S'\x07\xdf\n\x11\x120\x16\x01$\xf8'
tRp1982
sa(dp1983
S'trial_loop.thisTrialN'
p1984
I75
sg894
g1032
sS'block_loop.thisIndex'
p1985
g888
sg38
S'right'
p1986
sg58
g62
sS'trial_loop.thisN'
p1987
I75
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1988
g59
(g98
S'K\x00\x00\x00'
tRp1989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1990
I0
sg903
g1040
sS'block_loop.thisRepN'
p1991
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1992
I0
sg909
g1043
sg55
g11
sS'block_loop.thisTrial'
p1993
Nsg69
Vn
sS'block_loop.thisTrialN'
p1994
I0
sg39
F0.9001723977180518
sg34
g752
(S'\x07\xdf\n\x11\x120\x1c\x05\t\x10'
tRp1995
sa(dp1996
S'trial_loop.thisTrialN'
p1997
I76
sg894
g1931
sS'block_loop.thisIndex'
p1998
g888
sg38
S'left'
p1999
sg58
g62
sS'trial_loop.thisN'
p2000
I76
sg33
g1799
sg63
g64
sS'trial_loop.thisIndex'
p2001
g59
(g98
S'L\x00\x00\x00'
tRp2002
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2003
I0
sg903
g1938
sS'block_loop.thisRepN'
p2004
I0
sg906
g1799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2005
I0
sg909
g1806
sg55
g11
sS'block_loop.thisTrial'
p2006
Nsg69
Vn
sS'block_loop.thisTrialN'
p2007
I0
sg39
F1.1334681078478752
sg34
g752
(S'\x07\xdf\n\x11\x120"\x03\xef\xd0'
tRp2008
sa(dp2009
S'trial_loop.thisTrialN'
p2010
I77
sg894
g1139
sS'block_loop.thisIndex'
p2011
g888
sg38
S'left'
p2012
sg58
g62
sS'trial_loop.thisN'
p2013
I77
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p2014
g59
(g98
S'M\x00\x00\x00'
tRp2015
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2016
I0
sg903
g1146
sS'block_loop.thisRepN'
p2017
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2018
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p2019
Nsg69
Vn
sS'block_loop.thisTrialN'
p2020
I0
sg39
F1.6335127254151303
sg34
g752
(S'\x07\xdf\n\x11\x120(\x06h\xa0'
tRp2021
sa(dp2022
S'trial_loop.thisTrialN'
p2023
I78
sg894
g1616
sS'block_loop.thisIndex'
p2024
g888
sg38
S'right'
p2025
sg58
g62
sS'trial_loop.thisN'
p2026
I78
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2027
g59
(g98
S'N\x00\x00\x00'
tRp2028
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2029
I0
sg903
g1623
sS'block_loop.thisRepN'
p2030
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2031
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p2032
Nsg69
Vn
sS'block_loop.thisTrialN'
p2033
I0
sg39
F1.8999189471287536
sg34
g752
(S'\x07\xdf\n\x11\x120/\x01z\xe8'
tRp2034
sa(dp2035
S'trial_loop.thisTrialN'
p2036
I79
sg894
g1248
sS'block_loop.thisIndex'
p2037
g888
sg38
S'right'
p2038
sg58
g62
sS'trial_loop.thisN'
p2039
I79
sg33
g1258
sg63
g64
sS'trial_loop.thisIndex'
p2040
g59
(g98
S'O\x00\x00\x00'
tRp2041
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2042
I0
sg903
g1256
sS'block_loop.thisRepN'
p2043
I0
sg906
g1258
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2044
I0
sg909
g1252
sg55
g11
sS'block_loop.thisTrial'
p2045
Nsg69
Vn
sS'block_loop.thisTrialN'
p2046
I0
sg39
F1.1335114424819039
sg34
g752
(S'\x07\xdf\n\x11\x1206\x00Y\xd8'
tRp2047
sa(dp2048
S'trial_loop.thisTrialN'
p2049
I80
sg894
g1778
sS'block_loop.thisIndex'
p2050
g888
sg38
S'right'
p2051
sg58
g62
sS'trial_loop.thisN'
p2052
I80
sg33
g1782
sg63
g64
sS'trial_loop.thisIndex'
p2053
g59
(g98
S'P\x00\x00\x00'
tRp2054
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2055
I0
sg903
g1786
sS'block_loop.thisRepN'
p2056
I0
sg906
g1782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2057
I0
sg909
g1789
sg55
g11
sS'block_loop.thisTrial'
p2058
Nsg69
Vn
sS'block_loop.thisTrialN'
p2059
I0
sg39
F1.4668357477676182
sg34
g752
(S'\x07\xdf\n\x11\x121\x00\x02\xd2\xa8'
tRp2060
sa(dp2061
S'trial_loop.thisTrialN'
p2062
I81
sg894
g1079
sS'block_loop.thisIndex'
p2063
g888
sg38
S'left'
p2064
sg58
g62
sS'trial_loop.thisN'
p2065
I81
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2066
g59
(g98
S'Q\x00\x00\x00'
tRp2067
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2068
I0
sg903
g1087
sS'block_loop.thisRepN'
p2069
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2070
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p2071
Nsg69
Vn
sS'block_loop.thisTrialN'
p2072
I0
sg39
F0.93350300363090355
sg34
g752
(S'\x07\xdf\n\x11\x121\x06\n\x8b8'
tRp2073
sa(dp2074
S'trial_loop.thisTrialN'
p2075
I82
sg894
g1616
sS'block_loop.thisIndex'
p2076
g888
sg38
S'right'
p2077
sg58
g62
sS'trial_loop.thisN'
p2078
I82
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2079
g59
(g98
S'R\x00\x00\x00'
tRp2080
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2081
I0
sg903
g1623
sS'block_loop.thisRepN'
p2082
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2083
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p2084
Nsg69
Vn
sS'block_loop.thisTrialN'
p2085
I0
sg39
F1.9500708036612195
sg34
g752
(S'\x07\xdf\n\x11\x121\x0c\n)\x90'
tRp2086
sa(dp2087
S'trial_loop.thisTrialN'
p2088
I83
sg894
g949
sS'block_loop.thisIndex'
p2089
g888
sg38
S'left'
p2090
sg58
g62
sS'trial_loop.thisN'
p2091
I83
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p2092
g59
(g98
S'S\x00\x00\x00'
tRp2093
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2094
I0
sg903
g957
sS'block_loop.thisRepN'
p2095
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2096
I0
sg909
g953
sg55
g11
sS'block_loop.thisTrial'
p2097
Nsg69
Vn
sS'block_loop.thisTrialN'
p2098
I0
sg39
F2.150388857069629
sg34
g752
(S'\x07\xdf\n\x11\x121\x13\t\xc0\x18'
tRp2099
sa(dp2100
S'trial_loop.thisTrialN'
p2101
I84
sg894
S'13-mccoys_steak_crisps.png'
p2102
sS'block_loop.thisIndex'
p2103
g888
sg38
S'left'
p2104
sg58
g62
sS'trial_loop.thisN'
p2105
I84
sg33
S'3-ellas_strawberries_apples.png'
p2106
sg63
g64
sS'trial_loop.thisIndex'
p2107
g59
(g98
S'T\x00\x00\x00'
tRp2108
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2109
I0
sg903
S'3-ellas_strawberries_apples.png'
p2110
sS'block_loop.thisRepN'
p2111
I0
sg906
g2106
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2112
I0
sg909
S'13-mccoys_steak_crisps.png'
p2113
sg55
g11
sS'block_loop.thisTrial'
p2114
Nsg69
Vn
sS'block_loop.thisTrialN'
p2115
I0
sg39
F1.2167718149248685
sg34
g752
(S'\x07\xdf\n\x11\x121\x1a\x0c\xaa0'
tRp2116
sa(dp2117
S'trial_loop.thisTrialN'
p2118
I85
sg894
g1248
sS'block_loop.thisIndex'
p2119
g888
sg38
S'right'
p2120
sg58
g62
sS'trial_loop.thisN'
p2121
I85
sg33
g1258
sg63
g64
sS'trial_loop.thisIndex'
p2122
g59
(g98
S'U\x00\x00\x00'
tRp2123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2124
I0
sg903
g1256
sS'block_loop.thisRepN'
p2125
I0
sg906
g1258
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2126
I0
sg909
g1252
sg55
g11
sS'block_loop.thisTrial'
p2127
Nsg69
Vn
sS'block_loop.thisTrialN'
p2128
I0
sg39
F2.5667842308685067
sg34
g752
(S'\x07\xdf\n\x11\x121!\x01\x11p'
tRp2129
sa(dp2130
S'trial_loop.thisTrialN'
p2131
I86
sg894
g1812
sS'block_loop.thisIndex'
p2132
g888
sg38
S'left'
p2133
sg58
g62
sS'trial_loop.thisN'
p2134
I86
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p2135
g59
(g98
S'V\x00\x00\x00'
tRp2136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2137
I0
sg903
g1819
sS'block_loop.thisRepN'
p2138
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2139
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p2140
Nsg69
Vn
sS'block_loop.thisTrialN'
p2141
I0
sg39
F1.5169186109997099
sg34
g752
(S'\x07\xdf\n\x11\x121(\nk\xf8'
tRp2142
sa(dp2143
S'trial_loop.thisTrialN'
p2144
I87
sg894
g1280
sS'block_loop.thisIndex'
p2145
g888
sg38
S'left'
p2146
sg58
g62
sS'trial_loop.thisN'
p2147
I87
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p2148
g59
(g98
S'W\x00\x00\x00'
tRp2149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2150
I0
sg903
g1288
sS'block_loop.thisRepN'
p2151
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2152
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p2153
Nsg69
Vn
sS'block_loop.thisTrialN'
p2154
I0
sg39
F0.91681061653071083
sg34
g752
(S'\x07\xdf\n\x11\x121/\x03[`'
tRp2155
sa(dp2156
S'trial_loop.thisTrialN'
p2157
I88
sg894
g1297
sS'block_loop.thisIndex'
p2158
g888
sg38
S'left'
p2159
sg58
g62
sS'trial_loop.thisN'
p2160
I88
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p2161
g59
(g98
S'X\x00\x00\x00'
tRp2162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2163
I0
sg903
g1304
sS'block_loop.thisRepN'
p2164
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2165
I0
sg909
g1165
sg55
g11
sS'block_loop.thisTrial'
p2166
Nsg69
Vn
sS'block_loop.thisTrialN'
p2167
I0
sg39
F1.3000823643142212
sg34
g752
(S'\x07\xdf\n\x11\x1215\x02\xbb8'
tRp2168
sa(dp2169
S'trial_loop.thisTrialN'
p2170
I89
sg894
g1586
sS'block_loop.thisIndex'
p2171
g888
sg38
S'left'
p2172
sg58
g62
sS'trial_loop.thisN'
p2173
I89
sg33
g1342
sg63
g64
sS'trial_loop.thisIndex'
p2174
g59
(g98
S'Y\x00\x00\x00'
tRp2175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2176
I0
sg903
g1593
sS'block_loop.thisRepN'
p2177
I0
sg906
g1342
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2178
I0
sg909
g1349
sg55
g11
sS'block_loop.thisTrial'
p2179
Nsg69
Vn
sS'block_loop.thisTrialN'
p2180
I0
sg39
F1.0001864529658633
sg34
g752
(S'\x07\xdf\n\x11\x121;\x07\xd0\x00'
tRp2181
sa(dp2182
S'trial_loop.thisTrialN'
p2183
I90
sg894
g1601
sS'block_loop.thisIndex'
p2184
g888
sg38
S'right'
p2185
sg58
g62
sS'trial_loop.thisN'
p2186
I90
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p2187
g59
(g98
S'Z\x00\x00\x00'
tRp2188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2189
I0
sg903
g1608
sS'block_loop.thisRepN'
p2190
I0
sg906
g1258
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2191
I0
sg909
g1252
sg55
g11
sS'block_loop.thisTrial'
p2192
Nsg69
Vn
sS'block_loop.thisTrialN'
p2193
I0
sg39
F1.1168410077934823
sg34
g752
(S'\x07\xdf\n\x11\x122\x05\x08dp'
tRp2194
sa(dp2195
S'trial_loop.thisTrialN'
p2196
I91
sg894
g1280
sS'block_loop.thisIndex'
p2197
g888
sg38
S'left'
p2198
sg58
g62
sS'trial_loop.thisN'
p2199
I91
sg33
g1291
sg63
g64
sS'trial_loop.thisIndex'
p2200
g59
(g98
S'[\x00\x00\x00'
tRp2201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2202
I0
sg903
g1288
sS'block_loop.thisRepN'
p2203
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2204
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p2205
Nsg69
Vn
sS'block_loop.thisTrialN'
p2206
I0
sg39
F0.85021184079050727
sg34
g752
(S'\x07\xdf\n\x11\x122\x0b\n\x9e\xc0'
tRp2207
sa(dp2208
S'trial_loop.thisTrialN'
p2209
I92
sg894
g1062
sS'block_loop.thisIndex'
p2210
g888
sg38
S'left'
p2211
sg58
g62
sS'trial_loop.thisN'
p2212
I92
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p2213
g59
(g98
S'\\\x00\x00\x00'
tRp2214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2215
I0
sg903
g1070
sS'block_loop.thisRepN'
p2216
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2217
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p2218
Nsg69
Vn
sS'block_loop.thisTrialN'
p2219
I0
sg39
F1.9501554772559757
sg34
g752
(S'\x07\xdf\n\x11\x122\x11\x08\xcd\xe8'
tRp2220
sa(dp2221
S'trial_loop.thisTrialN'
p2222
I93
sg894
g1265
sS'block_loop.thisIndex'
p2223
g888
sg38
S'right'
p2224
sg58
g62
sS'trial_loop.thisN'
p2225
I93
sg33
g1241
sg63
g64
sS'trial_loop.thisIndex'
p2226
g59
(g98
S']\x00\x00\x00'
tRp2227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2228
I0
sg903
g1272
sS'block_loop.thisRepN'
p2229
I0
sg906
g1241
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2230
I0
sg909
g1235
sg55
g11
sS'block_loop.thisTrial'
p2231
Nsg69
Vn
sS'block_loop.thisTrialN'
p2232
I0
sg39
F1.1835492605023319
sg34
g752
(S'\x07\xdf\n\x11\x122\x18\x08\xa2\xf0'
tRp2233
sa(dp2234
S'trial_loop.thisTrialN'
p2235
I94
sg894
g1079
sS'block_loop.thisIndex'
p2236
g888
sg38
S'left'
p2237
sg58
g62
sS'trial_loop.thisN'
p2238
I94
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2239
g59
(g98
S'^\x00\x00\x00'
tRp2240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2241
I0
sg903
g1087
sS'block_loop.thisRepN'
p2242
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2243
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p2244
Nsg69
Vn
sS'block_loop.thisTrialN'
p2245
I0
sg39
F1.316737403805746
sg34
g752
(S'\x07\xdf\n\x11\x122\x1e\x0b\xd3X'
tRp2246
sa(dp2247
S'trial_loop.thisTrialN'
p2248
I95
sg894
g1124
sS'block_loop.thisIndex'
p2249
g888
sg38
S'right'
p2250
sg58
g62
sS'trial_loop.thisN'
p2251
I95
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p2252
g59
(g98
S'_\x00\x00\x00'
tRp2253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2254
I0
sg903
g1131
sS'block_loop.thisRepN'
p2255
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2256
I0
sg909
g953
sg55
g11
sS'block_loop.thisTrial'
p2257
Nsg69
Vn
sS'block_loop.thisTrialN'
p2258
I0
sg39
F1.366825398770743
sg34
g752
(S'\x07\xdf\n\x11\x122%\x01\xe4`'
tRp2259
sa(dp2260
S'trial_loop.thisTrialN'
p2261
I96
sg894
g1032
sS'block_loop.thisIndex'
p2262
g888
sg38
S'right'
p2263
sg58
g62
sS'trial_loop.thisN'
p2264
I96
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p2265
g59
(g98
S'`\x00\x00\x00'
tRp2266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2267
I0
sg903
g1040
sS'block_loop.thisRepN'
p2268
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2269
I0
sg909
g1043
sg55
g11
sS'block_loop.thisTrial'
p2270
Nsg69
Vn
sS'block_loop.thisTrialN'
p2271
I0
sg39
F0.96686953167409229
sg34
g752
(S'\x07\xdf\n\x11\x122+\x07\xef@'
tRp2272
sa(dp2273
S'trial_loop.thisTrialN'
p2274
I97
sg894
g1355
sS'block_loop.thisIndex'
p2275
g888
sg38
S'right'
p2276
sg58
g62
sS'trial_loop.thisN'
p2277
I97
sg33
g1218
sg63
g64
sS'trial_loop.thisIndex'
p2278
g59
(g98
S'a\x00\x00\x00'
tRp2279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2280
I0
sg903
g1362
sS'block_loop.thisRepN'
p2281
I0
sg906
g1218
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2282
I0
sg909
g1225
sg55
g11
sS'block_loop.thisTrial'
p2283
Nsg69
Vn
sS'block_loop.thisTrialN'
p2284
I0
sg39
F1.2498578082304448
sg34
g752
(S'\x07\xdf\n\x11\x1221\x08\x06\xb0'
tRp2285
sa(dp2286
S'trial_loop.thisTrialN'
p2287
I98
sg894
g1465
sS'block_loop.thisIndex'
p2288
g888
sg38
S'right'
p2289
sg58
g62
sS'trial_loop.thisN'
p2290
I98
sg33
g1469
sg63
g64
sS'trial_loop.thisIndex'
p2291
g59
(g98
S'b\x00\x00\x00'
tRp2292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2293
I0
sg903
g1473
sS'block_loop.thisRepN'
p2294
I0
sg906
g1469
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2295
I0
sg909
g1476
sg55
g11
sS'block_loop.thisTrial'
p2296
Nsg69
Vn
sS'block_loop.thisTrialN'
p2297
I0
sg39
F2.4167848153156228
sg34
g752
(S'\x07\xdf\n\x11\x1227\x0cg\xc8'
tRp2298
sa(dp2299
S'trial_loop.thisTrialN'
p2300
I99
sg894
g1124
sS'block_loop.thisIndex'
p2301
g888
sg38
S'right'
p2302
sg58
g62
sS'trial_loop.thisN'
p2303
I99
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2304
g59
(g98
S'c\x00\x00\x00'
tRp2305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2306
I0
sg903
g1131
sS'block_loop.thisRepN'
p2307
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2308
I0
sg909
g953
sg55
g11
sS'block_loop.thisTrial'
p2309
Nsg69
Vn
sS'block_loop.thisTrialN'
p2310
I0
sg39
F1.2167946226290951
sg34
g752
(S'\x07\xdf\n\x11\x123\x03\x03\xe00'
tRp2311
sa(dp2312
S'trial_loop.thisTrialN'
p2313
I100
sg894
g1280
sS'block_loop.thisIndex'
p2314
g888
sg38
S'left'
p2315
sg58
g62
sS'trial_loop.thisN'
p2316
I100
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p2317
g59
(g98
S'd\x00\x00\x00'
tRp2318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2319
I0
sg903
g1288
sS'block_loop.thisRepN'
p2320
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2321
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p2322
Nsg69
Vn
sS'block_loop.thisTrialN'
p2323
I0
sg39
F1.250181677603905
sg34
g752
(S'\x07\xdf\n\x11\x123\t\x07\xc80'
tRp2324
sa(dp2325
S'trial_loop.thisTrialN'
p2326
I101
sg894
g1763
sS'block_loop.thisIndex'
p2327
g888
sg38
S'left'
p2328
sg58
g62
sS'trial_loop.thisN'
p2329
I101
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2330
g59
(g98
S'e\x00\x00\x00'
tRp2331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2332
I0
sg903
g1770
sS'block_loop.thisRepN'
p2333
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2334
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2335
Nsg69
Vn
sS'block_loop.thisTrialN'
p2336
I0
sg39
F2.1001252427940926
sg34
g752
(S'\x07\xdf\n\x11\x123\x0f\x0c)H'
tRp2337
sa(dp2338
S'trial_loop.thisTrialN'
p2339
I102
sg894
g1465
sS'block_loop.thisIndex'
p2340
g888
sg38
S'right'
p2341
sg58
g62
sS'trial_loop.thisN'
p2342
I102
sg33
g1476
sg63
g64
sS'trial_loop.thisIndex'
p2343
g59
(g98
S'f\x00\x00\x00'
tRp2344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2345
I0
sg903
g1473
sS'block_loop.thisRepN'
p2346
I0
sg906
g1469
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2347
I0
sg909
g1476
sg55
g11
sS'block_loop.thisTrial'
p2348
Nsg69
Vn
sS'block_loop.thisTrialN'
p2349
I0
sg39
F2.2001444297748094
sg34
g752
(S'\x07\xdf\n\x11\x123\x16\x0e!0'
tRp2350
sa(dp2351
S'trial_loop.thisTrialN'
p2352
I103
sg894
g1586
sS'block_loop.thisIndex'
p2353
g888
sg38
S'left'
p2354
sg58
g62
sS'trial_loop.thisN'
p2355
I103
sg33
g1349
sg63
g64
sS'trial_loop.thisIndex'
p2356
g59
(g98
S'g\x00\x00\x00'
tRp2357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2358
I0
sg903
g1593
sS'block_loop.thisRepN'
p2359
I0
sg906
g1342
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2360
I0
sg909
g1349
sg55
g11
sS'block_loop.thisTrial'
p2361
Nsg69
Vn
sS'block_loop.thisTrialN'
p2362
I0
sg39
F0.98388920930483437
sg34
g752
(S'\x07\xdf\n\x11\x123\x1e\x02\x80\xa0'
tRp2363
sa(dp2364
S'trial_loop.thisTrialN'
p2365
I104
sg894
g2102
sS'block_loop.thisIndex'
p2366
g888
sg38
S'right'
p2367
sg58
g62
sS'trial_loop.thisN'
p2368
I104
sg33
g2106
sg63
g64
sS'trial_loop.thisIndex'
p2369
g59
(g98
S'h\x00\x00\x00'
tRp2370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2371
I0
sg903
g2110
sS'block_loop.thisRepN'
p2372
I0
sg906
g2106
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2373
I0
sg909
g2113
sg55
g11
sS'block_loop.thisTrial'
p2374
Nsg69
Vn
sS'block_loop.thisTrialN'
p2375
I0
sg39
F1.5167196137972496
sg34
g752
(S'\x07\xdf\n\x11\x123$\x02\x98\x10'
tRp2376
sa(dp2377
S'trial_loop.thisTrialN'
p2378
I105
sg894
g1297
sS'block_loop.thisIndex'
p2379
g888
sg38
S'left'
p2380
sg58
g62
sS'trial_loop.thisN'
p2381
I105
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p2382
g59
(g98
S'i\x00\x00\x00'
tRp2383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2384
I0
sg903
g1304
sS'block_loop.thisRepN'
p2385
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2386
I0
sg909
g1165
sg55
g11
sS'block_loop.thisTrial'
p2387
Nsg69
Vn
sS'block_loop.thisTrialN'
p2388
I0
sg39
F1.3333861711762438
sg34
g752
(S'\x07\xdf\n\x11\x123*\x0b\x04P'
tRp2389
sa(dp2390
S'trial_loop.thisTrialN'
p2391
I106
sg894
g1586
sS'block_loop.thisIndex'
p2392
g888
sg38
S'left'
p2393
sg58
g62
sS'trial_loop.thisN'
p2394
I106
sg33
g1342
sg63
g64
sS'trial_loop.thisIndex'
p2395
g59
(g98
S'j\x00\x00\x00'
tRp2396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2397
I0
sg903
g1593
sS'block_loop.thisRepN'
p2398
I0
sg906
g1342
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2399
I0
sg909
g1349
sg55
g11
sS'block_loop.thisTrial'
p2400
Nsg69
Vn
sS'block_loop.thisTrialN'
p2401
I0
sg39
F0.95018911861734523
sg34
g752
(S'\x07\xdf\n\x11\x1231\x01S\xd8'
tRp2402
sa(dp2403
S'trial_loop.thisTrialN'
p2404
I107
sg894
g1763
sS'block_loop.thisIndex'
p2405
g888
sg38
S'left'
p2406
sg58
g62
sS'trial_loop.thisN'
p2407
I107
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2408
g59
(g98
S'k\x00\x00\x00'
tRp2409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2410
I0
sg903
g1770
sS'block_loop.thisRepN'
p2411
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2412
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2413
Nsg69
Vn
sS'block_loop.thisTrialN'
p2414
I0
sg39
F1.30006326286275
sg34
g752
(S'\x07\xdf\n\x11\x1237\x01,\xc8'
tRp2415
sa(dp2416
S'trial_loop.thisTrialN'
p2417
I108
sg894
g1199
sS'block_loop.thisIndex'
p2418
g888
sg38
S'left'
p2419
sg58
g62
sS'trial_loop.thisN'
p2420
I108
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2421
g59
(g98
S'l\x00\x00\x00'
tRp2422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2423
I0
sg903
g1206
sS'block_loop.thisRepN'
p2424
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2425
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p2426
Nsg69
Vn
sS'block_loop.thisTrialN'
p2427
I0
sg39
F2.7166969771533331
sg34
g752
(S'\x07\xdf\n\x11\x124\x01\x06Ex'
tRp2428
sa(dp2429
S'trial_loop.thisTrialN'
p2430
I109
sg894
g1355
sS'block_loop.thisIndex'
p2431
g888
sg38
S'right'
p2432
sg58
g62
sS'trial_loop.thisN'
p2433
I109
sg33
g1225
sg63
g64
sS'trial_loop.thisIndex'
p2434
g59
(g98
S'm\x00\x00\x00'
tRp2435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2436
I0
sg903
g1362
sS'block_loop.thisRepN'
p2437
I0
sg906
g1218
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2438
I0
sg909
g1225
sg55
g11
sS'block_loop.thisTrial'
p2439
Nsg69
Vn
sS'block_loop.thisTrialN'
p2440
I0
sg39
F0.99992273890711658
sg34
g752
(S'\x07\xdf\n\x11\x124\t\x02\x80\xa0'
tRp2441
sa(dp2442
S'trial_loop.thisTrialN'
p2443
I110
sg894
g1109
sS'block_loop.thisIndex'
p2444
g888
sg38
S'left'
p2445
sg58
g62
sS'trial_loop.thisN'
p2446
I110
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p2447
g59
(g98
S'n\x00\x00\x00'
tRp2448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2449
I0
sg903
g1116
sS'block_loop.thisRepN'
p2450
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2451
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2452
Nsg69
Vn
sS'block_loop.thisTrialN'
p2453
I0
sg39
F1.5334866961238731
sg34
g752
(S'\x07\xdf\n\x11\x124\x0f\x02\xd6\x90'
tRp2454
sa(dp2455
S'trial_loop.thisTrialN'
p2456
I111
sg894
g1601
sS'block_loop.thisIndex'
p2457
g888
sg38
S'left'
p2458
sg58
g62
sS'trial_loop.thisN'
p2459
I111
sg33
g1258
sg63
g64
sS'trial_loop.thisIndex'
p2460
g59
(g98
S'o\x00\x00\x00'
tRp2461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2462
I0
sg903
g1608
sS'block_loop.thisRepN'
p2463
I0
sg906
g1258
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2464
I0
sg909
g1252
sg55
g11
sS'block_loop.thisTrial'
p2465
Nsg69
Vn
sS'block_loop.thisTrialN'
p2466
I0
sg39
F1.7334164484018402
sg34
g752
(S'\x07\xdf\n\x11\x124\x15\x0b}h'
tRp2467
sa(dp2468
S'trial_loop.thisTrialN'
p2469
I112
sg894
g1795
sS'block_loop.thisIndex'
p2470
g888
sg38
S'right'
p2471
sg58
g62
sS'trial_loop.thisN'
p2472
I112
sg33
g1799
sg63
g64
sS'trial_loop.thisIndex'
p2473
g59
(g98
S'p\x00\x00\x00'
tRp2474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2475
I0
sg903
g1803
sS'block_loop.thisRepN'
p2476
I0
sg906
g1799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2477
I0
sg909
g1806
sg55
g11
sS'block_loop.thisTrial'
p2478
Nsg69
Vn
sS'block_loop.thisTrialN'
p2479
I0
sg39
F1.2835125686124229
sg34
g752
(S'\x07\xdf\n\x11\x124\x1c\x07\xfe\xe0'
tRp2480
sa(dp2481
S'trial_loop.thisTrialN'
p2482
I113
sg894
g1778
sS'block_loop.thisIndex'
p2483
g888
sg38
S'right'
p2484
sg58
g62
sS'trial_loop.thisN'
p2485
I113
sg33
g1782
sg63
g64
sS'trial_loop.thisIndex'
p2486
g59
(g98
S'q\x00\x00\x00'
tRp2487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2488
I0
sg903
g1786
sS'block_loop.thisRepN'
p2489
I0
sg906
g1782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2490
I0
sg909
g1789
sg55
g11
sS'block_loop.thisTrial'
p2491
Nsg69
Vn
sS'block_loop.thisTrialN'
p2492
I0
sg39
F1.3668735800420109
sg34
g752
(S'\x07\xdf\n\x11\x124"\x0c\xd9\x10'
tRp2493
sa(dp2494
S'trial_loop.thisTrialN'
p2495
I114
sg894
g1199
sS'block_loop.thisIndex'
p2496
g888
sg38
S'right'
p2497
sg58
g62
sS'trial_loop.thisN'
p2498
I114
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2499
g59
(g98
S'r\x00\x00\x00'
tRp2500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2501
I0
sg903
g1206
sS'block_loop.thisRepN'
p2502
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2503
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p2504
Nsg69
Vn
sS'block_loop.thisTrialN'
p2505
I0
sg39
F1.8500898195834452
sg34
g752
(S'\x07\xdf\n\x11\x124)\x03\xa1\xb0'
tRp2506
sa(dp2507
S'trial_loop.thisTrialN'
p2508
I115
sg894
g1696
sS'block_loop.thisIndex'
p2509
g888
sg38
S'right'
p2510
sg58
g62
sS'trial_loop.thisN'
p2511
I115
sg33
g1469
sg63
g64
sS'trial_loop.thisIndex'
p2512
g59
(g98
S's\x00\x00\x00'
tRp2513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2514
I0
sg903
g1703
sS'block_loop.thisRepN'
p2515
I0
sg906
g1469
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2516
I0
sg909
g1476
sg55
g11
sS'block_loop.thisTrial'
p2517
Nsg69
Vn
sS'block_loop.thisTrialN'
p2518
I0
sg39
F2.016824101583552
sg34
g752
(S'\x07\xdf\n\x11\x1240\x01\xc9\x08'
tRp2519
sa(dp2520
S'trial_loop.thisTrialN'
p2521
I116
sg894
g1338
sS'block_loop.thisIndex'
p2522
g888
sg38
S'right'
p2523
sg58
g62
sS'trial_loop.thisN'
p2524
I116
sg33
g1349
sg63
g64
sS'trial_loop.thisIndex'
p2525
g59
(g98
S't\x00\x00\x00'
tRp2526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2527
I0
sg903
g1346
sS'block_loop.thisRepN'
p2528
I0
sg906
g1342
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2529
I0
sg909
g1349
sg55
g11
sS'block_loop.thisTrial'
p2530
Nsg69
Vn
sS'block_loop.thisTrialN'
p2531
I0
sg39
F1.1668443291637232
sg34
g752
(S'\x07\xdf\n\x11\x1247\x02\x94('
tRp2532
sa(dp2533
S'trial_loop.thisTrialN'
p2534
I117
sg894
g1396
sS'block_loop.thisIndex'
p2535
g888
sg38
S'right'
p2536
sg58
g62
sS'trial_loop.thisN'
p2537
I117
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2538
g59
(g98
S'u\x00\x00\x00'
tRp2539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2540
I0
sg903
g1403
sS'block_loop.thisRepN'
p2541
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2542
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p2543
Nsg69
Vn
sS'block_loop.thisTrialN'
p2544
I0
sg39
F0.88352077938361617
sg34
g752
(S'\x07\xdf\n\x11\x125\x01\x05\xc4\x90'
tRp2545
sa(dp2546
S'trial_loop.thisTrialN'
p2547
I118
sg894
g1184
sS'block_loop.thisIndex'
p2548
g888
sg38
S'left'
p2549
sg58
g62
sS'trial_loop.thisN'
p2550
I118
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p2551
g59
(g98
S'v\x00\x00\x00'
tRp2552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2553
I0
sg903
g1191
sS'block_loop.thisRepN'
p2554
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2555
I0
sg909
g1043
sg55
g11
sS'block_loop.thisTrial'
p2556
Nsg69
Vn
sS'block_loop.thisTrialN'
p2557
I0
sg39
F1.1672665567512013
sg34
g752
(S'\x07\xdf\n\x11\x125\x07\x04l\xd0'
tRp2558
sa(dp2559
S'trial_loop.thisTrialN'
p2560
I119
sg894
S'3-ellas_strawberries_apples.png'
p2561
sS'block_loop.thisIndex'
p2562
g888
sg38
S'left'
p2563
sg58
g62
sS'trial_loop.thisN'
p2564
I119
sg33
g2106
sg63
g64
sS'trial_loop.thisIndex'
p2565
g59
(g98
S'w\x00\x00\x00'
tRp2566
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2567
I0
sg903
S'13-mccoys_steak_crisps.png'
p2568
sS'block_loop.thisRepN'
p2569
I0
sg906
g2106
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2570
I0
sg909
g2113
sg55
g11
sS'block_loop.thisTrial'
p2571
Nsg69
Vn
sS'block_loop.thisTrialN'
p2572
I0
sg39
F1.483461137242557
sg34
g752
(S'\x07\xdf\n\x11\x125\r\x07^\xb8'
tRp2573
sa(dp2574
S'trial_loop.thisTrialN'
p2575
I120
sg894
S'18-mms.png'
p2576
sS'block_loop.thisIndex'
p2577
g888
sg38
S'left'
p2578
sg58
g62
sS'trial_loop.thisN'
p2579
I120
sg33
g1782
sg63
g64
sS'trial_loop.thisIndex'
p2580
g59
(g98
S'x\x00\x00\x00'
tRp2581
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2582
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p2583
sS'block_loop.thisRepN'
p2584
I0
sg906
g1782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2585
I0
sg909
g1789
sg55
g11
sS'block_loop.thisTrial'
p2586
Nsg69
Vn
sS'block_loop.thisTrialN'
p2587
I0
sg39
F0.9500924709791434
sg34
g752
(S'\x07\xdf\n\x11\x125\x14\x00\x0f\xa0'
tRp2588
sa(dp2589
S'trial_loop.thisTrialN'
p2590
I121
sg894
g1396
sS'block_loop.thisIndex'
p2591
g888
sg38
S'right'
p2592
sg58
g62
sS'trial_loop.thisN'
p2593
I121
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2594
g59
(g98
S'y\x00\x00\x00'
tRp2595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2596
I0
sg903
g1403
sS'block_loop.thisRepN'
p2597
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2598
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p2599
Nsg69
Vn
sS'block_loop.thisTrialN'
p2600
I0
sg39
F1.2501927963585331
sg34
g752
(S'\x07\xdf\n\x11\x125\x19\x0f*\xd0'
tRp2601
sa(dp2602
S'trial_loop.thisTrialN'
p2603
I122
sg894
g1931
sS'block_loop.thisIndex'
p2604
g888
sg38
S'left'
p2605
sg58
g62
sS'trial_loop.thisN'
p2606
I122
sg33
g1799
sg63
g64
sS'trial_loop.thisIndex'
p2607
g59
(g98
S'z\x00\x00\x00'
tRp2608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2609
I0
sg903
g1938
sS'block_loop.thisRepN'
p2610
I0
sg906
g1799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2611
I0
sg909
g1806
sg55
g11
sS'block_loop.thisTrial'
p2612
Nsg69
Vn
sS'block_loop.thisTrialN'
p2613
I0
sg39
F1.3001693186797638
sg34
g752
(S'\x07\xdf\n\x11\x125 \x04I\xa8'
tRp2614
sa(dp2615
S'trial_loop.thisTrialN'
p2616
I123
sg894
g1616
sS'block_loop.thisIndex'
p2617
g888
sg38
S'right'
p2618
sg58
g62
sS'trial_loop.thisN'
p2619
I123
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2620
g59
(g98
S'{\x00\x00\x00'
tRp2621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2622
I0
sg903
g1623
sS'block_loop.thisRepN'
p2623
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2624
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p2625
Nsg69
Vn
sS'block_loop.thisTrialN'
p2626
I0
sg39
F1.3671928878738981
sg34
g752
(S'\x07\xdf\n\x11\x125&\t#\xd8'
tRp2627
sa(dp2628
S'trial_loop.thisTrialN'
p2629
I124
sg894
g966
sS'block_loop.thisIndex'
p2630
g888
sg38
S'right'
p2631
sg58
g62
sS'trial_loop.thisN'
p2632
I124
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2633
g59
(g98
S'|\x00\x00\x00'
tRp2634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2635
I0
sg903
g974
sS'block_loop.thisRepN'
p2636
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2637
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vn
sS'block_loop.thisTrialN'
p2639
I0
sg39
F1.2168299745662807
sg34
g752
(S'\x07\xdf\n\x11\x125-\x00*\xf8'
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g1109
sS'block_loop.thisIndex'
p2643
g888
sg38
S'left'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g1116
sS'block_loop.thisRepN'
p2649
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2650
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vn
sS'block_loop.thisTrialN'
p2652
I0
sg39
F1.8667311744502513
sg34
g752
(S'\x07\xdf\n\x11\x1253\x03\xd4x'
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g1696
sS'block_loop.thisIndex'
p2656
g888
sg38
S'left'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g1476
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g1703
sS'block_loop.thisRepN'
p2662
I0
sg906
g1469
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2663
I0
sg909
g1476
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vn
sS'block_loop.thisTrialN'
p2665
I0
sg39
F2.7168070243151305
sg34
g752
(S'\x07\xdf\n\x11\x125:\x02x\xd0'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g2561
sS'block_loop.thisIndex'
p2669
g888
sg38
S'left'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g2106
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g2568
sS'block_loop.thisRepN'
p2675
I0
sg906
g2106
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2676
I0
sg909
g2113
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vn
sS'block_loop.thisTrialN'
p2678
I0
sg39
F0.88356981594552053
sg34
g752
(S'\x07\xdf\n\x11\x126\x05\r\xb7\xb8'
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g1795
sS'block_loop.thisIndex'
p2682
g888
sg38
S'right'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g1799
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g1803
sS'block_loop.thisRepN'
p2688
I0
sg906
g1799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2689
I0
sg909
g1806
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vn
sS'block_loop.thisTrialN'
p2691
I0
sg39
F1.5671959098963271
sg34
g752
(S'\x07\xdf\n\x11\x126\x0b\x0c\x9ex'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g1231
sS'block_loop.thisIndex'
p2695
g888
sg38
S'left'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g1241
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g1239
sS'block_loop.thisRepN'
p2701
I0
sg906
g1241
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2702
I0
sg909
g1235
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vn
sS'block_loop.thisTrialN'
p2704
I0
sg39
F1.0668508008493518
sg34
g752
(S'\x07\xdf\n\x11\x126\x12\x06\x80\x10'
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g1338
sS'block_loop.thisIndex'
p2708
g888
sg38
S'right'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g1349
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g1346
sS'block_loop.thisRepN'
p2714
I0
sg906
g1342
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2715
I0
sg909
g1349
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vn
sS'block_loop.thisTrialN'
p2717
I0
sg39
F0.90010540009279794
sg34
g752
(S'\x07\xdf\n\x11\x126\x18\x08\x06\xb0'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g1062
sS'block_loop.thisIndex'
p2721
g888
sg38
S'left'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g1070
sS'block_loop.thisRepN'
p2727
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vn
sS'block_loop.thisTrialN'
p2730
I0
sg39
F1.3835112286596996
sg34
g752
(S'\x07\xdf\n\x11\x126\x1e\x06\xedp'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g1696
sS'block_loop.thisIndex'
p2734
g888
sg38
S'right'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g1476
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g1703
sS'block_loop.thisRepN'
p2740
I0
sg906
g1469
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg909
g1476
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vn
sS'block_loop.thisTrialN'
p2743
I0
sg39
F2.6833757794174744
sg34
g752
(S'\x07\xdf\n\x11\x126$\rqh'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g1795
sS'block_loop.thisIndex'
p2747
g888
sg38
S'right'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g1799
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g1803
sS'block_loop.thisRepN'
p2753
I0
sg906
g1799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg909
g1806
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F1.0837658481468679
sg34
g752
(S'\x07\xdf\n\x11\x126,\x08\xf4\xf8'
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g2576
sS'block_loop.thisIndex'
p2760
g888
sg38
S'left'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g1782
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g2583
sS'block_loop.thisRepN'
p2766
I0
sg906
g1782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg909
g1789
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F1.1001471952095017
sg34
g752
(S'\x07\xdf\n\x11\x1262\n\xb60'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g1616
sS'block_loop.thisIndex'
p2773
g888
sg38
S'right'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g1623
sS'block_loop.thisRepN'
p2779
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F2.0337146305992064
sg34
g752
(S'\x07\xdf\n\x11\x1268\x0c\xb5\xe8'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g2561
sS'block_loop.thisIndex'
p2786
g888
sg38
S'left'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g2106
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g2568
sS'block_loop.thisRepN'
p2792
I0
sg906
g2106
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg909
g2113
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F1.0501857829895016
sg34
g752
(S'\x07\xdf\n\x11\x127\x03\r\xbb\xa0'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g949
sS'block_loop.thisIndex'
p2799
g888
sg38
S'left'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g957
sS'block_loop.thisRepN'
p2805
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg909
g953
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F1.8998362692072988
sg34
g752
(S'\x07\xdf\n\x11\x127\t\x0f\x03\xc0'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g932
sS'block_loop.thisIndex'
p2812
g888
sg38
S'right'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g940
sS'block_loop.thisRepN'
p2818
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F1.0839577179413027
sg34
g752
(S'\x07\xdf\n\x11\x127\x10\x0e!0'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g1079
sS'block_loop.thisIndex'
p2825
g888
sg38
S'left'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g1087
sS'block_loop.thisRepN'
p2831
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F1.0001787553665054
sg34
g752
(S'\x07\xdf\n\x11\x127\x17\x00\xa0('
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g1465
sS'block_loop.thisIndex'
p2838
g888
sg38
S'left'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g1469
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g1473
sS'block_loop.thisRepN'
p2844
I0
sg906
g1469
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg909
g1476
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F1.6168445714956761
sg34
g752
(S'\x07\xdf\n\x11\x127\x1d\x014\x98'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g1017
sS'block_loop.thisIndex'
p2851
g888
sg38
S'left'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g1024
sS'block_loop.thisRepN'
p2857
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F1.0002280770222569
sg34
g752
(S'\x07\xdf\n\x11\x127#\x0b\x0c '
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1812
sS'block_loop.thisIndex'
p2864
g888
sg38
S'left'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1819
sS'block_loop.thisRepN'
p2870
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F1.1668751195611549
sg34
g752
(S'\x07\xdf\n\x11\x127)\x0b\x9c\xa8'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g1154
sS'block_loop.thisIndex'
p2877
g888
sg38
S'right'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g1162
sS'block_loop.thisRepN'
p2883
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg909
g1165
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F1.0167830477184907
sg34
g752
(S'\x07\xdf\n\x11\x127/\x0e\x92x'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1062
sS'block_loop.thisIndex'
p2890
g888
sg38
S'left'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1070
sS'block_loop.thisRepN'
p2896
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F1.3167567903528834
sg34
g752
(S'\x07\xdf\n\x11\x1276\x00\x1bX'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g1184
sS'block_loop.thisIndex'
p2903
g888
sg38
S'left'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g1191
sS'block_loop.thisRepN'
p2909
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg909
g1043
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F0.88348514234894537
sg34
g752
(S'\x07\xdf\n\x11\x128\x00\x05r\x88'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g983
sS'block_loop.thisIndex'
p2916
g888
sg38
S'left'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g991
sS'block_loop.thisRepN'
p2922
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F1.9500539829787158
sg34
g752
(S'\x07\xdf\n\x11\x128\x06\x04\x1a\xc8'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1411
sS'block_loop.thisIndex'
p2929
g888
sg38
S'right'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1418
sS'block_loop.thisRepN'
p2935
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F1.5834945790375059
sg34
g752
(S'\x07\xdf\n\x11\x128\r\x03\xef\xd0'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1062
sS'block_loop.thisIndex'
p2942
g888
sg38
S'left'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1070
sS'block_loop.thisRepN'
p2948
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F1.4001847994077252
sg34
g752
(S'\x07\xdf\n\x11\x128\x13\rN@'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g1763
sS'block_loop.thisIndex'
p2955
g888
sg38
S'left'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g1770
sS'block_loop.thisRepN'
p2961
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F0.9999287259306584
sg34
g752
(S'\x07\xdf\n\x11\x128\x1a\x04\x8f\xf8'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g2576
sS'block_loop.thisIndex'
p2968
g888
sg38
S'left'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g1782
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g2583
sS'block_loop.thisRepN'
p2974
I0
sg906
g1782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg909
g1789
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F0.96677117345825536
sg34
g752
(S'\x07\xdf\n\x11\x128 \x05$h'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1355
sS'block_loop.thisIndex'
p2981
g888
sg38
S'left'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g1218
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1362
sS'block_loop.thisRepN'
p2987
I0
sg906
g1218
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg909
g1225
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F1.399896852166421
sg34
g752
(S'\x07\xdf\n\x11\x128&\x05;\xd8'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1778
sS'block_loop.thisIndex'
p2994
g888
sg38
S'right'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1782
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1786
sS'block_loop.thisRepN'
p3000
I0
sg906
g1782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg909
g1789
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.1334310453312355
sg34
g752
(S'\x07\xdf\n\x11\x128,\x0b\xbf\xd0'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g895
sS'block_loop.thisIndex'
p3007
g888
sg38
S'left'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g904
sS'block_loop.thisRepN'
p3013
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F1.5668167318453925
sg34
g752
(S'\x07\xdf\n\x11\x1282\x0e8\xa0'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1154
sS'block_loop.thisIndex'
p3020
g888
sg38
S'right'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1162
sS'block_loop.thisRepN'
p3026
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg909
g1165
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F0.86674514416881721
sg34
g752
(S'\x07\xdf\n\x11\x1289\x08\x1a8'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g966
sS'block_loop.thisIndex'
p3033
g888
sg38
S'right'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g974
sS'block_loop.thisRepN'
p3039
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F1.566744032294082
sg34
g752
(S'\x07\xdf\n\x11\x129\x03\x06\xc2x'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1265
sS'block_loop.thisIndex'
p3046
g888
sg38
S'right'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g1241
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1272
sS'block_loop.thisRepN'
p3052
I0
sg906
g1241
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg909
g1235
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F1.0501994676105824
sg34
g752
(S'\x07\xdf\n\x11\x129\n\x00\xa4\x10'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g2576
sS'block_loop.thisIndex'
p3059
g888
sg38
S'left'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1782
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g2583
sS'block_loop.thisRepN'
p3065
I0
sg906
g1782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg909
g1789
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F1.6335118701263127
sg34
g752
(S'\x07\xdf\n\x11\x129\x10\x01\xec0'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1931
sS'block_loop.thisIndex'
p3072
g888
sg38
S'left'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1799
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1938
sS'block_loop.thisRepN'
p3078
I0
sg906
g1799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg909
g1806
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F1.0338933859657118
sg34
g752
(S'\x07\xdf\n\x11\x129\x16\x0c\x028'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1124
sS'block_loop.thisIndex'
p3085
g888
sg38
S'left'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1131
sS'block_loop.thisRepN'
p3091
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg909
g953
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F1.2668335810340068
sg34
g752
(S'\x07\xdf\n\x11\x129\x1c\r\x0f\xc0'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1265
sS'block_loop.thisIndex'
p3098
g888
sg38
S'left'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1241
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1272
sS'block_loop.thisRepN'
p3104
I0
sg906
g1241
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg909
g1235
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F1.7335170873884636
sg34
g752
(S'\x07\xdf\n\x11\x129#\x02i0'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g1778
sS'block_loop.thisIndex'
p3111
g888
sg38
S'right'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1782
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g1786
sS'block_loop.thisRepN'
p3117
I0
sg906
g1782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg909
g1789
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F0.83345160077260516
sg34
g752
(S'\x07\xdf\n\x11\x129)\x0e)\x00'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1199
sS'block_loop.thisIndex'
p3124
g888
sg38
S'right'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1206
sS'block_loop.thisRepN'
p3130
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F1.08341574991573
sg34
g752
(S'\x07\xdf\n\x11\x129/\x0c\x1d\x90'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g2102
sS'block_loop.thisIndex'
p3137
g888
sg38
S'right'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g2106
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g2110
sS'block_loop.thisRepN'
p3143
I0
sg906
g2106
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg909
g2113
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F1.0671786615712335
sg34
g752
(S'\x07\xdf\n\x11\x1295\r\xde\xc8'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g983
sS'block_loop.thisIndex'
p3150
g888
sg38
S'left'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g991
sS'block_loop.thisRepN'
p3156
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F1.1002330091887416
sg34
g752
(S'\x07\xdf\n\x11\x12:\x00\x00#('
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g2561
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g2106
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g2568
sS'block_loop.thisRepN'
p3169
I0
sg906
g2106
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg909
g2113
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F1.0167448448173673
sg34
g752
(S'\x07\xdf\n\x11\x12:\x06\x02"\xe0'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g2576
sS'block_loop.thisIndex'
p3176
g888
sg38
S'left'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g1782
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g2583
sS'block_loop.thisRepN'
p3182
I0
sg906
g1782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg909
g1789
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F1.1835187552023854
sg34
g752
(S'\x07\xdf\n\x11\x12:\x0c\x02\xee\x00'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g895
sS'block_loop.thisIndex'
p3189
g888
sg38
S'right'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g904
sS'block_loop.thisRepN'
p3195
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F2.533475577371064
sg34
g752
(S'\x07\xdf\n\x11\x12:\x12\x06\x1eh'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1586
sS'block_loop.thisIndex'
p3202
g888
sg38
S'left'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1342
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1593
sS'block_loop.thisRepN'
p3208
I0
sg906
g1342
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg909
g1349
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F1.3672470561668888
sg34
g752
(S'\x07\xdf\n\x11\x12:\x19\x0e\xc1X'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1812
sS'block_loop.thisIndex'
p3215
g888
sg38
S'left'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1819
sS'block_loop.thisRepN'
p3221
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F1.4668879203854885
sg34
g752
(S'\x07\xdf\n\x11\x12: \x05\x89\xf8'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g1032
sS'block_loop.thisIndex'
p3228
g888
sg38
S'right'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g1040
sS'block_loop.thisRepN'
p3234
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg909
g1043
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F0.98353055818733992
sg34
g752
(S'\x07\xdf\n\x11\x12:&\rB\x88'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g1154
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g1162
sS'block_loop.thisRepN'
p3247
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg909
g1165
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F0.81669535210312461
sg34
g752
(S'\x07\xdf\n\x11\x12:,\r\x94\x90'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g2102
sS'block_loop.thisIndex'
p3254
g888
sg38
S'right'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g2106
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g2110
sS'block_loop.thisRepN'
p3260
I0
sg906
g2106
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg909
g2113
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F0.83361325036275957
sg34
g752
(S'\x07\xdf\n\x11\x12:2\x0bJ\xa0'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g966
sS'block_loop.thisIndex'
p3267
g888
sg38
S'right'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g974
sS'block_loop.thisRepN'
p3273
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F1.1502206502646004
sg34
g752
(S'\x07\xdf\n\x11\x12:8\t?0'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g1812
sS'block_loop.thisIndex'
p3280
g888
sg38
S'left'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1819
sS'block_loop.thisRepN'
p3286
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F1.6500540114902833
sg34
g752
(S'\x07\xdf\n\x11\x12;\x02\x0b\xf2\x98'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g2102
sS'block_loop.thisIndex'
p3293
g888
sg38
S'right'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g2106
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g2110
sS'block_loop.thisRepN'
p3299
I0
sg906
g2106
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg909
g2113
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F0.83344361807758105
sg34
g752
(S'\x07\xdf\n\x11\x12;\t\x07C`'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g932
sS'block_loop.thisIndex'
p3306
g888
sg38
S'right'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g940
sS'block_loop.thisRepN'
p3312
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F1.2501605804791325
sg34
g752
(S'\x07\xdf\n\x11\x12;\x0f\x054\x08'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g949
sS'block_loop.thisIndex'
p3319
g888
sg38
S'right'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g957
sS'block_loop.thisRepN'
p3325
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg909
g953
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F1.3335173154646327
sg34
g752
(S'\x07\xdf\n\x11\x12;\x15\t\x95 '
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1411
sS'block_loop.thisIndex'
p3332
g888
sg38
S'right'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1418
sS'block_loop.thisRepN'
p3338
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F1.2838849043528171
sg34
g752
(S'\x07\xdf\n\x11\x12;\x1b\x0f&\xe8'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1465
sS'block_loop.thisIndex'
p3345
g888
sg38
S'left'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1476
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1473
sS'block_loop.thisRepN'
p3351
I0
sg906
g1469
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg909
g1476
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F2.2834917565833166
sg34
g752
(S'\x07\xdf\n\x11\x12;"\x04\xbe\xd8'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1000
sS'block_loop.thisIndex'
p3358
g888
sg38
S'left'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1008
sS'block_loop.thisRepN'
p3364
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F1.600154750260117
sg34
g752
(S'\x07\xdf\n\x11\x12;)\t\x918'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g1696
sS'block_loop.thisIndex'
p3371
g888
sg38
S'right'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g1469
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g1703
sS'block_loop.thisRepN'
p3377
I0
sg906
g1469
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg909
g1476
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F1.3834647579660668
sg34
g752
(S'\x07\xdf\n\x11\x12;0\x03\xeb\xe8'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g1139
sS'block_loop.thisIndex'
p3384
g888
sg38
S'right'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g1146
sS'block_loop.thisRepN'
p3390
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F1.1167403688068589
sg34
g752
(S'\x07\xdf\n\x11\x12;6\n5H'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1338
sS'block_loop.thisIndex'
p3397
g888
sg38
S'right'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1349
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1346
sS'block_loop.thisRepN'
p3403
I0
sg906
g1342
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg909
g1349
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F1.5338596020574187
sg34
g752
(S'\x07\xdf\n\x11\x13\x00\x00\x0co\x98'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1124
sS'block_loop.thisIndex'
p3410
g888
sg38
S'right'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1131
sS'block_loop.thisRepN'
p3416
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg909
g953
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F1.9501110022374633
sg34
g752
(S'\x07\xdf\n\x11\x13\x00\x07\x05\xd8\x18'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g2561
sS'block_loop.thisIndex'
p3423
g888
sg38
S'left'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g2106
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g2568
sS'block_loop.thisRepN'
p3429
I0
sg906
g2106
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg909
g2113
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F0.78352924674436508
sg34
g752
(S'\x07\xdf\n\x11\x13\x00\x0e\x05\xad '
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g1601
sS'block_loop.thisIndex'
p3436
g888
sg38
S'left'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1258
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g1608
sS'block_loop.thisRepN'
p3442
I0
sg906
g1258
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg909
g1252
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F1.9168111867220432
sg34
g752
(S'\x07\xdf\n\x11\x13\x00\x14\x02\xea\x18'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1000
sS'block_loop.thisIndex'
p3449
g888
sg38
S'left'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1008
sS'block_loop.thisRepN'
p3455
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F1.2001698033436696
sg34
g752
(S'\x07\xdf\n\x11\x13\x00\x1b\x02\x07\x88'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1795
sS'block_loop.thisIndex'
p3462
g888
sg38
S'right'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g1806
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1803
sS'block_loop.thisRepN'
p3468
I0
sg906
g1799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg909
g1806
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F1.2002350903912884
sg34
g752
(S'\x07\xdf\n\x11\x13\x00!\x05\xb1\x08'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1199
sS'block_loop.thisIndex'
p3475
g888
sg38
S'right'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1206
sS'block_loop.thisRepN'
p3481
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F1.4168164610018721
sg34
g752
(S"\x07\xdf\n\x11\x13\x00'\t\x1c\x08"
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g895
sS'block_loop.thisIndex'
p3488
g888
sg38
S'right'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g904
sS'block_loop.thisRepN'
p3494
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F1.4167480378964683
sg34
g752
(S'\x07\xdf\n\x11\x13\x00.\x00\xda\xc0'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g949
sS'block_loop.thisIndex'
p3501
g888
sg38
S'right'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g957
sS'block_loop.thisRepN'
p3507
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg909
g953
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F2.0167134842267842
sg34
g752
(S'\x07\xdf\n\x11\x13\x004\x07\x99P'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g915
sS'block_loop.thisIndex'
p3514
g888
sg38
S'right'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g923
sS'block_loop.thisRepN'
p3520
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F1.0168580280405877
sg34
g752
(S'\x07\xdf\n\x11\x13\x00;\x08dp'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g1139
sS'block_loop.thisIndex'
p3527
g888
sg38
S'right'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g1146
sS'block_loop.thisRepN'
p3533
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F1.1671975634526461
sg34
g752
(S'\x07\xdf\n\x11\x13\x01\x05\t/\x90'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1763
sS'block_loop.thisIndex'
p3540
g888
sg38
S'left'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1770
sS'block_loop.thisRepN'
p3546
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F1.3835078075044294
sg34
g752
(S'\x07\xdf\n\x11\x13\x01\x0b\x0c%`'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g1265
sS'block_loop.thisIndex'
p3553
g888
sg38
S'right'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1241
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g1272
sS'block_loop.thisRepN'
p3559
I0
sg906
g1241
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg909
g1235
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F1.0667977729408449
sg34
g752
(S'\x07\xdf\n\x11\x13\x01\x12\x03g\x18'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g1109
sS'block_loop.thisIndex'
p3566
g888
sg38
S'left'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g1116
sS'block_loop.thisRepN'
p3572
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F1.7334891479513317
sg34
g752
(S'\x07\xdf\n\x11\x13\x01\x18\x04\xe9\xd0'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g1931
sS'block_loop.thisIndex'
p3579
g888
sg38
S'right'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g1806
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g1938
sS'block_loop.thisRepN'
p3585
I0
sg906
g1799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg909
g1806
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F1.5334715860208235
sg34
g752
(S'\x07\xdf\n\x11\x13\x01\x1f\x01kH'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g1139
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g1146
sS'block_loop.thisRepN'
p3598
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F1.8001700314216578
sg34
g752
(S'\x07\xdf\n\x11\x13\x01%\t\xd7\x88'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g1231
sS'block_loop.thisIndex'
p3605
g888
sg38
S'right'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1235
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g1239
sS'block_loop.thisRepN'
p3611
I0
sg906
g1241
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg909
g1235
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F1.0999658739747247
sg34
g752
(S'\x07\xdf\n\x11\x13\x01,\x07\x85\xc8'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F42.34876055818313
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'45-chewy_nougat_redo.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'right'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'41-peanuts_redo.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'41-peanuts_redo.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'45-chewy_nougat_redo.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F1.2167501476087637
sg34
g752
(S'\x07\xdf\n\x11\x13\x02&\x00\x03\xe8'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'48-twix.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'left'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'48-twix.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'50-polo.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3663
I1
sg3646
S'50-polo.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F1.0672188601438393
sg34
g752
(S'\x07\xdf\n\x11\x13\x02,\x03\xeb\xe8'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'8-liquorice_catherine_wheels.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'right'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3680
I1
sg3646
S'8-liquorice_catherine_wheels.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F1.5334125710924127
sg34
g752
(S'\x07\xdf\n\x11\x13\x022\x05r\x88'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'26-walkers_smoky_bacon.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'right'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'44-crunch.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'44-crunch.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3697
I1
sg3646
S'26-walkers_smoky_bacon.png'
p3698
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vn
sS'block_loop.thisTrialN'
p3700
I0
sg39
F1.1334564189000957
sg34
g752
(S'\x07\xdf\n\x11\x13\x028\x0e\x19`'
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'25-kitkat.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'right'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'25-kitkat.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'31-hobnobs.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3714
I1
sg3646
S'31-hobnobs.png'
p3715
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vn
sS'block_loop.thisTrialN'
p3717
I0
sg39
F1.666736990415302
sg34
g752
(S'\x07\xdf\n\x11\x13\x03\x03\x01O\xf0'
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'50-polo.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'right'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p3725
g59
(g98
S'\x05\x00\x00\x00'
tRp3726
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3727
I0
sg3641
S'48-twix.png'
p3728
sS'block_loop.thisRepN'
p3729
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3730
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p3731
Nsg69
Vn
sS'block_loop.thisTrialN'
p3732
I0
sg39
F0.90009314095368609
sg34
g752
(S'\x07\xdf\n\x11\x13\x03\t\x0b\xe2\xf8'
tRp3733
sa(dp3734
S'trial_loop.thisTrialN'
p3735
I6
sg3632
S'2-steamed_puddings.png'
p3736
sS'block_loop.thisIndex'
p3737
g3626
sg38
S'left'
p3738
sg58
g62
sS'trial_loop.thisN'
p3739
I6
sg33
S'2-steamed_puddings.png'
p3740
sg63
g64
sS'trial_loop.thisIndex'
p3741
g59
(g98
S'\x06\x00\x00\x00'
tRp3742
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3743
I0
sg3641
S'20-fruit_pastilles.png'
p3744
sS'block_loop.thisRepN'
p3745
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3746
I1
sg3646
S'20-fruit_pastilles.png'
p3747
sg55
g11
sS'block_loop.thisTrial'
p3748
Nsg69
Vn
sS'block_loop.thisTrialN'
p3749
I0
sg39
F0.78355091406228894
sg34
g752
(S'\x07\xdf\n\x11\x13\x03\x0f\x0b\x04P'
tRp3750
sa(dp3751
S'trial_loop.thisTrialN'
p3752
I7
sg3632
S'27-hartleys_raspberries_jelly.png'
p3753
sS'block_loop.thisIndex'
p3754
g3626
sg38
S'right'
p3755
sg58
g62
sS'trial_loop.thisN'
p3756
I7
sg33
S'51-mars.png'
p3757
sg63
g64
sS'trial_loop.thisIndex'
p3758
g59
(g98
S'\x07\x00\x00\x00'
tRp3759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3760
I0
sg3641
S'51-mars.png'
p3761
sS'block_loop.thisRepN'
p3762
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3763
I1
sg3646
S'27-hartleys_raspberries_jelly.png'
p3764
sg55
g11
sS'block_loop.thisTrial'
p3765
Nsg69
Vn
sS'block_loop.thisTrialN'
p3766
I0
sg39
F0.86684692353992432
sg34
g752
(S'\x07\xdf\n\x11\x13\x03\x15\x08AH'
tRp3767
sa(dp3768
S'trial_loop.thisTrialN'
p3769
I8
sg3632
S'41-peanuts_redo.png'
p3770
sS'block_loop.thisIndex'
p3771
g3626
sg38
S'left'
p3772
sg58
g62
sS'trial_loop.thisN'
p3773
I8
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p3774
g59
(g98
S'\x08\x00\x00\x00'
tRp3775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3776
I0
sg3641
S'45-chewy_nougat_redo.png'
p3777
sS'block_loop.thisRepN'
p3778
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3779
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3780
Nsg69
Vn
sS'block_loop.thisTrialN'
p3781
I0
sg39
F0.70016281848438666
sg34
g752
(S'\x07\xdf\n\x11\x13\x03\x1b\x06\xae\xf0'
tRp3782
sa(dp3783
S'trial_loop.thisTrialN'
p3784
I9
sg3632
S'6-sour_patch_kids.png'
p3785
sS'block_loop.thisIndex'
p3786
g3626
sg38
S'right'
p3787
sg58
g62
sS'trial_loop.thisN'
p3788
I9
sg33
S'38-maltesers.png'
p3789
sg63
g64
sS'trial_loop.thisIndex'
p3790
g59
(g98
S'\t\x00\x00\x00'
tRp3791
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3792
I0
sg3641
S'38-maltesers.png'
p3793
sS'block_loop.thisRepN'
p3794
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3795
I1
sg3646
S'6-sour_patch_kids.png'
p3796
sg55
g11
sS'block_loop.thisTrial'
p3797
Nsg69
Vn
sS'block_loop.thisTrialN'
p3798
I0
sg39
F1.8498891118015308
sg34
g752
(S'\x07\xdf\n\x11\x13\x03!\x02|\xb8'
tRp3799
sa(dp3800
S'trial_loop.thisTrialN'
p3801
I10
sg3632
S'21-nakd_banana_crunch.png'
p3802
sS'block_loop.thisIndex'
p3803
g3626
sg38
S'left'
p3804
sg58
g62
sS'trial_loop.thisN'
p3805
I10
sg33
S'21-nakd_banana_crunch.png'
p3806
sg63
g64
sS'trial_loop.thisIndex'
p3807
g59
(g98
S'\n\x00\x00\x00'
tRp3808
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3809
I0
sg3641
S'1-treacle_cookies.png'
p3810
sS'block_loop.thisRepN'
p3811
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3812
I1
sg3646
S'1-treacle_cookies.png'
p3813
sg55
g11
sS'block_loop.thisTrial'
p3814
Nsg69
Vn
sS'block_loop.thisTrialN'
p3815
I0
sg39
F0.91686506991754868
sg34
g752
(S'\x07\xdf\n\x11\x13\x03(\x00\xe2\x90'
tRp3816
sa(dp3817
S'trial_loop.thisTrialN'
p3818
I11
sg3632
g3687
sS'block_loop.thisIndex'
p3819
g3626
sg38
S'right'
p3820
sg58
g62
sS'trial_loop.thisN'
p3821
I11
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p3822
g59
(g98
S'\x0b\x00\x00\x00'
tRp3823
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3824
I0
sg3641
g3695
sS'block_loop.thisRepN'
p3825
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3826
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p3827
Nsg69
Vn
sS'block_loop.thisTrialN'
p3828
I0
sg39
F1.1838460457292967
sg34
g752
(S'\x07\xdf\n\x11\x13\x03.\x00\x07\xd0'
tRp3829
sa(dp3830
S'trial_loop.thisTrialN'
p3831
I12
sg3632
g3721
sS'block_loop.thisIndex'
p3832
g3626
sg38
S'right'
p3833
sg58
g62
sS'trial_loop.thisN'
p3834
I12
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p3835
g59
(g98
S'\x0c\x00\x00\x00'
tRp3836
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3837
I0
sg3641
g3728
sS'block_loop.thisRepN'
p3838
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3839
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p3840
Nsg69
Vn
sS'block_loop.thisTrialN'
p3841
I0
sg39
F1.0668083215041406
sg34
g752
(S'\x07\xdf\n\x11\x13\x034\x0388'
tRp3842
sa(dp3843
S'trial_loop.thisTrialN'
p3844
I13
sg3632
g3736
sS'block_loop.thisIndex'
p3845
g3626
sg38
S'left'
p3846
sg58
g62
sS'trial_loop.thisN'
p3847
I13
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p3848
g59
(g98
S'\r\x00\x00\x00'
tRp3849
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3850
I0
sg3641
g3744
sS'block_loop.thisRepN'
p3851
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3852
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p3853
Nsg69
Vn
sS'block_loop.thisTrialN'
p3854
I0
sg39
F0.85021212588617345
sg34
g752
(S'\x07\xdf\n\x11\x13\x03:\x04\xba\xf0'
tRp3855
sa(dp3856
S'trial_loop.thisTrialN'
p3857
I14
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p3858
sS'block_loop.thisIndex'
p3859
g3626
sg38
S'left'
p3860
sg58
g62
sS'trial_loop.thisN'
p3861
I14
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p3862
g59
(g98
S'\x0e\x00\x00\x00'
tRp3863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3864
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p3865
sS'block_loop.thisRepN'
p3866
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3867
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p3868
Nsg69
Vn
sS'block_loop.thisTrialN'
p3869
I0
sg39
F1.5334995254561363
sg34
g752
(S'\x07\xdf\n\x11\x13\x04\x04\x03(\x98'
tRp3870
sa(dp3871
S'trial_loop.thisTrialN'
p3872
I15
sg3632
S'10-bounty_redo.png'
p3873
sS'block_loop.thisIndex'
p3874
g3626
sg38
S'right'
p3875
sg58
g62
sS'trial_loop.thisN'
p3876
I15
sg33
S'4-corn.png'
p3877
sg63
g64
sS'trial_loop.thisIndex'
p3878
g59
(g98
S'\x0f\x00\x00\x00'
tRp3879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3880
I0
sg3641
S'4-corn.png'
p3881
sS'block_loop.thisRepN'
p3882
I1
sg3644
g3877
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3883
I1
sg3646
S'10-bounty_redo.png'
p3884
sg55
g11
sS'block_loop.thisTrial'
p3885
Nsg69
Vn
sS'block_loop.thisTrialN'
p3886
I0
sg39
F1.3834981142299512
sg34
g752
(S'\x07\xdf\n\x11\x13\x04\n\x0b\xd3X'
tRp3887
sa(dp3888
S'trial_loop.thisTrialN'
p3889
I16
sg3632
S'51-mars.png'
p3890
sS'block_loop.thisIndex'
p3891
g3626
sg38
S'left'
p3892
sg58
g62
sS'trial_loop.thisN'
p3893
I16
sg33
g3764
sg63
g64
sS'trial_loop.thisIndex'
p3894
g59
(g98
S'\x10\x00\x00\x00'
tRp3895
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3896
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p3897
sS'block_loop.thisRepN'
p3898
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3899
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p3900
Nsg69
Vn
sS'block_loop.thisTrialN'
p3901
I0
sg39
F0.83360925901433802
sg34
g752
(S'\x07\xdf\n\x11\x13\x04\x11\x02\xd6\x90'
tRp3902
sa(dp3903
S'trial_loop.thisTrialN'
p3904
I17
sg3632
S'7-olives.png'
p3905
sS'block_loop.thisIndex'
p3906
g3626
sg38
S'left'
p3907
sg58
g62
sS'trial_loop.thisN'
p3908
I17
sg33
S'22-daim.png'
p3909
sg63
g64
sS'trial_loop.thisIndex'
p3910
g59
(g98
S'\x11\x00\x00\x00'
tRp3911
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3912
I0
sg3641
S'22-daim.png'
p3913
sS'block_loop.thisRepN'
p3914
I1
sg3644
g3909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3915
I1
sg3646
S'7-olives.png'
p3916
sg55
g11
sS'block_loop.thisTrial'
p3917
Nsg69
Vn
sS'block_loop.thisTrialN'
p3918
I0
sg39
F1.8501146229591541
sg34
g752
(S'\x07\xdf\n\x11\x13\x04\x17\x00\xcb '
tRp3919
sa(dp3920
S'trial_loop.thisTrialN'
p3921
I18
sg3632
S'30-spaghetti_hoops.png'
p3922
sS'block_loop.thisIndex'
p3923
g3626
sg38
S'right'
p3924
sg58
g62
sS'trial_loop.thisN'
p3925
I18
sg33
S'19-caramello_redo.png'
p3926
sg63
g64
sS'trial_loop.thisIndex'
p3927
g59
(g98
S'\x12\x00\x00\x00'
tRp3928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3929
I0
sg3641
S'19-caramello_redo.png'
p3930
sS'block_loop.thisRepN'
p3931
I1
sg3644
g3926
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3932
I1
sg3646
S'30-spaghetti_hoops.png'
p3933
sg55
g11
sS'block_loop.thisTrial'
p3934
Nsg69
Vn
sS'block_loop.thisTrialN'
p3935
I0
sg39
F1.8001543511254567
sg34
g752
(S'\x07\xdf\n\x11\x13\x04\x1d\x0e8\xa0'
tRp3936
sa(dp3937
S'trial_loop.thisTrialN'
p3938
I19
sg3632
S'20-fruit_pastilles.png'
p3939
sS'block_loop.thisIndex'
p3940
g3626
sg38
S'right'
p3941
sg58
g62
sS'trial_loop.thisN'
p3942
I19
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p3943
g59
(g98
S'\x13\x00\x00\x00'
tRp3944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3945
I0
sg3641
S'2-steamed_puddings.png'
p3946
sS'block_loop.thisRepN'
p3947
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3948
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p3949
Nsg69
Vn
sS'block_loop.thisTrialN'
p3950
I0
sg39
F0.96686126388340199
sg34
g752
(S'\x07\xdf\n\x11\x13\x04$\x0b\xa8`'
tRp3951
sa(dp3952
S'trial_loop.thisTrialN'
p3953
I20
sg3632
S'36-fig_rolls.png'
p3954
sS'block_loop.thisIndex'
p3955
g3626
sg38
S'left'
p3956
sg58
g62
sS'trial_loop.thisN'
p3957
I20
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p3958
sg63
g64
sS'trial_loop.thisIndex'
p3959
g59
(g98
S'\x14\x00\x00\x00'
tRp3960
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3961
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p3962
sS'block_loop.thisRepN'
p3963
I1
sg3644
g3958
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3964
I1
sg3646
S'36-fig_rolls.png'
p3965
sg55
g11
sS'block_loop.thisTrial'
p3966
Nsg69
Vn
sS'block_loop.thisTrialN'
p3967
I0
sg39
F2.2835302445819252
sg34
g752
(S'\x07\xdf\n\x11\x13\x04*\x0b\xbf\xd0'
tRp3968
sa(dp3969
S'trial_loop.thisTrialN'
p3970
I21
sg3632
g3653
sS'block_loop.thisIndex'
p3971
g3626
sg38
S'left'
p3972
sg58
g62
sS'trial_loop.thisN'
p3973
I21
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p3974
g59
(g98
S'\x15\x00\x00\x00'
tRp3975
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3976
I0
sg3641
g3661
sS'block_loop.thisRepN'
p3977
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3978
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p3979
Nsg69
Vn
sS'block_loop.thisTrialN'
p3980
I0
sg39
F1.0170903815087513
sg34
g752
(S'\x07\xdf\n\x11\x13\x042\x01S\xd8'
tRp3981
sa(dp3982
S'trial_loop.thisTrialN'
p3983
I22
sg3632
S'3-ellas_strawberries_apples.png'
p3984
sS'block_loop.thisIndex'
p3985
g3626
sg38
S'left'
p3986
sg58
g62
sS'trial_loop.thisN'
p3987
I22
sg33
S'3-ellas_strawberries_apples.png'
p3988
sg63
g64
sS'trial_loop.thisIndex'
p3989
g59
(g98
S'\x16\x00\x00\x00'
tRp3990
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3991
I0
sg3641
S'13-mccoys_steak_crisps.png'
p3992
sS'block_loop.thisRepN'
p3993
I1
sg3644
g3988
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3994
I1
sg3646
S'13-mccoys_steak_crisps.png'
p3995
sg55
g11
sS'block_loop.thisTrial'
p3996
Nsg69
Vn
sS'block_loop.thisTrialN'
p3997
I0
sg39
F1.0168469092859596
sg34
g752
(S'\x07\xdf\n\x11\x13\x048\x02"\xe0'
tRp3998
sa(dp3999
S'trial_loop.thisTrialN'
p4000
I23
sg3632
g3905
sS'block_loop.thisIndex'
p4001
g3626
sg38
S'right'
p4002
sg58
g62
sS'trial_loop.thisN'
p4003
I23
sg33
g3916
sg63
g64
sS'trial_loop.thisIndex'
p4004
g59
(g98
S'\x17\x00\x00\x00'
tRp4005
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4006
I0
sg3641
g3913
sS'block_loop.thisRepN'
p4007
I1
sg3644
g3909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4008
I1
sg3646
g3916
sg55
g11
sS'block_loop.thisTrial'
p4009
Nsg69
Vn
sS'block_loop.thisTrialN'
p4010
I0
sg39
F1.9668495749356225
sg34
g752
(S'\x07\xdf\n\x11\x13\x05\x02\x02\xb3h'
tRp4011
sa(dp4012
S'trial_loop.thisTrialN'
p4013
I24
sg3632
g3922
sS'block_loop.thisIndex'
p4014
g3626
sg38
S'right'
p4015
sg58
g62
sS'trial_loop.thisN'
p4016
I24
sg33
g3926
sg63
g64
sS'trial_loop.thisIndex'
p4017
g59
(g98
S'\x18\x00\x00\x00'
tRp4018
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4019
I0
sg3641
g3930
sS'block_loop.thisRepN'
p4020
I1
sg3644
g3926
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4021
I1
sg3646
g3933
sg55
g11
sS'block_loop.thisTrial'
p4022
Nsg69
Vn
sS'block_loop.thisTrialN'
p4023
I0
sg39
F1.0001901592186186
sg34
g752
(S'\x07\xdf\n\x11\x13\x05\t\x02\xc3\x08'
tRp4024
sa(dp4025
S'trial_loop.thisTrialN'
p4026
I25
sg3632
g3753
sS'block_loop.thisIndex'
p4027
g3626
sg38
S'right'
p4028
sg58
g62
sS'trial_loop.thisN'
p4029
I25
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p4030
g59
(g98
S'\x19\x00\x00\x00'
tRp4031
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4032
I0
sg3641
g3761
sS'block_loop.thisRepN'
p4033
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4034
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p4035
Nsg69
Vn
sS'block_loop.thisTrialN'
p4036
I0
sg39
F0.90018551214780018
sg34
g752
(S'\x07\xdf\n\x11\x13\x05\x0f\x03S\x90'
tRp4037
sa(dp4038
S'trial_loop.thisTrialN'
p4039
I26
sg3632
S'1-treacle_cookies.png'
p4040
sS'block_loop.thisIndex'
p4041
g3626
sg38
S'right'
p4042
sg58
g62
sS'trial_loop.thisN'
p4043
I26
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4044
g59
(g98
S'\x1a\x00\x00\x00'
tRp4045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4046
I0
sg3641
S'21-nakd_banana_crunch.png'
p4047
sS'block_loop.thisRepN'
p4048
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4049
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4050
Nsg69
Vn
sS'block_loop.thisTrialN'
p4051
I0
sg39
F0.93387020763839246
sg34
g752
(S'\x07\xdf\n\x11\x13\x05\x15\x02:P'
tRp4052
sa(dp4053
S'trial_loop.thisTrialN'
p4054
I27
sg3632
S'23-crunchie_redo.png'
p4055
sS'block_loop.thisIndex'
p4056
g3626
sg38
S'right'
p4057
sg58
g62
sS'trial_loop.thisN'
p4058
I27
sg33
S'33-ambrosia_rice.png'
p4059
sg63
g64
sS'trial_loop.thisIndex'
p4060
g59
(g98
S'\x1b\x00\x00\x00'
tRp4061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4062
I0
sg3641
S'33-ambrosia_rice.png'
p4063
sS'block_loop.thisRepN'
p4064
I1
sg3644
g4059
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4065
I1
sg3646
S'23-crunchie_redo.png'
p4066
sg55
g11
sS'block_loop.thisTrial'
p4067
Nsg69
Vn
sS'block_loop.thisTrialN'
p4068
I0
sg39
F2.0167340111602243
sg34
g752
(S'\x07\xdf\n\x11\x13\x05\x1b\x01\xd8\xa8'
tRp4069
sa(dp4070
S'trial_loop.thisTrialN'
p4071
I28
sg3632
S'31-hobnobs.png'
p4072
sS'block_loop.thisIndex'
p4073
g3626
sg38
S'right'
p4074
sg58
g62
sS'trial_loop.thisN'
p4075
I28
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p4076
g59
(g98
S'\x1c\x00\x00\x00'
tRp4077
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4078
I0
sg3641
S'25-kitkat.png'
p4079
sS'block_loop.thisRepN'
p4080
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4081
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4082
Nsg69
Vn
sS'block_loop.thisTrialN'
p4083
I0
sg39
F1.7001554059806949
sg34
g752
(S'\x07\xdf\n\x11\x13\x05"\x02\x9f\xe0'
tRp4084
sa(dp4085
S'trial_loop.thisTrialN'
p4086
I29
sg3632
g3890
sS'block_loop.thisIndex'
p4087
g3626
sg38
S'left'
p4088
sg58
g62
sS'trial_loop.thisN'
p4089
I29
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p4090
g59
(g98
S'\x1d\x00\x00\x00'
tRp4091
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4092
I0
sg3641
g3897
sS'block_loop.thisRepN'
p4093
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4094
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p4095
Nsg69
Vn
sS'block_loop.thisTrialN'
p4096
I0
sg39
F1.9001093914412195
sg34
g752
(S'\x07\xdf\n\x11\x13\x05(\r\xac\x00'
tRp4097
sa(dp4098
S'trial_loop.thisTrialN'
p4099
I30
sg3632
g3873
sS'block_loop.thisIndex'
p4100
g3626
sg38
S'right'
p4101
sg58
g62
sS'trial_loop.thisN'
p4102
I30
sg33
g3884
sg63
g64
sS'trial_loop.thisIndex'
p4103
g59
(g98
S'\x1e\x00\x00\x00'
tRp4104
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4105
I0
sg3641
g3881
sS'block_loop.thisRepN'
p4106
I1
sg3644
g3877
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4107
I1
sg3646
g3884
sg55
g11
sS'block_loop.thisTrial'
p4108
Nsg69
Vn
sS'block_loop.thisTrialN'
p4109
I0
sg39
F1.0168497602480784
sg34
g752
(S'\x07\xdf\n\x11\x13\x05/\x0c\xc9p'
tRp4110
sa(dp4111
S'trial_loop.thisTrialN'
p4112
I31
sg3632
g3939
sS'block_loop.thisIndex'
p4113
g3626
sg38
S'right'
p4114
sg58
g62
sS'trial_loop.thisN'
p4115
I31
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p4116
g59
(g98
S'\x1f\x00\x00\x00'
tRp4117
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4118
I0
sg3641
g3946
sS'block_loop.thisRepN'
p4119
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4120
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p4121
Nsg69
Vn
sS'block_loop.thisTrialN'
p4122
I0
sg39
F0.8001939795067301
sg34
g752
(S'\x07\xdf\n\x11\x13\x055\r\x98x'
tRp4123
sa(dp4124
S'trial_loop.thisTrialN'
p4125
I32
sg3632
S'16-skips_prawn.png'
p4126
sS'block_loop.thisIndex'
p4127
g3626
sg38
S'right'
p4128
sg58
g62
sS'trial_loop.thisN'
p4129
I32
sg33
S'16-skips_prawn.png'
p4130
sg63
g64
sS'trial_loop.thisIndex'
p4131
g59
(g98
S' \x00\x00\x00'
tRp4132
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4133
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p4134
sS'block_loop.thisRepN'
p4135
I1
sg3644
S'42-mrkipling_lemon_slices.png'
p4136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4137
I1
sg3646
g4130
sg55
g11
sS'block_loop.thisTrial'
p4138
Nsg69
Vn
sS'block_loop.thisTrialN'
p4139
I0
sg39
F0.78339981303361128
sg34
g752
(S'\x07\xdf\n\x11\x13\x05;\n\xd5p'
tRp4140
sa(dp4141
S'trial_loop.thisTrialN'
p4142
I33
sg3632
S'44-crunch.png'
p4143
sS'block_loop.thisIndex'
p4144
g3626
sg38
S'left'
p4145
sg58
g62
sS'trial_loop.thisN'
p4146
I33
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4147
g59
(g98
S'!\x00\x00\x00'
tRp4148
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4149
I0
sg3641
S'26-walkers_smoky_bacon.png'
p4150
sS'block_loop.thisRepN'
p4151
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4152
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4153
Nsg69
Vn
sS'block_loop.thisTrialN'
p4154
I0
sg39
F1.0501646858665481
sg34
g752
(S'\x07\xdf\n\x11\x13\x06\x05\x08\x0e\x80'
tRp4155
sa(dp4156
S'trial_loop.thisTrialN'
p4157
I34
sg3632
g3670
sS'block_loop.thisIndex'
p4158
g3626
sg38
S'left'
p4159
sg58
g62
sS'trial_loop.thisN'
p4160
I34
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4161
g59
(g98
S'"\x00\x00\x00'
tRp4162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4163
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4164
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4165
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4166
Nsg69
Vn
sS'block_loop.thisTrialN'
p4167
I0
sg39
F1.4001451710264519
sg34
g752
(S'\x07\xdf\n\x11\x13\x06\x0b\tV\xa0'
tRp4168
sa(dp4169
S'trial_loop.thisTrialN'
p4170
I35
sg3632
S'43-mrporky_pork_crackles_redo.png'
p4171
sS'block_loop.thisIndex'
p4172
g3626
sg38
S'right'
p4173
sg58
g62
sS'trial_loop.thisN'
p4174
I35
sg33
S'18-mms.png'
p4175
sg63
g64
sS'trial_loop.thisIndex'
p4176
g59
(g98
S'#\x00\x00\x00'
tRp4177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4178
I0
sg3641
S'18-mms.png'
p4179
sS'block_loop.thisRepN'
p4180
I1
sg3644
g4175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4181
I1
sg3646
S'43-mrporky_pork_crackles_redo.png'
p4182
sg55
g11
sS'block_loop.thisTrial'
p4183
Nsg69
Vn
sS'block_loop.thisTrialN'
p4184
I0
sg39
F1.7168426613516203
sg34
g752
(S'\x07\xdf\n\x11\x13\x06\x12\x00\xd6\xd8'
tRp4185
sa(dp4186
S'trial_loop.thisTrialN'
p4187
I36
sg3632
S'38-maltesers.png'
p4188
sS'block_loop.thisIndex'
p4189
g3626
sg38
S'left'
p4190
sg58
g62
sS'trial_loop.thisN'
p4191
I36
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p4192
g59
(g98
S'$\x00\x00\x00'
tRp4193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4194
I0
sg3641
S'6-sour_patch_kids.png'
p4195
sS'block_loop.thisRepN'
p4196
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4197
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p4198
Nsg69
Vn
sS'block_loop.thisTrialN'
p4199
I0
sg39
F2.1336328934958146
sg34
g752
(S'\x07\xdf\n\x11\x13\x06\x18\x0c!x'
tRp4200
sa(dp4201
S'trial_loop.thisTrialN'
p4202
I37
sg3632
S'33-ambrosia_rice.png'
p4203
sS'block_loop.thisIndex'
p4204
g3626
sg38
S'left'
p4205
sg58
g62
sS'trial_loop.thisN'
p4206
I37
sg33
g4066
sg63
g64
sS'trial_loop.thisIndex'
p4207
g59
(g98
S'%\x00\x00\x00'
tRp4208
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4209
I0
sg3641
S'23-crunchie_redo.png'
p4210
sS'block_loop.thisRepN'
p4211
I1
sg3644
g4059
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4212
I1
sg3646
g4066
sg55
g11
sS'block_loop.thisTrial'
p4213
Nsg69
Vn
sS'block_loop.thisTrialN'
p4214
I0
sg39
F1.516742136403991
sg34
g752
(S'\x07\xdf\n\x11\x13\x06\x1f\x0e\xd0\xf8'
tRp4215
sa(dp4216
S'trial_loop.thisTrialN'
p4217
I38
sg3632
g4188
sS'block_loop.thisIndex'
p4218
g3626
sg38
S'left'
p4219
sg58
g62
sS'trial_loop.thisN'
p4220
I38
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p4221
g59
(g98
S'&\x00\x00\x00'
tRp4222
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4223
I0
sg3641
g4195
sS'block_loop.thisRepN'
p4224
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4225
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p4226
Nsg69
Vn
sS'block_loop.thisTrialN'
p4227
I0
sg39
F1.5998573948400008
sg34
g752
(S'\x07\xdf\n\x11\x13\x06&\x07\xfa\xf8'
tRp4228
sa(dp4229
S'trial_loop.thisTrialN'
p4230
I39
sg3632
g4040
sS'block_loop.thisIndex'
p4231
g3626
sg38
S'right'
p4232
sg58
g62
sS'trial_loop.thisN'
p4233
I39
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4234
g59
(g98
S"'\x00\x00\x00"
tRp4235
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4236
I0
sg3641
g4047
sS'block_loop.thisRepN'
p4237
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4238
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4239
Nsg69
Vn
sS'block_loop.thisTrialN'
p4240
I0
sg39
F0.95018113592050213
sg34
g752
(S'\x07\xdf\n\x11\x13\x06-\x02U\xa8'
tRp4241
sa(dp4242
S'trial_loop.thisTrialN'
p4243
I40
sg3632
g3687
sS'block_loop.thisIndex'
p4244
g3626
sg38
S'right'
p4245
sg58
g62
sS'trial_loop.thisN'
p4246
I40
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p4247
g59
(g98
S'(\x00\x00\x00'
tRp4248
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4249
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4250
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4251
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4252
Nsg69
Vn
sS'block_loop.thisTrialN'
p4253
I0
sg39
F1.8001574871832418
sg34
g752
(S'\x07\xdf\n\x11\x13\x063\x01\xf0\x18'
tRp4254
sa(dp4255
S'trial_loop.thisTrialN'
p4256
I41
sg3632
S'35-raisins.png'
p4257
sS'block_loop.thisIndex'
p4258
g3626
sg38
S'left'
p4259
sg58
g62
sS'trial_loop.thisN'
p4260
I41
sg33
S'49-yorkie.png'
p4261
sg63
g64
sS'trial_loop.thisIndex'
p4262
g59
(g98
S')\x00\x00\x00'
tRp4263
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4264
I0
sg3641
S'49-yorkie.png'
p4265
sS'block_loop.thisRepN'
p4266
I1
sg3644
S'35-raisins.png'
p4267
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4268
I1
sg3646
g4261
sg55
g11
sS'block_loop.thisTrial'
p4269
Nsg69
Vn
sS'block_loop.thisTrialN'
p4270
I0
sg39
F1.1167888351737929
sg34
g752
(S'\x07\xdf\n\x11\x13\x069\x0e\xa6\x00'
tRp4271
sa(dp4272
S'trial_loop.thisTrialN'
p4273
I42
sg3632
S'22-daim.png'
p4274
sS'block_loop.thisIndex'
p4275
g3626
sg38
S'right'
p4276
sg58
g62
sS'trial_loop.thisN'
p4277
I42
sg33
g3916
sg63
g64
sS'trial_loop.thisIndex'
p4278
g59
(g98
S'*\x00\x00\x00'
tRp4279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4280
I0
sg3641
S'7-olives.png'
p4281
sS'block_loop.thisRepN'
p4282
I1
sg3644
g3909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4283
I1
sg3646
g3916
sg55
g11
sS'block_loop.thisTrial'
p4284
Nsg69
Vn
sS'block_loop.thisTrialN'
p4285
I0
sg39
F2.3501236034917383
sg34
g752
(S'\x07\xdf\n\x11\x13\x07\x04\x01\xdc\x90'
tRp4286
sa(dp4287
S'trial_loop.thisTrialN'
p4288
I43
sg3632
g4072
sS'block_loop.thisIndex'
p4289
g3626
sg38
S'right'
p4290
sg58
g62
sS'trial_loop.thisN'
p4291
I43
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p4292
g59
(g98
S'+\x00\x00\x00'
tRp4293
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4294
I0
sg3641
g4079
sS'block_loop.thisRepN'
p4295
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4296
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4297
Nsg69
Vn
sS'block_loop.thisTrialN'
p4298
I0
sg39
F2.1835310143414972
sg34
g752
(S'\x07\xdf\n\x11\x13\x07\x0b\x07\xa5\x08'
tRp4299
sa(dp4300
S'trial_loop.thisTrialN'
p4301
I44
sg3632
g3770
sS'block_loop.thisIndex'
p4302
g3626
sg38
S'left'
p4303
sg58
g62
sS'trial_loop.thisN'
p4304
I44
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p4305
g59
(g98
S',\x00\x00\x00'
tRp4306
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4307
I0
sg3641
g3777
sS'block_loop.thisRepN'
p4308
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4309
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4310
Nsg69
Vn
sS'block_loop.thisTrialN'
p4311
I0
sg39
F0.81680397378659109
sg34
g752
(S'\x07\xdf\n\x11\x13\x07\x12\n\xcd\xa0'
tRp4312
sa(dp4313
S'trial_loop.thisTrialN'
p4314
I45
sg3632
g3858
sS'block_loop.thisIndex'
p4315
g3626
sg38
S'left'
p4316
sg58
g62
sS'trial_loop.thisN'
p4317
I45
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4318
g59
(g98
S'-\x00\x00\x00'
tRp4319
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4320
I0
sg3641
g3865
sS'block_loop.thisRepN'
p4321
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4322
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4323
Nsg69
Vn
sS'block_loop.thisTrialN'
p4324
I0
sg39
F2.2167039620126161
sg34
g752
(S'\x07\xdf\n\x11\x13\x07\x18\x08\x83\xb0'
tRp4325
sa(dp4326
S'trial_loop.thisTrialN'
p4327
I46
sg3632
g3785
sS'block_loop.thisIndex'
p4328
g3626
sg38
S'right'
p4329
sg58
g62
sS'trial_loop.thisN'
p4330
I46
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p4331
g59
(g98
S'.\x00\x00\x00'
tRp4332
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4333
I0
sg3641
g3793
sS'block_loop.thisRepN'
p4334
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4335
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p4336
Nsg69
Vn
sS'block_loop.thisTrialN'
p4337
I0
sg39
F1.8002013920104218
sg34
g752
(S'\x07\xdf\n\x11\x13\x07\x1f\x0cc\xe0'
tRp4338
sa(dp4339
S'trial_loop.thisTrialN'
p4340
I47
sg3632
S'18-mms.png'
p4341
sS'block_loop.thisIndex'
p4342
g3626
sg38
S'left'
p4343
sg58
g62
sS'trial_loop.thisN'
p4344
I47
sg33
g4175
sg63
g64
sS'trial_loop.thisIndex'
p4345
g59
(g98
S'/\x00\x00\x00'
tRp4346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4347
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p4348
sS'block_loop.thisRepN'
p4349
I1
sg3644
g4175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4350
I1
sg3646
g4182
sg55
g11
sS'block_loop.thisTrial'
p4351
Nsg69
Vn
sS'block_loop.thisTrialN'
p4352
I0
sg39
F0.91693292283162009
sg34
g752
(S'\x07\xdf\n\x11\x13\x07&\t\xd7\x88'
tRp4353
sa(dp4354
S'trial_loop.thisTrialN'
p4355
I48
sg3632
g3802
sS'block_loop.thisIndex'
p4356
g3626
sg38
S'left'
p4357
sg58
g62
sS'trial_loop.thisN'
p4358
I48
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4359
g59
(g98
S'0\x00\x00\x00'
tRp4360
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4361
I0
sg3641
g3810
sS'block_loop.thisRepN'
p4362
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4363
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4364
Nsg69
Vn
sS'block_loop.thisTrialN'
p4365
I0
sg39
F0.86678420235875819
sg34
g752
(S'\x07\xdf\n\x11\x13\x07,\t7`'
tRp4366
sa(dp4367
S'trial_loop.thisTrialN'
p4368
I49
sg3632
S'46-pistachios.png'
p4369
sS'block_loop.thisIndex'
p4370
g3626
sg38
S'left'
p4371
sg58
g62
sS'trial_loop.thisN'
p4372
I49
sg33
S'46-pistachios.png'
p4373
sg63
g64
sS'trial_loop.thisIndex'
p4374
g59
(g98
S'1\x00\x00\x00'
tRp4375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4376
I0
sg3641
S'29-beans.png'
p4377
sS'block_loop.thisRepN'
p4378
I1
sg3644
g4373
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4379
I1
sg3646
S'29-beans.png'
p4380
sg55
g11
sS'block_loop.thisTrial'
p4381
Nsg69
Vn
sS'block_loop.thisTrialN'
p4382
I0
sg39
F1.3168309153843438
sg34
g752
(S'\x07\xdf\n\x11\x13\x072\x07\xa5\x08'
tRp4383
sa(dp4384
S'trial_loop.thisTrialN'
p4385
I50
sg3632
g4055
sS'block_loop.thisIndex'
p4386
g3626
sg38
S'right'
p4387
sg58
g62
sS'trial_loop.thisN'
p4388
I50
sg33
g4059
sg63
g64
sS'trial_loop.thisIndex'
p4389
g59
(g98
S'2\x00\x00\x00'
tRp4390
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4391
I0
sg3641
g4063
sS'block_loop.thisRepN'
p4392
I1
sg3644
g4059
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4393
I1
sg3646
g4066
sg55
g11
sS'block_loop.thisTrial'
p4394
Nsg69
Vn
sS'block_loop.thisTrialN'
p4395
I0
sg39
F1.2168422337072116
sg34
g752
(S'\x07\xdf\n\x11\x13\x078\x0c\xf8P'
tRp4396
sa(dp4397
S'trial_loop.thisTrialN'
p4398
I51
sg3632
S'40-sardines.png'
p4399
sS'block_loop.thisIndex'
p4400
g3626
sg38
S'right'
p4401
sg58
g62
sS'trial_loop.thisN'
p4402
I51
sg33
S'5-pineapple.png'
p4403
sg63
g64
sS'trial_loop.thisIndex'
p4404
g59
(g98
S'3\x00\x00\x00'
tRp4405
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4406
I0
sg3641
S'5-pineapple.png'
p4407
sS'block_loop.thisRepN'
p4408
I1
sg3644
g4403
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4409
I1
sg3646
S'40-sardines.png'
p4410
sg55
g11
sS'block_loop.thisTrial'
p4411
Nsg69
Vn
sS'block_loop.thisTrialN'
p4412
I0
sg39
F1.233526353016714
sg34
g752
(S'\x07\xdf\n\x11\x13\x08\x03\x01\x9e\x10'
tRp4413
sa(dp4414
S'trial_loop.thisTrialN'
p4415
I52
sg3632
g3873
sS'block_loop.thisIndex'
p4416
g3626
sg38
S'right'
p4417
sg58
g62
sS'trial_loop.thisN'
p4418
I52
sg33
g3877
sg63
g64
sS'trial_loop.thisIndex'
p4419
g59
(g98
S'4\x00\x00\x00'
tRp4420
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4421
I0
sg3641
g3881
sS'block_loop.thisRepN'
p4422
I1
sg3644
g3877
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4423
I1
sg3646
g3884
sg55
g11
sS'block_loop.thisTrial'
p4424
Nsg69
Vn
sS'block_loop.thisTrialN'
p4425
I0
sg39
F1.5834746222972171
sg34
g752
(S'\x07\xdf\n\x11\x13\x08\t\x05\x86\x10'
tRp4426
sa(dp4427
S'trial_loop.thisTrialN'
p4428
I53
sg3632
S'5-pineapple.png'
p4429
sS'block_loop.thisIndex'
p4430
g3626
sg38
S'left'
p4431
sg58
g62
sS'trial_loop.thisN'
p4432
I53
sg33
g4403
sg63
g64
sS'trial_loop.thisIndex'
p4433
g59
(g98
S'5\x00\x00\x00'
tRp4434
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4435
I0
sg3641
S'40-sardines.png'
p4436
sS'block_loop.thisRepN'
p4437
I1
sg3644
g4403
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4438
I1
sg3646
g4410
sg55
g11
sS'block_loop.thisTrial'
p4439
Nsg69
Vn
sS'block_loop.thisTrialN'
p4440
I0
sg39
F3.1167010255194327
sg34
g752
(S'\x07\xdf\n\x11\x13\x08\x0f\x0e\xe4\x80'
tRp4441
sa(dp4442
S'trial_loop.thisTrialN'
p4443
I54
sg3632
S'49-yorkie.png'
p4444
sS'block_loop.thisIndex'
p4445
g3626
sg38
S'right'
p4446
sg58
g62
sS'trial_loop.thisN'
p4447
I54
sg33
g4267
sg63
g64
sS'trial_loop.thisIndex'
p4448
g59
(g98
S'6\x00\x00\x00'
tRp4449
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4450
I0
sg3641
S'35-raisins.png'
p4451
sS'block_loop.thisRepN'
p4452
I1
sg3644
g4267
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4453
I1
sg3646
g4261
sg55
g11
sS'block_loop.thisTrial'
p4454
Nsg69
Vn
sS'block_loop.thisTrialN'
p4455
I0
sg39
F1.0001807510398066
sg34
g752
(S'\x07\xdf\n\x11\x13\x08\x18\x02\x0fX'
tRp4456
sa(dp4457
S'trial_loop.thisTrialN'
p4458
I55
sg3632
g3670
sS'block_loop.thisIndex'
p4459
g3626
sg38
S'left'
p4460
sg58
g62
sS'trial_loop.thisN'
p4461
I55
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4462
g59
(g98
S'7\x00\x00\x00'
tRp4463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4464
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4465
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4466
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4467
Nsg69
Vn
sS'block_loop.thisTrialN'
p4468
I0
sg39
F3.3833413112770359
sg34
g752
(S'\x07\xdf\n\x11\x13\x08\x1e\x02\x9f\xe0'
tRp4469
sa(dp4470
S'trial_loop.thisTrialN'
p4471
I56
sg3632
g3984
sS'block_loop.thisIndex'
p4472
g3626
sg38
S'left'
p4473
sg58
g62
sS'trial_loop.thisN'
p4474
I56
sg33
g3988
sg63
g64
sS'trial_loop.thisIndex'
p4475
g59
(g98
S'8\x00\x00\x00'
tRp4476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4477
I0
sg3641
g3992
sS'block_loop.thisRepN'
p4478
I1
sg3644
g3988
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4479
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p4480
Nsg69
Vn
sS'block_loop.thisTrialN'
p4481
I0
sg39
F0.86725004967775021
sg34
g752
(S'\x07\xdf\n\x11\x13\x08&\x08\xd9\xa0'
tRp4482
sa(dp4483
S'trial_loop.thisTrialN'
p4484
I57
sg3632
S'29-beans.png'
p4485
sS'block_loop.thisIndex'
p4486
g3626
sg38
S'right'
p4487
sg58
g62
sS'trial_loop.thisN'
p4488
I57
sg33
g4373
sg63
g64
sS'trial_loop.thisIndex'
p4489
g59
(g98
S'9\x00\x00\x00'
tRp4490
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4491
I0
sg3641
S'46-pistachios.png'
p4492
sS'block_loop.thisRepN'
p4493
I1
sg3644
g4373
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4494
I1
sg3646
g4380
sg55
g11
sS'block_loop.thisTrial'
p4495
Nsg69
Vn
sS'block_loop.thisTrialN'
p4496
I0
sg39
F0.96680994655434915
sg34
g752
(S'\x07\xdf\n\x11\x13\x08,\x07GH'
tRp4497
sa(dp4498
S'trial_loop.thisTrialN'
p4499
I58
sg3632
g3653
sS'block_loop.thisIndex'
p4500
g3626
sg38
S'left'
p4501
sg58
g62
sS'trial_loop.thisN'
p4502
I58
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p4503
g59
(g98
S':\x00\x00\x00'
tRp4504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4505
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4506
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4507
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4508
Nsg69
Vn
sS'block_loop.thisTrialN'
p4509
I0
sg39
F1.433431016821487
sg34
g752
(S'\x07\xdf\n\x11\x13\x082\x07^\xb8'
tRp4510
sa(dp4511
S'trial_loop.thisTrialN'
p4512
I59
sg3632
g4399
sS'block_loop.thisIndex'
p4513
g3626
sg38
S'right'
p4514
sg58
g62
sS'trial_loop.thisN'
p4515
I59
sg33
g4410
sg63
g64
sS'trial_loop.thisIndex'
p4516
g59
(g98
S';\x00\x00\x00'
tRp4517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4518
I0
sg3641
g4407
sS'block_loop.thisRepN'
p4519
I1
sg3644
g4403
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4520
I1
sg3646
g4410
sg55
g11
sS'block_loop.thisTrial'
p4521
Nsg69
Vn
sS'block_loop.thisTrialN'
p4522
I0
sg39
F1.2334402539418079
sg34
g752
(S'\x07\xdf\n\x11\x13\x088\x0e_\xb0'
tRp4523
sa(dp4524
S'trial_loop.thisTrialN'
p4525
I60
sg3632
g3704
sS'block_loop.thisIndex'
p4526
g3626
sg38
S'right'
p4527
sg58
g62
sS'trial_loop.thisN'
p4528
I60
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4529
g59
(g98
S'<\x00\x00\x00'
tRp4530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4531
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4532
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4533
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4534
Nsg69
Vn
sS'block_loop.thisTrialN'
p4535
I0
sg39
F1.6002303007753653
sg34
g752
(S'\x07\xdf\n\x11\x13\t\x03\x03@\x08'
tRp4536
sa(dp4537
S'trial_loop.thisTrialN'
p4538
I61
sg3632
g4171
sS'block_loop.thisIndex'
p4539
g3626
sg38
S'right'
p4540
sg58
g62
sS'trial_loop.thisN'
p4541
I61
sg33
g4175
sg63
g64
sS'trial_loop.thisIndex'
p4542
g59
(g98
S'=\x00\x00\x00'
tRp4543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4544
I0
sg3641
g4179
sS'block_loop.thisRepN'
p4545
I1
sg3644
g4175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4546
I1
sg3646
g4182
sg55
g11
sS'block_loop.thisTrial'
p4547
Nsg69
Vn
sS'block_loop.thisTrialN'
p4548
I0
sg39
F1.0002104010527546
sg34
g752
(S'\x07\xdf\n\x11\x13\t\t\x0c\xdc\xf8'
tRp4549
sa(dp4550
S'trial_loop.thisTrialN'
p4551
I62
sg3632
g3984
sS'block_loop.thisIndex'
p4552
g3626
sg38
S'left'
p4553
sg58
g62
sS'trial_loop.thisN'
p4554
I62
sg33
g3995
sg63
g64
sS'trial_loop.thisIndex'
p4555
g59
(g98
S'>\x00\x00\x00'
tRp4556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4557
I0
sg3641
g3992
sS'block_loop.thisRepN'
p4558
I1
sg3644
g3988
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4559
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p4560
Nsg69
Vn
sS'block_loop.thisTrialN'
p4561
I0
sg39
F0.88344465867885447
sg34
g752
(S'\x07\xdf\n\x11\x13\t\x0f\rm\x80'
tRp4562
sa(dp4563
S'trial_loop.thisTrialN'
p4564
I63
sg3632
S'4-corn.png'
p4565
sS'block_loop.thisIndex'
p4566
g3626
sg38
S'left'
p4567
sg58
g62
sS'trial_loop.thisN'
p4568
I63
sg33
g3877
sg63
g64
sS'trial_loop.thisIndex'
p4569
g59
(g98
S'?\x00\x00\x00'
tRp4570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4571
I0
sg3641
S'10-bounty_redo.png'
p4572
sS'block_loop.thisRepN'
p4573
I1
sg3644
g3877
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4574
I1
sg3646
g3884
sg55
g11
sS'block_loop.thisTrial'
p4575
Nsg69
Vn
sS'block_loop.thisTrialN'
p4576
I0
sg39
F1.6500654153405776
sg34
g752
(S'\x07\xdf\n\x11\x13\t\x15\x0c\x15\xc0'
tRp4577
sa(dp4578
S'trial_loop.thisTrialN'
p4579
I64
sg3632
g4274
sS'block_loop.thisIndex'
p4580
g3626
sg38
S'right'
p4581
sg58
g62
sS'trial_loop.thisN'
p4582
I64
sg33
g3909
sg63
g64
sS'trial_loop.thisIndex'
p4583
g59
(g98
S'@\x00\x00\x00'
tRp4584
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4585
I0
sg3641
g4281
sS'block_loop.thisRepN'
p4586
I1
sg3644
g3909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4587
I1
sg3646
g3916
sg55
g11
sS'block_loop.thisTrial'
p4588
Nsg69
Vn
sS'block_loop.thisTrialN'
p4589
I0
sg39
F1.8500595993773459
sg34
g752
(S'\x07\xdf\n\x11\x13\t\x1c\x07f\x88'
tRp4590
sa(dp4591
S'trial_loop.thisTrialN'
p4592
I65
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p4593
sS'block_loop.thisIndex'
p4594
g3626
sg38
S'right'
p4595
sg58
g62
sS'trial_loop.thisN'
p4596
I65
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p4597
g59
(g98
S'A\x00\x00\x00'
tRp4598
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4599
I0
sg3641
S'36-fig_rolls.png'
p4600
sS'block_loop.thisRepN'
p4601
I1
sg3644
g3958
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4602
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p4603
Nsg69
Vn
sS'block_loop.thisTrialN'
p4604
I0
sg39
F2.0834733393639908
sg34
g752
(S'\x07\xdf\n\x11\x13\t#\x05\x8d\xe0'
tRp4605
sa(dp4606
S'trial_loop.thisTrialN'
p4607
I66
sg3632
g4072
sS'block_loop.thisIndex'
p4608
g3626
sg38
S'left'
p4609
sg58
g62
sS'trial_loop.thisN'
p4610
I66
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4611
g59
(g98
S'B\x00\x00\x00'
tRp4612
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4613
I0
sg3641
g4079
sS'block_loop.thisRepN'
p4614
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4615
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4616
Nsg69
Vn
sS'block_loop.thisTrialN'
p4617
I0
sg39
F2.3005758659728599
sg34
g752
(S'\x07\xdf\n\x11\x13\t*\x07K0'
tRp4618
sa(dp4619
S'trial_loop.thisTrialN'
p4620
I67
sg3632
g3770
sS'block_loop.thisIndex'
p4621
g3626
sg38
S'left'
p4622
sg58
g62
sS'trial_loop.thisN'
p4623
I67
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4624
g59
(g98
S'C\x00\x00\x00'
tRp4625
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4626
I0
sg3641
g3777
sS'block_loop.thisRepN'
p4627
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4628
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4629
Nsg69
Vn
sS'block_loop.thisTrialN'
p4630
I0
sg39
F0.7501975004470296
sg34
g752
(S'\x07\xdf\n\x11\x13\t1\x0c\\\x10'
tRp4631
sa(dp4632
S'trial_loop.thisTrialN'
p4633
I68
sg3632
g4072
sS'block_loop.thisIndex'
p4634
g3626
sg38
S'left'
p4635
sg58
g62
sS'trial_loop.thisN'
p4636
I68
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4637
g59
(g98
S'D\x00\x00\x00'
tRp4638
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4639
I0
sg3641
g4079
sS'block_loop.thisRepN'
p4640
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4641
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4642
Nsg69
Vn
sS'block_loop.thisTrialN'
p4643
I0
sg39
F1.0334067266176135
sg34
g752
(S'\x07\xdf\n\x11\x13\t7\t\x1f\xf0'
tRp4644
sa(dp4645
S'trial_loop.thisTrialN'
p4646
I69
sg3632
g3670
sS'block_loop.thisIndex'
p4647
g3626
sg38
S'left'
p4648
sg58
g62
sS'trial_loop.thisN'
p4649
I69
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p4650
g59
(g98
S'E\x00\x00\x00'
tRp4651
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4652
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4653
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4654
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4655
Nsg69
Vn
sS'block_loop.thisTrialN'
p4656
I0
sg39
F2.5001412652054569
sg34
g752
(S'\x07\xdf\n\x11\x13\n\x01\n)\x90'
tRp4657
sa(dp4658
S'trial_loop.thisTrialN'
p4659
I70
sg3632
g4593
sS'block_loop.thisIndex'
p4660
g3626
sg38
S'left'
p4661
sg58
g62
sS'trial_loop.thisN'
p4662
I70
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p4663
g59
(g98
S'F\x00\x00\x00'
tRp4664
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4665
I0
sg3641
g4600
sS'block_loop.thisRepN'
p4666
I1
sg3644
g3958
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4667
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p4668
Nsg69
Vn
sS'block_loop.thisTrialN'
p4669
I0
sg39
F2.6667999966921343
sg34
g752
(S'\x07\xdf\n\x11\x13\n\t\x03\x11('
tRp4670
sa(dp4671
S'trial_loop.thisTrialN'
p4672
I71
sg3632
g3633
sS'block_loop.thisIndex'
p4673
g3626
sg38
S'right'
p4674
sg58
g62
sS'trial_loop.thisN'
p4675
I71
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4676
g59
(g98
S'G\x00\x00\x00'
tRp4677
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4678
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4679
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4680
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4681
Nsg69
Vn
sS'block_loop.thisTrialN'
p4682
I0
sg39
F1.6671492396344547
sg34
g752
(S'\x07\xdf\n\x11\x13\n\x10\r\x9c`'
tRp4683
sa(dp4684
S'trial_loop.thisTrialN'
p4685
I72
sg3632
g4593
sS'block_loop.thisIndex'
p4686
g3626
sg38
S'left'
p4687
sg58
g62
sS'trial_loop.thisN'
p4688
I72
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p4689
g59
(g98
S'H\x00\x00\x00'
tRp4690
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4691
I0
sg3641
g4600
sS'block_loop.thisRepN'
p4692
I1
sg3644
g3958
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4693
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p4694
Nsg69
Vn
sS'block_loop.thisTrialN'
p4695
I0
sg39
F2.0334996680048789
sg34
g752
(S"\x07\xdf\n\x11\x13\n\x17\t'\xc0"
tRp4696
sa(dp4697
S'trial_loop.thisTrialN'
p4698
I73
sg3632
g4369
sS'block_loop.thisIndex'
p4699
g3626
sg38
S'left'
p4700
sg58
g62
sS'trial_loop.thisN'
p4701
I73
sg33
g4380
sg63
g64
sS'trial_loop.thisIndex'
p4702
g59
(g98
S'I\x00\x00\x00'
tRp4703
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4704
I0
sg3641
g4377
sS'block_loop.thisRepN'
p4705
I1
sg3644
g4373
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4706
I1
sg3646
g4380
sg55
g11
sS'block_loop.thisTrial'
p4707
Nsg69
Vn
sS'block_loop.thisTrialN'
p4708
I0
sg39
F0.95016032389139582
sg34
g752
(S'\x07\xdf\n\x11\x13\n\x1e\n-x'
tRp4709
sa(dp4710
S'trial_loop.thisTrialN'
p4711
I74
sg3632
g3802
sS'block_loop.thisIndex'
p4712
g3626
sg38
S'left'
p4713
sg58
g62
sS'trial_loop.thisN'
p4714
I74
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4715
g59
(g98
S'J\x00\x00\x00'
tRp4716
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4717
I0
sg3641
g3810
sS'block_loop.thisRepN'
p4718
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4719
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4720
Nsg69
Vn
sS'block_loop.thisTrialN'
p4721
I0
sg39
F0.85011462295915408
sg34
g752
(S'\x07\xdf\n\x11\x13\n$\t\xc7\xe8'
tRp4722
sa(dp4723
S'trial_loop.thisTrialN'
p4724
I75
sg3632
g4429
sS'block_loop.thisIndex'
p4725
g3626
sg38
S'right'
p4726
sg58
g62
sS'trial_loop.thisN'
p4727
I75
sg33
g4410
sg63
g64
sS'trial_loop.thisIndex'
p4728
g59
(g98
S'K\x00\x00\x00'
tRp4729
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4730
I0
sg3641
g4436
sS'block_loop.thisRepN'
p4731
I1
sg3644
g4403
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4732
I1
sg3646
g4410
sg55
g11
sS'block_loop.thisTrial'
p4733
Nsg69
Vn
sS'block_loop.thisTrialN'
p4734
I0
sg39
F1.1834871095143171
sg34
g752
(S'\x07\xdf\n\x11\x13\n*\x085\x90'
tRp4735
sa(dp4736
S'trial_loop.thisTrialN'
p4737
I76
sg3632
g4485
sS'block_loop.thisIndex'
p4738
g3626
sg38
S'right'
p4739
sg58
g62
sS'trial_loop.thisN'
p4740
I76
sg33
g4373
sg63
g64
sS'trial_loop.thisIndex'
p4741
g59
(g98
S'L\x00\x00\x00'
tRp4742
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4743
I0
sg3641
g4492
sS'block_loop.thisRepN'
p4744
I1
sg3644
g4373
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4745
I1
sg3646
g4380
sg55
g11
sS'block_loop.thisTrial'
p4746
Nsg69
Vn
sS'block_loop.thisTrialN'
p4747
I0
sg39
F0.73388799764506985
sg34
g752
(S'\x07\xdf\n\x11\x13\n0\x0be\xf8'
tRp4748
sa(dp4749
S'trial_loop.thisTrialN'
p4750
I77
sg3632
g4429
sS'block_loop.thisIndex'
p4751
g3626
sg38
S'right'
p4752
sg58
g62
sS'trial_loop.thisN'
p4753
I77
sg33
g4403
sg63
g64
sS'trial_loop.thisIndex'
p4754
g59
(g98
S'M\x00\x00\x00'
tRp4755
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4756
I0
sg3641
g4436
sS'block_loop.thisRepN'
p4757
I1
sg3644
g4403
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4758
I1
sg3646
g4410
sg55
g11
sS'block_loop.thisTrial'
p4759
Nsg69
Vn
sS'block_loop.thisTrialN'
p4760
I0
sg39
F0.8501790547179553
sg34
g752
(S'\x07\xdf\n\x11\x13\n6\x07\xebX'
tRp4761
sa(dp4762
S'trial_loop.thisTrialN'
p4763
I78
sg3632
g4274
sS'block_loop.thisIndex'
p4764
g3626
sg38
S'right'
p4765
sg58
g62
sS'trial_loop.thisN'
p4766
I78
sg33
g3916
sg63
g64
sS'trial_loop.thisIndex'
p4767
g59
(g98
S'N\x00\x00\x00'
tRp4768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4769
I0
sg3641
g4281
sS'block_loop.thisRepN'
p4770
I1
sg3644
g3909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4771
I1
sg3646
g3916
sg55
g11
sS'block_loop.thisTrial'
p4772
Nsg69
Vn
sS'block_loop.thisTrialN'
p4773
I0
sg39
F1.6834869669655745
sg34
g752
(S'\x07\xdf\n\x11\x13\x0b\x00\x06\x1a\x80'
tRp4774
sa(dp4775
S'trial_loop.thisTrialN'
p4776
I79
sg3632
g4171
sS'block_loop.thisIndex'
p4777
g3626
sg38
S'right'
p4778
sg58
g62
sS'trial_loop.thisN'
p4779
I79
sg33
g4175
sg63
g64
sS'trial_loop.thisIndex'
p4780
g59
(g98
S'O\x00\x00\x00'
tRp4781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4782
I0
sg3641
g4179
sS'block_loop.thisRepN'
p4783
I1
sg3644
g4175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4784
I1
sg3646
g4182
sg55
g11
sS'block_loop.thisTrial'
p4785
Nsg69
Vn
sS'block_loop.thisTrialN'
p4786
I0
sg39
F0.88354073612390494
sg34
g752
(S'\x07\xdf\n\x11\x13\x0b\x07\x01\xa5\xe0'
tRp4787
sa(dp4788
S'trial_loop.thisTrialN'
p4789
I80
sg3632
g4444
sS'block_loop.thisIndex'
p4790
g3626
sg38
S'right'
p4791
sg58
g62
sS'trial_loop.thisN'
p4792
I80
sg33
g4267
sg63
g64
sS'trial_loop.thisIndex'
p4793
g59
(g98
S'P\x00\x00\x00'
tRp4794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4795
I0
sg3641
g4451
sS'block_loop.thisRepN'
p4796
I1
sg3644
g4267
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4797
I1
sg3646
g4261
sg55
g11
sS'block_loop.thisTrial'
p4798
Nsg69
Vn
sS'block_loop.thisTrialN'
p4799
I0
sg39
F1.4001349075588223
sg34
g752
(S'\x07\xdf\n\x11\x13\x0b\r\x00\x8c\xa0'
tRp4800
sa(dp4801
S'trial_loop.thisTrialN'
p4802
I81
sg3632
g4369
sS'block_loop.thisIndex'
p4803
g3626
sg38
S'left'
p4804
sg58
g62
sS'trial_loop.thisN'
p4805
I81
sg33
g4373
sg63
g64
sS'trial_loop.thisIndex'
p4806
g59
(g98
S'Q\x00\x00\x00'
tRp4807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4808
I0
sg3641
g4377
sS'block_loop.thisRepN'
p4809
I1
sg3644
g4373
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4810
I1
sg3646
g4380
sg55
g11
sS'block_loop.thisTrial'
p4811
Nsg69
Vn
sS'block_loop.thisTrialN'
p4812
I0
sg39
F0.78348562701285118
sg34
g752
(S'\x07\xdf\n\x11\x13\x0b\x13\x07\x10\x98'
tRp4813
sa(dp4814
S'trial_loop.thisTrialN'
p4815
I82
sg3632
g4203
sS'block_loop.thisIndex'
p4816
g3626
sg38
S'left'
p4817
sg58
g62
sS'trial_loop.thisN'
p4818
I82
sg33
g4059
sg63
g64
sS'trial_loop.thisIndex'
p4819
g59
(g98
S'R\x00\x00\x00'
tRp4820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4821
I0
sg3641
g4210
sS'block_loop.thisRepN'
p4822
I1
sg3644
g4059
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4823
I1
sg3646
g4066
sg55
g11
sS'block_loop.thisTrial'
p4824
Nsg69
Vn
sS'block_loop.thisTrialN'
p4825
I0
sg39
F1.0001522414113424
sg34
g752
(S'\x07\xdf\n\x11\x13\x0b\x19\x04M\x90'
tRp4826
sa(dp4827
S'trial_loop.thisTrialN'
p4828
I83
sg3632
g4341
sS'block_loop.thisIndex'
p4829
g3626
sg38
S'right'
p4830
sg58
g62
sS'trial_loop.thisN'
p4831
I83
sg33
g4175
sg63
g64
sS'trial_loop.thisIndex'
p4832
g59
(g98
S'S\x00\x00\x00'
tRp4833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4834
I0
sg3641
g4348
sS'block_loop.thisRepN'
p4835
I1
sg3644
g4175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4836
I1
sg3646
g4182
sg55
g11
sS'block_loop.thisTrial'
p4837
Nsg69
Vn
sS'block_loop.thisTrialN'
p4838
I0
sg39
F0.78355205444677267
sg34
g752
(S'\x07\xdf\n\x11\x13\x0b\x1f\x04\xde\x18'
tRp4839
sa(dp4840
S'trial_loop.thisTrialN'
p4841
I84
sg3632
S'42-mrkipling_lemon_slices.png'
p4842
sS'block_loop.thisIndex'
p4843
g3626
sg38
S'left'
p4844
sg58
g62
sS'trial_loop.thisN'
p4845
I84
sg33
g4136
sg63
g64
sS'trial_loop.thisIndex'
p4846
g59
(g98
S'T\x00\x00\x00'
tRp4847
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4848
I0
sg3641
S'16-skips_prawn.png'
p4849
sS'block_loop.thisRepN'
p4850
I1
sg3644
g4136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4851
I1
sg3646
g4130
sg55
g11
sS'block_loop.thisTrial'
p4852
Nsg69
Vn
sS'block_loop.thisTrialN'
p4853
I0
sg39
F1.0666880108747137
sg34
g752
(S'\x07\xdf\n\x11\x13\x0b%\x01\xe0x'
tRp4854
sa(dp4855
S'trial_loop.thisTrialN'
p4856
I85
sg3632
g3954
sS'block_loop.thisIndex'
p4857
g3626
sg38
S'left'
p4858
sg58
g62
sS'trial_loop.thisN'
p4859
I85
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p4860
g59
(g98
S'U\x00\x00\x00'
tRp4861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4862
I0
sg3641
g3962
sS'block_loop.thisRepN'
p4863
I1
sg3644
g3958
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4864
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p4865
Nsg69
Vn
sS'block_loop.thisTrialN'
p4866
I0
sg39
F1.8001577722807269
sg34
g752
(S'\x07\xdf\n\x11\x13\x0b+\x03c0'
tRp4867
sa(dp4868
S'trial_loop.thisTrialN'
p4869
I86
sg3632
g4399
sS'block_loop.thisIndex'
p4870
g3626
sg38
S'left'
p4871
sg58
g62
sS'trial_loop.thisN'
p4872
I86
sg33
g4410
sg63
g64
sS'trial_loop.thisIndex'
p4873
g59
(g98
S'V\x00\x00\x00'
tRp4874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4875
I0
sg3641
g4407
sS'block_loop.thisRepN'
p4876
I1
sg3644
g4403
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4877
I1
sg3646
g4410
sg55
g11
sS'block_loop.thisTrial'
p4878
Nsg69
Vn
sS'block_loop.thisTrialN'
p4879
I0
sg39
F2.3835710988769279
sg34
g752
(S'\x07\xdf\n\x11\x13\x0b2\x01\x15X'
tRp4880
sa(dp4881
S'trial_loop.thisTrialN'
p4882
I87
sg3632
g4842
sS'block_loop.thisIndex'
p4883
g3626
sg38
S'left'
p4884
sg58
g62
sS'trial_loop.thisN'
p4885
I87
sg33
g4136
sg63
g64
sS'trial_loop.thisIndex'
p4886
g59
(g98
S'W\x00\x00\x00'
tRp4887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4888
I0
sg3641
g4849
sS'block_loop.thisRepN'
p4889
I1
sg3644
g4136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4890
I1
sg3646
g4130
sg55
g11
sS'block_loop.thisTrial'
p4891
Nsg69
Vn
sS'block_loop.thisTrialN'
p4892
I0
sg39
F1.0667709738900157
sg34
g752
(S'\x07\xdf\n\x11\x13\x0b9\x07V\xe8'
tRp4893
sa(dp4894
S'trial_loop.thisTrialN'
p4895
I88
sg3632
g3858
sS'block_loop.thisIndex'
p4896
g3626
sg38
S'left'
p4897
sg58
g62
sS'trial_loop.thisN'
p4898
I88
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4899
g59
(g98
S'X\x00\x00\x00'
tRp4900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4901
I0
sg3641
g3865
sS'block_loop.thisRepN'
p4902
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4903
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4904
Nsg69
Vn
sS'block_loop.thisTrialN'
p4905
I0
sg39
F1.4000932835024287
sg34
g752
(S'\x07\xdf\n\x11\x13\x0c\x03\x08\xd9\xa0'
tRp4906
sa(dp4907
S'trial_loop.thisTrialN'
p4908
I89
sg3632
g4842
sS'block_loop.thisIndex'
p4909
g3626
sg38
S'left'
p4910
sg58
g62
sS'trial_loop.thisN'
p4911
I89
sg33
g4130
sg63
g64
sS'trial_loop.thisIndex'
p4912
g59
(g98
S'Y\x00\x00\x00'
tRp4913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4914
I0
sg3641
g4849
sS'block_loop.thisRepN'
p4915
I1
sg3644
g4136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4916
I1
sg3646
g4130
sg55
g11
sS'block_loop.thisTrial'
p4917
Nsg69
Vn
sS'block_loop.thisTrialN'
p4918
I0
sg39
F0.96674751046703022
sg34
g752
(S'\x07\xdf\n\x11\x13\x0c\n\x00\x1f@'
tRp4919
sa(dp4920
S'trial_loop.thisTrialN'
p4921
I90
sg3632
g4143
sS'block_loop.thisIndex'
p4922
g3626
sg38
S'left'
p4923
sg58
g62
sS'trial_loop.thisN'
p4924
I90
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p4925
g59
(g98
S'Z\x00\x00\x00'
tRp4926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4927
I0
sg3641
g4150
sS'block_loop.thisRepN'
p4928
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4929
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4930
Nsg69
Vn
sS'block_loop.thisTrialN'
p4931
I0
sg39
F0.96671729026274988
sg34
g752
(S'\x07\xdf\n\x11\x13\x0c\x10\x006\xb0'
tRp4932
sa(dp4933
S'trial_loop.thisTrialN'
p4934
I91
sg3632
g3785
sS'block_loop.thisIndex'
p4935
g3626
sg38
S'right'
p4936
sg58
g62
sS'trial_loop.thisN'
p4937
I91
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p4938
g59
(g98
S'[\x00\x00\x00'
tRp4939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4940
I0
sg3641
g3793
sS'block_loop.thisRepN'
p4941
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4942
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p4943
Nsg69
Vn
sS'block_loop.thisTrialN'
p4944
I0
sg39
F1.3335971424239688
sg34
g752
(S'\x07\xdf\n\x11\x13\x0c\x16\x00N '
tRp4945
sa(dp4946
S'trial_loop.thisTrialN'
p4947
I92
sg3632
g3633
sS'block_loop.thisIndex'
p4948
g3626
sg38
S'right'
p4949
sg58
g62
sS'trial_loop.thisN'
p4950
I92
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4951
g59
(g98
S'\\\x00\x00\x00'
tRp4952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4953
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4954
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4955
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4956
Nsg69
Vn
sS'block_loop.thisTrialN'
p4957
I0
sg39
F1.0335167737830488
sg34
g752
(S'\x07\xdf\n\x11\x13\x0c\x1c\x05\xdc\x00'
tRp4958
sa(dp4959
S'trial_loop.thisTrialN'
p4960
I93
sg3632
S'19-caramello_redo.png'
p4961
sS'block_loop.thisIndex'
p4962
g3626
sg38
S'left'
p4963
sg58
g62
sS'trial_loop.thisN'
p4964
I93
sg33
g3926
sg63
g64
sS'trial_loop.thisIndex'
p4965
g59
(g98
S']\x00\x00\x00'
tRp4966
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4967
I0
sg3641
S'30-spaghetti_hoops.png'
p4968
sS'block_loop.thisRepN'
p4969
I1
sg3644
g3926
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4970
I1
sg3646
g3933
sg55
g11
sS'block_loop.thisTrial'
p4971
Nsg69
Vn
sS'block_loop.thisTrialN'
p4972
I0
sg39
F1.0668094618886244
sg34
g752
(S'\x07\xdf\n\x11\x13\x0c"\x06\xe9\x88'
tRp4973
sa(dp4974
S'trial_loop.thisTrialN'
p4975
I94
sg3632
g4369
sS'block_loop.thisIndex'
p4976
g3626
sg38
S'left'
p4977
sg58
g62
sS'trial_loop.thisN'
p4978
I94
sg33
g4373
sg63
g64
sS'trial_loop.thisIndex'
p4979
g59
(g98
S'^\x00\x00\x00'
tRp4980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4981
I0
sg3641
g4377
sS'block_loop.thisRepN'
p4982
I1
sg3644
g4373
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4983
I1
sg3646
g4380
sg55
g11
sS'block_loop.thisTrial'
p4984
Nsg69
Vn
sS'block_loop.thisTrialN'
p4985
I0
sg39
F0.88354187650838867
sg34
g752
(S'\x07\xdf\n\x11\x13\x0c(\x08l@'
tRp4986
sa(dp4987
S'trial_loop.thisTrialN'
p4988
I95
sg3632
g3984
sS'block_loop.thisIndex'
p4989
g3626
sg38
S'left'
p4990
sg58
g62
sS'trial_loop.thisN'
p4991
I95
sg33
g3988
sg63
g64
sS'trial_loop.thisIndex'
p4992
g59
(g98
S'_\x00\x00\x00'
tRp4993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4994
I0
sg3641
g3992
sS'block_loop.thisRepN'
p4995
I1
sg3644
g3988
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4996
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p4997
Nsg69
Vn
sS'block_loop.thisTrialN'
p4998
I0
sg39
F1.6667597981177096
sg34
g752
(S'\x07\xdf\n\x11\x13\x0c.\x07\x18h'
tRp4999
sa(dp5000
S'trial_loop.thisTrialN'
p5001
I96
sg3632
g4565
sS'block_loop.thisIndex'
p5002
g3626
sg38
S'left'
p5003
sg58
g62
sS'trial_loop.thisN'
p5004
I96
sg33
g3877
sg63
g64
sS'trial_loop.thisIndex'
p5005
g59
(g98
S'`\x00\x00\x00'
tRp5006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5007
I0
sg3641
g4572
sS'block_loop.thisRepN'
p5008
I1
sg3644
g3877
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5009
I1
sg3646
g3884
sg55
g11
sS'block_loop.thisTrial'
p5010
Nsg69
Vn
sS'block_loop.thisTrialN'
p5011
I0
sg39
F0.93354120653384598
sg34
g752
(S'\x07\xdf\n\x11\x13\x0c5\x02eH'
tRp5012
sa(dp5013
S'trial_loop.thisTrialN'
p5014
I97
sg3632
g3721
sS'block_loop.thisIndex'
p5015
g3626
sg38
S'right'
p5016
sg58
g62
sS'trial_loop.thisN'
p5017
I97
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5018
g59
(g98
S'a\x00\x00\x00'
tRp5019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5020
I0
sg3641
g3728
sS'block_loop.thisRepN'
p5021
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5022
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5023
Nsg69
Vn
sS'block_loop.thisTrialN'
p5024
I0
sg39
F1.2001712288256385
sg34
g752
(S'\x07\xdf\n\x11\x13\x0c;\x02\x03\xa0'
tRp5025
sa(dp5026
S'trial_loop.thisTrialN'
p5027
I98
sg3632
g4485
sS'block_loop.thisIndex'
p5028
g3626
sg38
S'right'
p5029
sg58
g62
sS'trial_loop.thisN'
p5030
I98
sg33
g4373
sg63
g64
sS'trial_loop.thisIndex'
p5031
g59
(g98
S'b\x00\x00\x00'
tRp5032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5033
I0
sg3641
g4492
sS'block_loop.thisRepN'
p5034
I1
sg3644
g4373
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5035
I1
sg3646
g4380
sg55
g11
sS'block_loop.thisTrial'
p5036
Nsg69
Vn
sS'block_loop.thisTrialN'
p5037
I0
sg39
F1.1334701035211765
sg34
g752
(S'\x07\xdf\n\x11\x13\r\x05\x05n\xa0'
tRp5038
sa(dp5039
S'trial_loop.thisTrialN'
p5040
I99
sg3632
S'13-mccoys_steak_crisps.png'
p5041
sS'block_loop.thisIndex'
p5042
g3626
sg38
S'right'
p5043
sg58
g62
sS'trial_loop.thisN'
p5044
I99
sg33
g3995
sg63
g64
sS'trial_loop.thisIndex'
p5045
g59
(g98
S'c\x00\x00\x00'
tRp5046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5047
I0
sg3641
S'3-ellas_strawberries_apples.png'
p5048
sS'block_loop.thisRepN'
p5049
I1
sg3644
g3988
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5050
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p5051
Nsg69
Vn
sS'block_loop.thisTrialN'
p5052
I0
sg39
F1.4332556826102518
sg34
g752
(S'\x07\xdf\n\x11\x13\r\x0b\x08%\xf0'
tRp5053
sa(dp5054
S'trial_loop.thisTrialN'
p5055
I100
sg3632
g3653
sS'block_loop.thisIndex'
p5056
g3626
sg38
S'left'
p5057
sg58
g62
sS'trial_loop.thisN'
p5058
I100
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5059
g59
(g98
S'd\x00\x00\x00'
tRp5060
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5061
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5062
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5063
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5064
Nsg69
Vn
sS'block_loop.thisTrialN'
p5065
I0
sg39
F1.1168301741345203
sg34
g752
(S'\x07\xdf\n\x11\x13\r\x11\x0f#\x00'
tRp5066
sa(dp5067
S'trial_loop.thisTrialN'
p5068
I101
sg3632
g4842
sS'block_loop.thisIndex'
p5069
g3626
sg38
S'left'
p5070
sg58
g62
sS'trial_loop.thisN'
p5071
I101
sg33
g4136
sg63
g64
sS'trial_loop.thisIndex'
p5072
g59
(g98
S'e\x00\x00\x00'
tRp5073
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5074
I0
sg3641
g4849
sS'block_loop.thisRepN'
p5075
I1
sg3644
g4136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5076
I1
sg3646
g4130
sg55
g11
sS'block_loop.thisTrial'
p5077
Nsg69
Vn
sS'block_loop.thisTrialN'
p5078
I0
sg39
F0.75046321017725859
sg34
g752
(S'\x07\xdf\n\x11\x13\r\x18\x02\x1e\xf8'
tRp5079
sa(dp5080
S'trial_loop.thisTrialN'
p5081
I102
sg3632
g3770
sS'block_loop.thisIndex'
p5082
g3626
sg38
S'left'
p5083
sg58
g62
sS'trial_loop.thisN'
p5084
I102
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5085
g59
(g98
S'f\x00\x00\x00'
tRp5086
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5087
I0
sg3641
g3777
sS'block_loop.thisRepN'
p5088
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5089
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5090
Nsg69
Vn
sS'block_loop.thisTrialN'
p5091
I0
sg39
F0.81675294155320444
sg34
g752
(S'\x07\xdf\n\x11\x13\r\x1d\x0e!0'
tRp5092
sa(dp5093
S'trial_loop.thisTrialN'
p5094
I103
sg3632
g4188
sS'block_loop.thisIndex'
p5095
g3626
sg38
S'left'
p5096
sg58
g62
sS'trial_loop.thisN'
p5097
I103
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5098
g59
(g98
S'g\x00\x00\x00'
tRp5099
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5100
I0
sg3641
g4195
sS'block_loop.thisRepN'
p5101
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5102
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5103
Nsg69
Vn
sS'block_loop.thisTrialN'
p5104
I0
sg39
F0.9832591465292353
sg34
g752
(S'\x07\xdf\n\x11\x13\r#\x0b\xd7@'
tRp5105
sa(dp5106
S'trial_loop.thisTrialN'
p5107
I104
sg3632
g3890
sS'block_loop.thisIndex'
p5108
g3626
sg38
S'left'
p5109
sg58
g62
sS'trial_loop.thisN'
p5110
I104
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p5111
g59
(g98
S'h\x00\x00\x00'
tRp5112
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5113
I0
sg3641
g3897
sS'block_loop.thisRepN'
p5114
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5115
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p5116
Nsg69
Vn
sS'block_loop.thisTrialN'
p5117
I0
sg39
F0.81683847043495916
sg34
g752
(S'\x07\xdf\n\x11\x13\r)\x0c-0'
tRp5118
sa(dp5119
S'trial_loop.thisTrialN'
p5120
I105
sg3632
g3954
sS'block_loop.thisIndex'
p5121
g3626
sg38
S'left'
p5122
sg58
g62
sS'trial_loop.thisN'
p5123
I105
sg33
g3965
sg63
g64
sS'trial_loop.thisIndex'
p5124
g59
(g98
S'i\x00\x00\x00'
tRp5125
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5126
I0
sg3641
g3962
sS'block_loop.thisRepN'
p5127
I1
sg3644
g3958
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5128
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p5129
Nsg69
Vn
sS'block_loop.thisTrialN'
p5130
I0
sg39
F1.716779655074788
sg34
g752
(S'\x07\xdf\n\x11\x13\r/\t\xe3@'
tRp5131
sa(dp5132
S'trial_loop.thisTrialN'
p5133
I106
sg3632
g4961
sS'block_loop.thisIndex'
p5134
g3626
sg38
S'left'
p5135
sg58
g62
sS'trial_loop.thisN'
p5136
I106
sg33
g3926
sg63
g64
sS'trial_loop.thisIndex'
p5137
g59
(g98
S'j\x00\x00\x00'
tRp5138
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5139
I0
sg3641
g4968
sS'block_loop.thisRepN'
p5140
I1
sg3644
g3926
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5141
I1
sg3646
g3933
sg55
g11
sS'block_loop.thisTrial'
p5142
Nsg69
Vn
sS'block_loop.thisTrialN'
p5143
I0
sg39
F1.100562010293288
sg34
g752
(S'\x07\xdf\n\x11\x13\r6\x06&8'
tRp5144
sa(dp5145
S'trial_loop.thisTrialN'
p5146
I107
sg3632
g3873
sS'block_loop.thisIndex'
p5147
g3626
sg38
S'right'
p5148
sg58
g62
sS'trial_loop.thisN'
p5149
I107
sg33
g3884
sg63
g64
sS'trial_loop.thisIndex'
p5150
g59
(g98
S'k\x00\x00\x00'
tRp5151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5152
I0
sg3641
g3881
sS'block_loop.thisRepN'
p5153
I1
sg3644
g3877
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5154
I1
sg3646
g3884
sg55
g11
sS'block_loop.thisTrial'
p5155
Nsg69
Vn
sS'block_loop.thisTrialN'
p5156
I0
sg39
F1.4000864411918883
sg34
g752
(S'\x07\xdf\n\x11\x13\x0e\x00\x08%\xf0'
tRp5157
sa(dp5158
S'trial_loop.thisTrialN'
p5159
I108
sg3632
g3890
sS'block_loop.thisIndex'
p5160
g3626
sg38
S'left'
p5161
sg58
g62
sS'trial_loop.thisN'
p5162
I108
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p5163
g59
(g98
S'l\x00\x00\x00'
tRp5164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5165
I0
sg3641
g3897
sS'block_loop.thisRepN'
p5166
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5167
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p5168
Nsg69
Vn
sS'block_loop.thisTrialN'
p5169
I0
sg39
F0.95019852679433825
sg34
g752
(S'\x07\xdf\n\x11\x13\x0e\x06\x0e\xa9\xe8'
tRp5170
sa(dp5171
S'trial_loop.thisTrialN'
p5172
I109
sg3632
g4143
sS'block_loop.thisIndex'
p5173
g3626
sg38
S'left'
p5174
sg58
g62
sS'trial_loop.thisN'
p5175
I109
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5176
g59
(g98
S'm\x00\x00\x00'
tRp5177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5178
I0
sg3641
g4150
sS'block_loop.thisRepN'
p5179
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5180
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5181
Nsg69
Vn
sS'block_loop.thisTrialN'
p5182
I0
sg39
F0.95019881189000444
sg34
g752
(S'\x07\xdf\n\x11\x13\x0e\x0c\x0e\x82\xd8'
tRp5183
sa(dp5184
S'trial_loop.thisTrialN'
p5185
I110
sg3632
g4399
sS'block_loop.thisIndex'
p5186
g3626
sg38
S'left'
p5187
sg58
g62
sS'trial_loop.thisN'
p5188
I110
sg33
g4403
sg63
g64
sS'trial_loop.thisIndex'
p5189
g59
(g98
S'n\x00\x00\x00'
tRp5190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5191
I0
sg3641
g4407
sS'block_loop.thisRepN'
p5192
I1
sg3644
g4403
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5193
I1
sg3646
g4410
sg55
g11
sS'block_loop.thisTrial'
p5194
Nsg69
Vn
sS'block_loop.thisTrialN'
p5195
I0
sg39
F1.933424031964023
sg34
g752
(S'\x07\xdf\n\x11\x13\x0e\x12\x0e!0'
tRp5196
sa(dp5197
S'trial_loop.thisTrialN'
p5198
I111
sg3632
g4593
sS'block_loop.thisIndex'
p5199
g3626
sg38
S'right'
p5200
sg58
g62
sS'trial_loop.thisN'
p5201
I111
sg33
g3965
sg63
g64
sS'trial_loop.thisIndex'
p5202
g59
(g98
S'o\x00\x00\x00'
tRp5203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5204
I0
sg3641
g4600
sS'block_loop.thisRepN'
p5205
I1
sg3644
g3958
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5206
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p5207
Nsg69
Vn
sS'block_loop.thisTrialN'
p5208
I0
sg39
F1.3838898365174828
sg34
g752
(S'\x07\xdf\n\x11\x13\x0e\x19\r\xb7\xb8'
tRp5209
sa(dp5210
S'trial_loop.thisTrialN'
p5211
I112
sg3632
g5041
sS'block_loop.thisIndex'
p5212
g3626
sg38
S'right'
p5213
sg58
g62
sS'trial_loop.thisN'
p5214
I112
sg33
g3995
sg63
g64
sS'trial_loop.thisIndex'
p5215
g59
(g98
S'p\x00\x00\x00'
tRp5216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5217
I0
sg3641
g5048
sS'block_loop.thisRepN'
p5218
I1
sg3644
g3988
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5219
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p5220
Nsg69
Vn
sS'block_loop.thisTrialN'
p5221
I0
sg39
F1.1335145785415079
sg34
g752
(S'\x07\xdf\n\x11\x13\x0e \x04\xbe\xd8'
tRp5222
sa(dp5223
S'trial_loop.thisTrialN'
p5224
I113
sg3632
g4055
sS'block_loop.thisIndex'
p5225
g3626
sg38
S'right'
p5226
sg58
g62
sS'trial_loop.thisN'
p5227
I113
sg33
g4059
sg63
g64
sS'trial_loop.thisIndex'
p5228
g59
(g98
S'q\x00\x00\x00'
tRp5229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5230
I0
sg3641
g4063
sS'block_loop.thisRepN'
p5231
I1
sg3644
g4059
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5232
I1
sg3646
g4066
sg55
g11
sS'block_loop.thisTrial'
p5233
Nsg69
Vn
sS'block_loop.thisTrialN'
p5234
I0
sg39
F1.2002359456801059
sg34
g752
(S'\x07\xdf\n\x11\x13\x0e&\x077\xa8'
tRp5235
sa(dp5236
S'trial_loop.thisTrialN'
p5237
I114
sg3632
g3670
sS'block_loop.thisIndex'
p5238
g3626
sg38
S'right'
p5239
sg58
g62
sS'trial_loop.thisN'
p5240
I114
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p5241
g59
(g98
S'r\x00\x00\x00'
tRp5242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5243
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5244
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5245
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5246
Nsg69
Vn
sS'block_loop.thisTrialN'
p5247
I0
sg39
F1.7835132813524979
sg34
g752
(S'\x07\xdf\n\x11\x13\x0e,\n\xe1('
tRp5248
sa(dp5249
S'trial_loop.thisTrialN'
p5250
I115
sg3632
g3704
sS'block_loop.thisIndex'
p5251
g3626
sg38
S'right'
p5252
sg58
g62
sS'trial_loop.thisN'
p5253
I115
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5254
g59
(g98
S's\x00\x00\x00'
tRp5255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5256
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5257
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5258
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5259
Nsg69
Vn
sS'block_loop.thisTrialN'
p5260
I0
sg39
F1.3334012812792935
sg34
g752
(S'\x07\xdf\n\x11\x13\x0e3\x08\x16P'
tRp5261
sa(dp5262
S'trial_loop.thisTrialN'
p5263
I116
sg3632
g3687
sS'block_loop.thisIndex'
p5264
g3626
sg38
S'right'
p5265
sg58
g62
sS'trial_loop.thisN'
p5266
I116
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5267
g59
(g98
S't\x00\x00\x00'
tRp5268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5269
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5270
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5271
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5272
Nsg69
Vn
sS'block_loop.thisTrialN'
p5273
I0
sg39
F1.6001846853687312
sg34
g752
(S'\x07\xdf\n\x11\x13\x0e9\r\xa8\x18'
tRp5274
sa(dp5275
S'trial_loop.thisTrialN'
p5276
I117
sg3632
g3954
sS'block_loop.thisIndex'
p5277
g3626
sg38
S'left'
p5278
sg58
g62
sS'trial_loop.thisN'
p5279
I117
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p5280
g59
(g98
S'u\x00\x00\x00'
tRp5281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5282
I0
sg3641
g3962
sS'block_loop.thisRepN'
p5283
I1
sg3644
g3958
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5284
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p5285
Nsg69
Vn
sS'block_loop.thisTrialN'
p5286
I0
sg39
F1.9167695626656496
sg34
g752
(S'\x07\xdf\n\x11\x13\x0f\x04\x08\x02\xc8'
tRp5287
sa(dp5288
S'trial_loop.thisTrialN'
p5289
I118
sg3632
g3802
sS'block_loop.thisIndex'
p5290
g3626
sg38
S'left'
p5291
sg58
g62
sS'trial_loop.thisN'
p5292
I118
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p5293
g59
(g98
S'v\x00\x00\x00'
tRp5294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5295
I0
sg3641
g3810
sS'block_loop.thisRepN'
p5296
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5297
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p5298
Nsg69
Vn
sS'block_loop.thisTrialN'
p5299
I0
sg39
F1.3500774178937718
sg34
g752
(S'\x07\xdf\n\x11\x13\x0f\x0b\x07^\xb8'
tRp5300
sa(dp5301
S'trial_loop.thisTrialN'
p5302
I119
sg3632
g3753
sS'block_loop.thisIndex'
p5303
g3626
sg38
S'right'
p5304
sg58
g62
sS'trial_loop.thisN'
p5305
I119
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p5306
g59
(g98
S'w\x00\x00\x00'
tRp5307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5308
I0
sg3641
g3761
sS'block_loop.thisRepN'
p5309
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5310
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p5311
Nsg69
Vn
sS'block_loop.thisTrialN'
p5312
I0
sg39
F0.88351308178607724
sg34
g752
(S'\x07\xdf\n\x11\x13\x0f\x11\r+\x18'
tRp5313
sa(dp5314
S'trial_loop.thisTrialN'
p5315
I120
sg3632
g4565
sS'block_loop.thisIndex'
p5316
g3626
sg38
S'left'
p5317
sg58
g62
sS'trial_loop.thisN'
p5318
I120
sg33
g3884
sg63
g64
sS'trial_loop.thisIndex'
p5319
g59
(g98
S'x\x00\x00\x00'
tRp5320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5321
I0
sg3641
g4572
sS'block_loop.thisRepN'
p5322
I1
sg3644
g3877
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5323
I1
sg3646
g3884
sg55
g11
sS'block_loop.thisTrial'
p5324
Nsg69
Vn
sS'block_loop.thisTrialN'
p5325
I0
sg39
F1.0167896049333649
sg34
g752
(S'\x07\xdf\n\x11\x13\x0f\x17\x0b\xd3X'
tRp5326
sa(dp5327
S'trial_loop.thisTrialN'
p5328
I121
sg3632
g4444
sS'block_loop.thisIndex'
p5329
g3626
sg38
S'right'
p5330
sg58
g62
sS'trial_loop.thisN'
p5331
I121
sg33
g4261
sg63
g64
sS'trial_loop.thisIndex'
p5332
g59
(g98
S'y\x00\x00\x00'
tRp5333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5334
I0
sg3641
g4451
sS'block_loop.thisRepN'
p5335
I1
sg3644
g4267
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5336
I1
sg3646
g4261
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vn
sS'block_loop.thisTrialN'
p5338
I0
sg39
F0.96721991500271542
sg34
g752
(S'\x07\xdf\n\x11\x13\x0f\x1d\x0c\xa2`'
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g4055
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'right'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g4059
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g4063
sS'block_loop.thisRepN'
p5348
I1
sg3644
g4059
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g4066
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vn
sS'block_loop.thisTrialN'
p5351
I0
sg39
F0.88351564765252988
sg34
g752
(S'\x07\xdf\n\x11\x13\x0f#\x0c\xb9\xd0'
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g4369
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'left'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g4373
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g4377
sS'block_loop.thisRepN'
p5361
I1
sg3644
g4373
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g4380
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vn
sS'block_loop.thisTrialN'
p5364
I0
sg39
F1.2500730559204385
sg34
g752
(S'\x07\xdf\n\x11\x13\x0f)\x0be\xf8'
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g4257
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'left'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g4267
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g4265
sS'block_loop.thisRepN'
p5374
I1
sg3644
g4267
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g4261
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vn
sS'block_loop.thisTrialN'
p5377
I0
sg39
F0.85022552540976903
sg34
g752
(S'\x07\xdf\n\x11\x13\x0f0\x00\x84\xd0'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g4429
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'right'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g4403
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g4436
sS'block_loop.thisRepN'
p5387
I1
sg3644
g4403
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g4410
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vn
sS'block_loop.thisTrialN'
p5390
I0
sg39
F1.6001832598867622
sg34
g752
(S'\x07\xdf\n\x11\x13\x0f5\r\xf68'
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g4040
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'right'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g4047
sS'block_loop.thisRepN'
p5400
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vn
sS'block_loop.thisTrialN'
p5403
I0
sg39
F1.0005277132113406
sg34
g752
(S'\x07\xdf\n\x11\x13\x10\x00\x08P\xe8'
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g3858
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'right'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g3865
sS'block_loop.thisRepN'
p5413
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vn
sS'block_loop.thisTrialN'
p5416
I0
sg39
F2.0334768603024713
sg34
g752
(S'\x07\xdf\n\x11\x13\x10\x06\x08\xe1p'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g3785
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'right'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g3793
sS'block_loop.thisRepN'
p5426
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vn
sS'block_loop.thisTrialN'
p5429
I0
sg39
F0.96648408150758769
sg34
g752
(S'\x07\xdf\n\x11\x13\x10\r\t\xe7('
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g4203
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'left'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g4059
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g4210
sS'block_loop.thisRepN'
p5439
I1
sg3644
g4059
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g4066
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vn
sS'block_loop.thisTrialN'
p5442
I0
sg39
F1.016824101581733
sg34
g752
(S'\x07\xdf\n\x11\x13\x10\x13\t\xc0\x18'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g3753
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'right'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g3764
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g3761
sS'block_loop.thisRepN'
p5452
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vn
sS'block_loop.thisTrialN'
p5455
I0
sg39
F0.80025613049656386
sg34
g752
(S'\x07\xdf\n\x11\x13\x10\x19\n\x8f '
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g4203
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'left'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g4059
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g4210
sS'block_loop.thisRepN'
p5465
I1
sg3644
g4059
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g4066
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vn
sS'block_loop.thisTrialN'
p5468
I0
sg39
F0.93386279513470072
sg34
g752
(S'\x07\xdf\n\x11\x13\x10\x1f\x08\x06\xb0'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g4171
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'right'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g4175
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g4179
sS'block_loop.thisRepN'
p5478
I1
sg3644
g4175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g4182
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vn
sS'block_loop.thisTrialN'
p5481
I0
sg39
F1.5001871657077572
sg34
g752
(S'\x07\xdf\n\x11\x13\x10%\x07\xa5\x08'
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g3922
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'right'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g3926
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g3930
sS'block_loop.thisRepN'
p5491
I1
sg3644
g3926
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g3933
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vn
sS'block_loop.thisTrialN'
p5494
I0
sg39
F1.550169960146377
sg34
g752
(S'\x07\xdf\n\x11\x13\x10,\x00U\xf0'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g4257
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'left'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g4267
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g4265
sS'block_loop.thisRepN'
p5504
I1
sg3644
g4267
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g4261
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vn
sS'block_loop.thisTrialN'
p5507
I0
sg39
F0.98351060144887015
sg34
g752
(S'\x07\xdf\n\x11\x13\x102\t;H'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g4143
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'left'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g4150
sS'block_loop.thisRepN'
p5517
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vn
sS'block_loop.thisTrialN'
p5520
I0
sg39
F1.0501843575093517
sg34
g752
(S'\x07\xdf\n\x11\x13\x108\t\x918'
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g4055
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'right'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g4059
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g4063
sS'block_loop.thisRepN'
p5530
I1
sg3644
g4059
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g4066
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vn
sS'block_loop.thisTrialN'
p5533
I0
sg39
F1.1502026891994319
sg34
g752
(S'\x07\xdf\n\x11\x13\x11\x02\n\xd9X'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g3802
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'left'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g3810
sS'block_loop.thisRepN'
p5543
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F1.3667452867175598
sg34
g752
(S'\x07\xdf\n\x11\x13\x11\x08\r\x8c\xc0'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g3704
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'right'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5556
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F1.4668314713217114
sg34
g752
(S'\x07\xdf\n\x11\x13\x11\x0f\x04\x93\xe0'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g4171
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'right'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g4175
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g4179
sS'block_loop.thisRepN'
p5569
I1
sg3644
g4175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g4182
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F0.75018980284767167
sg34
g752
(S'\x07\xdf\n\x11\x13\x11\x15\x0c\r\xf0'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g3954
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'left'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g3962
sS'block_loop.thisRepN'
p5582
I1
sg3644
g3958
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F1.2335069664713956
sg34
g752
(S'\x07\xdf\n\x11\x13\x11\x1b\x08\xcd\xe8'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g3687
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'right'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F1.0006106762284617
sg34
g752
(S'\x07\xdf\n\x11\x13\x11!\x0c\xf0\x80'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g4444
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'right'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g4267
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g4451
sS'block_loop.thisRepN'
p5608
I1
sg3644
g4267
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g4261
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.94999325747266994
sg34
g752
(S"\x07\xdf\n\x11\x13\x11'\rFp"
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4040
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'right'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g4047
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F1.0834864537919202
sg34
g752
(S'\x07\xdf\n\x11\x13\x11-\r#H'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g4485
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'right'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g4373
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g4492
sS'block_loop.thisRepN'
p5634
I1
sg3644
g4373
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g4380
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F0.80018400113840471
sg34
g752
(S'\x07\xdf\n\x11\x13\x113\x0e\xe4\x80'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g4399
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'right'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g4410
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g4407
sS'block_loop.thisRepN'
p5647
I1
sg3644
g4403
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g4410
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F1.583529075685874
sg34
g752
(S'\x07\xdf\n\x11\x13\x119\x0c\\\x10'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g4126
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'right'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g4130
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g4134
sS'block_loop.thisRepN'
p5660
I1
sg3644
g4136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g4130
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F1.0005371213901526
sg34
g752
(S'\x07\xdf\n\x11\x13\x12\x04\x06|('
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g3721
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'right'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g3728
sS'block_loop.thisRepN'
p5673
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.93351554786750057
sg34
g752
(S'\x07\xdf\n\x11\x13\x12\n\x07\x0c\xb0'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g3633
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'right'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F1.0005681968814315
sg34
g752
(S'\x07\xdf\n\x11\x13\x12\x10\x06l\x88'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g3785
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g3793
sS'block_loop.thisRepN'
p5699
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.94982533576512651
sg34
g752
(S'\x07\xdf\n\x11\x13\x12\x16\x06\xfd\x10'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g3905
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'left'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3916
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g3913
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g3916
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F1.6001667243035627
sg34
g752
(S'\x07\xdf\n\x11\x13\x12\x1c\x06\xd9\xe8'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g4565
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'left'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3877
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g4572
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3877
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g3884
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.91688217569571862
sg34
g752
(S'\x07\xdf\n\x11\x13\x12#\x014\x98'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g3704
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'right'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5738
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F1.2500807535197964
sg34
g752
(S'\x07\xdf\n\x11\x13\x12)\x00U\xf0'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g4429
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'right'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g4403
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g4436
sS'block_loop.thisRepN'
p5751
I1
sg3644
g4403
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g4410
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F1.8334892334805772
sg34
g752
(S'\x07\xdf\n\x11\x13\x12/\x04\xb7\x08'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g3873
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'right'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g3877
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g3881
sS'block_loop.thisRepN'
p5764
I1
sg3644
g3877
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g3884
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F1.1334994684384583
sg34
g752
(S'\x07\xdf\n\x11\x13\x126\x02\xa3\xc8'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g4203
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'left'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g4066
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g4210
sS'block_loop.thisRepN'
p5777
I1
sg3644
g4059
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g4066
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F1.0501829320273828
sg34
g752
(S'\x07\xdf\n\x11\x13\x13\x00\x05\x1c\x98'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g4274
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'right'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g3909
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g4281
sS'block_loop.thisRepN'
p5790
I1
sg3644
g3909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g3916
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F1.0501735238485708
sg34
g752
(S'\x07\xdf\n\x11\x13\x13\x06\x06d\xb8'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g5041
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'right'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g3988
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g5048
sS'block_loop.thisRepN'
p5803
I1
sg3644
g3988
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F0.96675406768190442
sg34
g752
(S'\x07\xdf\n\x11\x13\x13\x0c\x07\xac\xd8'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g4126
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'right'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g4136
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g4134
sS'block_loop.thisRepN'
p5816
I1
sg3644
g4136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g4130
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.73341730369065772
sg34
g752
(S'\x07\xdf\n\x11\x13\x13\x12\x07\xc4H'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g3939
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'right'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g3946
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F1.033513922819111
sg34
g752
(S'\x07\xdf\n\x11\x13\x13\x18\x04I\xa8'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g3890
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'left'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g3897
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F1.5168487624105182
sg34
g752
(S'\x07\xdf\n\x11\x13\x13\x1e\x05SH'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g3736
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'left'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3747
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g3744
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F0.75019664515821205
sg34
g752
(S'\x07\xdf\n\x11\x13\x13$\r\x84\xf0'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g4341
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'left'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g4175
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g4348
sS'block_loop.thisRepN'
p5868
I1
sg3644
g4175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g4182
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F0.73353647393560095
sg34
g752
(S'\x07\xdf\n\x11\x13\x13*\nH\xd0'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g4593
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'right'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g4600
sS'block_loop.thisRepN'
p5881
I1
sg3644
g3958
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F1.9667349662304332
sg34
g752
(S'\x07\xdf\n\x11\x13\x130\x06\xce0'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g3858
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'right'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g3865
sS'block_loop.thisRepN'
p5894
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F2.7334606383246864
sg34
g752
(S'\x07\xdf\n\x11\x13\x137\x06\x9fP'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g3905
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'left'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3909
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g3913
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g3916
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F0.816847593516286
sg34
g752
(S'\x07\xdf\n\x11\x13\x14\x03\x03\x18\xf8'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g3721
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'right'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g3728
sS'block_loop.thisRepN'
p5920
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F0.7838462738054659
sg34
g752
(S'\x07\xdf\n\x11\x13\x14\t\x00\xcf\x08'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g3736
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'left'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g3744
sS'block_loop.thisRepN'
p5933
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F0.9835356899202452
sg34
g752
(S'\x07\xdf\n\x11\x13\x14\x0e\rN@'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g3770
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g3777
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F1.4834947786039265
sg34
g752
(S'\x07\xdf\n\x11\x13\x14\x14\r\xa40'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g4565
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'left'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g3884
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g4572
sS'block_loop.thisRepN'
p5959
I1
sg3644
g3877
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g3884
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.78350586885062512
sg34
g752
(S'\x07\xdf\n\x11\x13\x14\x1b\x06Q0'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g5041
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'right'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g3988
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g5048
sS'block_loop.thisRepN'
p5972
I1
sg3644
g3988
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F1.3335118986360612
sg34
g752
(S'\x07\xdf\n\x11\x13\x14!\x03S\x90'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g3905
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'left'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g3909
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g3913
sS'block_loop.thisRepN'
p5985
I1
sg3644
g3909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g3916
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F2.2504930027407681
sg34
g752
(S"\x07\xdf\n\x11\x13\x14'\t\x1f\xf0"
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g3633
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'right'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5998
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F0.78343716064591717
sg34
g752
(S'\x07\xdf\n\x11\x13\x14.\r>\xa0'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g3939
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'right'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g3946
sS'block_loop.thisRepN'
p6011
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F0.933456818034756
sg34
g752
(S'\x07\xdf\n\x11\x13\x144\nw\xb0'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g4341
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'left'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g4175
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g4348
sS'block_loop.thisRepN'
p6024
I1
sg3644
g4175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g4182
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F1.3167918571944028
sg34
g752
(S'\x07\xdf\n\x11\x13\x14:\n\x16\x08'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g4961
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'left'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3926
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g4968
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3926
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g3933
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F1.2335109578179981
sg34
g752
(S"\x07\xdf\n\x11\x13\x15\x05\x00'\x10"
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g3753
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'right'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g3761
sS'block_loop.thisRepN'
p6050
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F0.88354102122139011
sg34
g752
(S'\x07\xdf\n\x11\x13\x15\x0b\x04M\x90'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g4257
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'left'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g4267
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g4265
sS'block_loop.thisRepN'
p6063
I1
sg3644
g4267
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g4261
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F0.88348884860170074
sg34
g752
(S'\x07\xdf\n\x11\x13\x15\x11\x02\xf5\xd0'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g4485
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g4380
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g4492
sS'block_loop.thisRepN'
p6076
I1
sg3644
g4373
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g4380
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F0.95018541236458987
sg34
g752
(S'\x07\xdf\n\x11\x13\x15\x17\x01\x9e\x10'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g3653
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'left'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g3661
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F1.1500709747178917
sg34
g752
(S'\x07\xdf\n\x11\x13\x15\x1d\x01z\xe8'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g4257
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'left'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g4267
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g4265
sS'block_loop.thisRepN'
p6102
I1
sg3644
g4267
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g4261
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.7334694763085281
sg34
g752
(S'\x07\xdf\n\x11\x13\x15#\x0428'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g4040
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'right'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g4047
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F1.1838825380527851
sg34
g752
(S'\x07\xdf\n\x11\x13\x15)\x00\xb7\x98'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g4126
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'right'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g4136
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g4134
sS'block_loop.thisRepN'
p6128
I1
sg3644
g4136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g4130
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F0.96673097488383064
sg34
g752
(S'\x07\xdf\n\x11\x13\x15/\x03\xe4\x18'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g4341
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'left'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g4175
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g4348
sS'block_loop.thisRepN'
p6141
I1
sg3644
g4175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g4182
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F1.2168428038985439
sg34
g752
(S'\x07\xdf\n\x11\x13\x155\x03\xfb\x88'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g4188
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'left'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3796
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g4195
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F0.81650006115341967
sg34
g752
(S'\x07\xdf\n\x11\x13\x15;\x07\xa5\x08'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g4143
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'left'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g4150
sS'block_loop.thisRepN'
p6167
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F0.81685614640446147
sg34
g752
(S'\x07\xdf\n\x11\x13\x16\x05\x05[\x18'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g3984
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'left'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g3995
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g3992
sS'block_loop.thisRepN'
p6180
I1
sg3644
g3988
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F0.9168243011499726
sg34
g752
(S'\x07\xdf\n\x11\x13\x16\x0b\x03\x11('
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g4961
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'left'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g3926
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g4968
sS'block_loop.thisRepN'
p6193
I1
sg3644
g3926
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g3933
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F1.5501294764744671
sg34
g752
(S'\x07\xdf\n\x11\x13\x16\x11\x02t\xe8'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g4842
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'left'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g4136
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g4849
sS'block_loop.thisRepN'
p6206
I1
sg3644
g4136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g4130
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F1.0333286102395505
sg34
g752
(S'\x07\xdf\n\x11\x13\x16\x17\x0bZ@'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g4188
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'left'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g4195
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F0.86659261765998963
sg34
g752
(S'\x07\xdf\n\x11\x13\x16\x1d\x0cc\xe0'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g3939
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'right'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g3747
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g3946
sS'block_loop.thisRepN'
p6232
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F0.66685730104472896
sg34
g752
(S'\x07\xdf\n\x11\x13\x16#\n\xd1\x88'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g4126
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'right'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g4136
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g4134
sS'block_loop.thisRepN'
p6245
I1
sg3644
g4136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g4130
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F0.71663026462374546
sg34
g752
(S'\x07\xdf\n\x11\x13\x16)\x06&8'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g4274
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'right'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3909
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g4281
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g3916
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F0.93352638152828149
sg34
g752
(S'\x07\xdf\n\x11\x13\x16/\x02m\x18'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g4072
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'left'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g4079
sS'block_loop.thisRepN'
p6271
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F1.4334275956662168
sg34
g752
(S'\x07\xdf\n\x11\x13\x165\x01\xd0\xd8'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g3922
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'right'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3926
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g3930
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3926
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g3933
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F0.88351821351716353
sg34
g752
(S'\x07\xdf\n\x11\x13\x16;\t\x0ch'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g3736
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'left'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g3744
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F1.7001556910781801
sg34
g752
(S'\x07\xdf\n\x11\x13\x17\x05\x07\xb4\xa8'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g4444
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'right'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g4261
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g4451
sS'block_loop.thisRepN'
p6310
I1
sg3644
g4267
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g4261
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F1.3001676081021287
sg34
g752
(S'\x07\xdf\n\x11\x13\x17\x0c\x03\xb9 '
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g4961
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'left'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3926
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g4968
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3926
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g3933
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F0.98389091988246946
sg34
g752
(S'\x07\xdf\n\x11\x13\x17\x12\x08\xd1\xd0'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g5041
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'right'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g3988
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g5048
sS'block_loop.thisRepN'
p6336
I1
sg3644
g3988
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g3995
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F1.0833935124064737
sg34
g752
(S'\x07\xdf\n\x11\x13\x17\x18\x08\xe9@'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g3922
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'right'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3933
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g3930
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3926
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g3933
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.0668798806709674
sg34
g752
(S'\x07\xdf\n\x11\x13\x17\x1e\n\xaax'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F80.031285040113289
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'18-mms.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'left'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'18-mms.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'43-mrporky_pork_crackles_redo.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'43-mrporky_pork_crackles_redo.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F1.6501287067148951
sg34
g752
(S'\x07\xdf\n\x11\x13\x19\x01\rqh'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'30-spaghetti_hoops.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'right'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'19-caramello_redo.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'19-caramello_redo.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6401
I2
sg6384
S'30-spaghetti_hoops.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F1.2668204666060774
sg34
g752
(S'\x07\xdf\n\x11\x13\x19\x08\x08\x83\xb0'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'1-treacle_cookies.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'right'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'21-nakd_banana_crunch.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'21-nakd_banana_crunch.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6418
I2
sg6384
S'1-treacle_cookies.png'
p6419
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.9501814210179873
sg34
g752
(S'\x07\xdf\n\x11\x13\x19\x0e\r#H'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
g6371
sS'block_loop.thisIndex'
p6425
g6364
sg38
S'left'
p6426
sg58
g62
sS'trial_loop.thisN'
p6427
I3
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6428
g59
(g98
S'\x03\x00\x00\x00'
tRp6429
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6430
I0
sg6379
g6380
sS'block_loop.thisRepN'
p6431
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6432
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6433
Nsg69
Vn
sS'block_loop.thisTrialN'
p6434
I0
sg39
F2.5500775889522629
sg34
g752
(S'\x07\xdf\n\x11\x13\x19\x14\x0c\xbd\xb8'
tRp6435
sa(dp6436
S'trial_loop.thisTrialN'
p6437
I4
sg6370
S'2-steamed_puddings.png'
p6438
sS'block_loop.thisIndex'
p6439
g6364
sg38
S'left'
p6440
sg58
g62
sS'trial_loop.thisN'
p6441
I4
sg33
S'2-steamed_puddings.png'
p6442
sg63
g64
sS'trial_loop.thisIndex'
p6443
g59
(g98
S'\x04\x00\x00\x00'
tRp6444
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6445
I0
sg6379
S'20-fruit_pastilles.png'
p6446
sS'block_loop.thisRepN'
p6447
I2
sg6382
g6442
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6448
I2
sg6384
S'20-fruit_pastilles.png'
p6449
sg55
g11
sS'block_loop.thisTrial'
p6450
Nsg69
Vn
sS'block_loop.thisTrialN'
p6451
I0
sg39
F0.75018410092161503
sg34
g752
(S'\x07\xdf\n\x11\x13\x19\x1c\x06\\\xe8'
tRp6452
sa(dp6453
S'trial_loop.thisTrialN'
p6454
I5
sg6370
S'26-walkers_smoky_bacon.png'
p6455
sS'block_loop.thisIndex'
p6456
g6364
sg38
S'right'
p6457
sg58
g62
sS'trial_loop.thisN'
p6458
I5
sg33
S'44-crunch.png'
p6459
sg63
g64
sS'trial_loop.thisIndex'
p6460
g59
(g98
S'\x05\x00\x00\x00'
tRp6461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6462
I0
sg6379
S'44-crunch.png'
p6463
sS'block_loop.thisRepN'
p6464
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6465
I2
sg6384
S'26-walkers_smoky_bacon.png'
p6466
sg55
g11
sS'block_loop.thisTrial'
p6467
Nsg69
Vn
sS'block_loop.thisTrialN'
p6468
I0
sg39
F1.0501532820144348
sg34
g752
(S'\x07\xdf\n\x11\x13\x19"\x03 \xc8'
tRp6469
sa(dp6470
S'trial_loop.thisTrialN'
p6471
I6
sg6370
S'13-mccoys_steak_crisps.png'
p6472
sS'block_loop.thisIndex'
p6473
g6364
sg38
S'right'
p6474
sg58
g62
sS'trial_loop.thisN'
p6475
I6
sg33
S'3-ellas_strawberries_apples.png'
p6476
sg63
g64
sS'trial_loop.thisIndex'
p6477
g59
(g98
S'\x06\x00\x00\x00'
tRp6478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6479
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6480
sS'block_loop.thisRepN'
p6481
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6482
I2
sg6384
S'13-mccoys_steak_crisps.png'
p6483
sg55
g11
sS'block_loop.thisTrial'
p6484
Nsg69
Vn
sS'block_loop.thisTrialN'
p6485
I0
sg39
F0.78346624046753277
sg34
g752
(S'\x07\xdf\n\x11\x13\x19(\x04h\xe8'
tRp6486
sa(dp6487
S'trial_loop.thisTrialN'
p6488
I7
sg6370
S'19-caramello_redo.png'
p6489
sS'block_loop.thisIndex'
p6490
g6364
sg38
S'left'
p6491
sg58
g62
sS'trial_loop.thisN'
p6492
I7
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6493
g59
(g98
S'\x07\x00\x00\x00'
tRp6494
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6495
I0
sg6379
S'30-spaghetti_hoops.png'
p6496
sS'block_loop.thisRepN'
p6497
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6498
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6499
Nsg69
Vn
sS'block_loop.thisTrialN'
p6500
I0
sg39
F1.3167676240100263
sg34
g752
(S'\x07\xdf\n\x11\x13\x19.\x01\xa1\xf8'
tRp6501
sa(dp6502
S'trial_loop.thisTrialN'
p6503
I8
sg6370
S'41-peanuts_redo.png'
p6504
sS'block_loop.thisIndex'
p6505
g6364
sg38
S'left'
p6506
sg58
g62
sS'trial_loop.thisN'
p6507
I8
sg33
S'45-chewy_nougat_redo.png'
p6508
sg63
g64
sS'trial_loop.thisIndex'
p6509
g59
(g98
S'\x08\x00\x00\x00'
tRp6510
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6511
I0
sg6379
S'45-chewy_nougat_redo.png'
p6512
sS'block_loop.thisRepN'
p6513
I2
sg6382
S'41-peanuts_redo.png'
p6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6515
I2
sg6384
g6508
sg55
g11
sS'block_loop.thisTrial'
p6516
Nsg69
Vn
sS'block_loop.thisTrialN'
p6517
I0
sg39
F0.90018408666765026
sg34
g752
(S'\x07\xdf\n\x11\x13\x194\x06\xf9('
tRp6518
sa(dp6519
S'trial_loop.thisTrialN'
p6520
I9
sg6370
S'40-sardines.png'
p6521
sS'block_loop.thisIndex'
p6522
g6364
sg38
S'left'
p6523
sg58
g62
sS'trial_loop.thisN'
p6524
I9
sg33
S'5-pineapple.png'
p6525
sg63
g64
sS'trial_loop.thisIndex'
p6526
g59
(g98
S'\t\x00\x00\x00'
tRp6527
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6528
I0
sg6379
S'5-pineapple.png'
p6529
sS'block_loop.thisRepN'
p6530
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6531
I2
sg6384
S'40-sardines.png'
p6532
sg55
g11
sS'block_loop.thisTrial'
p6533
Nsg69
Vn
sS'block_loop.thisTrialN'
p6534
I0
sg39
F1.5005190177744225
sg34
g752
(S'\x07\xdf\n\x11\x13\x19:\x05\xdf\xe8'
tRp6535
sa(dp6536
S'trial_loop.thisTrialN'
p6537
I10
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6538
sS'block_loop.thisIndex'
p6539
g6364
sg38
S'right'
p6540
sg58
g62
sS'trial_loop.thisN'
p6541
I10
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6542
sg63
g64
sS'trial_loop.thisIndex'
p6543
g59
(g98
S'\n\x00\x00\x00'
tRp6544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6545
I0
sg6379
S'36-fig_rolls.png'
p6546
sS'block_loop.thisRepN'
p6547
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6548
I2
sg6384
S'36-fig_rolls.png'
p6549
sg55
g11
sS'block_loop.thisTrial'
p6550
Nsg69
Vn
sS'block_loop.thisTrialN'
p6551
I0
sg39
F0.83352059407297929
sg34
g752
(S'\x07\xdf\n\x11\x13\x1a\x04\x0e\r\xa8'
tRp6552
sa(dp6553
S'trial_loop.thisTrialN'
p6554
I11
sg6370
S'5-pineapple.png'
p6555
sS'block_loop.thisIndex'
p6556
g6364
sg38
S'right'
p6557
sg58
g62
sS'trial_loop.thisN'
p6558
I11
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p6559
g59
(g98
S'\x0b\x00\x00\x00'
tRp6560
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6561
I0
sg6379
S'40-sardines.png'
p6562
sS'block_loop.thisRepN'
p6563
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6564
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p6565
Nsg69
Vn
sS'block_loop.thisTrialN'
p6566
I0
sg39
F1.1334669674615725
sg34
g752
(S'\x07\xdf\n\x11\x13\x1a\n\x0c\x028'
tRp6567
sa(dp6568
S'trial_loop.thisTrialN'
p6569
I12
sg6370
S'31-hobnobs.png'
p6570
sS'block_loop.thisIndex'
p6571
g6364
sg38
S'left'
p6572
sg58
g62
sS'trial_loop.thisN'
p6573
I12
sg33
S'25-kitkat.png'
p6574
sg63
g64
sS'trial_loop.thisIndex'
p6575
g59
(g98
S'\x0c\x00\x00\x00'
tRp6576
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6577
I0
sg6379
S'25-kitkat.png'
p6578
sS'block_loop.thisRepN'
p6579
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6580
I2
sg6384
S'31-hobnobs.png'
p6581
sg55
g11
sS'block_loop.thisTrial'
p6582
Nsg69
Vn
sS'block_loop.thisTrialN'
p6583
I0
sg39
F1.0168437732263556
sg34
g752
(S'\x07\xdf\n\x11\x13\x1a\x10\x0e{\x08'
tRp6584
sa(dp6585
S'trial_loop.thisTrialN'
p6586
I13
sg6370
S'20-fruit_pastilles.png'
p6587
sS'block_loop.thisIndex'
p6588
g6364
sg38
S'right'
p6589
sg58
g62
sS'trial_loop.thisN'
p6590
I13
sg33
g6442
sg63
g64
sS'trial_loop.thisIndex'
p6591
g59
(g98
S'\r\x00\x00\x00'
tRp6592
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6593
I0
sg6379
S'2-steamed_puddings.png'
p6594
sS'block_loop.thisRepN'
p6595
I2
sg6382
g6442
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6596
I2
sg6384
g6449
sg55
g11
sS'block_loop.thisTrial'
p6597
Nsg69
Vn
sS'block_loop.thisTrialN'
p6598
I0
sg39
F0.65020739328792843
sg34
g752
(S'\x07\xdf\n\x11\x13\x1a\x17\x00\x03\xe8'
tRp6599
sa(dp6600
S'trial_loop.thisTrialN'
p6601
I14
sg6370
g6391
sS'block_loop.thisIndex'
p6602
g6364
sg38
S'right'
p6603
sg58
g62
sS'trial_loop.thisN'
p6604
I14
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6605
g59
(g98
S'\x0e\x00\x00\x00'
tRp6606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6607
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6608
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6609
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6610
Nsg69
Vn
sS'block_loop.thisTrialN'
p6611
I0
sg39
F0.86685262546598096
sg34
g752
(S'\x07\xdf\n\x11\x13\x1a\x1c\n\x9a\xd8'
tRp6612
sa(dp6613
S'trial_loop.thisTrialN'
p6614
I15
sg6370
S'21-nakd_banana_crunch.png'
p6615
sS'block_loop.thisIndex'
p6616
g6364
sg38
S'left'
p6617
sg58
g62
sS'trial_loop.thisN'
p6618
I15
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6619
g59
(g98
S'\x0f\x00\x00\x00'
tRp6620
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6621
I0
sg6379
S'1-treacle_cookies.png'
p6622
sS'block_loop.thisRepN'
p6623
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6624
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6625
Nsg69
Vn
sS'block_loop.thisTrialN'
p6626
I0
sg39
F0.73393190247224993
sg34
g752
(S'\x07\xdf\n\x11\x13\x1a"\t\x08\x80'
tRp6627
sa(dp6628
S'trial_loop.thisTrialN'
p6629
I16
sg6370
g6438
sS'block_loop.thisIndex'
p6630
g6364
sg38
S'left'
p6631
sg58
g62
sS'trial_loop.thisN'
p6632
I16
sg33
g6442
sg63
g64
sS'trial_loop.thisIndex'
p6633
g59
(g98
S'\x10\x00\x00\x00'
tRp6634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6635
I0
sg6379
g6446
sS'block_loop.thisRepN'
p6636
I2
sg6382
g6442
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6637
I2
sg6384
g6449
sg55
g11
sS'block_loop.thisTrial'
p6638
Nsg69
Vn
sS'block_loop.thisTrialN'
p6639
I0
sg39
F0.60018981710163644
sg34
g752
(S'\x07\xdf\n\x11\x13\x1a(\x05SH'
tRp6640
sa(dp6641
S'trial_loop.thisTrialN'
p6642
I17
sg6370
S'46-pistachios.png'
p6643
sS'block_loop.thisIndex'
p6644
g6364
sg38
S'left'
p6645
sg58
g62
sS'trial_loop.thisN'
p6646
I17
sg33
S'46-pistachios.png'
p6647
sg63
g64
sS'trial_loop.thisIndex'
p6648
g59
(g98
S'\x11\x00\x00\x00'
tRp6649
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6650
I0
sg6379
S'29-beans.png'
p6651
sS'block_loop.thisRepN'
p6652
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6653
I2
sg6384
S'29-beans.png'
p6654
sg55
g11
sS'block_loop.thisTrial'
p6655
Nsg69
Vn
sS'block_loop.thisTrialN'
p6656
I0
sg39
F0.63344715327184531
sg34
g752
(S'\x07\xdf\n\x11\x13\x1a-\x0e\xf4 '
tRp6657
sa(dp6658
S'trial_loop.thisTrialN'
p6659
I18
sg6370
g6489
sS'block_loop.thisIndex'
p6660
g6364
sg38
S'left'
p6661
sg58
g62
sS'trial_loop.thisN'
p6662
I18
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6663
g59
(g98
S'\x12\x00\x00\x00'
tRp6664
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6665
I0
sg6379
g6496
sS'block_loop.thisRepN'
p6666
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6667
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6668
Nsg69
Vn
sS'block_loop.thisTrialN'
p6669
I0
sg39
F0.78342803756459034
sg34
g752
(S'\x07\xdf\n\x11\x13\x1a3\n\x0e8'
tRp6670
sa(dp6671
S'trial_loop.thisTrialN'
p6672
I19
sg6370
g6555
sS'block_loop.thisIndex'
p6673
g6364
sg38
S'left'
p6674
sg58
g62
sS'trial_loop.thisN'
p6675
I19
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p6676
g59
(g98
S'\x13\x00\x00\x00'
tRp6677
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6678
I0
sg6379
g6562
sS'block_loop.thisRepN'
p6679
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6680
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p6681
Nsg69
Vn
sS'block_loop.thisTrialN'
p6682
I0
sg39
F1.5333986013738468
sg34
g752
(S'\x07\xdf\n\x11\x13\x1a9\x07GH'
tRp6683
sa(dp6684
S'trial_loop.thisTrialN'
p6685
I20
sg6370
S'33-ambrosia_rice.png'
p6686
sS'block_loop.thisIndex'
p6687
g6364
sg38
S'left'
p6688
sg58
g62
sS'trial_loop.thisN'
p6689
I20
sg33
S'33-ambrosia_rice.png'
p6690
sg63
g64
sS'trial_loop.thisIndex'
p6691
g59
(g98
S'\x14\x00\x00\x00'
tRp6692
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6693
I0
sg6379
S'23-crunchie_redo.png'
p6694
sS'block_loop.thisRepN'
p6695
I2
sg6382
g6690
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6696
I2
sg6384
S'23-crunchie_redo.png'
p6697
sg55
g11
sS'block_loop.thisTrial'
p6698
Nsg69
Vn
sS'block_loop.thisTrialN'
p6699
I0
sg39
F0.93349901228430099
sg34
g752
(S'\x07\xdf\n\x11\x13\x1b\x04\x00\xaf\xc8'
tRp6700
sa(dp6701
S'trial_loop.thisTrialN'
p6702
I21
sg6370
S'8-liquorice_catherine_wheels.png'
p6703
sS'block_loop.thisIndex'
p6704
g6364
sg38
S'right'
p6705
sg58
g62
sS'trial_loop.thisN'
p6706
I21
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6707
sg63
g64
sS'trial_loop.thisIndex'
p6708
g59
(g98
S'\x15\x00\x00\x00'
tRp6709
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6710
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p6711
sS'block_loop.thisRepN'
p6712
I2
sg6382
g6707
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6713
I2
sg6384
S'8-liquorice_catherine_wheels.png'
p6714
sg55
g11
sS'block_loop.thisTrial'
p6715
Nsg69
Vn
sS'block_loop.thisTrialN'
p6716
I0
sg39
F2.5172490375862253
sg34
g752
(S'\x07\xdf\n\x11\x13\x1b\n\x00\x0f\xa0'
tRp6717
sa(dp6718
S'trial_loop.thisTrialN'
p6719
I22
sg6370
S'16-skips_prawn.png'
p6720
sS'block_loop.thisIndex'
p6721
g6364
sg38
S'right'
p6722
sg58
g62
sS'trial_loop.thisN'
p6723
I22
sg33
S'16-skips_prawn.png'
p6724
sg63
g64
sS'trial_loop.thisIndex'
p6725
g59
(g98
S'\x16\x00\x00\x00'
tRp6726
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6727
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6728
sS'block_loop.thisRepN'
p6729
I2
sg6382
S'42-mrkipling_lemon_slices.png'
p6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6731
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p6732
Nsg69
Vn
sS'block_loop.thisTrialN'
p6733
I0
sg39
F0.83335951467415725
sg34
g752
(S'\x07\xdf\n\x11\x13\x1b\x11\x08w\xf8'
tRp6734
sa(dp6735
S'trial_loop.thisTrialN'
p6736
I23
sg6370
S'38-maltesers.png'
p6737
sS'block_loop.thisIndex'
p6738
g6364
sg38
S'left'
p6739
sg58
g62
sS'trial_loop.thisN'
p6740
I23
sg33
S'38-maltesers.png'
p6741
sg63
g64
sS'trial_loop.thisIndex'
p6742
g59
(g98
S'\x17\x00\x00\x00'
tRp6743
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6744
I0
sg6379
S'6-sour_patch_kids.png'
p6745
sS'block_loop.thisRepN'
p6746
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6747
I2
sg6384
S'6-sour_patch_kids.png'
p6748
sg55
g11
sS'block_loop.thisTrial'
p6749
Nsg69
Vn
sS'block_loop.thisTrialN'
p6750
I0
sg39
F0.78323417209685431
sg34
g752
(S'\x07\xdf\n\x11\x13\x1b\x17\x06h\xa0'
tRp6751
sa(dp6752
S'trial_loop.thisTrialN'
p6753
I24
sg6370
g6408
sS'block_loop.thisIndex'
p6754
g6364
sg38
S'right'
p6755
sg58
g62
sS'trial_loop.thisN'
p6756
I24
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6757
g59
(g98
S'\x18\x00\x00\x00'
tRp6758
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6759
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6760
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6761
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6762
Nsg69
Vn
sS'block_loop.thisTrialN'
p6763
I0
sg39
F0.76683571925605065
sg34
g752
(S'\x07\xdf\n\x11\x13\x1b\x1d\x03\xa5\x98'
tRp6764
sa(dp6765
S'trial_loop.thisTrialN'
p6766
I25
sg6370
S'4-corn.png'
p6767
sS'block_loop.thisIndex'
p6768
g6364
sg38
S'left'
p6769
sg58
g62
sS'trial_loop.thisN'
p6770
I25
sg33
S'4-corn.png'
p6771
sg63
g64
sS'trial_loop.thisIndex'
p6772
g59
(g98
S'\x19\x00\x00\x00'
tRp6773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6774
I0
sg6379
S'10-bounty_redo.png'
p6775
sS'block_loop.thisRepN'
p6776
I2
sg6382
g6771
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6777
I2
sg6384
S'10-bounty_redo.png'
p6778
sg55
g11
sS'block_loop.thisTrial'
p6779
Nsg69
Vn
sS'block_loop.thisTrialN'
p6780
I0
sg39
F0.90018209099252999
sg34
g752
(S'\x07\xdf\n\x11\x13\x1b#\x00\xa4\x10'
tRp6781
sa(dp6782
S'trial_loop.thisTrialN'
p6783
I26
sg6370
g6615
sS'block_loop.thisIndex'
p6784
g6364
sg38
S'left'
p6785
sg58
g62
sS'trial_loop.thisN'
p6786
I26
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6787
g59
(g98
S'\x1a\x00\x00\x00'
tRp6788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6789
I0
sg6379
g6622
sS'block_loop.thisRepN'
p6790
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6791
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6792
Nsg69
Vn
sS'block_loop.thisTrialN'
p6793
I0
sg39
F0.80014009631122462
sg34
g752
(S'\x07\xdf\n\x11\x13\x1b(\x0e\xcd\x10'
tRp6794
sa(dp6795
S'trial_loop.thisTrialN'
p6796
I27
sg6370
g6767
sS'block_loop.thisIndex'
p6797
g6364
sg38
S'left'
p6798
sg58
g62
sS'trial_loop.thisN'
p6799
I27
sg33
g6778
sg63
g64
sS'trial_loop.thisIndex'
p6800
g59
(g98
S'\x1b\x00\x00\x00'
tRp6801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6802
I0
sg6379
g6775
sS'block_loop.thisRepN'
p6803
I2
sg6382
g6771
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6804
I2
sg6384
g6778
sg55
g11
sS'block_loop.thisTrial'
p6805
Nsg69
Vn
sS'block_loop.thisTrialN'
p6806
I0
sg39
F0.85016964654096228
sg34
g752
(S'\x07\xdf\n\x11\x13\x1b.\x0cH\x88'
tRp6807
sa(dp6808
S'trial_loop.thisTrialN'
p6809
I28
sg6370
g6737
sS'block_loop.thisIndex'
p6810
g6364
sg38
S'left'
p6811
sg58
g62
sS'trial_loop.thisN'
p6812
I28
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p6813
g59
(g98
S'\x1c\x00\x00\x00'
tRp6814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6815
I0
sg6379
g6745
sS'block_loop.thisRepN'
p6816
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6817
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p6818
Nsg69
Vn
sS'block_loop.thisTrialN'
p6819
I0
sg39
F0.63320054498944955
sg34
g752
(S'\x07\xdf\n\x11\x13\x1b4\nw\xb0'
tRp6820
sa(dp6821
S'trial_loop.thisTrialN'
p6822
I29
sg6370
g6643
sS'block_loop.thisIndex'
p6823
g6364
sg38
S'left'
p6824
sg58
g62
sS'trial_loop.thisN'
p6825
I29
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p6826
g59
(g98
S'\x1d\x00\x00\x00'
tRp6827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6828
I0
sg6379
g6651
sS'block_loop.thisRepN'
p6829
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6830
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p6831
Nsg69
Vn
sS'block_loop.thisTrialN'
p6832
I0
sg39
F0.6500799552504759
sg34
g752
(S'\x07\xdf\n\x11\x13\x1b:\x05SH'
tRp6833
sa(dp6834
S'trial_loop.thisTrialN'
p6835
I30
sg6370
S'7-olives.png'
p6836
sS'block_loop.thisIndex'
p6837
g6364
sg38
S'left'
p6838
sg58
g62
sS'trial_loop.thisN'
p6839
I30
sg33
S'22-daim.png'
p6840
sg63
g64
sS'trial_loop.thisIndex'
p6841
g59
(g98
S'\x1e\x00\x00\x00'
tRp6842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6843
I0
sg6379
S'22-daim.png'
p6844
sS'block_loop.thisRepN'
p6845
I2
sg6382
g6840
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6846
I2
sg6384
S'7-olives.png'
p6847
sg55
g11
sS'block_loop.thisTrial'
p6848
Nsg69
Vn
sS'block_loop.thisTrialN'
p6849
I0
sg39
F0.6168779277613794
sg34
g752
(S'\x07\xdf\n\x11\x13\x1c\x04\x00\xa7\xf8'
tRp6850
sa(dp6851
S'trial_loop.thisTrialN'
p6852
I31
sg6370
g6538
sS'block_loop.thisIndex'
p6853
g6364
sg38
S'right'
p6854
sg58
g62
sS'trial_loop.thisN'
p6855
I31
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p6856
g59
(g98
S'\x1f\x00\x00\x00'
tRp6857
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6858
I0
sg6379
g6546
sS'block_loop.thisRepN'
p6859
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6860
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p6861
Nsg69
Vn
sS'block_loop.thisTrialN'
p6862
I0
sg39
F1.9502772133673716
sg34
g752
(S'\x07\xdf\n\x11\x13\x1c\t\n\x87P'
tRp6863
sa(dp6864
S'trial_loop.thisTrialN'
p6865
I32
sg6370
g6587
sS'block_loop.thisIndex'
p6866
g6364
sg38
S'right'
p6867
sg58
g62
sS'trial_loop.thisN'
p6868
I32
sg33
g6449
sg63
g64
sS'trial_loop.thisIndex'
p6869
g59
(g98
S' \x00\x00\x00'
tRp6870
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6871
I0
sg6379
g6594
sS'block_loop.thisRepN'
p6872
I2
sg6382
g6442
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6873
I2
sg6384
g6449
sg55
g11
sS'block_loop.thisTrial'
p6874
Nsg69
Vn
sS'block_loop.thisTrialN'
p6875
I0
sg39
F0.63353866917532287
sg34
g752
(S'\x07\xdf\n\x11\x13\x1c\x10\n\x1d\xd8'
tRp6876
sa(dp6877
S'trial_loop.thisTrialN'
p6878
I33
sg6370
S'49-yorkie.png'
p6879
sS'block_loop.thisIndex'
p6880
g6364
sg38
S'right'
p6881
sg58
g62
sS'trial_loop.thisN'
p6882
I33
sg33
S'35-raisins.png'
p6883
sg63
g64
sS'trial_loop.thisIndex'
p6884
g59
(g98
S'!\x00\x00\x00'
tRp6885
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6886
I0
sg6379
S'35-raisins.png'
p6887
sS'block_loop.thisRepN'
p6888
I2
sg6382
g6883
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6889
I2
sg6384
S'49-yorkie.png'
p6890
sg55
g11
sS'block_loop.thisTrial'
p6891
Nsg69
Vn
sS'block_loop.thisTrialN'
p6892
I0
sg39
F0.8502049984781479
sg34
g752
(S'\x07\xdf\n\x11\x13\x1c\x16\x057\xf0'
tRp6893
sa(dp6894
S'trial_loop.thisTrialN'
p6895
I34
sg6370
S'45-chewy_nougat_redo.png'
p6896
sS'block_loop.thisIndex'
p6897
g6364
sg38
S'right'
p6898
sg58
g62
sS'trial_loop.thisN'
p6899
I34
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p6900
g59
(g98
S'"\x00\x00\x00'
tRp6901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6902
I0
sg6379
S'41-peanuts_redo.png'
p6903
sS'block_loop.thisRepN'
p6904
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6905
I2
sg6384
g6508
sg55
g11
sS'block_loop.thisTrial'
p6906
Nsg69
Vn
sS'block_loop.thisTrialN'
p6907
I0
sg39
F0.80013382419201662
sg34
g752
(S'\x07\xdf\n\x11\x13\x1c\x1c\x03g\x18'
tRp6908
sa(dp6909
S'trial_loop.thisTrialN'
p6910
I35
sg6370
S'27-hartleys_raspberries_jelly.png'
p6911
sS'block_loop.thisIndex'
p6912
g6364
sg38
S'right'
p6913
sg58
g62
sS'trial_loop.thisN'
p6914
I35
sg33
S'51-mars.png'
p6915
sg63
g64
sS'trial_loop.thisIndex'
p6916
g59
(g98
S'#\x00\x00\x00'
tRp6917
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6918
I0
sg6379
S'51-mars.png'
p6919
sS'block_loop.thisRepN'
p6920
I2
sg6382
g6915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6921
I2
sg6384
S'27-hartleys_raspberries_jelly.png'
p6922
sg55
g11
sS'block_loop.thisTrial'
p6923
Nsg69
Vn
sS'block_loop.thisTrialN'
p6924
I0
sg39
F0.83344133730679459
sg34
g752
(S'\x07\xdf\n\x11\x13\x1c"\x00\xde\xa8'
tRp6925
sa(dp6926
S'trial_loop.thisTrialN'
p6927
I36
sg6370
S'50-polo.png'
p6928
sS'block_loop.thisIndex'
p6929
g6364
sg38
S'right'
p6930
sg58
g62
sS'trial_loop.thisN'
p6931
I36
sg33
S'48-twix.png'
p6932
sg63
g64
sS'trial_loop.thisIndex'
p6933
g59
(g98
S'$\x00\x00\x00'
tRp6934
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6935
I0
sg6379
S'48-twix.png'
p6936
sS'block_loop.thisRepN'
p6937
I2
sg6382
g6932
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6938
I2
sg6384
S'50-polo.png'
p6939
sg55
g11
sS'block_loop.thisTrial'
p6940
Nsg69
Vn
sS'block_loop.thisTrialN'
p6941
I0
sg39
F0.65005600716358458
sg34
g752
(S"\x07\xdf\n\x11\x13\x1c'\x0e\x15x"
tRp6942
sa(dp6943
S'trial_loop.thisTrialN'
p6944
I37
sg6370
S'42-mrkipling_lemon_slices.png'
p6945
sS'block_loop.thisIndex'
p6946
g6364
sg38
S'right'
p6947
sg58
g62
sS'trial_loop.thisN'
p6948
I37
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p6949
g59
(g98
S'%\x00\x00\x00'
tRp6950
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6951
I0
sg6379
S'16-skips_prawn.png'
p6952
sS'block_loop.thisRepN'
p6953
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6954
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p6955
Nsg69
Vn
sS'block_loop.thisTrialN'
p6956
I0
sg39
F1.3499602433239488
sg34
g752
(S'\x07\xdf\n\x11\x13\x1c-\t+\xa8'
tRp6957
sa(dp6958
S'trial_loop.thisTrialN'
p6959
I38
sg6370
S'22-daim.png'
p6960
sS'block_loop.thisIndex'
p6961
g6364
sg38
S'left'
p6962
sg58
g62
sS'trial_loop.thisN'
p6963
I38
sg33
g6840
sg63
g64
sS'trial_loop.thisIndex'
p6964
g59
(g98
S'&\x00\x00\x00'
tRp6965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6966
I0
sg6379
S'7-olives.png'
p6967
sS'block_loop.thisRepN'
p6968
I2
sg6382
g6840
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6969
I2
sg6384
g6847
sg55
g11
sS'block_loop.thisTrial'
p6970
Nsg69
Vn
sS'block_loop.thisTrialN'
p6971
I0
sg39
F1.7335190830617648
sg34
g752
(S'\x07\xdf\n\x11\x13\x1c3\x0e\xfb\xf0'
tRp6972
sa(dp6973
S'trial_loop.thisTrialN'
p6974
I39
sg6370
g6371
sS'block_loop.thisIndex'
p6975
g6364
sg38
S'left'
p6976
sg58
g62
sS'trial_loop.thisN'
p6977
I39
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6978
g59
(g98
S"'\x00\x00\x00"
tRp6979
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6980
I0
sg6379
g6380
sS'block_loop.thisRepN'
p6981
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6982
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6983
Nsg69
Vn
sS'block_loop.thisTrialN'
p6984
I0
sg39
F0.75022087834258855
sg34
g752
(S'\x07\xdf\n\x11\x13\x1c:\x0by\x80'
tRp6985
sa(dp6986
S'trial_loop.thisTrialN'
p6987
I40
sg6370
S'48-twix.png'
p6988
sS'block_loop.thisIndex'
p6989
g6364
sg38
S'left'
p6990
sg58
g62
sS'trial_loop.thisN'
p6991
I40
sg33
g6932
sg63
g64
sS'trial_loop.thisIndex'
p6992
g59
(g98
S'(\x00\x00\x00'
tRp6993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6994
I0
sg6379
S'50-polo.png'
p6995
sS'block_loop.thisRepN'
p6996
I2
sg6382
g6932
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6997
I2
sg6384
g6939
sg55
g11
sS'block_loop.thisTrial'
p6998
Nsg69
Vn
sS'block_loop.thisTrialN'
p6999
I0
sg39
F0.65011701776711561
sg34
g752
(S'\x07\xdf\n\x11\x13\x1d\x04\x08=`'
tRp7000
sa(dp7001
S'trial_loop.thisTrialN'
p7002
I41
sg6370
g6911
sS'block_loop.thisIndex'
p7003
g6364
sg38
S'right'
p7004
sg58
g62
sS'trial_loop.thisN'
p7005
I41
sg33
g6922
sg63
g64
sS'trial_loop.thisIndex'
p7006
g59
(g98
S')\x00\x00\x00'
tRp7007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7008
I0
sg6379
g6919
sS'block_loop.thisRepN'
p7009
I2
sg6382
g6915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7010
I2
sg6384
g6922
sg55
g11
sS'block_loop.thisTrial'
p7011
Nsg69
Vn
sS'block_loop.thisTrialN'
p7012
I0
sg39
F0.70011093096218247
sg34
g752
(S'\x07\xdf\n\x11\x13\x1d\n\x03S\x90'
tRp7013
sa(dp7014
S'trial_loop.thisTrialN'
p7015
I42
sg6370
S'35-raisins.png'
p7016
sS'block_loop.thisIndex'
p7017
g6364
sg38
S'left'
p7018
sg58
g62
sS'trial_loop.thisN'
p7019
I42
sg33
g6883
sg63
g64
sS'trial_loop.thisIndex'
p7020
g59
(g98
S'*\x00\x00\x00'
tRp7021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7022
I0
sg6379
S'49-yorkie.png'
p7023
sS'block_loop.thisRepN'
p7024
I2
sg6382
g6883
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7025
I2
sg6384
g6890
sg55
g11
sS'block_loop.thisTrial'
p7026
Nsg69
Vn
sS'block_loop.thisTrialN'
p7027
I0
sg39
F0.78353295299712045
sg34
g752
(S'\x07\xdf\n\x11\x13\x1d\x0f\x0e\xa2\x18'
tRp7028
sa(dp7029
S'trial_loop.thisTrialN'
p7030
I43
sg6370
g6643
sS'block_loop.thisIndex'
p7031
g6364
sg38
S'left'
p7032
sg58
g62
sS'trial_loop.thisN'
p7033
I43
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p7034
g59
(g98
S'+\x00\x00\x00'
tRp7035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7036
I0
sg6379
g6651
sS'block_loop.thisRepN'
p7037
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7038
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p7039
Nsg69
Vn
sS'block_loop.thisTrialN'
p7040
I0
sg39
F0.70019560455693863
sg34
g752
(S'\x07\xdf\n\x11\x13\x1d\x15\x0b\xa0\x90'
tRp7041
sa(dp7042
S'trial_loop.thisTrialN'
p7043
I44
sg6370
g6928
sS'block_loop.thisIndex'
p7044
g6364
sg38
S'right'
p7045
sg58
g62
sS'trial_loop.thisN'
p7046
I44
sg33
g6932
sg63
g64
sS'trial_loop.thisIndex'
p7047
g59
(g98
S',\x00\x00\x00'
tRp7048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7049
I0
sg6379
g6936
sS'block_loop.thisRepN'
p7050
I2
sg6382
g6932
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7051
I2
sg6384
g6939
sg55
g11
sS'block_loop.thisTrial'
p7052
Nsg69
Vn
sS'block_loop.thisTrialN'
p7053
I0
sg39
F0.61718127020139946
sg34
g752
(S'\x07\xdf\n\x11\x13\x1d\x1b\x07\xac\xd8'
tRp7054
sa(dp7055
S'trial_loop.thisTrialN'
p7056
I45
sg6370
g6521
sS'block_loop.thisIndex'
p7057
g6364
sg38
S'left'
p7058
sg58
g62
sS'trial_loop.thisN'
p7059
I45
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p7060
g59
(g98
S'-\x00\x00\x00'
tRp7061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7062
I0
sg6379
g6529
sS'block_loop.thisRepN'
p7063
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7064
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p7065
Nsg69
Vn
sS'block_loop.thisTrialN'
p7066
I0
sg39
F0.83345131567693898
sg34
g752
(S'\x07\xdf\n\x11\x13\x1d!\x02I\xf0'
tRp7067
sa(dp7068
S'trial_loop.thisTrialN'
p7069
I46
sg6370
g6391
sS'block_loop.thisIndex'
p7070
g6364
sg38
S'right'
p7071
sg58
g62
sS'trial_loop.thisN'
p7072
I46
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7073
g59
(g98
S'.\x00\x00\x00'
tRp7074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7075
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7076
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7077
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7078
Nsg69
Vn
sS'block_loop.thisTrialN'
p7079
I0
sg39
F0.88352163467425271
sg34
g752
(S"\x07\xdf\n\x11\x13\x1d'\x00>\x80"
tRp7080
sa(dp7081
S'trial_loop.thisTrialN'
p7082
I47
sg6370
g6896
sS'block_loop.thisIndex'
p7083
g6364
sg38
S'right'
p7084
sg58
g62
sS'trial_loop.thisN'
p7085
I47
sg33
g6508
sg63
g64
sS'trial_loop.thisIndex'
p7086
g59
(g98
S'/\x00\x00\x00'
tRp7087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7088
I0
sg6379
g6903
sS'block_loop.thisRepN'
p7089
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7090
I2
sg6384
g6508
sg55
g11
sS'block_loop.thisTrial'
p7091
Nsg69
Vn
sS'block_loop.thisTrialN'
p7092
I0
sg39
F1.0667515873446973
sg34
g752
(S'\x07\xdf\n\x11\x13\x1d,\x0eg\x80'
tRp7093
sa(dp7094
S'trial_loop.thisTrialN'
p7095
I48
sg6370
g6455
sS'block_loop.thisIndex'
p7096
g6364
sg38
S'right'
p7097
sg58
g62
sS'trial_loop.thisN'
p7098
I48
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p7099
g59
(g98
S'0\x00\x00\x00'
tRp7100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7101
I0
sg6379
g6463
sS'block_loop.thisRepN'
p7102
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7103
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p7104
Nsg69
Vn
sS'block_loop.thisTrialN'
p7105
I0
sg39
F1.0168494751524122
sg34
g752
(S'\x07\xdf\n\x11\x13\x1d3\x00\xa7\xf8'
tRp7106
sa(dp7107
S'trial_loop.thisTrialN'
p7108
I49
sg6370
g6438
sS'block_loop.thisIndex'
p7109
g6364
sg38
S'left'
p7110
sg58
g62
sS'trial_loop.thisN'
p7111
I49
sg33
g6442
sg63
g64
sS'trial_loop.thisIndex'
p7112
g59
(g98
S'1\x00\x00\x00'
tRp7113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7114
I0
sg6379
g6446
sS'block_loop.thisRepN'
p7115
I2
sg6382
g6442
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7116
I2
sg6384
g6449
sg55
g11
sS'block_loop.thisTrial'
p7117
Nsg69
Vn
sS'block_loop.thisTrialN'
p7118
I0
sg39
F0.65017147115577245
sg34
g752
(S'\x07\xdf\n\x11\x13\x1d9\x01<h'
tRp7119
sa(dp7120
S'trial_loop.thisTrialN'
p7121
I50
sg6370
S'10-bounty_redo.png'
p7122
sS'block_loop.thisIndex'
p7123
g6364
sg38
S'right'
p7124
sg58
g62
sS'trial_loop.thisN'
p7125
I50
sg33
g6771
sg63
g64
sS'trial_loop.thisIndex'
p7126
g59
(g98
S'2\x00\x00\x00'
tRp7127
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7128
I0
sg6379
S'4-corn.png'
p7129
sS'block_loop.thisRepN'
p7130
I2
sg6382
g6771
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7131
I2
sg6384
g6778
sg55
g11
sS'block_loop.thisTrial'
p7132
Nsg69
Vn
sS'block_loop.thisTrialN'
p7133
I0
sg39
F1.0005964214142296
sg34
g752
(S'\x07\xdf\n\x11\x13\x1e\x02\x0b\xd3X'
tRp7134
sa(dp7135
S'trial_loop.thisTrialN'
p7136
I51
sg6370
g6928
sS'block_loop.thisIndex'
p7137
g6364
sg38
S'right'
p7138
sg58
g62
sS'trial_loop.thisN'
p7139
I51
sg33
g6932
sg63
g64
sS'trial_loop.thisIndex'
p7140
g59
(g98
S'3\x00\x00\x00'
tRp7141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7142
I0
sg6379
g6936
sS'block_loop.thisRepN'
p7143
I2
sg6382
g6932
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7144
I2
sg6384
g6939
sg55
g11
sS'block_loop.thisTrial'
p7145
Nsg69
Vn
sS'block_loop.thisTrialN'
p7146
I0
sg39
F0.68349323908478254
sg34
g752
(S'\x07\xdf\n\x11\x13\x1e\x08\x0c%`'
tRp7147
sa(dp7148
S'trial_loop.thisTrialN'
p7149
I52
sg6370
g6455
sS'block_loop.thisIndex'
p7150
g6364
sg38
S'right'
p7151
sg58
g62
sS'trial_loop.thisN'
p7152
I52
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p7153
g59
(g98
S'4\x00\x00\x00'
tRp7154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7155
I0
sg6379
g6463
sS'block_loop.thisRepN'
p7156
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7157
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p7158
Nsg69
Vn
sS'block_loop.thisTrialN'
p7159
I0
sg39
F0.633523273978426
sg34
g752
(S'\x07\xdf\n\x11\x13\x1e\x0e\x07\xf3('
tRp7160
sa(dp7161
S'trial_loop.thisTrialN'
p7162
I53
sg6370
g6521
sS'block_loop.thisIndex'
p7163
g6364
sg38
S'right'
p7164
sg58
g62
sS'trial_loop.thisN'
p7165
I53
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p7166
g59
(g98
S'5\x00\x00\x00'
tRp7167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7168
I0
sg6379
g6529
sS'block_loop.thisRepN'
p7169
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7170
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p7171
Nsg69
Vn
sS'block_loop.thisTrialN'
p7172
I0
sg39
F0.95019510563724907
sg34
g752
(S'\x07\xdf\n\x11\x13\x1e\x14\x02\xce\xc0'
tRp7173
sa(dp7174
S'trial_loop.thisTrialN'
p7175
I54
sg6370
g6504
sS'block_loop.thisIndex'
p7176
g6364
sg38
S'left'
p7177
sg58
g62
sS'trial_loop.thisN'
p7178
I54
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7179
g59
(g98
S'6\x00\x00\x00'
tRp7180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7181
I0
sg6379
g6512
sS'block_loop.thisRepN'
p7182
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7183
I2
sg6384
g6508
sg55
g11
sS'block_loop.thisTrial'
p7184
Nsg69
Vn
sS'block_loop.thisTrialN'
p7185
I0
sg39
F1.3334429053356871
sg34
g752
(S'\x07\xdf\n\x11\x13\x1e\x1a\x02\xab\x98'
tRp7186
sa(dp7187
S'trial_loop.thisTrialN'
p7188
I55
sg6370
S'6-sour_patch_kids.png'
p7189
sS'block_loop.thisIndex'
p7190
g6364
sg38
S'right'
p7191
sg58
g62
sS'trial_loop.thisN'
p7192
I55
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p7193
g59
(g98
S'7\x00\x00\x00'
tRp7194
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7195
I0
sg6379
S'38-maltesers.png'
p7196
sS'block_loop.thisRepN'
p7197
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7198
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p7199
Nsg69
Vn
sS'block_loop.thisTrialN'
p7200
I0
sg39
F0.98320469314057846
sg34
g752
(S'\x07\xdf\n\x11\x13\x1e \x089x'
tRp7201
sa(dp7202
S'trial_loop.thisTrialN'
p7203
I56
sg6370
g6538
sS'block_loop.thisIndex'
p7204
g6364
sg38
S'right'
p7205
sg58
g62
sS'trial_loop.thisN'
p7206
I56
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p7207
g59
(g98
S'8\x00\x00\x00'
tRp7208
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7209
I0
sg6379
g6546
sS'block_loop.thisRepN'
p7210
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7211
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p7212
Nsg69
Vn
sS'block_loop.thisTrialN'
p7213
I0
sg39
F1.5001848849351518
sg34
g752
(S'\x07\xdf\n\x11\x13\x1e&\x08P\xe8'
tRp7214
sa(dp7215
S'trial_loop.thisTrialN'
p7216
I57
sg6370
S'3-ellas_strawberries_apples.png'
p7217
sS'block_loop.thisIndex'
p7218
g6364
sg38
S'left'
p7219
sg58
g62
sS'trial_loop.thisN'
p7220
I57
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p7221
g59
(g98
S'9\x00\x00\x00'
tRp7222
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7223
I0
sg6379
S'13-mccoys_steak_crisps.png'
p7224
sS'block_loop.thisRepN'
p7225
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7226
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p7227
Nsg69
Vn
sS'block_loop.thisTrialN'
p7228
I0
sg39
F0.7501698461092019
sg34
g752
(S'\x07\xdf\n\x11\x13\x1e-\x01@P'
tRp7229
sa(dp7230
S'trial_loop.thisTrialN'
p7231
I58
sg6370
g7122
sS'block_loop.thisIndex'
p7232
g6364
sg38
S'right'
p7233
sg58
g62
sS'trial_loop.thisN'
p7234
I58
sg33
g6771
sg63
g64
sS'trial_loop.thisIndex'
p7235
g59
(g98
S':\x00\x00\x00'
tRp7236
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7237
I0
sg6379
g7129
sS'block_loop.thisRepN'
p7238
I2
sg6382
g6771
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7239
I2
sg6384
g6778
sg55
g11
sS'block_loop.thisTrial'
p7240
Nsg69
Vn
sS'block_loop.thisTrialN'
p7241
I0
sg39
F0.71686375847457384
sg34
g752
(S'\x07\xdf\n\x11\x13\x1e2\rB\x88'
tRp7242
sa(dp7243
S'trial_loop.thisTrialN'
p7244
I59
sg6370
g6504
sS'block_loop.thisIndex'
p7245
g6364
sg38
S'left'
p7246
sg58
g62
sS'trial_loop.thisN'
p7247
I59
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7248
g59
(g98
S';\x00\x00\x00'
tRp7249
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7250
I0
sg6379
g6512
sS'block_loop.thisRepN'
p7251
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7252
I2
sg6384
g6508
sg55
g11
sS'block_loop.thisTrial'
p7253
Nsg69
Vn
sS'block_loop.thisTrialN'
p7254
I0
sg39
F0.8002458670289343
sg34
g752
(S'\x07\xdf\n\x11\x13\x1e8\t\x8dP'
tRp7255
sa(dp7256
S'trial_loop.thisTrialN'
p7257
I60
sg6370
g6945
sS'block_loop.thisIndex'
p7258
g6364
sg38
S'left'
p7259
sg58
g62
sS'trial_loop.thisN'
p7260
I60
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p7261
g59
(g98
S'<\x00\x00\x00'
tRp7262
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7263
I0
sg6379
g6952
sS'block_loop.thisRepN'
p7264
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7265
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p7266
Nsg69
Vn
sS'block_loop.thisTrialN'
p7267
I0
sg39
F0.78342062506271759
sg34
g752
(S'\x07\xdf\n\x11\x13\x1f\x02\x06\xcaH'
tRp7268
sa(dp7269
S'trial_loop.thisTrialN'
p7270
I61
sg6370
g6408
sS'block_loop.thisIndex'
p7271
g6364
sg38
S'right'
p7272
sg58
g62
sS'trial_loop.thisN'
p7273
I61
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7274
g59
(g98
S'=\x00\x00\x00'
tRp7275
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7276
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7277
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7278
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7279
Nsg69
Vn
sS'block_loop.thisTrialN'
p7280
I0
sg39
F0.90015899819445622
sg34
g752
(S'\x07\xdf\n\x11\x13\x1f\x08\x04\x07@'
tRp7281
sa(dp7282
S'trial_loop.thisTrialN'
p7283
I62
sg6370
g6896
sS'block_loop.thisIndex'
p7284
g6364
sg38
S'right'
p7285
sg58
g62
sS'trial_loop.thisN'
p7286
I62
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7287
g59
(g98
S'>\x00\x00\x00'
tRp7288
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7289
I0
sg6379
g6903
sS'block_loop.thisRepN'
p7290
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7291
I2
sg6384
g6508
sg55
g11
sS'block_loop.thisTrial'
p7292
Nsg69
Vn
sS'block_loop.thisTrialN'
p7293
I0
sg39
F0.7169373133147019
sg34
g752
(S'\x07\xdf\n\x11\x13\x1f\x0e\x03(\x98'
tRp7294
sa(dp7295
S'trial_loop.thisTrialN'
p7296
I63
sg6370
g6703
sS'block_loop.thisIndex'
p7297
g6364
sg38
S'right'
p7298
sg58
g62
sS'trial_loop.thisN'
p7299
I63
sg33
g6707
sg63
g64
sS'trial_loop.thisIndex'
p7300
g59
(g98
S'?\x00\x00\x00'
tRp7301
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7302
I0
sg6379
g6711
sS'block_loop.thisRepN'
p7303
I2
sg6382
g6707
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7304
I2
sg6384
g6714
sg55
g11
sS'block_loop.thisTrial'
p7305
Nsg69
Vn
sS'block_loop.thisTrialN'
p7306
I0
sg39
F1.2668358618047932
sg34
g752
(S'\x07\xdf\n\x11\x13\x1f\x13\x0ew '
tRp7307
sa(dp7308
S'trial_loop.thisTrialN'
p7309
I64
sg6370
g6587
sS'block_loop.thisIndex'
p7310
g6364
sg38
S'right'
p7311
sg58
g62
sS'trial_loop.thisN'
p7312
I64
sg33
g6449
sg63
g64
sS'trial_loop.thisIndex'
p7313
g59
(g98
S'@\x00\x00\x00'
tRp7314
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7315
I0
sg6379
g6594
sS'block_loop.thisRepN'
p7316
I2
sg6382
g6442
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7317
I2
sg6384
g6449
sg55
g11
sS'block_loop.thisTrial'
p7318
Nsg69
Vn
sS'block_loop.thisTrialN'
p7319
I0
sg39
F0.80016404439811595
sg34
g752
(S'\x07\xdf\n\x11\x13\x1f\x1a\x03\xd0\x90'
tRp7320
sa(dp7321
S'trial_loop.thisTrialN'
p7322
I65
sg6370
g6988
sS'block_loop.thisIndex'
p7323
g6364
sg38
S'left'
p7324
sg58
g62
sS'trial_loop.thisN'
p7325
I65
sg33
g6932
sg63
g64
sS'trial_loop.thisIndex'
p7326
g59
(g98
S'A\x00\x00\x00'
tRp7327
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7328
I0
sg6379
g6995
sS'block_loop.thisRepN'
p7329
I2
sg6382
g6932
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7330
I2
sg6384
g6939
sg55
g11
sS'block_loop.thisTrial'
p7331
Nsg69
Vn
sS'block_loop.thisTrialN'
p7332
I0
sg39
F0.83342537191674637
sg34
g752
(S'\x07\xdf\n\x11\x13\x1f \x01L\x08'
tRp7333
sa(dp7334
S'trial_loop.thisTrialN'
p7335
I66
sg6370
g6960
sS'block_loop.thisIndex'
p7336
g6364
sg38
S'right'
p7337
sg58
g62
sS'trial_loop.thisN'
p7338
I66
sg33
g6840
sg63
g64
sS'trial_loop.thisIndex'
p7339
g59
(g98
S'B\x00\x00\x00'
tRp7340
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7341
I0
sg6379
g6967
sS'block_loop.thisRepN'
p7342
I2
sg6382
g6840
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7343
I2
sg6384
g6847
sg55
g11
sS'block_loop.thisTrial'
p7344
Nsg69
Vn
sS'block_loop.thisTrialN'
p7345
I0
sg39
F1.0501681070199993
sg34
g752
(S'\x07\xdf\n\x11\x13\x1f%\x0e~\xf0'
tRp7346
sa(dp7347
S'trial_loop.thisTrialN'
p7348
I67
sg6370
S'23-crunchie_redo.png'
p7349
sS'block_loop.thisIndex'
p7350
g6364
sg38
S'right'
p7351
sg58
g62
sS'trial_loop.thisN'
p7352
I67
sg33
g6690
sg63
g64
sS'trial_loop.thisIndex'
p7353
g59
(g98
S'C\x00\x00\x00'
tRp7354
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7355
I0
sg6379
S'33-ambrosia_rice.png'
p7356
sS'block_loop.thisRepN'
p7357
I2
sg6382
g6690
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7358
I2
sg6384
g6697
sg55
g11
sS'block_loop.thisTrial'
p7359
Nsg69
Vn
sS'block_loop.thisTrialN'
p7360
I0
sg39
F1.2671081287517154
sg34
g752
(S'\x07\xdf\n\x11\x13\x1f,\x00\x84\xd0'
tRp7361
sa(dp7362
S'trial_loop.thisTrialN'
p7363
I68
sg6370
S'25-kitkat.png'
p7364
sS'block_loop.thisIndex'
p7365
g6364
sg38
S'left'
p7366
sg58
g62
sS'trial_loop.thisN'
p7367
I68
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7368
g59
(g98
S'D\x00\x00\x00'
tRp7369
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7370
I0
sg6379
S'31-hobnobs.png'
p7371
sS'block_loop.thisRepN'
p7372
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7373
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p7374
Nsg69
Vn
sS'block_loop.thisTrialN'
p7375
I0
sg39
F1.566859781383755
sg34
g752
(S'\x07\xdf\n\x11\x13\x1f2\x05$h'
tRp7376
sa(dp7377
S'trial_loop.thisTrialN'
p7378
I69
sg6370
g7349
sS'block_loop.thisIndex'
p7379
g6364
sg38
S'right'
p7380
sg58
g62
sS'trial_loop.thisN'
p7381
I69
sg33
g6690
sg63
g64
sS'trial_loop.thisIndex'
p7382
g59
(g98
S'E\x00\x00\x00'
tRp7383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7384
I0
sg6379
g7356
sS'block_loop.thisRepN'
p7385
I2
sg6382
g6690
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7386
I2
sg6384
g6697
sg55
g11
sS'block_loop.thisTrial'
p7387
Nsg69
Vn
sS'block_loop.thisTrialN'
p7388
I0
sg39
F0.88347801494273881
sg34
g752
(S'\x07\xdf\n\x11\x13\x1f8\x0eH@'
tRp7389
sa(dp7390
S'trial_loop.thisTrialN'
p7391
I70
sg6370
S'44-crunch.png'
p7392
sS'block_loop.thisIndex'
p7393
g6364
sg38
S'left'
p7394
sg58
g62
sS'trial_loop.thisN'
p7395
I70
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p7396
g59
(g98
S'F\x00\x00\x00'
tRp7397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7398
I0
sg6379
S'26-walkers_smoky_bacon.png'
p7399
sS'block_loop.thisRepN'
p7400
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7401
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p7402
Nsg69
Vn
sS'block_loop.thisTrialN'
p7403
I0
sg39
F1.4835409642018931
sg34
g752
(S'\x07\xdf\n\x11\x13 \x02\x0c\xf0\x80'
tRp7404
sa(dp7405
S'trial_loop.thisTrialN'
p7406
I71
sg6370
g6703
sS'block_loop.thisIndex'
p7407
g6364
sg38
S'right'
p7408
sg58
g62
sS'trial_loop.thisN'
p7409
I71
sg33
g6707
sg63
g64
sS'trial_loop.thisIndex'
p7410
g59
(g98
S'G\x00\x00\x00'
tRp7411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7412
I0
sg6379
g6711
sS'block_loop.thisRepN'
p7413
I2
sg6382
g6707
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7414
I2
sg6384
g6714
sg55
g11
sS'block_loop.thisTrial'
p7415
Nsg69
Vn
sS'block_loop.thisTrialN'
p7416
I0
sg39
F1.8167734684830066
sg34
g752
(S'\x07\xdf\n\x11\x13 \t\x05\xa1h'
tRp7417
sa(dp7418
S'trial_loop.thisTrialN'
p7419
I72
sg6370
g7189
sS'block_loop.thisIndex'
p7420
g6364
sg38
S'right'
p7421
sg58
g62
sS'trial_loop.thisN'
p7422
I72
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p7423
g59
(g98
S'H\x00\x00\x00'
tRp7424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7425
I0
sg6379
g7196
sS'block_loop.thisRepN'
p7426
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7427
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p7428
Nsg69
Vn
sS'block_loop.thisTrialN'
p7429
I0
sg39
F1.2669439132951084
sg34
g752
(S'\x07\xdf\n\x11\x13 \x10\x03O\xa8'
tRp7430
sa(dp7431
S'trial_loop.thisTrialN'
p7432
I73
sg6370
g7349
sS'block_loop.thisIndex'
p7433
g6364
sg38
S'right'
p7434
sg58
g62
sS'trial_loop.thisN'
p7435
I73
sg33
g6690
sg63
g64
sS'trial_loop.thisIndex'
p7436
g59
(g98
S'I\x00\x00\x00'
tRp7437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7438
I0
sg6379
g7356
sS'block_loop.thisRepN'
p7439
I2
sg6382
g6690
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7440
I2
sg6384
g6697
sg55
g11
sS'block_loop.thisTrial'
p7441
Nsg69
Vn
sS'block_loop.thisTrialN'
p7442
I0
sg39
F0.6167824205076613
sg34
g752
(S'\x07\xdf\n\x11\x13 \x16\x07\xef@'
tRp7443
sa(dp7444
S'trial_loop.thisTrialN'
p7445
I74
sg6370
g6489
sS'block_loop.thisIndex'
p7446
g6364
sg38
S'right'
p7447
sg58
g62
sS'trial_loop.thisN'
p7448
I74
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7449
g59
(g98
S'J\x00\x00\x00'
tRp7450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7451
I0
sg6379
g6496
sS'block_loop.thisRepN'
p7452
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7453
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7454
Nsg69
Vn
sS'block_loop.thisTrialN'
p7455
I0
sg39
F0.63354864754546725
sg34
g752
(S'\x07\xdf\n\x11\x13 \x1c\x02\x8cX'
tRp7456
sa(dp7457
S'trial_loop.thisTrialN'
p7458
I75
sg6370
g6737
sS'block_loop.thisIndex'
p7459
g6364
sg38
S'left'
p7460
sg58
g62
sS'trial_loop.thisN'
p7461
I75
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p7462
g59
(g98
S'K\x00\x00\x00'
tRp7463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7464
I0
sg6379
g6745
sS'block_loop.thisRepN'
p7465
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7466
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p7467
Nsg69
Vn
sS'block_loop.thisTrialN'
p7468
I0
sg39
F0.83325231847447867
sg34
g752
(S'\x07\xdf\n\x11\x13 !\x0c\xaa0'
tRp7469
sa(dp7470
S'trial_loop.thisTrialN'
p7471
I76
sg6370
g6945
sS'block_loop.thisIndex'
p7472
g6364
sg38
S'left'
p7473
sg58
g62
sS'trial_loop.thisN'
p7474
I76
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p7475
g59
(g98
S'L\x00\x00\x00'
tRp7476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7477
I0
sg6379
g6952
sS'block_loop.thisRepN'
p7478
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7479
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p7480
Nsg69
Vn
sS'block_loop.thisTrialN'
p7481
I0
sg39
F0.75008403212814301
sg34
g752
(S"\x07\xdf\n\x11\x13 '\n\x9a\xd8"
tRp7482
sa(dp7483
S'trial_loop.thisTrialN'
p7484
I77
sg6370
g7217
sS'block_loop.thisIndex'
p7485
g6364
sg38
S'left'
p7486
sg58
g62
sS'trial_loop.thisN'
p7487
I77
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p7488
g59
(g98
S'M\x00\x00\x00'
tRp7489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7490
I0
sg6379
g7224
sS'block_loop.thisRepN'
p7491
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7492
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p7493
Nsg69
Vn
sS'block_loop.thisTrialN'
p7494
I0
sg39
F0.70018306032034161
sg34
g752
(S'\x07\xdf\n\x11\x13 -\x07^\xb8'
tRp7495
sa(dp7496
S'trial_loop.thisTrialN'
p7497
I78
sg6370
g6615
sS'block_loop.thisIndex'
p7498
g6364
sg38
S'left'
p7499
sg58
g62
sS'trial_loop.thisN'
p7500
I78
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p7501
g59
(g98
S'N\x00\x00\x00'
tRp7502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7503
I0
sg6379
g6622
sS'block_loop.thisRepN'
p7504
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7505
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7506
Nsg69
Vn
sS'block_loop.thisTrialN'
p7507
I0
sg39
F1.1168612496294372
sg34
g752
(S'\x07\xdf\n\x11\x13 3\x03k\x00'
tRp7508
sa(dp7509
S'trial_loop.thisTrialN'
p7510
I79
sg6370
g7016
sS'block_loop.thisIndex'
p7511
g6364
sg38
S'left'
p7512
sg58
g62
sS'trial_loop.thisN'
p7513
I79
sg33
g6883
sg63
g64
sS'trial_loop.thisIndex'
p7514
g59
(g98
S'O\x00\x00\x00'
tRp7515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7516
I0
sg6379
g7023
sS'block_loop.thisRepN'
p7517
I2
sg6382
g6883
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7518
I2
sg6384
g6890
sg55
g11
sS'block_loop.thisTrial'
p7519
Nsg69
Vn
sS'block_loop.thisTrialN'
p7520
I0
sg39
F0.85019387972351979
sg34
g752
(S'\x07\xdf\n\x11\x13 9\x05\xa5P'
tRp7521
sa(dp7522
S'trial_loop.thisTrialN'
p7523
I80
sg6370
g6371
sS'block_loop.thisIndex'
p7524
g6364
sg38
S'left'
p7525
sg58
g62
sS'trial_loop.thisN'
p7526
I80
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7527
g59
(g98
S'P\x00\x00\x00'
tRp7528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7529
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7530
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7531
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7532
Nsg69
Vn
sS'block_loop.thisTrialN'
p7533
I0
sg39
F0.73353305278033076
sg34
g752
(S'\x07\xdf\n\x11\x13!\x03\x03\xd4x'
tRp7534
sa(dp7535
S'trial_loop.thisTrialN'
p7536
I81
sg6370
g7364
sS'block_loop.thisIndex'
p7537
g6364
sg38
S'left'
p7538
sg58
g62
sS'trial_loop.thisN'
p7539
I81
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7540
g59
(g98
S'Q\x00\x00\x00'
tRp7541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7542
I0
sg6379
g7371
sS'block_loop.thisRepN'
p7543
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7544
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p7545
Nsg69
Vn
sS'block_loop.thisTrialN'
p7546
I0
sg39
F1.8001569169919094
sg34
g752
(S'\x07\xdf\n\x11\x13!\t\x00Y\xd8'
tRp7547
sa(dp7548
S'trial_loop.thisTrialN'
p7549
I82
sg6370
g6879
sS'block_loop.thisIndex'
p7550
g6364
sg38
S'right'
p7551
sg58
g62
sS'trial_loop.thisN'
p7552
I82
sg33
g6883
sg63
g64
sS'trial_loop.thisIndex'
p7553
g59
(g98
S'R\x00\x00\x00'
tRp7554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7555
I0
sg6379
g6887
sS'block_loop.thisRepN'
p7556
I2
sg6382
g6883
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7557
I2
sg6384
g6890
sg55
g11
sS'block_loop.thisTrial'
p7558
Nsg69
Vn
sS'block_loop.thisTrialN'
p7559
I0
sg39
F1.0166259596699092
sg34
g752
(S'\x07\xdf\n\x11\x13!\x0f\r\x0f\xc0'
tRp7560
sa(dp7561
S'trial_loop.thisTrialN'
p7562
I83
sg6370
g7189
sS'block_loop.thisIndex'
p7563
g6364
sg38
S'right'
p7564
sg58
g62
sS'trial_loop.thisN'
p7565
I83
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p7566
g59
(g98
S'S\x00\x00\x00'
tRp7567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7568
I0
sg6379
g7196
sS'block_loop.thisRepN'
p7569
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7570
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p7571
Nsg69
Vn
sS'block_loop.thisTrialN'
p7572
I0
sg39
F0.78358655109514075
sg34
g752
(S'\x07\xdf\n\x11\x13!\x15\r\xa0H'
tRp7573
sa(dp7574
S'trial_loop.thisTrialN'
p7575
I84
sg6370
g6703
sS'block_loop.thisIndex'
p7576
g6364
sg38
S'left'
p7577
sg58
g62
sS'trial_loop.thisN'
p7578
I84
sg33
g6707
sg63
g64
sS'trial_loop.thisIndex'
p7579
g59
(g98
S'T\x00\x00\x00'
tRp7580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7581
I0
sg6379
g6711
sS'block_loop.thisRepN'
p7582
I2
sg6382
g6707
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7583
I2
sg6384
g6714
sg55
g11
sS'block_loop.thisTrial'
p7584
Nsg69
Vn
sS'block_loop.thisTrialN'
p7585
I0
sg39
F2.116774865457046
sg34
g752
(S'\x07\xdf\n\x11\x13!\x1b\n\xdd@'
tRp7586
sa(dp7587
S'trial_loop.thisTrialN'
p7588
I85
sg6370
g6686
sS'block_loop.thisIndex'
p7589
g6364
sg38
S'left'
p7590
sg58
g62
sS'trial_loop.thisN'
p7591
I85
sg33
g6697
sg63
g64
sS'trial_loop.thisIndex'
p7592
g59
(g98
S'U\x00\x00\x00'
tRp7593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7594
I0
sg6379
g6694
sS'block_loop.thisRepN'
p7595
I2
sg6382
g6690
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7596
I2
sg6384
g6697
sg55
g11
sS'block_loop.thisTrial'
p7597
Nsg69
Vn
sS'block_loop.thisTrialN'
p7598
I0
sg39
F0.76685339522555296
sg34
g752
(S'\x07\xdf\n\x11\x13!"\rR('
tRp7599
sa(dp7600
S'trial_loop.thisTrialN'
p7601
I86
sg6370
S'51-mars.png'
p7602
sS'block_loop.thisIndex'
p7603
g6364
sg38
S'left'
p7604
sg58
g62
sS'trial_loop.thisN'
p7605
I86
sg33
g6915
sg63
g64
sS'trial_loop.thisIndex'
p7606
g59
(g98
S'V\x00\x00\x00'
tRp7607
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7608
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p7609
sS'block_loop.thisRepN'
p7610
I2
sg6382
g6915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7611
I2
sg6384
g6922
sg55
g11
sS'block_loop.thisTrial'
p7612
Nsg69
Vn
sS'block_loop.thisTrialN'
p7613
I0
sg39
F0.81684730842061981
sg34
g752
(S'\x07\xdf\n\x11\x13!(\n\x12 '
tRp7614
sa(dp7615
S'trial_loop.thisTrialN'
p7616
I87
sg6370
g6587
sS'block_loop.thisIndex'
p7617
g6364
sg38
S'right'
p7618
sg58
g62
sS'trial_loop.thisN'
p7619
I87
sg33
g6442
sg63
g64
sS'trial_loop.thisIndex'
p7620
g59
(g98
S'W\x00\x00\x00'
tRp7621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7622
I0
sg6379
g6594
sS'block_loop.thisRepN'
p7623
I2
sg6382
g6442
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7624
I2
sg6384
g6449
sg55
g11
sS'block_loop.thisTrial'
p7625
Nsg69
Vn
sS'block_loop.thisTrialN'
p7626
I0
sg39
F0.63349419415681041
sg34
g752
(S'\x07\xdf\n\x11\x13!.\x07\xc80'
tRp7627
sa(dp7628
S'trial_loop.thisTrialN'
p7629
I88
sg6370
g6489
sS'block_loop.thisIndex'
p7630
g6364
sg38
S'left'
p7631
sg58
g62
sS'trial_loop.thisN'
p7632
I88
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7633
g59
(g98
S'X\x00\x00\x00'
tRp7634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7635
I0
sg6379
g6496
sS'block_loop.thisRepN'
p7636
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7637
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7638
Nsg69
Vn
sS'block_loop.thisTrialN'
p7639
I0
sg39
F1.1172136286277237
sg34
g752
(S'\x07\xdf\n\x11\x13!4\x02\xe2H'
tRp7640
sa(dp7641
S'trial_loop.thisTrialN'
p7642
I89
sg6370
g6879
sS'block_loop.thisIndex'
p7643
g6364
sg38
S'right'
p7644
sg58
g62
sS'trial_loop.thisN'
p7645
I89
sg33
g6883
sg63
g64
sS'trial_loop.thisIndex'
p7646
g59
(g98
S'Y\x00\x00\x00'
tRp7647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7648
I0
sg6379
g6887
sS'block_loop.thisRepN'
p7649
I2
sg6382
g6883
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7650
I2
sg6384
g6890
sg55
g11
sS'block_loop.thisTrial'
p7651
Nsg69
Vn
sS'block_loop.thisTrialN'
p7652
I0
sg39
F0.88353218323754845
sg34
g752
(S'\x07\xdf\n\x11\x13!:\x05\x1c\x98'
tRp7653
sa(dp7654
S'trial_loop.thisTrialN'
p7655
I90
sg6370
g6391
sS'block_loop.thisIndex'
p7656
g6364
sg38
S'right'
p7657
sg58
g62
sS'trial_loop.thisN'
p7658
I90
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7659
g59
(g98
S'Z\x00\x00\x00'
tRp7660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7661
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7662
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7663
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7664
Nsg69
Vn
sS'block_loop.thisTrialN'
p7665
I0
sg39
F0.96685071532010625
sg34
g752
(S'\x07\xdf\n\x11\x13"\x04\x03\xc4\xd8'
tRp7666
sa(dp7667
S'trial_loop.thisTrialN'
p7668
I91
sg6370
g6836
sS'block_loop.thisIndex'
p7669
g6364
sg38
S'right'
p7670
sg58
g62
sS'trial_loop.thisN'
p7671
I91
sg33
g6840
sg63
g64
sS'trial_loop.thisIndex'
p7672
g59
(g98
S'[\x00\x00\x00'
tRp7673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7674
I0
sg6379
g6844
sS'block_loop.thisRepN'
p7675
I2
sg6382
g6840
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7676
I2
sg6384
g6847
sg55
g11
sS'block_loop.thisTrial'
p7677
Nsg69
Vn
sS'block_loop.thisTrialN'
p7678
I0
sg39
F1.5001692046407697
sg34
g752
(S'\x07\xdf\n\x11\x13"\n\x03\xdcH'
tRp7679
sa(dp7680
S'trial_loop.thisTrialN'
p7681
I92
sg6370
g6720
sS'block_loop.thisIndex'
p7682
g6364
sg38
S'right'
p7683
sg58
g62
sS'trial_loop.thisN'
p7684
I92
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p7685
g59
(g98
S'\\\x00\x00\x00'
tRp7686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7687
I0
sg6379
g6728
sS'block_loop.thisRepN'
p7688
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7689
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p7690
Nsg69
Vn
sS'block_loop.thisTrialN'
p7691
I0
sg39
F1.3000279109273833
sg34
g752
(S'\x07\xdf\n\x11\x13"\x10\x0c\r\xf0'
tRp7692
sa(dp7693
S'trial_loop.thisTrialN'
p7694
I93
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p7695
sS'block_loop.thisIndex'
p7696
g6364
sg38
S'right'
p7697
sg58
g62
sS'trial_loop.thisN'
p7698
I93
sg33
g6714
sg63
g64
sS'trial_loop.thisIndex'
p7699
g59
(g98
S']\x00\x00\x00'
tRp7700
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7701
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p7702
sS'block_loop.thisRepN'
p7703
I2
sg6382
g6707
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7704
I2
sg6384
g6714
sg55
g11
sS'block_loop.thisTrial'
p7705
Nsg69
Vn
sS'block_loop.thisTrialN'
p7706
I0
sg39
F2.5671728170964343
sg34
g752
(S'\x07\xdf\n\x11\x13"\x17\x01\xe0x'
tRp7707
sa(dp7708
S'trial_loop.thisTrialN'
p7709
I94
sg6370
g6570
sS'block_loop.thisIndex'
p7710
g6364
sg38
S'right'
p7711
sg58
g62
sS'trial_loop.thisN'
p7712
I94
sg33
g6581
sg63
g64
sS'trial_loop.thisIndex'
p7713
g59
(g98
S'^\x00\x00\x00'
tRp7714
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7715
I0
sg6379
g6578
sS'block_loop.thisRepN'
p7716
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7717
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p7718
Nsg69
Vn
sS'block_loop.thisTrialN'
p7719
I0
sg39
F1.3668370877185225
sg34
g752
(S'\x07\xdf\n\x11\x13"\x1e\x0b\x00h'
tRp7720
sa(dp7721
S'trial_loop.thisTrialN'
p7722
I95
sg6370
g7016
sS'block_loop.thisIndex'
p7723
g6364
sg38
S'left'
p7724
sg58
g62
sS'trial_loop.thisN'
p7725
I95
sg33
g6890
sg63
g64
sS'trial_loop.thisIndex'
p7726
g59
(g98
S'_\x00\x00\x00'
tRp7727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7728
I0
sg6379
g7023
sS'block_loop.thisRepN'
p7729
I2
sg6382
g6883
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7730
I2
sg6384
g6890
sg55
g11
sS'block_loop.thisTrial'
p7731
Nsg69
Vn
sS'block_loop.thisTrialN'
p7732
I0
sg39
F0.96662662964627089
sg34
g752
(S'\x07\xdf\n\x11\x13"%\x01\xc9\x08'
tRp7733
sa(dp7734
S'trial_loop.thisTrialN'
p7735
I96
sg6370
g6767
sS'block_loop.thisIndex'
p7736
g6364
sg38
S'left'
p7737
sg58
g62
sS'trial_loop.thisN'
p7738
I96
sg33
g6771
sg63
g64
sS'trial_loop.thisIndex'
p7739
g59
(g98
S'`\x00\x00\x00'
tRp7740
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7741
I0
sg6379
g6775
sS'block_loop.thisRepN'
p7742
I2
sg6382
g6771
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7743
I2
sg6384
g6778
sg55
g11
sS'block_loop.thisTrial'
p7744
Nsg69
Vn
sS'block_loop.thisTrialN'
p7745
I0
sg39
F0.86677137302649498
sg34
g752
(S'\x07\xdf\n\x11\x13"+\x01\xe0x'
tRp7746
sa(dp7747
S'trial_loop.thisTrialN'
p7748
I97
sg6370
g6686
sS'block_loop.thisIndex'
p7749
g6364
sg38
S'left'
p7750
sg58
g62
sS'trial_loop.thisN'
p7751
I97
sg33
g6690
sg63
g64
sS'trial_loop.thisIndex'
p7752
g59
(g98
S'a\x00\x00\x00'
tRp7753
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7754
I0
sg6379
g6694
sS'block_loop.thisRepN'
p7755
I2
sg6382
g6690
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7756
I2
sg6384
g6697
sg55
g11
sS'block_loop.thisTrial'
p7757
Nsg69
Vn
sS'block_loop.thisTrialN'
p7758
I0
sg39
F0.75016927591605054
sg34
g752
(S'\x07\xdf\n\x11\x13"1\x00N '
tRp7759
sa(dp7760
S'trial_loop.thisTrialN'
p7761
I98
sg6370
g7217
sS'block_loop.thisIndex'
p7762
g6364
sg38
S'left'
p7763
sg58
g62
sS'trial_loop.thisN'
p7764
I98
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p7765
g59
(g98
S'b\x00\x00\x00'
tRp7766
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7767
I0
sg6379
g7224
sS'block_loop.thisRepN'
p7768
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7769
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p7770
Nsg69
Vn
sS'block_loop.thisTrialN'
p7771
I0
sg39
F0.85011462295915408
sg34
g752
(S'\x07\xdf\n\x11\x13"6\x0cPX'
tRp7772
sa(dp7773
S'trial_loop.thisTrialN'
p7774
I99
sg6370
g6988
sS'block_loop.thisIndex'
p7775
g6364
sg38
S'left'
p7776
sg58
g62
sS'trial_loop.thisN'
p7777
I99
sg33
g6932
sg63
g64
sS'trial_loop.thisIndex'
p7778
g59
(g98
S'c\x00\x00\x00'
tRp7779
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7780
I0
sg6379
g6995
sS'block_loop.thisRepN'
p7781
I2
sg6382
g6932
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7782
I2
sg6384
g6939
sg55
g11
sS'block_loop.thisTrial'
p7783
Nsg69
Vn
sS'block_loop.thisTrialN'
p7784
I0
sg39
F0.7334418219707004
sg34
g752
(S'\x07\xdf\n\x11\x13#\x00\n\x7f\x80'
tRp7785
sa(dp7786
S'trial_loop.thisTrialN'
p7787
I100
sg6370
g6391
sS'block_loop.thisIndex'
p7788
g6364
sg38
S'right'
p7789
sg58
g62
sS'trial_loop.thisN'
p7790
I100
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7791
g59
(g98
S'd\x00\x00\x00'
tRp7792
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7793
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7794
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7795
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7796
Nsg69
Vn
sS'block_loop.thisTrialN'
p7797
I0
sg39
F1.5501485779241193
sg34
g752
(S'\x07\xdf\n\x11\x13#\x06\x06\xcaH'
tRp7798
sa(dp7799
S'trial_loop.thisTrialN'
p7800
I101
sg6370
g7122
sS'block_loop.thisIndex'
p7801
g6364
sg38
S'right'
p7802
sg58
g62
sS'trial_loop.thisN'
p7803
I101
sg33
g6771
sg63
g64
sS'trial_loop.thisIndex'
p7804
g59
(g98
S'e\x00\x00\x00'
tRp7805
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7806
I0
sg6379
g7129
sS'block_loop.thisRepN'
p7807
I2
sg6382
g6771
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7808
I2
sg6384
g6778
sg55
g11
sS'block_loop.thisTrial'
p7809
Nsg69
Vn
sS'block_loop.thisTrialN'
p7810
I0
sg39
F0.86685262546598096
sg34
g752
(S'\x07\xdf\n\x11\x13#\r\x00m`'
tRp7811
sa(dp7812
S'trial_loop.thisTrialN'
p7813
I102
sg6370
g7364
sS'block_loop.thisIndex'
p7814
g6364
sg38
S'left'
p7815
sg58
g62
sS'trial_loop.thisN'
p7816
I102
sg33
g6581
sg63
g64
sS'trial_loop.thisIndex'
p7817
g59
(g98
S'f\x00\x00\x00'
tRp7818
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7819
I0
sg6379
g7371
sS'block_loop.thisRepN'
p7820
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7821
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p7822
Nsg69
Vn
sS'block_loop.thisTrialN'
p7823
I0
sg39
F2.1168124981631991
sg34
g752
(S'\x07\xdf\n\x11\x13#\x12\x0eW\xe0'
tRp7824
sa(dp7825
S'trial_loop.thisTrialN'
p7826
I103
sg6370
g6455
sS'block_loop.thisIndex'
p7827
g6364
sg38
S'right'
p7828
sg58
g62
sS'trial_loop.thisN'
p7829
I103
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p7830
g59
(g98
S'g\x00\x00\x00'
tRp7831
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7832
I0
sg6379
g6463
sS'block_loop.thisRepN'
p7833
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7834
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p7835
Nsg69
Vn
sS'block_loop.thisTrialN'
p7836
I0
sg39
F0.88384835500801273
sg34
g752
(S'\x07\xdf\n\x11\x13#\x1a\x01L\x08'
tRp7837
sa(dp7838
S'trial_loop.thisTrialN'
p7839
I104
sg6370
g6767
sS'block_loop.thisIndex'
p7840
g6364
sg38
S'left'
p7841
sg58
g62
sS'trial_loop.thisN'
p7842
I104
sg33
g6771
sg63
g64
sS'trial_loop.thisIndex'
p7843
g59
(g98
S'h\x00\x00\x00'
tRp7844
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7845
I0
sg6379
g6775
sS'block_loop.thisRepN'
p7846
I2
sg6382
g6771
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7847
I2
sg6384
g6778
sg55
g11
sS'block_loop.thisTrial'
p7848
Nsg69
Vn
sS'block_loop.thisTrialN'
p7849
I0
sg39
F0.80020110691475566
sg34
g752
(S'\x07\xdf\n\x11\x13#\x1f\x0f:p'
tRp7850
sa(dp7851
S'trial_loop.thisTrialN'
p7852
I105
sg6370
g6737
sS'block_loop.thisIndex'
p7853
g6364
sg38
S'left'
p7854
sg58
g62
sS'trial_loop.thisN'
p7855
I105
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p7856
g59
(g98
S'i\x00\x00\x00'
tRp7857
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7858
I0
sg6379
g6745
sS'block_loop.thisRepN'
p7859
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7860
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p7861
Nsg69
Vn
sS'block_loop.thisTrialN'
p7862
I0
sg39
F0.89992037260890356
sg34
g752
(S'\x07\xdf\n\x11\x13#%\x0c\xb2\x00'
tRp7863
sa(dp7864
S'trial_loop.thisTrialN'
p7865
I106
sg6370
g6911
sS'block_loop.thisIndex'
p7866
g6364
sg38
S'right'
p7867
sg58
g62
sS'trial_loop.thisN'
p7868
I106
sg33
g6915
sg63
g64
sS'trial_loop.thisIndex'
p7869
g59
(g98
S'j\x00\x00\x00'
tRp7870
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7871
I0
sg6379
g6919
sS'block_loop.thisRepN'
p7872
I2
sg6382
g6915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7873
I2
sg6384
g6922
sg55
g11
sS'block_loop.thisTrial'
p7874
Nsg69
Vn
sS'block_loop.thisTrialN'
p7875
I0
sg39
F0.63349790040774678
sg34
g752
(S'\x07\xdf\n\x11\x13#+\x0b\x98\xc0'
tRp7876
sa(dp7877
S'trial_loop.thisTrialN'
p7878
I107
sg6370
g6538
sS'block_loop.thisIndex'
p7879
g6364
sg38
S'right'
p7880
sg58
g62
sS'trial_loop.thisN'
p7881
I107
sg33
g6549
sg63
g64
sS'trial_loop.thisIndex'
p7882
g59
(g98
S'k\x00\x00\x00'
tRp7883
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7884
I0
sg6379
g6546
sS'block_loop.thisRepN'
p7885
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7886
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p7887
Nsg69
Vn
sS'block_loop.thisTrialN'
p7888
I0
sg39
F2.8334048449833062
sg34
g752
(S'\x07\xdf\n\x11\x13#1\x06\xae\xf0'
tRp7889
sa(dp7890
S'trial_loop.thisTrialN'
p7891
I108
sg6370
g6960
sS'block_loop.thisIndex'
p7892
g6364
sg38
S'left'
p7893
sg58
g62
sS'trial_loop.thisN'
p7894
I108
sg33
g6847
sg63
g64
sS'trial_loop.thisIndex'
p7895
g59
(g98
S'l\x00\x00\x00'
tRp7896
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7897
I0
sg6379
g6967
sS'block_loop.thisRepN'
p7898
I2
sg6382
g6840
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7899
I2
sg6384
g6847
sg55
g11
sS'block_loop.thisTrial'
p7900
Nsg69
Vn
sS'block_loop.thisTrialN'
p7901
I0
sg39
F1.0005294237889757
sg34
g752
(S'\x07\xdf\n\x11\x13#9\x04\x97\xc8'
tRp7902
sa(dp7903
S'trial_loop.thisTrialN'
p7904
I109
sg6370
g6911
sS'block_loop.thisIndex'
p7905
g6364
sg38
S'right'
p7906
sg58
g62
sS'trial_loop.thisN'
p7907
I109
sg33
g6915
sg63
g64
sS'trial_loop.thisIndex'
p7908
g59
(g98
S'm\x00\x00\x00'
tRp7909
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7910
I0
sg6379
g6919
sS'block_loop.thisRepN'
p7911
I2
sg6382
g6915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7912
I2
sg6384
g6922
sg55
g11
sS'block_loop.thisTrial'
p7913
Nsg69
Vn
sS'block_loop.thisTrialN'
p7914
I0
sg39
F0.88347801494273881
sg34
g752
(S'\x07\xdf\n\x11\x13$\x03\x05(P'
tRp7915
sa(dp7916
S'trial_loop.thisTrialN'
p7917
I110
sg6370
g6538
sS'block_loop.thisIndex'
p7918
g6364
sg38
S'right'
p7919
sg58
g62
sS'trial_loop.thisN'
p7920
I110
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p7921
g59
(g98
S'n\x00\x00\x00'
tRp7922
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7923
I0
sg6379
g6546
sS'block_loop.thisRepN'
p7924
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7925
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p7926
Nsg69
Vn
sS'block_loop.thisTrialN'
p7927
I0
sg39
F0.60018383007991361
sg34
g752
(S'\x07\xdf\n\x11\x13$\t\x03\xd0\x90'
tRp7928
sa(dp7929
S'trial_loop.thisTrialN'
p7930
I111
sg6370
g7602
sS'block_loop.thisIndex'
p7931
g6364
sg38
S'left'
p7932
sg58
g62
sS'trial_loop.thisN'
p7933
I111
sg33
g6922
sg63
g64
sS'trial_loop.thisIndex'
p7934
g59
(g98
S'o\x00\x00\x00'
tRp7935
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7936
I0
sg6379
g7609
sS'block_loop.thisRepN'
p7937
I2
sg6382
g6915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7938
I2
sg6384
g6922
sg55
g11
sS'block_loop.thisTrial'
p7939
Nsg69
Vn
sS'block_loop.thisTrialN'
p7940
I0
sg39
F1.5001509584799351
sg34
g752
(S'\x07\xdf\n\x11\x13$\x0e\ruP'
tRp7941
sa(dp7942
S'trial_loop.thisTrialN'
p7943
I112
sg6370
g6438
sS'block_loop.thisIndex'
p7944
g6364
sg38
S'left'
p7945
sg58
g62
sS'trial_loop.thisN'
p7946
I112
sg33
g6442
sg63
g64
sS'trial_loop.thisIndex'
p7947
g59
(g98
S'p\x00\x00\x00'
tRp7948
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7949
I0
sg6379
g6446
sS'block_loop.thisRepN'
p7950
I2
sg6382
g6442
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7951
I2
sg6384
g6449
sg55
g11
sS'block_loop.thisTrial'
p7952
Nsg69
Vn
sS'block_loop.thisTrialN'
p7953
I0
sg39
F0.85024263118793897
sg34
g752
(S'\x07\xdf\n\x11\x13$\x15\x06`\xd0'
tRp7954
sa(dp7955
S'trial_loop.thisTrialN'
p7956
I113
sg6370
g6988
sS'block_loop.thisIndex'
p7957
g6364
sg38
S'left'
p7958
sg58
g62
sS'trial_loop.thisN'
p7959
I113
sg33
g6932
sg63
g64
sS'trial_loop.thisIndex'
p7960
g59
(g98
S'q\x00\x00\x00'
tRp7961
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7962
I0
sg6379
g6995
sS'block_loop.thisRepN'
p7963
I2
sg6382
g6932
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7964
I2
sg6384
g6939
sg55
g11
sS'block_loop.thisTrial'
p7965
Nsg69
Vn
sS'block_loop.thisTrialN'
p7966
I0
sg39
F0.58353876896035217
sg34
g752
(S'\x07\xdf\n\x11\x13$\x1b\x04\x93\xe0'
tRp7967
sa(dp7968
S'trial_loop.thisTrialN'
p7969
I114
sg6370
g6960
sS'block_loop.thisIndex'
p7970
g6364
sg38
S'right'
p7971
sg58
g62
sS'trial_loop.thisN'
p7972
I114
sg33
g6840
sg63
g64
sS'trial_loop.thisIndex'
p7973
g59
(g98
S'r\x00\x00\x00'
tRp7974
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7975
I0
sg6379
g6967
sS'block_loop.thisRepN'
p7976
I2
sg6382
g6840
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7977
I2
sg6384
g6847
sg55
g11
sS'block_loop.thisTrial'
p7978
Nsg69
Vn
sS'block_loop.thisTrialN'
p7979
I0
sg39
F1.967191120278585
sg34
g752
(S'\x07\xdf\n\x11\x13$ \r\xfa '
tRp7980
sa(dp7981
S'trial_loop.thisTrialN'
p7982
I115
sg6370
g6570
sS'block_loop.thisIndex'
p7983
g6364
sg38
S'left'
p7984
sg58
g62
sS'trial_loop.thisN'
p7985
I115
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7986
g59
(g98
S's\x00\x00\x00'
tRp7987
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7988
I0
sg6379
g6578
sS'block_loop.thisRepN'
p7989
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7990
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p7991
Nsg69
Vn
sS'block_loop.thisTrialN'
p7992
I0
sg39
F1.3835251983764465
sg34
g752
(S"\x07\xdf\n\x11\x13$'\x0e\t\xc0"
tRp7993
sa(dp7994
S'trial_loop.thisTrialN'
p7995
I116
sg6370
g7189
sS'block_loop.thisIndex'
p7996
g6364
sg38
S'right'
p7997
sg58
g62
sS'trial_loop.thisN'
p7998
I116
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p7999
g59
(g98
S't\x00\x00\x00'
tRp8000
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8001
I0
sg6379
g7196
sS'block_loop.thisRepN'
p8002
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8003
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p8004
Nsg69
Vn
sS'block_loop.thisTrialN'
p8005
I0
sg39
F0.81659927465807414
sg34
g752
(S'\x07\xdf\n\x11\x13$.\x05\x10\xe0'
tRp8006
sa(dp8007
S'trial_loop.thisTrialN'
p8008
I117
sg6370
g6472
sS'block_loop.thisIndex'
p8009
g6364
sg38
S'right'
p8010
sg58
g62
sS'trial_loop.thisN'
p8011
I117
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8012
g59
(g98
S'u\x00\x00\x00'
tRp8013
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8014
I0
sg6379
g6480
sS'block_loop.thisRepN'
p8015
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8016
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8017
Nsg69
Vn
sS'block_loop.thisTrialN'
p8018
I0
sg39
F0.76683714473801956
sg34
g752
(S'\x07\xdf\n\x11\x13$4\x02\xc6\xf0'
tRp8019
sa(dp8020
S'trial_loop.thisTrialN'
p8021
I118
sg6370
g7392
sS'block_loop.thisIndex'
p8022
g6364
sg38
S'left'
p8023
sg58
g62
sS'trial_loop.thisN'
p8024
I118
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p8025
g59
(g98
S'v\x00\x00\x00'
tRp8026
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8027
I0
sg6379
g7399
sS'block_loop.thisRepN'
p8028
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8029
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p8030
Nsg69
Vn
sS'block_loop.thisTrialN'
p8031
I0
sg39
F0.83352373013076431
sg34
g752
(S'\x07\xdf\n\x11\x13$9\x0f\x07\xa8'
tRp8032
sa(dp8033
S'trial_loop.thisTrialN'
p8034
I119
sg6370
g6555
sS'block_loop.thisIndex'
p8035
g6364
sg38
S'right'
p8036
sg58
g62
sS'trial_loop.thisN'
p8037
I119
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p8038
g59
(g98
S'w\x00\x00\x00'
tRp8039
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8040
I0
sg6379
g6562
sS'block_loop.thisRepN'
p8041
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8042
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8043
Nsg69
Vn
sS'block_loop.thisTrialN'
p8044
I0
sg39
F0.98350062307872577
sg34
g752
(S'\x07\xdf\n\x11\x13%\x03\x0c\xfc8'
tRp8045
sa(dp8046
S'trial_loop.thisTrialN'
p8047
I120
sg6370
g7217
sS'block_loop.thisIndex'
p8048
g6364
sg38
S'left'
p8049
sg58
g62
sS'trial_loop.thisN'
p8050
I120
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8051
g59
(g98
S'x\x00\x00\x00'
tRp8052
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8053
I0
sg6379
g7224
sS'block_loop.thisRepN'
p8054
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8055
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8056
Nsg69
Vn
sS'block_loop.thisTrialN'
p8057
I0
sg39
F0.73348401622024539
sg34
g752
(S'\x07\xdf\n\x11\x13%\t\rN@'
tRp8058
sa(dp8059
S'trial_loop.thisTrialN'
p8060
I121
sg6370
g7016
sS'block_loop.thisIndex'
p8061
g6364
sg38
S'left'
p8062
sg58
g62
sS'trial_loop.thisN'
p8063
I121
sg33
g6890
sg63
g64
sS'trial_loop.thisIndex'
p8064
g59
(g98
S'y\x00\x00\x00'
tRp8065
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8066
I0
sg6379
g7023
sS'block_loop.thisRepN'
p8067
I2
sg6382
g6883
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8068
I2
sg6384
g6890
sg55
g11
sS'block_loop.thisTrial'
p8069
Nsg69
Vn
sS'block_loop.thisTrialN'
p8070
I0
sg39
F0.68390634359093383
sg34
g752
(S'\x07\xdf\n\x11\x13%\x0f\t\x99\x08'
tRp8071
sa(dp8072
S'trial_loop.thisTrialN'
p8073
I122
sg6370
g6988
sS'block_loop.thisIndex'
p8074
g6364
sg38
S'left'
p8075
sg58
g62
sS'trial_loop.thisN'
p8076
I122
sg33
g6932
sg63
g64
sS'trial_loop.thisIndex'
p8077
g59
(g98
S'z\x00\x00\x00'
tRp8078
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8079
I0
sg6379
g6995
sS'block_loop.thisRepN'
p8080
I2
sg6382
g6932
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8081
I2
sg6384
g6939
sg55
g11
sS'block_loop.thisTrial'
p8082
Nsg69
Vn
sS'block_loop.thisTrialN'
p8083
I0
sg39
F2.0667259286783519
sg34
g752
(S'\x07\xdf\n\x11\x13%\x15\x05f\xd0'
tRp8084
sa(dp8085
S'trial_loop.thisTrialN'
p8086
I123
sg6370
g6408
sS'block_loop.thisIndex'
p8087
g6364
sg38
S'right'
p8088
sg58
g62
sS'trial_loop.thisN'
p8089
I123
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8090
g59
(g98
S'{\x00\x00\x00'
tRp8091
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8092
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8093
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8094
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8095
Nsg69
Vn
sS'block_loop.thisTrialN'
p8096
I0
sg39
F1.0667558637887851
sg34
g752
(S'\x07\xdf\n\x11\x13%\x1c\x06\xe5\xa0'
tRp8097
sa(dp8098
S'trial_loop.thisTrialN'
p8099
I124
sg6370
g6371
sS'block_loop.thisIndex'
p8100
g6364
sg38
S'left'
p8101
sg58
g62
sS'trial_loop.thisN'
p8102
I124
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8103
g59
(g98
S'|\x00\x00\x00'
tRp8104
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8105
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8106
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8107
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8108
Nsg69
Vn
sS'block_loop.thisTrialN'
p8109
I0
sg39
F0.71679077382759715
sg34
g752
(S'\x07\xdf\n\x11\x13%"\x08hX'
tRp8110
sa(dp8111
S'trial_loop.thisTrialN'
p8112
I125
sg6370
g6615
sS'block_loop.thisIndex'
p8113
g6364
sg38
S'left'
p8114
sg58
g62
sS'trial_loop.thisN'
p8115
I125
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8116
g59
(g98
S'}\x00\x00\x00'
tRp8117
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8118
I0
sg6379
g6622
sS'block_loop.thisRepN'
p8119
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8120
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8121
Nsg69
Vn
sS'block_loop.thisTrialN'
p8122
I0
sg39
F0.68349666024005273
sg34
g752
(S'\x07\xdf\n\x11\x13%(\x04t\xa0'
tRp8123
sa(dp8124
S'trial_loop.thisTrialN'
p8125
I126
sg6370
S'43-mrporky_pork_crackles_redo.png'
p8126
sS'block_loop.thisIndex'
p8127
g6364
sg38
S'right'
p8128
sg58
g62
sS'trial_loop.thisN'
p8129
I126
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8130
g59
(g98
S'~\x00\x00\x00'
tRp8131
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8132
I0
sg6379
S'18-mms.png'
p8133
sS'block_loop.thisRepN'
p8134
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8135
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8136
Nsg69
Vn
sS'block_loop.thisTrialN'
p8137
I0
sg39
F0.85011177199521626
sg34
g752
(S'\x07\xdf\n\x11\x13%.\x00Bh'
tRp8138
sa(dp8139
S'trial_loop.thisTrialN'
p8140
I127
sg6370
g7392
sS'block_loop.thisIndex'
p8141
g6364
sg38
S'left'
p8142
sg58
g62
sS'trial_loop.thisN'
p8143
I127
sg33
g6466
sg63
g64
sS'trial_loop.thisIndex'
p8144
g59
(g98
S'\x7f\x00\x00\x00'
tRp8145
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8146
I0
sg6379
g7399
sS'block_loop.thisRepN'
p8147
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8148
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p8149
Nsg69
Vn
sS'block_loop.thisTrialN'
p8150
I0
sg39
F0.8500915301610803
sg34
g752
(S'\x07\xdf\n\x11\x13%3\r\xb7\xb8'
tRp8151
sa(dp8152
S'trial_loop.thisTrialN'
p8153
I128
sg6370
g6521
sS'block_loop.thisIndex'
p8154
g6364
sg38
S'right'
p8155
sg58
g62
sS'trial_loop.thisN'
p8156
I128
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p8157
g59
(g98
S'\x80\x00\x00\x00'
tRp8158
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8159
I0
sg6379
g6529
sS'block_loop.thisRepN'
p8160
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8161
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8162
Nsg69
Vn
sS'block_loop.thisTrialN'
p8163
I0
sg39
F0.98350204855887569
sg34
g752
(S'\x07\xdf\n\x11\x13%9\x0b\xe6\xe0'
tRp8164
sa(dp8165
S'trial_loop.thisTrialN'
p8166
I129
sg6370
g6504
sS'block_loop.thisIndex'
p8167
g6364
sg38
S'left'
p8168
sg58
g62
sS'trial_loop.thisN'
p8169
I129
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8170
g59
(g98
S'\x81\x00\x00\x00'
tRp8171
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8172
I0
sg6379
g6512
sS'block_loop.thisRepN'
p8173
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8174
I2
sg6384
g6508
sg55
g11
sS'block_loop.thisTrial'
p8175
Nsg69
Vn
sS'block_loop.thisTrialN'
p8176
I0
sg39
F1.0668804508622998
sg34
g752
(S'\x07\xdf\n\x11\x13&\x03\x0c8\xe8'
tRp8177
sa(dp8178
S'trial_loop.thisTrialN'
p8179
I130
sg6370
S'29-beans.png'
p8180
sS'block_loop.thisIndex'
p8181
g6364
sg38
S'right'
p8182
sg58
g62
sS'trial_loop.thisN'
p8183
I130
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p8184
g59
(g98
S'\x82\x00\x00\x00'
tRp8185
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8186
I0
sg6379
S'46-pistachios.png'
p8187
sS'block_loop.thisRepN'
p8188
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8189
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8190
Nsg69
Vn
sS'block_loop.thisTrialN'
p8191
I0
sg39
F0.65024502599590051
sg34
g752
(S'\x07\xdf\n\x11\x13&\t\r\xbf\x88'
tRp8192
sa(dp8193
S'trial_loop.thisTrialN'
p8194
I131
sg6370
g6570
sS'block_loop.thisIndex'
p8195
g6364
sg38
S'left'
p8196
sg58
g62
sS'trial_loop.thisN'
p8197
I131
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p8198
g59
(g98
S'\x83\x00\x00\x00'
tRp8199
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8200
I0
sg6379
g6578
sS'block_loop.thisRepN'
p8201
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8202
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p8203
Nsg69
Vn
sS'block_loop.thisTrialN'
p8204
I0
sg39
F1.0834975725465483
sg34
g752
(S'\x07\xdf\n\x11\x13&\x0f\x08\xd5\xb8'
tRp8205
sa(dp8206
S'trial_loop.thisTrialN'
p8207
I132
sg6370
S'36-fig_rolls.png'
p8208
sS'block_loop.thisIndex'
p8209
g6364
sg38
S'left'
p8210
sg58
g62
sS'trial_loop.thisN'
p8211
I132
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p8212
g59
(g98
S'\x84\x00\x00\x00'
tRp8213
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8214
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p8215
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vn
sS'block_loop.thisTrialN'
p8219
I0
sg39
F0.900185227052134
sg34
g752
(S'\x07\xdf\n\x11\x13&\x15\n\x9a\xd8'
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g7189
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'right'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g7196
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vn
sS'block_loop.thisTrialN'
p8232
I0
sg39
F0.76660564655867347
sg34
g752
(S'\x07\xdf\n\x11\x13&\x1b\t\xbc0'
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g6928
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'right'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6939
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g6936
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6932
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6384
g6939
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vn
sS'block_loop.thisTrialN'
p8245
I0
sg39
F0.85010264891388942
sg34
g752
(S'\x07\xdf\n\x11\x13&!\x06\x80\x10'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g8180
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'right'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g8187
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vn
sS'block_loop.thisTrialN'
p8258
I0
sg39
F1.1668297892538249
sg34
g752
(S"\x07\xdf\n\x11\x13&'\x04\xaf8"
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g6521
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'right'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g6532
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g6529
sS'block_loop.thisRepN'
p8268
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vn
sS'block_loop.thisTrialN'
p8271
I0
sg39
F1.1335148636371741
sg34
g752
(S'\x07\xdf\n\x11\x13&-\x07\xdf\xa0'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g7392
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'left'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g6466
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g7399
sS'block_loop.thisRepN'
p8281
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vn
sS'block_loop.thisTrialN'
p8284
I0
sg39
F0.9668609787877358
sg34
g752
(S'\x07\xdf\n\x11\x13&3\nXp'
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g6686
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'left'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6690
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g6694
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6690
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6384
g6697
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vn
sS'block_loop.thisTrialN'
p8297
I0
sg39
F1.5835632872385759
sg34
g752
(S'\x07\xdf\n\x11\x13&9\no\xe0'
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g8208
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'left'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g8215
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vn
sS'block_loop.thisTrialN'
p8310
I0
sg39
F1.050189489240438
sg34
g752
(S"\x07\xdf\n\x11\x13'\x04\x04\x8c\x10"
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g7602
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'left'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6915
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g7609
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6384
g6922
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vn
sS'block_loop.thisTrialN'
p8323
I0
sg39
F0.81727922928257613
sg34
g752
(S"\x07\xdf\n\x11\x13'\n\x05\xd40"
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g8126
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'right'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g8133
sS'block_loop.thisRepN'
p8333
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vn
sS'block_loop.thisTrialN'
p8336
I0
sg39
F0.65013754469873675
sg34
g752
(S"\x07\xdf\n\x11\x13'\x10\x03\x8a@"
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g6686
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'left'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6690
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g6694
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6690
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6384
g6697
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vn
sS'block_loop.thisTrialN'
p8349
I0
sg39
F1.1833619522476511
sg34
g752
(S"\x07\xdf\n\x11\x13'\x15\r\xe6\x98"
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g7695
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'right'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6714
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g7702
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6707
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6384
g6714
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vn
sS'block_loop.thisTrialN'
p8362
I0
sg39
F1.3667475674865273
sg34
g752
(S"\x07\xdf\n\x11\x13'\x1c\x02\x0fX"
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g6643
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'left'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g6654
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g6651
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vn
sS'block_loop.thisTrialN'
p8375
I0
sg39
F0.65019256828236394
sg34
g752
(S'\x07\xdf\n\x11\x13\'"\x08\x1a8'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g7016
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'left'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6883
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g7023
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6883
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6890
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vn
sS'block_loop.thisTrialN'
p8388
I0
sg39
F0.666879253458319
sg34
g752
(S"\x07\xdf\n\x11\x13'(\x034P"
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g8180
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'right'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g8187
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vn
sS'block_loop.thisTrialN'
p8401
I0
sg39
F0.71698007775739825
sg34
g752
(S"\x07\xdf\n\x11\x13'-\x0e\x05\xd8"
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g8208
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'right'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g8215
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vn
sS'block_loop.thisTrialN'
p8414
I0
sg39
F1.3000900619135791
sg34
g752
(S"\x07\xdf\n\x11\x13'3\n\x12 "
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g8180
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'right'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g8187
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F1.2335192256086884
sg34
g752
(S"\x07\xdf\n\x11\x13'9\x0f*\xd0"
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g6703
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'left'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6707
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g6711
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6707
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6714
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F1.6834176885713532
sg34
g752
(S'\x07\xdf\n\x11\x13(\x04\x04\x0b('
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6767
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'left'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6771
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6775
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6771
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6778
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F1.0335082208930544
sg34
g752
(S'\x07\xdf\n\x11\x13(\n\x0e\xd8\xc8'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g6504
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'left'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6508
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g6512
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g6508
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.73358950184228888
sg34
g752
(S'\x07\xdf\n\x11\x13(\x11\x00\xa0('
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g6911
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'right'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6915
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g6919
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6922
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F0.683534578043691
sg34
g752
(S'\x07\xdf\n\x11\x13(\x16\x0cg\xc8'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g6737
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'left'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g6745
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F1.316532704677229
sg34
g752
(S'\x07\xdf\n\x11\x13(\x1c\x07\xfa\xf8'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6836
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'left'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6840
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6844
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6840
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6847
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F1.1502055401615507
sg34
g752
(S'\x07\xdf\n\x11\x13("\rN@'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g6896
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'right'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6508
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g6903
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6508
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.90018380157016509
sg34
g752
(S'\x07\xdf\n\x11\x13()\x00\xfd\xe8'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g7349
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'right'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6690
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g7356
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6690
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g6697
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.86725461121932312
sg34
g752
(S'\x07\xdf\n\x11\x13(.\x0f&\xe8'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g8126
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'right'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g8133
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.68348867754320963
sg34
g752
(S'\x07\xdf\n\x11\x13(4\r\x94\x90'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g6896
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'right'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g6903
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g6508
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F0.53344735283826594
sg34
g752
(S'\x07\xdf\n\x11\x13(:\tbX'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g7122
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'right'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6771
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g7129
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6771
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6778
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F0.98347581970119791
sg34
g752
(S'\x07\xdf\n\x11\x13)\x04\x02\xd2\xa8'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6587
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'right'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6449
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6594
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6442
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6449
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.7834497048825142
sg34
g752
(S'\x07\xdf\n\x11\x13)\n\x02\xea\x18'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g6879
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'right'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6890
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g6887
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6883
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g6890
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.70023580313136335
sg34
g752
(S'\x07\xdf\n\x11\x13)\x10\x00#('
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g6438
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'left'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6442
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g6446
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6442
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g6449
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F1.1002583827576018
sg34
g752
(S'\x07\xdf\n\x11\x13)\x15\x0bq\xb0'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g6960
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'left'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6840
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g6967
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6840
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g6847
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F1.450122263539015
sg34
g752
(S'\x07\xdf\n\x11\x13)\x1b\rqh'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g7122
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'right'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6771
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g7129
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6771
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g6778
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F2.4000482382889459
sg34
g752
(S'\x07\xdf\n\x11\x13)"\x05j\xb8'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g7364
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'left'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g7371
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F1.7168306873081747
sg34
g752
(S'\x07\xdf\n\x11\x13))\x0c%`'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6879
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'right'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6883
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6887
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6883
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6890
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F0.75018894755885412
sg34
g752
(S'\x07\xdf\n\x11\x13)0\x08hX'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g7695
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'right'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6714
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g7702
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6707
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6714
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F2.0835431879513635
sg34
g752
(S'\x07\xdf\n\x11\x13)6\x04\xed\xb8'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g6720
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'right'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g6728
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F1.8000303342450934
sg34
g752
(S'\x07\xdf\n\x11\x13*\x01\x06\xe5\xa0'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g7695
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'right'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6707
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g7702
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6707
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g6714
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F1.2001777860386937
sg34
g752
(S'\x07\xdf\n\x11\x13*\x08\x04YH'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g8126
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'right'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g8133
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.81682478581387841
sg34
g752
(S'\x07\xdf\n\x11\x13*\x0e\x07\xc4H'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g8208
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'left'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6549
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g8215
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F0.93342289157772029
sg34
g752
(S'\x07\xdf\n\x11\x13*\x14\x05~@'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g6408
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'left'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F2.3839685230905161
sg34
g752
(S'\x07\xdf\n\x11\x13*\x1a\x05\x18\xb0'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g7349
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'right'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6690
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g7356
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6690
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g6697
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F1.0668630599902826
sg34
g752
(S'\x07\xdf\n\x11\x13*!\x0bZ@'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g7695
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'right'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6707
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g7702
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6707
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6714
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F2.100158599059796
sg34
g752
(S"\x07\xdf\n\x11\x13*'\x0c\xe0\xe0"
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g8208
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'left'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g8215
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F0.85009010467911139
sg34
g752
(S'\x07\xdf\n\x11\x13*.\x0e\xd8\xc8'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g6570
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'right'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g6578
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F1.9000717587332474
sg34
g752
(S'\x07\xdf\n\x11\x13*4\r\x07\xf0'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g6472
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g6480
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F0.65055863190355012
sg34
g752
(S'\x07\xdf\n\x11\x13*;\x0c%`'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6555
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'right'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6562
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.88350452889790176
sg34
g752
(S'\x07\xdf\n\x11\x13+\x05\x07?x'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g6945
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'left'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g6952
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F1.4167500335697696
sg34
g752
(S'\x07\xdf\n\x11\x13+\x0b\x06&8'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g7392
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'left'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g7399
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F1.3168283495178912
sg34
g752
(S'\x07\xdf\n\x11\x13+\x11\x0c\xe8\xb0'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g8180
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'right'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6654
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g8187
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F0.71681814307157765
sg34
g752
(S'\x07\xdf\n\x11\x13+\x18\x02\xf9\xb8'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g7602
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'left'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6915
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g7609
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6922
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.81686127813736675
sg34
g752
(S'\x07\xdf\n\x11\x13+\x1d\x0e\x82\xd8'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g6945
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'left'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g6952
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F0.63334508880325302
sg34
g752
(S'\x07\xdf\n\x11\x13+#\x0c8\xe8'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g6928
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'right'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6932
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g6936
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6932
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g6939
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F0.78351242606368032
sg34
g752
(S'\x07\xdf\n\x11\x13+)\x07\x14\x80'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g8126
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'right'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g8133
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F0.71687829838447215
sg34
g752
(S'\x07\xdf\n\x11\x13+/\x04Qx'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6720
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'right'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6728
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F0.63336247967527015
sg34
g752
(S'\x07\xdf\n\x11\x13+5\x00]\xc0'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g7364
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'left'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g7371
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6574
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6581
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F1.9834704028726264
sg34
g752
(S'\x07\xdf\n\x11\x13+:\n\xb60'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g7217
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'left'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g7224
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.71680844979709946
sg34
g752
(S'\x07\xdf\n\x11\x13,\x05\n\xc5\xd0'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g6615
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'left'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g6622
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.83356193303188775
sg34
g752
(S'\x07\xdf\n\x11\x13,\x0b\x07\x10\x98'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g6836
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'right'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6840
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g6844
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6840
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g6847
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F1.6000840463821078
sg34
g752
(S'\x07\xdf\n\x11\x13,\x11\x05\x05('
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g6643
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'left'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g6651
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F0.66675523657613667
sg34
g752
(S'\x07\xdf\n\x11\x13,\x17\x0e\xa2\x18'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g6489
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'left'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g6496
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F0.96688293120132585
sg34
g752
(S'\x07\xdf\n\x11\x13,\x1d\n1`'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g6836
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'right'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6840
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g6844
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6840
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g6847
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F1.9670633971436473
sg34
g752
(S'\x07\xdf\n\x11\x13,#\n\x0e8'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6472
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'right'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6480
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F1.0334765752068051
sg34
g752
(S'\x07\xdf\n\x11\x13,*\n\x1d\xd8'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g6555
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'left'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6532
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g6562
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F1.0501837873162003
sg34
g752
(S"\x07\xdf\n\x11\x13,0\x0b'x"
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g6720
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'right'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6730
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g6728
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6730
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g6724
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F0.73342671186765074
sg34
g752
(S'\x07\xdf\n\x11\x13,6\x0co\x98'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6455
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'right'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6463
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F1.0334817069397104
sg34
g752
(S'\x07\xdf\n\x11\x13-\x00\x08\xba`'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g6472
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'right'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g6480
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.76683857021998847
sg34
g752
(S'\x07\xdf\n\x11\x13-\x06\t\xc4\x00'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g7602
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'right'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6915
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g7609
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g6922
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.65011929853790207
sg34
g752
(S'\x07\xdf\n\x11\x13-\x0c\x06\xc2x'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I116
sg56
Vr
sg57
Vn
sg42
I484
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I116
sg55
g11
sg56
Vr
sg45
F1.72
sg42
I484
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I00
sg48
I25
sg47
g606
sg51
F29.84
sg46
F1.6600000000000004
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I81482576
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'=\n7@\xb8\x1e%@\n\xd7\xa3<\xaeG\xe1?ff\x06@\x9a\x99\x99?333@\xf6(\\?\xc3\xf5\x08@ff\xe6?\xf6(\xdc?\n\xd7\xe3?H\xe1\xfa?\x85\xeb\x11@\x14\xae\xc7?333?\x00\x00 @\xaeG\xe1?)\\\x0f@H\xe1\xfa?\x9a\x99\x99?\x00\x00\x00@\xcd\xcc\xcc?\xb8\x1e%@\x00\x00\x00\x00\xb8\x1e\x05?\xe1z\xd4?\xc3\xf5\xe8?ff\xa6?333@\x00\x00@@\x1f\x85\xeb?\x14\xaeG?\n\xd7\xe3?\x00\x00\x00\x00\x00\x00@@\xf6(\xdc?\xcd\xcc\x8c?33\xb3?\xcd\xcc\xcc?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'\xdd$\x92@\x87\x16Q@\xbaId@!\xb0\xa2@\x87\x16Q@\xfc\xa9)@;\xdf\rA\x0e-B@u\x93\x08@D\x8b\x88@\xfc\xa9y@\xdb\xf9\x1e@\x0e-\x12@\x7fjZA\x0e-\x82@\xaa\xf1\xc6@B`%@\x0e-\x12@\xcb\xa1\x91@\xee|\x8f@\xee|\x97@\x10X\xcd@\x96C\x03@!\xb0j@\x96CS@\xa2EpA\xee|\x07@\xee|\x8f@\x83\xc0\xea?\xfc\xa99@\xd5x\x03A\xc9v&@\xa8\xc6\x0b@\xa8\xc6k@\xee|\x87@\xcb\xa1\xc9@b\x10`@D\x8bLA\xdb\xf9^@\xdb\xf9N@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xd0A\x00\x00\xc8A\x00\x00\xc0@\x00\x00@A\x00\x00pA\x00\x00`A\x00\x00\x90A\x00\x00\x98A\x00\x00\x18B\x00\x00\x0cB\x00\x00\xb8A\x00\x00\x88A\x00\x00\x14B\x00\x00\x00\x00\x00\x00\xa0@\x00\x000A\x00\x00\x1cB\x00\x00\xc0A\x00\x00\x00B\x00\x00\xd8A\x00\x00\xb0A\x00\x00\x80A\x00\x00\xf0A\x00\x00\xe0@\x00\x00\x00A\x00\x00@@\x00\x00\x04B\x00\x00\xa8A\x00\x00\x10B\x00\x00\xa0A\x00\x00\x10A\x00\x00\xe0A\x00\x00\xe8A\x00\x00PA\x00\x00\x00@\x00\x00\x80@\x00\x00 A\x00\x00\x80?\x00\x00\xf8A\x00\x00\x08B'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\xcd\xcc\xcc?\x9a\x99\x99?\xcd\xcc\x8c?ff\xa6?33\xf3?\xcd\xcc\xcc?\x9a\x99\x99?33\xb3?33\xb3?ff\xe6?ff\xa6?33\xb3?ff\xa6?\x00\x00\x00@\x9a\x99\x99?\x9a\x99\xd9?33\xb3?\xcd\xcc\x8c?33\xf3?\xcd\xcc\xcc?\x9a\x99\xd9?\x9a\x99\xd9?\xcd\xcc\xcc?\x00\x00\x00@\x9a\x99\xd9?\x9a\x99\x99?ff\xa6?\x9a\x99\x99?ff\xa6?ff\xe6?33\xf3?33\xb3?\x00\x00\xc0?ff\xa6?ff\xe6?\x9a\x99\xd9?\x9a\x99\x99?\xcd\xcc\x8c?33\xb3?\x9a\x99\x99?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\r\x00\x00\x00%\x00\x00\x00"\x00\x00\x00\x19\x00\x00\x00#\x00\x00\x00\x0e\x00\x00\x00\x02\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x1e\x00\x00\x00$\x00\x00\x00\x0f\x00\x00\x00\x03\x00\x00\x00!\x00\x00\x00\x05\x00\x00\x00\x04\x00\x00\x00\x15\x00\x00\x00\x0b\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x1d\x00\x00\x00\x1b\x00\x00\x00\x14\x00\x00\x00\n\x00\x00\x00\x11\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00\x16\x00\x00\x00&\x00\x00\x00\x12\x00\x00\x00\x1a\x00\x00\x00\'\x00\x00\x00\t\x00\x00\x00\x1c\x00\x00\x00\x0c\x00\x00\x00\x08\x00\x00\x00\x10\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g284
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g277
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g144
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g186
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g207
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g200
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g228
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g235
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g368
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g347
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g263
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g221
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g361
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g102
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g137
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g179
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g375
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g270
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g326
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g291
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g256
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g214
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g312
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g151
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g158
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g123
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g333
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g249
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g354
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g242
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g165
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g298
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g305
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g193
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g116
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g130
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g172
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g109
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g319
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g340
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I81482576
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\xcd\xcc\xbc@\x00\x00\xc0@\x00\x00\xc0@ff\x86@33\xa3@\x00\x00\xb0@\x00\x00\xc0@ffF@33s@33\xb3@\x9a\x99\xb9@\x00\x00\xb0@\x00\x00\xc0@\x9a\x99\xb9@\x00\x00`@\x00\x00@@\x00\x00\x80@\x00\x00\xc0@\x9a\x99\xb9@\x00\x00\xc0@\x00\x00\xc0@33\xb3@\x00\x00\xc0@\x00\x00\xb0@\xcd\xcc\xbc@ff\x96@33\xb3@ff\x96@\x9a\x99\xa9@\x00\x00\xb0@\x00\x00\x90@\x00\x00\xc0@\x00\x00\xc0@33\xb3@\x9a\x99\x99@33\x83@\xcd\xcc\x9c@ff\xa6@ff\x96@\x9a\x99\xa9@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'\xb2UU@\xb0F\x04@Ry\'@GC\x08A\x0bU%@\xdd\xcc\x0c@\xd1\x88\xc8?\x1a\xc9\\@B\xa8j@M\xae\xea?T\xac\xea?[\x99\xe8?+|\xf7?sk\xe6?+\xab\x8a@k\xec^@\x1c\xbc;@&(\xe2?y\x01P@\xf6\x8e\xa8?G\xe2\xbd?\xe7n\xc6?\x9c\x05\xa0?\xbc\xcf<@;\xf5\xce?&\xbc\xa3@\xc6\xd4\x8c?\xa5|\xf7?\xb8\xab\xca?d\x14\x91?M\x99\xa1@\xa9#\xa2?\xb3\xcd\x8c?Z\xdf\x9d?"3\x83@\xa9\xf2\xae?<\xe0\xbd?\xcf\x89\xc8?\xa2E\x84?}\x89\xa8?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'ff\x86@ffF@\x00\x00`@ff\x86@\x9a\x99y@\x00\x00`@\x00\x00@@\x00\x00\x80@\x00\x00@@\xcd\xccL@ffF@33S@\x00\x00`@\x00\x00`@33\x83@33s@\x00\x00\x80@333@\x00\x00@@\x9a\x99Y@\x00\x00\x80@ff\x86@33s@fff@333@fff@ffF@\x9a\x999@\xcd\xcc,@ffF@fff@\x00\x00\x80@\xcd\xccl@33\x83@\xcd\xcc,@ffF@33\x83@\x00\x00@@\x9a\x99Y@\x9a\x999@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S' [\x18\x03\xa0<O\x0c\x004\x06\x0c@\xa2\x04\x0c\xc0;\x06\x0c\x80:\x06\x0c\x80<\x06\x0c\xe0:\x06\x0c\x00\x16Q\x0c\xc0\x13Q\x0c@?O\x0c\xc0\xa0\x04\x0c`<O\x0c`?O\x0c@Y\x18\x03\x80\xa0\x04\x0c`:\x06\x0c\xa0;\x06\x0c\x80J\x04\x0c`=\x06\x0c 8\x06\x0c\xe0Q\x18\x03\xe0O\x04\x0c\x00C\x05\x0c\x80O\x04\x0c`\xa0\x04\x0c\x80\xa4\x04\x0c\x80\xfb\x18\x03@\xfe\x18\x03\xc0\xfb\x18\x03\xc0\xfd\x18\x03\x80\xfd\x18\x03\xc0\xfc\x18\x03\x00\xfc\x18\x03@\xff\x18\x03\xc0\xff\x18\x03@\xfc\x18\x03\x00\xfb\x18\x03\x00\xfd\x18\x03\x00\xfe\x18\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xbaI\xbc@\x0e-2@\x83\xc0\xca?o\x121Ab\x10\x00@B`\x15@P\x8d\xf7?\xdb\xf9n@\x98n\xe6@!\xb0\x1a@\x87\x16Q@B`\xd5?T\xe3\r@\xb6\xf3\xdd?\x0e-\x12@/\xddl@\xfc\xa9Y@\xc5 \xc0?!\xb0*@B`\xb5?\x1dZ\xc4?\x98n\xce@\x83\xc0\xaa?\xf8S\xf3?T\xe3\r@\xdb\xf9\x1e@\x1dZ\xe4?d;\xc3@T\xe3\x8d@\xc9v6@\xc9vV@+\x87\xc6?B`\x15@\xf8S\xd3?D\x8b\xb8@\xbaI\xe4@\xf8S\x93?P\x8d\xd7?/\xdd<@\xc9v\x16@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I81482576
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'\x00\xa1\x88\x0c\xc0\xb0\x88\x0c\xe8\xb0\x88\x0c 6\x1a\x03\xe8\xb0\x88\x0c8\xb1\x88\x0c\xf05\x1a\x03\xc0\xb0\x88\x0c\x10\xb1\x88\x0c\xc05\x1a\x038\xb1\x88\x0cP6\x1a\x03\x806\x1a\x03`\xb1\x88\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'x\x9e\xad\x03\xe8\xa1U\x02\xd0\xad\xf9\x04H\xae\xf9\x04 \xa0\xf9\x04X\x9d\xf9\x048\x9f\xf9\x04\x18\x9b\xf9\x04\xe0\x9f\xf9\x04\xf8\x93\xf9\x04\xa0\x91\xf9\x04p\x97\xf9\x04 \x93\xf9\x04`\x9e\xf9\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g766
sg82
g788
sg83
g771
sg84
g792
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g797
sg82
g798
sg83
g802
sg84
g803
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g808
sg82
g809
sg83
g813
sg84
g814
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g755
sg82
g819
sg83
g760
sg84
g823
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g777
sg82
g828
sg83
g782
sg84
g832
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g837
sg82
g838
sg83
g842
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g797
sg82
g848
sg83
g802
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g837
sg82
g857
sg83
g842
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g743
sg82
g866
sg83
g748
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g808
sg82
g875
sg83
g813
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I81482576
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I81482576
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'\xa0\xd1\x8a\x0c\xd0\xd1\x8a\x0c@\xf6\x17\x03\x08\x86\x8a\x0c\x88\xc1\x8a\x0c\xb0\xc1\x8a\x0c@\xd1\x8a\x0c\xc8\xc2\x8a\x0cp\xd1\x8a\x0c\xe0\xd0\x8a\x0c\x18\xc3\x8a\x0c\xe0\xfa\x17\x03\x10\xd1\x8a\x0c\xe0\xd0\x8a\x0c(\x85\x8a\x0c\x00\xf9\x17\x03`\x85\x8a\x0c\xc8\xc2\x8a\x0cp\xd1\x8a\x0c\xb0\xc1\x8a\x0c\xd8\xc1\x8a\x0ch\xc3\x8a\x0c\x90\xc3\x8a\x0ch\xc3\x8a\x0c(\xc2\x8a\x0c`\x85\x8a\x0c\xd8\xc1\x8a\x0c0\xd2\x8a\x0cP\xc2\x8a\x0c\xd8\xc1\x8a\x0c`\x85\x8a\x0c\x10\xd1\x8a\x0c\xe0\xfa\x17\x03(\xc2\x8a\x0c\xe0\xfa\x17\x03(\xc2\x8a\x0c\xb0\xc1\x8a\x0c\xc0\xfa\x17\x03@\xf6\x17\x03\xe0\xfa\x17\x03\x88\xc1\x8a\x0c`\x85\x8a\x0c\x00\xd2\x8a\x0c\xa0\xd1\x8a\x0c\x00\xc2\x8a\x0c\xd8\xc1\x8a\x0cP\xc2\x8a\x0c\x98\x85\x8a\x0c@\xd1\x8a\x0cp\xd1\x8a\x0c(\xc2\x8a\x0c\x10\xd1\x8a\x0c0\xd2\x8a\x0c\x98\x85\x8a\x0c\xc0\xfa\x17\x03\x90\xc3\x8a\x0c\xd8\xc1\x8a\x0cP\xc2\x8a\x0c`\x85\x8a\x0c@\xf6\x17\x03\xc0\xf3\x17\x03x\xc2\x8a\x0c\x10\xd1\x8a\x0c\x90\xc3\x8a\x0c\x88\xc1\x8a\x0c\xd8\xc1\x8a\x0c\x00\xc2\x8a\x0c\xb0\xc1\x8a\x0c\xd8\xc1\x8a\x0c(\xc2\x8a\x0c@\xf6\x17\x03x\xc2\x8a\x0c\x88\xc1\x8a\x0c@\xd1\x8a\x0c\xe0\xfa\x17\x03p\xd1\x8a\x0cx\xc2\x8a\x0c\x00\xf9\x17\x03@\xd1\x8a\x0c\x98\x85\x8a\x0c\xc0\xf3\x17\x03\xe0\xfa\x17\x03@\xd1\x8a\x0c(\x85\x8a\x0c\xd0\x85\x8a\x0c\x98\x85\x8a\x0c\x10\xd1\x8a\x0c(\xc2\x8a\x0c`\x85\x8a\x0cP\xc2\x8a\x0c\x90\xc3\x8a\x0c\xb8\xc3\x8a\x0c\x00\xf9\x17\x03\x00\xc2\x8a\x0c\xe0\xfa\x17\x03(\x85\x8a\x0cp\xd1\x8a\x0c\xd8\xc1\x8a\x0c\xc0\xfa\x17\x03\x08\x86\x8a\x0c(\xc2\x8a\x0c@\xf6\x17\x03\xe0\xc3\x8a\x0c\x90\xd2\x8a\x0c\xd0\x85\x8a\x0c`\x85\x8a\x0cP\xc2\x8a\x0c@\xf6\x17\x03\xb0\xc1\x8a\x0c`\xd2\x8a\x0c\xe0\xd0\x8a\x0c\x98\x85\x8a\x0cx\xc2\x8a\x0c\xc0\xf3\x17\x03\xb0\xc1\x8a\x0c\xc0\xfa\x17\x03\x90\xd2\x8a\x0c\xe0\xfa\x17\x03p\xd1\x8a\x0c\xd0\x85\x8a\x0c\xc0\xf3\x17\x03\xe0\xfa\x17\x03x\xc2\x8a\x0c@\xd1\x8a\x0c\x88\xc1\x8a\x0c\xa0\xd1\x8a\x0c\xe0\xc3\x8a\x0c\xd0\x85\x8a\x0cx\xc2\x8a\x0c\x00\xc2\x8a\x0c\x90\xd2\x8a\x0c\x18\xc3\x8a\x0c\xe0\xc3\x8a\x0cx\xc2\x8a\x0c\xc0\xf3\x17\x03@\xd1\x8a\x0c\xd0\x85\x8a\x0c\x08\x86\x8a\x0c@\xf6\x17\x03\xe0\xfa\x17\x03\xc0\xfa\x17\x03\xc8\xc2\x8a\x0c\x10\xd1\x8a\x0c`\x85\x8a\x0c\x00\xf9\x17\x03p\xd1\x8a\x0c\xb0\xc1\x8a\x0c(\xc2\x8a\x0c\x00\xf9\x17\x03@\xf6\x17\x03\xc0\xf3\x17\x03\xd8\xc1\x8a\x0c\xc0\xf3\x17\x03\xe0\xd0\x8a\x0c`\x85\x8a\x0c\x88\xc1\x8a\x0c\x00\xc2\x8a\x0c\xc0\xf3\x17\x03x\xc2\x8a\x0c(\x85\x8a\x0c\x00\xc2\x8a\x0c\xc0\xf3\x17\x03\xb0\xc1\x8a\x0c\xd0\x85\x8a\x0c\xb0\xc1\x8a\x0c\xd0\x85\x8a\x0c\xc0\xf3\x17\x03\xa0\xd1\x8a\x0cP\xc2\x8a\x0c\x10\xd1\x8a\x0cp\xd1\x8a\x0c`\x85\x8a\x0c\xd0\x85\x8a\x0c\x88\xc1\x8a\x0c\x10\xd1\x8a\x0c\xd0\x85\x8a\x0c@\xf6\x17\x03(\x85\x8a\x0c(\xc2\x8a\x0c\xe0\xc3\x8a\x0c@\xd1\x8a\x0c\xc0\xfa\x17\x03\x18\xc3\x8a\x0c\x90\xd2\x8a\x0c(\x85\x8a\x0c\xd0\x85\x8a\x0c\x98\x85\x8a\x0c@\xd1\x8a\x0c\xc0\xd2\x8a\x0c\xb0\xc1\x8a\x0c\xe0\xd0\x8a\x0c(\x85\x8a\x0c\x10\xd1\x8a\x0c\x00\xf9\x17\x03@\xf6\x17\x03\x00\xc2\x8a\x0c\xe0\xd0\x8a\x0c\xc0\xd2\x8a\x0c\x00\xf9\x17\x03h\xc3\x8a\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\x80fQ\x0c\xa0\xcf\x19\x03`\xc6\x19\x03\x80\xcf\x19\x03\xe0\xcf\x19\x03\xc0\xcf\x19\x03 \xc6\x19\x03\x00\xc9\x19\x03`\xca\x19\x03@\xc3\x19\x03\xc0\xc3\x19\x03\x00\xcc\x19\x03\x80\xc6\x19\x03\x80\xce\x19\x03\x00\xce\x19\x03@\xc6\x19\x03\xa0\xce\x19\x03\x80\xca\x19\x03 \xc8\x19\x03@\xc9\x19\x03@\xc8\x19\x03\x80\xcd\x19\x03\x80\xc3\x19\x03\xa0\xcb\x19\x03\xa0\xc8\x19\x03 \xc3\x19\x03 \xc4\x19\x03 \xc9\x19\x03@\xca\x19\x03`\xc4\x19\x03\xe0\xc9\x19\x03\x00\xca\x19\x03`\xc8\x19\x03\xc0\xca\x19\x03`\xc9\x19\x03\xe0\xc8\x19\x03\xe0\xca\x19\x03\x00\xcb\x19\x03 \xcc\x19\x03\xa0\xc4\x19\x03\xc0\xc8\x19\x03@\xcf\x19\x03\xc0\xc9\x19\x03\xe0\xcc\x19\x03\xe0\xcb\x19\x03 \xcb\x19\x03@\xcc\x19\x03 \xcf\x19\x03`\xcf\x19\x03@\xcb\x19\x03`\xcb\x19\x03\xa0\xc0\x19\x03\x80\xcc\x19\x03\xc0\xcb\x19\x03\x80\xcb\x19\x03\x80\xc9\x19\x03\xe0iQ\x0c\xe0\xc4\x19\x03\xc0\xddQ\x0c\xe02\xcd\x04@7\xcd\x04 7\xcd\x04\x003\xcd\x04`7\xcd\x04\x807\xcd\x04\x006\xcd\x04\xa06\xcd\x04\xa07\xcd\x04\xc07\xcd\x04\xe07\xcd\x04\x00;\xcd\x04 ;\xcd\x04@;\xcd\x04\xe0;\xcd\x04\x00<\xcd\x04`6\xcd\x04\xe06\xcd\x04`<\xcd\x04@3\xcd\x04@=\xcd\x04 =\xcd\x04\xa03\xcd\x04\x80<\xcd\x04\x803\xcd\x04`=\xcd\x04\xc02\xcd\x04\x007\xcd\x04@6\xcd\x04\xa0<\xcd\x04\x806\xcd\x04\xc0;\xcd\x04`2\xcd\x04@0\xcd\x04 0\xcd\x04\xa02\xcd\x04\xa0\xca\x19\x03\x802\xcd\x04\xa0\xc9\x19\x03\x80;\xcd\x04\xa0r$\x0c\xc0r$\x0c\xc0q$\x0c`q$\x0c\xe0p$\x0c\xc0p$\x0c\x80q$\x0c@q$\x0c\xc0s$\x0c\xe0s$\x0c\x00q$\x0c s$\x0c\xa0s$\x0c@t$\x0c t$\x0c`s$\x0c`t$\x0c\x80t$\x0c\xe0t$\x0c\xc0t$\x0c`r$\x0c\x00u$\x0c`u$\x0c@u$\x0c\x80s$\x0c\xc0u$\x0c\xe0u$\x0c\xe0q$\x0c\x00r$\x0c\x00v$\x0c v$\x0c@v$\x0c\xa0v$\x0c\xc0v$\x0c\xe0r$\x0c\xa0q$\x0c w$\x0c@w$\x0c\x80hQ\x0c r$\x0c\xa0w$\x0c\xa0t$\x0c q$\x0c\xe0v$\x0c\x00t$\x0c\x80u$\x0c@s$\x0c`v$\x0c\xa0x$\x0c@x$\x0c\xe0x$\x0c\xc0w$\x0c\x80x$\x0c u$\x0c\x00y$\x0c\x00w$\x0c\x80y$\x0c`w$\x0c x$\x0c@r$\x0c\x80w$\x0c@y$\x0c\x80r$\x0c\xe0w$\x0c\xa0z$\x0c\x80v$\x0c y$\x0c\x00{$\x0c\xa0y$\x0c\xa0u$\x0c\x80z$\x0c\x80{$\x0c\xa0{$\x0c\xe0z$\x0c@z$\x0c\xe0y$\x0c`z$\x0c@|$\x0c`|$\x0c`y$\x0c\x00s$\x0c\xe0{$\x0c\xe0|$\x0c\x00}$\x0c\x00x$\x0c`x$\x0c`}$\x0c\x80}$\x0c@{$\x0c\x80|$\x0c\xa0}$\x0c\xc0z$\x0c ~$\x0c@~$\x0c\xc0y$\x0c\xe0}$\x0c\x00|$\x0c\xc0~$\x0c\xe0~$\x0c\x80~$\x0c 6\xcd\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'\x82\xcd\x0c@G\x8aH@BI\xe4?\xcaW\xd5?c\xf4\xae?E$\x12@z\'\xe2?y\x9a\t@!\xe0\x1d@\\\x9a\xa8?k\'\xc2?\x8eZ\xf5?$\x00P@Q\x9d\x81@.5\x13@Mx\x17@\xd34\xf3?\xa2\x89\x08@A\xcb\xfb?[\x05\xa0?\xea\r\xf1?\xec$\xa2?\xa4\x15\x91?\xa1\x12\xa0?\x99\xe0\xbd?\x7f3#@1\x96\xd9?N\x01\xc0?\xde\x00\x8f?\xda\xeb\xee?\x99\xf9\xbf?\x94F\x14@08\xf3?\x89(\xa2?\xfcV\x05@[\x05\xa0?(~\xd7?+\xe3\xbd?\xe3\xde\xec?\xad\xbe\xbb?\x12I\xe4?\xa6h\x86?egF@bn\x06@\xa9\xf7n?zt\xd7?\xca\xd2\xec?\x02\xe3\xbd?\x83n\xc6?\x94[\xd5?$z\x97? J\xe4?\xdc\x9b\xb9?\x12\x19\x11@\x08\xd0\xec?sg\x06@Gc\x86?\x80X\x95?\x90\x9b\xd9?\x8f\xf4\xce?\xe2\xac\n@!5#@\x06{\xb7?\x95\xf1\x0e@F\xcf\xcc?_\x82\xc8?\xa3I\xc4?\xd0\xdf\r@3 \x12@2X\xb5?\xd9\xbd\x1b@\x89\xac\xea?\x9d\x16\x91?\x16\x17\xd1?\xd3\xbf\x9b?\xb3qf?|\x15\x91?\xf2\x16\xd1?\x8b0\xf3?\xe7\x16\x91?F\xc1\xbb?\x0e\xfan?\xec\x9b\xf9?\xf9\x9f\t@.\xbf\x9b?1F$@d*\xc2?\x1a\xb4j?\x19i\xa6?\x1c\x06\x80?\xa5\xf4\x8e?|\xa7Y?\xb2\x9e\xf9?\x8b~\x97?\xda\x8a\xa8?"\xf4\xae?\xc3\x84w?W\xfb\x9f?\x9a\xac\x1a@\xed\xbf\x9b?\xf4\x05\xa0?th\x06@+\xcf\x0c@*\xe0{?\xde#\xc2?f\xac\xaa?\x98?s?yh\xa6?]\xde-@\xf0\xfa\x7f?KI\xc4?\x97\xe0\xdd?$J\xa4?\xb7\xf5\xae?\xbe\xcf\xec?\xa5\x13\x01@([\x95?k.b?\xfeh\x95?\x0e\xe2\xbd?C9s?Q\x06\xa0?\xf3k\xa6?-\x00\xaf?\x16\xc1\x9b?\x0c\xf1\xee?+\xe0-@\xa21b?\xe0\x99\xc8?\x91\x8e\x88?Omf?\xe5\x16\xb1?n\xbc+@\xd7\xb8\x8a?\xa0\xd1\x8c?a(\x02@}l\x86?\xd6-\xf3? \xbf\x8a?\xdc\x05\x80?\xc3\xf4\xce?y\x07\x80?*\\\x95?\xf2%\x82?}\x8b\xa8?\x15,b?^\x9b\xf9?\xf3\xaf\xca?A9\xb3?T\xfb\x7f?Q~w?\xd2/\xb3?E\x14\x91?s\x8d\xc8?\x03\xe3]?\x12\x8b\xc8?\xf0l\x86?\xeb\x16\xd1?\x9eV\x84?\x9a\'\xa2?\xe3\xe3\xdd?\x16]U?^\xad\x8a?O\x99\x88?o\xd4\x8c?\xb2$\x82?\x8b}\x97?w$"@\xf4\x01\xaf?\xfc\xc2\xbb?\xa9\xc8{?\xf2\x12Q?\xaegU?n:\x93?\xf84\xd3?\x90\\U?C\x05\xa0?\xb2\xb0\xaa?WV\xa4?\xbb$\x12@\xdf\xd1\xcc?`\x15\xb1?Y\xf1\x8e?\x83U\xc4?=\x9d\xf9?_\x95H?\x12Z\xf5?*\x9f\x99?N\xa1\x99?>Z\xb5?\x00X\xb5?\xd5\x11\x01@g(\x82?\xbbf\x95?\xc9\x16\xb1?\xd4\x8c\x88?\xf9\xe2\xdd?\xccH\xc4?\xf9k\xe6?\xaf\xcb\x8c?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S' \x90\xf9\x04@\x91\xf9\x04H{\xc1\x04\xa8{\xc1\x04\xe8z\xc1\x04\xa0t\xc1\x04\x90r\xc1\x04\x00~\xc1\x04Py\xc1\x04\x00x\xc1\x048y\xc1\x048\x7f\xc1\x04@}\xc1\x04\xc8y\xc1\x04\xb0s\xc1\x04\x10w\xc1\x04\xe8}\xc1\x04P\x7f\xc1\x04\x18~\xc1\x04hs\xc1\x048v\xc1\x04xu\xc1\x04\xb8w\xc1\x04\x08|\xc1\x040{\xc1\x04\xd8{\xc1\x04 \x7f\xc1\x04\x80\x7f\xc1\x040~\xc1\x04\x98\x7f\xc1\x04x~\xc1\x04\x08\x7f\xc1\x04\xa0q\xc1\x04\xf8|\xc1\x04\xd0z\xc1\x040r\xc1\x04\xd8u\xc1\x04\x90x\xc1\x04\xf0u\xc1\x04\x00{\xc1\x04@z\xc1\x04\xb8z\xc1\x04pz\xc1\x04\xd0w\xc1\x04\xb8t\xc1\x04(z\xc1\x04\xb0\x7f\xc1\x04@w\xc1\x04Hu\xc1\x04\xe0\x7f\xc1\x04Pv\xc1\x04xr\xc1\x04(w\xc1\x04\xd8~\xc1\x04Xz\xc1\x04h\x7f\xc1\x04 \xd9\xc1\x04\xb0\xdc\xc1\x04\xb0\xd6\xc1\x040\xdb\xc1\x04\x90\xde\xc1\x04X\xd1\xc1\x04\x98\xd0\xc1\x04\xd8\xd2\xc1\x04X\xd4\xc1\x04\xe0\xd3\xc1\x04h\xdc\xc1\x04\x10\xd4\xc1\x04\x18\xd5\xc1\x04p\xd7\xc1\x04@\xdd\xc1\x04\xe8\xd4\xc1\x04\xb0\xd3\xc1\x04\xd0\xda\xc1\x04\x18\xd2\xc1\x04\x88\xd1\xc1\x04H\xde\xc1\x04\x00\xd5\xc1\x04\x80\xd0\xc1\x04@\xd1\xc1\x04 \xd0\xc1\x04\x00\xdb\xc1\x04h\xd6\xc1\x04`\xdb\xc1\x04\xf8\xd0\xc1\x040\xd2\xc1\x04\xe8\xda\xc1\x04\x10\xd1\xc1\x04\xe0\xdc\xc1\x04\xa8\xd2\xc1\x04\xb0\xd9\xc1\x040\xd5\xc1\x04`\xd2\xc1\x04\x90\xdb\xc1\x04\x08\xdc\xc1\x04\xd0\xd4\xc1\x04\xe0\xd6\xc1\x04\xd0\xd7\xc1\x040\xde\xc1\x04\xb8\xd1\xc1\x04\x90\xd8\xc1\x04\xf8\xd3\xc1\x04 \xd3\xc1\x04\xe8\xd1\xc1\x04X\xda\xc1\x04\xa0\xdd\xc1\x04\xf8\xd6\xc1\x04\x98\xd9\xc1\x04\x88\xd7\xc1\x04\xf0\xd2\xc1\x04\x80\xd3\xc1\x048\xdc\xc1\x04\x80\xd6\xc1\x04@\xd7\xc1\x04(\xd7\xc1\x04\xf8\xdc\xc1\x04\x08\xdf\xc1\x04 \xd6\xc1\x04`\xd8\xc1\x04@\xda\xc1\x04\xe8\xdd\xc1\x04\xb8\xd4\xc1\x04\x10\xdd\xc1\x04 \xdc\xc1\x04\x08\xd9\xc1\x04\xb8\xdd\xc1\x04\xc0\xd2\xc1\x04h\xdf\xc1\x04\xe0\xd0\xc1\x04\xa8\xdb\xc1\x04\xc0\xde\xc1\x04\xb0\xd0\xc1\x04\xa8\xde\xc1\x04\xd8\xdb\xc1\x04H\xdb\xc1\x04(\xda\xc1\x04(\xd1\xc1\x04P\xd3\xc1\x048\xd3\xc1\x04x\xd8\xc1\x04P\xdc\xc1\x04\xd8\xd8\xc1\x04\x08\xd3\xc1\x04X\xd7\xc1\x04@\xd4\xc1\x04\xf0\xde\xc1\x04\xb0\xdf\xc1\x04P\xd6\xc1\x04`\xde\xc1\x04\xa8\xd8\xc1\x04\xe0\xdf\xc1\x04\x18\xde\xc1\x04\x98\xdf\xc1\x04\x88\xdd\xc1\x04\x00\xd8\xc1\x04p\xda\xc1\x04\xa0\xda\xc1\x04\x00\xd2\xc1\x04\xc8\xdc\xc1\x04\xd0\xd1\xc1\x048\xd9\xc1\x04\x88\xd4\xc1\x04\xc8\xd6\xc1\x04\x18\xdb\xc1\x04\x80\xdf\xc1\x048\xd6\xc1\x04\x80\xd9\xc1\x04h\xd9\xc1\x04\x00\xde\xc1\x04 \xdf\xc1\x04\xf8\xd9\xc1\x04x\xdb\xc1\x04\xa0\xd7\xc1\x04P\xdf\xc1\x04\xc0\xdb\xc1\x04\x98\xd6\xc1\x04X\xdd\xc1\x04H\xd2\xc1\x04P\xd9\xc1\x04\xf0\xdb\xc1\x04\xc8\xd0\xc1\x04x\xde\xc1\x04x\xd2\xc1\x04(\xd4\xc1\x04p\xdd\xc1\x04\xc8\xd9\xc1\x04(\xdd\xc1\x04\xc8\xd3\xc1\x048\xd0\xc1\x04\xe8\xd7\xc1\x04P\xd0\xc1\x04\xe0\xd9\xc1\x04\x80\xdc\xc1\x04\xa0\xd4\xc1\x04\xa0\xd1\xc1\x04h\xd0\xc1\x04\xb8\xda\xc1\x04H\xd8\xc1\x04hy\xc1\x04\xe0s\xc1\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g925
sg894
g915
sg909
g919
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g959
sg894
g949
sg909
g953
sg903
g957
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g970
sg894
g1017
sg909
g977
sg903
g1024
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1036
sg894
g1032
sg909
g1043
sg903
g1040
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1072
sg894
g1062
sg909
g1066
sg903
g1070
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g1083
sg894
g1079
sg909
g1090
sg903
g1087
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g925
sg894
g915
sg909
g919
sg903
g923
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g907
sg894
g1109
sg909
g899
sg903
g1116
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g959
sg894
g1124
sg909
g953
sg903
g1131
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1072
sg894
g1139
sg909
g1066
sg903
g1146
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g1158
sg894
g1154
sg909
g1165
sg903
g1162
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g970
sg894
g1017
sg909
g977
sg903
g1024
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1036
sg894
g1184
sg909
g1043
sg903
g1191
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g987
sg894
g1199
sg909
g994
sg903
g1206
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1218
sg894
g1214
sg909
g1225
sg903
g1222
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g1241
sg894
g1231
sg909
g1235
sg903
g1239
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1258
sg894
g1248
sg909
g1252
sg903
g1256
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g1241
sg894
g1265
sg909
g1235
sg903
g1272
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g1284
sg894
g1280
sg909
g1291
sg903
g1288
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1158
sg894
g1297
sg909
g1165
sg903
g1304
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g1218
sg894
g1214
sg909
g1225
sg903
g1222
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1036
sg894
g1184
sg909
g1043
sg903
g1191
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g1342
sg894
g1338
sg909
g1349
sg903
g1346
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1218
sg894
g1355
sg909
g1225
sg903
g1362
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1158
sg894
g1154
sg909
g1165
sg903
g1162
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g925
sg894
g915
sg909
g919
sg903
g923
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1083
sg894
g1396
sg909
g1090
sg903
g1403
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1284
sg894
g1411
sg909
g1291
sg903
g1418
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1083
sg894
g1396
sg909
g1090
sg903
g1403
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1284
sg894
g1411
sg909
g1291
sg903
g1418
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1469
sg894
g1465
sg909
g1476
sg903
g1473
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g1083
sg894
g1396
sg909
g1090
sg903
g1403
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g970
sg894
g1017
sg909
g977
sg903
g1024
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g1158
sg894
g1297
sg909
g1165
sg903
g1304
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g907
sg894
g1109
sg909
g899
sg903
g1116
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g1241
sg894
g1231
sg909
g1235
sg903
g1239
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1218
sg894
g1214
sg909
g1225
sg903
g1222
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g1342
sg894
g1586
sg909
g1349
sg903
g1593
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g1258
sg894
g1601
sg909
g1252
sg903
g1608
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g1004
sg894
g1616
sg909
g1011
sg903
g1623
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1036
sg894
g1184
sg909
g1043
sg903
g1191
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1284
sg894
g1411
sg909
g1291
sg903
g1418
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g925
sg894
g915
sg909
g919
sg903
g923
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1036
sg894
g1032
sg909
g1043
sg903
g1040
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g1258
sg894
g1248
sg909
g1252
sg903
g1256
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1469
sg894
g1696
sg909
g1476
sg903
g1703
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g1258
sg894
g1248
sg909
g1252
sg903
g1256
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1218
sg894
g1355
sg909
g1225
sg903
g1362
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g1342
sg894
g1338
sg909
g1349
sg903
g1346
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1158
sg894
g1297
sg909
g1165
sg903
g1304
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g936
sg894
g1763
sg909
g943
sg903
g1770
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1782
sg894
g1778
sg909
g1789
sg903
g1786
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1799
sg894
g1795
sg909
g1806
sg903
g1803
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g925
sg894
g1812
sg909
g919
sg903
g1819
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1258
sg894
g1601
sg909
g1252
sg903
g1608
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g970
sg894
g1017
sg909
g977
sg903
g1024
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1218
sg894
g1214
sg909
g1225
sg903
g1222
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1241
sg894
g1231
sg909
g1235
sg903
g1239
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1218
sg894
g1214
sg909
g1225
sg903
g1222
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1284
sg894
g1280
sg909
g1291
sg903
g1288
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1799
sg894
g1931
sg909
g1806
sg903
g1938
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1083
sg894
g1079
sg909
g1090
sg903
g1087
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1036
sg894
g1032
sg909
g1043
sg903
g1040
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1799
sg894
g1931
sg909
g1806
sg903
g1938
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g1072
sg894
g1139
sg909
g1066
sg903
g1146
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g1004
sg894
g1616
sg909
g1011
sg903
g1623
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1258
sg894
g1248
sg909
g1252
sg903
g1256
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g1782
sg894
g1778
sg909
g1789
sg903
g1786
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g1083
sg894
g1079
sg909
g1090
sg903
g1087
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1004
sg894
g1616
sg909
g1011
sg903
g1623
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g959
sg894
g949
sg909
g953
sg903
g957
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g2106
sg894
g2102
sg909
g2113
sg903
g2110
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g1258
sg894
g1248
sg909
g1252
sg903
g1256
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g925
sg894
g1812
sg909
g919
sg903
g1819
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1284
sg894
g1280
sg909
g1291
sg903
g1288
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1158
sg894
g1297
sg909
g1165
sg903
g1304
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g1342
sg894
g1586
sg909
g1349
sg903
g1593
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1258
sg894
g1601
sg909
g1252
sg903
g1608
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1284
sg894
g1280
sg909
g1291
sg903
g1288
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g1072
sg894
g1062
sg909
g1066
sg903
g1070
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1241
sg894
g1265
sg909
g1235
sg903
g1272
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g1083
sg894
g1079
sg909
g1090
sg903
g1087
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g959
sg894
g1124
sg909
g953
sg903
g1131
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1036
sg894
g1032
sg909
g1043
sg903
g1040
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g1218
sg894
g1355
sg909
g1225
sg903
g1362
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1469
sg894
g1465
sg909
g1476
sg903
g1473
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g959
sg894
g1124
sg909
g953
sg903
g1131
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g1284
sg894
g1280
sg909
g1291
sg903
g1288
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g936
sg894
g1763
sg909
g943
sg903
g1770
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1469
sg894
g1465
sg909
g1476
sg903
g1473
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1342
sg894
g1586
sg909
g1349
sg903
g1593
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g2106
sg894
g2102
sg909
g2113
sg903
g2110
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1158
sg894
g1297
sg909
g1165
sg903
g1304
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1342
sg894
g1586
sg909
g1349
sg903
g1593
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g936
sg894
g1763
sg909
g943
sg903
g1770
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g987
sg894
g1199
sg909
g994
sg903
g1206
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1218
sg894
g1355
sg909
g1225
sg903
g1362
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g907
sg894
g1109
sg909
g899
sg903
g1116
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g1258
sg894
g1601
sg909
g1252
sg903
g1608
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g1799
sg894
g1795
sg909
g1806
sg903
g1803
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g1782
sg894
g1778
sg909
g1789
sg903
g1786
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g987
sg894
g1199
sg909
g994
sg903
g1206
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1469
sg894
g1696
sg909
g1476
sg903
g1703
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1342
sg894
g1338
sg909
g1349
sg903
g1346
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1083
sg894
g1396
sg909
g1090
sg903
g1403
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1036
sg894
g1184
sg909
g1043
sg903
g1191
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g2106
sg894
g2561
sg909
g2113
sg903
g2568
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1782
sg894
g2576
sg909
g1789
sg903
g2583
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1083
sg894
g1396
sg909
g1090
sg903
g1403
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1799
sg894
g1931
sg909
g1806
sg903
g1938
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g1004
sg894
g1616
sg909
g1011
sg903
g1623
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g907
sg894
g1109
sg909
g899
sg903
g1116
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1469
sg894
g1696
sg909
g1476
sg903
g1703
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g2106
sg894
g2561
sg909
g2113
sg903
g2568
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g1799
sg894
g1795
sg909
g1806
sg903
g1803
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1241
sg894
g1231
sg909
g1235
sg903
g1239
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1342
sg894
g1338
sg909
g1349
sg903
g1346
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1072
sg894
g1062
sg909
g1066
sg903
g1070
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g1469
sg894
g1696
sg909
g1476
sg903
g1703
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g1799
sg894
g1795
sg909
g1806
sg903
g1803
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g1782
sg894
g2576
sg909
g1789
sg903
g2583
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1004
sg894
g1616
sg909
g1011
sg903
g1623
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g2106
sg894
g2561
sg909
g2113
sg903
g2568
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g959
sg894
g949
sg909
g953
sg903
g957
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g1083
sg894
g1079
sg909
g1090
sg903
g1087
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g1469
sg894
g1465
sg909
g1476
sg903
g1473
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g970
sg894
g1017
sg909
g977
sg903
g1024
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g925
sg894
g1812
sg909
g919
sg903
g1819
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g1158
sg894
g1154
sg909
g1165
sg903
g1162
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1072
sg894
g1062
sg909
g1066
sg903
g1070
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g1036
sg894
g1184
sg909
g1043
sg903
g1191
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1284
sg894
g1411
sg909
g1291
sg903
g1418
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1072
sg894
g1062
sg909
g1066
sg903
g1070
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g936
sg894
g1763
sg909
g943
sg903
g1770
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g1782
sg894
g2576
sg909
g1789
sg903
g2583
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g1218
sg894
g1355
sg909
g1225
sg903
g1362
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1782
sg894
g1778
sg909
g1789
sg903
g1786
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1158
sg894
g1154
sg909
g1165
sg903
g1162
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g1241
sg894
g1265
sg909
g1235
sg903
g1272
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1782
sg894
g2576
sg909
g1789
sg903
g2583
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1799
sg894
g1931
sg909
g1806
sg903
g1938
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g959
sg894
g1124
sg909
g953
sg903
g1131
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1241
sg894
g1265
sg909
g1235
sg903
g1272
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1782
sg894
g1778
sg909
g1789
sg903
g1786
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g987
sg894
g1199
sg909
g994
sg903
g1206
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g2106
sg894
g2102
sg909
g2113
sg903
g2110
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g2106
sg894
g2561
sg909
g2113
sg903
g2568
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g1782
sg894
g2576
sg909
g1789
sg903
g2583
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1342
sg894
g1586
sg909
g1349
sg903
g1593
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g925
sg894
g1812
sg909
g919
sg903
g1819
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g1036
sg894
g1032
sg909
g1043
sg903
g1040
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g1158
sg894
g1154
sg909
g1165
sg903
g1162
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g2106
sg894
g2102
sg909
g2113
sg903
g2110
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g925
sg894
g1812
sg909
g919
sg903
g1819
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g2106
sg894
g2102
sg909
g2113
sg903
g2110
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g959
sg894
g949
sg909
g953
sg903
g957
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1284
sg894
g1411
sg909
g1291
sg903
g1418
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1469
sg894
g1465
sg909
g1476
sg903
g1473
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g1469
sg894
g1696
sg909
g1476
sg903
g1703
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g1072
sg894
g1139
sg909
g1066
sg903
g1146
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1342
sg894
g1338
sg909
g1349
sg903
g1346
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g959
sg894
g1124
sg909
g953
sg903
g1131
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g2106
sg894
g2561
sg909
g2113
sg903
g2568
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1258
sg894
g1601
sg909
g1252
sg903
g1608
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g1799
sg894
g1795
sg909
g1806
sg903
g1803
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g987
sg894
g1199
sg909
g994
sg903
g1206
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g959
sg894
g949
sg909
g953
sg903
g957
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g925
sg894
g915
sg909
g919
sg903
g923
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1072
sg894
g1139
sg909
g1066
sg903
g1146
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g936
sg894
g1763
sg909
g943
sg903
g1770
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1241
sg894
g1265
sg909
g1235
sg903
g1272
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g907
sg894
g1109
sg909
g899
sg903
g1116
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g1799
sg894
g1931
sg909
g1806
sg903
g1938
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g1072
sg894
g1139
sg909
g1066
sg903
g1146
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1241
sg894
g1231
sg909
g1235
sg903
g1239
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I81482576
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'\xf8\xb4\xd8\x0c z$\x0c\x80k\xd8\x0c \xb5\xd8\x0cH\xb5\xd8\x0c z$\x0cp\x87\xd8\x0c`\x7f$\x0c\xf8\xb4\xd8\x0cp\xb5\xd8\x0c\xa0\x87\xd8\x0c \xb5\xd8\x0c z$\x0cp\x87\xd8\x0c`l\xd8\x0c\xa0\x7f$\x0c\x98l\xd8\x0c\xc0\x7f$\x0c\xd0\x87\xd8\x0cp\x87\xd8\x0c\xb8k\xd8\x0c z$\x0c\xf0k\xd8\x0c\x88\xb6\xd8\x0c\xd0\x87\xd8\x0c`\x7f$\x0c\xa0\x87\xd8\x0c\x00\x88\xd8\x0c8\xb6\xd8\x0c`\x7f$\x0c`\xb6\xd8\x0cp\x87\xd8\x0c\xd8\xb6\xd8\x0c \xb5\xd8\x0c\x80k\xd8\x0c\x80\x7f$\x0cp\xb5\xd8\x0c\x80\x89\xd8\x0cp\xb5\xd8\x0c\xa0\x87\xd8\x0c`\x88\xd8\x0c\x00\xb7\xd8\x0c\x88\xb6\xd8\x0c8\xb6\xd8\x0c0\x88\xd8\x0c\x80k\xd8\x0cp\xb5\xd8\x0c\x80\x7f$\x0c\xa0\x87\xd8\x0c\xc0\xb5\xd8\x0c\x00\x88\xd8\x0c\xe8\xb5\xd8\x0c\xa0\x7f$\x0c\xe8\xb5\xd8\x0c\x98\xb5\xd8\x0c\x80k\xd8\x0c\xf0k\xd8\x0c\xc0\xb5\xd8\x0c\xe0\x7f$\x0cP\xb7\xd8\x0cH\xb5\xd8\x0c\x80\x7f$\x0cP\x89\xd8\x0c\xa0\x7f$\x0c\xc0\x7f$\x0c\xb8k\xd8\x0cH\xb5\xd8\x0c\xf8\xb4\xd8\x0cH\xb5\xd8\x0c`l\xd8\x0c\xb8k\xd8\x0c\xf8\xb4\xd8\x0c\xb8k\xd8\x0c(\xb7\xd8\x0c\xa0\x87\xd8\x0cP\xb7\xd8\x0c\xc0\xb5\xd8\x0c\xe8\xb5\xd8\x0c\x88\xb6\xd8\x0c\x80\x7f$\x0c\x98\xb5\xd8\x0c\xc0\xb5\xd8\x0c\x00\x88\xd8\x0c\x80\x7f$\x0c(l\xd8\x0c\xb8k\xd8\x0cP\xb7\xd8\x0c(l\xd8\x0c\x80k\xd8\x0c\xd8\xb6\xd8\x0c`\x88\xd8\x0cp\xb5\xd8\x0c\xf8\xb4\xd8\x0c\xd0\x87\xd8\x0c\xc0\xb5\xd8\x0c\xf0k\xd8\x0c\xa0\x7f$\x0c z$\x0c\xc0\xb5\xd8\x0cP\x89\xd8\x0c z$\x0c(l\xd8\x0c\xf8\xb4\xd8\x0cp\xb5\xd8\x0c`\x7f$\x0c\xb0\xb6\xd8\x0c\xd0\x87\xd8\x0c`\xb6\xd8\x0c`\x7f$\x0c \xb5\xd8\x0c\xe8\xb5\xd8\x0c\xb0\xb6\xd8\x0cP\x89\xd8\x0c\x00\x88\xd8\x0c`l\xd8\x0cH\xb5\xd8\x0c \xb5\xd8\x0c\xb8k\xd8\x0c\xa0\x87\xd8\x0c`\x7f$\x0c`\xb6\xd8\x0c\x00\xb7\xd8\x0c\x00\x88\xd8\x0c\xc0\xb5\xd8\x0c\x98\xb5\xd8\x0c\xe8\xb5\xd8\x0c\xa0\x87\xd8\x0c`l\xd8\x0cp\xb5\xd8\x0c\x00\x88\xd8\x0c\x98l\xd8\x0c\x00\x88\xd8\x0c\x80\x7f$\x0c\xd0\x87\xd8\x0c\x98\xb5\xd8\x0c \xb5\xd8\x0c\x00\x88\xd8\x0c\xa0\x87\xd8\x0cH\xb5\xd8\x0c\x80\x7f$\x0c\xb8k\xd8\x0c \xb5\xd8\x0c\x98\xb5\xd8\x0c\xa0\x87\xd8\x0c\xc0\xb5\xd8\x0cP\xb7\xd8\x0c\xd8\xb6\xd8\x0c\xe0\x7f$\x0c\xf8\xb4\xd8\x0cp\xb5\xd8\x0c\x88\xb6\xd8\x0c\xa0\x7f$\x0cH\xb5\xd8\x0c\xe8\xb5\xd8\x0c\xa0\x7f$\x0c\x80\x89\xd8\x0c\xc0\x7f$\x0c\xf0k\xd8\x0c(l\xd8\x0cp\x87\xd8\x0c`\x7f$\x0c\x90\x88\xd8\x0c\x80\x7f$\x0c\xb8k\xd8\x0c\x80k\xd8\x0c\xc0\x7f$\x0c z$\x0cp\x87\xd8\x0c\xf8\xb4\xd8\x0c`\xb6\xd8\x0c\xf0k\xd8\x0c\xc0\x7f$\x0c\xf8\xb4\xd8\x0cp\x87\xd8\x0c\x80\x7f$\x0c\xd0\x87\xd8\x0c`\x7f$\x0c\x98\xb5\xd8\x0c(\xb7\xd8\x0c z$\x0c\x98\xb5\xd8\x0c\xa0\x87\xd8\x0c(l\xd8\x0c\x80\x7f$\x0c\xc0\x88\xd8\x0c \xb5\xd8\x0cP\x89\xd8\x0c\xd0\x87\xd8\x0c(l\xd8\x0cp\xb5\xd8\x0c\x90\x88\xd8\x0c(l\xd8\x0c\xc0\x7f$\x0c8\xb6\xd8\x0c\xd0\x87\xd8\x0cp\x87\xd8\x0c\x00\xb7\xd8\x0c\xd0\x87\xd8\x0c\xf0k\xd8\x0c \x89\xd8\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S'\xe0\xc1\xd8\x0c`\xc2\xd8\x0c\xc0\xc1\xd8\x0c\x80\xc2\xd8\x0c\xc0\xc2\xd8\x0c\xe0\xc2\xd8\x0c\xa0\xc2\xd8\x0c\x80\xc1\xd8\x0c {$\x0c\x80P\x18\x03\xe0P\x18\x03 \xc0\xd8\x0c\xa0\xc1\xd8\x0c\xc0\xc0\xd8\x0c\xa0\xc0\xd8\x0c`\xc3\xd8\x0c\xa0\xc3\xd8\x0c\xc0\xc3\xd8\x0c\x80\xc3\xd8\x0c \xc4\xd8\x0c\x00\xc4\xd8\x0c`\xc4\xd8\x0c@\xc4\xd8\x0c\x80\xc0\xd8\x0c\x80\xc4\xd8\x0c\xe0\xc4\xd8\x0c\xc0\xc4\xd8\x0c\x00\xc3\xd8\x0c@\xc5\xd8\x0c \xc5\xd8\x0c`\xc1\xd8\x0c`\xc5\xd8\x0c\x80\xc5\xd8\x0c\xe0\xc5\xd8\x0c\xc0\xc5\xd8\x0c \xc6\xd8\x0c\x00\xc6\xd8\x0c \xc1\xd8\x0c\x80\xc6\xd8\x0c`\xc6\xd8\x0c\x00\xc1\xd8\x0c\xa0\xc6\xd8\x0c\xc0\xc6\xd8\x0c\xe0\xc6\xd8\x0c\x00\xc7\xd8\x0c`\xc7\xd8\x0c@\xc7\xd8\x0c\xa0\xc5\xd8\x0c\xc0\xc7\xd8\x0c\xe0\xc7\xd8\x0c@\xc0\xd8\x0c \xc8\xd8\x0c\x00\xc8\xd8\x0c@\xc2\xd8\x0c@\xc8\xd8\x0c\xa0\xc8\xd8\x0c\xc0\xc8\xd8\x0c@\xc6\xd8\x0c\x00\xc9\xd8\x0c\xe0\xc8\xd8\x0c\xe0\xc3\xd8\x0c`\xc9\xd8\x0c@\xc9\xd8\x0c`\xc0\xd8\x0c\xc0\xc9\xd8\x0c\xa0\xc9\xd8\x0c@\xc3\xd8\x0c\xe0\xc9\xd8\x0c@\xca\xd8\x0c \xca\xd8\x0c\x80\xca\xd8\x0c \xca\x19\x03\x00\xc5\x19\x03\xe0\xcd\x19\x03\x00\xcd\x19\x03\xa0\xcd\x19\x03\xc0\xc5\x19\x03\x00Q\x1a\x03\xa0P\x1a\x03\xa0Q\x1a\x03\x00R\x1a\x03@Q\x1a\x03\xe0P\x1a\x03 S\x1a\x03 Q\x1a\x03\xc0Q\x1a\x03\xa0R\x1a\x03\x80P\x1a\x03\xe0Q\x1a\x03`R\x1a\x03@P\x1a\x03`P\x1a\x03\x80R\x1a\x03\xc0P\x1a\x03\xe0\xff!\x0c@S\x1a\x03\x80U\x1a\x03\xe0R\x1a\x03 R\x1a\x03`Q\x1a\x03\xc0\xcd\x19\x03\x80Q\x1a\x03 \xcd\x19\x03 2\xcd\x04\xe0?\xcd\x04`\xcd\x19\x03@}$\x0c\xc0R\x1a\x03\xa0\xfe\x18\x03`\xff\x18\x03 \xfd\x18\x03`\xfd\x18\x03\xe0\xfb\x18\x03 \xff\x18\x03\xe0\xfd\x18\x03`\xfc\x18\x03 \xfb\x18\x03\xa0G\x05\x0c\x00\xf9\x18\x03`\xfb\x18\x03\x00S\x1a\x03\xc09\x06\x0c@;\x06\x0c\xe05\x06\x0c\x00:\x06\x0c 5\x06\x0c\xa04\x06\x0c\x00;\x06\x0c\x006\x06\x0c\xc05\x06\x0c\x002\x06\x0c@B\x05\x0c`8\x06\x0c`AN\x0c\x00KN\x0c\xc0JN\x0c\xa0JN\x0c\xa0@N\x0c\xe0BN\x0c@CN\x0c\x80@N\x0c\xa0BN\x0c`4\x06\x0c\xc0BN\x0c CN\x0c\x00CN\x0c@AN\x0c\x00IN\x0c`JN\x0c\xa0\xff\x18\x03\x80\xe4\x06\x0c\xc0\xe4\x06\x0c\xa0\xe1\x06\x0c\xe0\xeb\x06\x0c\xa0\xe4\x06\x0c\xe0\xe3\x06\x0c\xa0\xeb\x06\x0c\xc0\xe7\x06\x0c`\xee\x06\x0c\xe0\xef\x06\x0c\xc0\xe0\x06\x0c\x00\xe2\x06\x0c\xe0\xe2\x06\x0c`\xe3\x06\x0c\x00\xe1\x06\x0c\xe0\xe1\x06\x0c\xe0\xe4\x06\x0c`\xe1\x06\x0c \xe3\x06\x0c\xc0\xeb\x06\x0c\x00\xec\x06\x0c\x00\xe3\x06\x0c \xe1\x06\x0c \xec\x06\x0c@@N\x0c\xa0\xea\x06\x0c\x80\xe3\x06\x0c\xc0\xea\x06\x0c \x1fQ\x0c\xc0\x10Q\x0c\x80\x10Q\x0c\xe0\x16Q\x0c \x17Q\x0c\xa0\x10Q\x0c\xe0\x12Q\x0c\xa0\x15Q\x0c`\x11Q\x0c\xa0\x16Q\x0c\x80\x12Q\x0c\xe0\x10Q\x0c`\x10Q\x0c@\x10Q\x0c`\x19Q\x0c\xc0\x14Q\x0c\xe0\xff\x18\x03\x00GN\x0c`Q\x18\x03\xe0[\x18\x03\x00Q\x18\x03@R\x18\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'x\xbe\x9b?\xa1\x9a\x88?\xddF\xc4?\x1a\x15\x91?\xa3W\xd5?\x81lf?\xcb\x96H?\xae\xe9]?\xdf=3?+\xc9\xec?\xab\xb7j?D\x88\x97?-\x8d\x88?\x80\xa7Y?\xb6I\xc4?w\x16\xb1?kgU?\x8e\xd0\xec?uk\xe6?8\x84w?\\%\x12@\x050\x82?\n(\x82?\xba\xc1\xfb?;\x06\x80?\x8frf?\x1e\x12o?,\x12\x01@\xb1\x9e\xd9?\xc96\xf3?"(\x82?\x83\xd9L?\xe4\x8cH?\xcck\x86?\xf57\xb3?\x80\xc1\xdb?q\x8d\x08@\x9b$\xc2?!\xc8\xcc?\x12?s?\x8fk\xe6?\xf0\xf2\x8e?mh\x16@\xf9\xbe\x0b@\x11\x1aQ?z\xde\r@\x00m\xe6?\x1e\xbcj?\x92\xe5]?\xea\x8d\xa8?|\xc1\x9b?1\xe4\x9d?L\xaf\xca?\x08xG@\xec\x05\x80?\xaa\x88X@\x19\x04^?\xdb\x80w?\xabz\xb7?_\xe1\x9d?Y\xd4\xcc?\xe5\x06\x80?n)b?X5\xd3?\xc1\xce\xec?\xa1W\x05@\xa3<\x13@\xf2\x0c@?\xacF\x84?Q\x02 @\xda\xac*@%e\xd5?\xdc$\x02@\xb5=s?\x1d\xa1Y?\x81|\x97?\x15\xe0;?V\xa5Y?\x80|\xd7?\xba/b?\x9f7\xb3?\x84\x92H?\xfd\x04\x80?\xde\x96H?<\x89\x88?\x92k\xe6?n\x8c\x18@\xf4\x8b\x88?B6\xb3?\xc4|w?\xc9zw?P\xb3\xaa?GJ\x84?6\x8d\x88?\xcd/b?cX\xd5?\x8e\xfcn?6\x9f\x99?\x8c\x15\x91?\xect\xb7?K\xf4\x8e?[\x1e@?\xb9\x16Q?\xdf\xb6{?S\x1cQ?p\xbf\xdb?7\xdf\x8c?\x086\xb3?6@s?;@s?pz\xf7?M#\xb1?\x01\x17\x91?U\xa1\x99?*J\xe4?\xe5\xac\xaa?\xda\xd2\xcc?\xb4X\xf5?V\xcf\xac?\xea-b?)&\x82?\xb9\x9bw?\x15.b?e\x02\xa0?a\xa8Y?\xce\xd2\xcc?K\x11\x80?|$\x02@\x80kw?K\'\x82?\x96\xddL?\xa2\x11o?"\x06\xc0?\xf8k\xc6?Z\xc7{?ql\x86?\xd79\x93?\x82\xf1\xae?"\xc1\xbb?p\x0c@?\x8e\xe3\x9d?\x03\x14\x80?\xc22s?\xaf\xaf\x8a?\xdc\xd8L?\x15\xb1\xca?\x9a\x11\x80?\xe0\xfan?\x9e\x12\x80?\xc1\'s?C\xd2\xcc?\xca\xb8j?\xa5\x02\xa0?\xc6\xaf\xea?\x83\x16\x91?el\x86?\x16l\x86?2}w?=\xc1;?/J\x84?\x1a(\xc2?\xe3\x0c@?\x0c\xc9;?\xf9\xbd\xfb?\x05\xf1.@\xed\x1cQ?&\xaaH?\xff\xc8{?(\xe3\xbd?\xd7\x93H?\x85\xb0\xaa?\x14\x08\x10@V\x8fH?\x07\xf7n?\xa3\x8c\xa8?\xb0\xe3\x9d?\xbf/b?S,b?Z?s?\x875\x93?\xa8\xc4;?w\x89\x97?\xae{w?\x81\xc1\x9b?&\x06Q?|\x1dQ?\xff\xb4j?\xa5j\xc6?\x1dD\x84?\x04\xd9]?)\xb7*?\x15u7?\x96\xfbn?\x8ez\xb7?@.b?\xb4\x9e\xd9?\xe4k\xa6?F\xe0{?\xa3\xac\x8a?\x85\x8f\x88?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'\x18u\xc1\x048p\xc1\x04\xb8a\xc2\x04Pf\xc2\x04\x80f\xc2\x04\xc8c\xc2\x048`\xc2\x04\xe0c\xc2\x04He\xc2\x04\xe8a\xc2\x04\x80c\xc2\x04\x18k\xc2\x04h`\xc2\x04\xa0m\xc2\x04\x08i\xc2\x04Hh\xc2\x04Xa\xc2\x04\xf0e\xc2\x04Pc\xc2\x04\x88m\xc2\x04\x88a\xc2\x04pa\xc2\x04\xe8d\xc2\x04\xd0d\xc2\x04\xf0h\xc2\x04\xc0b\xc2\x04\x00b\xc2\x04\xf8`\xc2\x04\x18b\xc2\x04 f\xc2\x04\x00e\xc2\x04\xa8e\xc2\x04(d\xc2\x04\xb0o\xc2\x04\xa8b\xc2\x04\x08f\xc2\x04 l\xc2\x04xh\xc2\x04\xd8e\xc2\x04\xe0i\xc2\x04\xe0f\xc2\x04xk\xc2\x04\xa0a\xc2\x04\xa0d\xc2\x040h\xc2\x04Hk\xc2\x04\xc0h\xc2\x04\xb0c\xc2\x04`e\xc2\x04pm\xc2\x04xb\xc2\x04\x18e\xc2\x04@m\xc2\x04\x10j\xc2\x04\xf8i\xc2\x04\xd0m\xc2\x04hf\xc2\x04 `\xc2\x04\xb8j\xc2\x04\x00k\xc2\x04@g\xc2\x04xe\xc2\x040n\xc2\x04\x98c\xc2\x04\xa8h\xc2\x04\x90e\xc2\x04\x98o\xc2\x04\xd8h\xc2\x04\xb8m\xc2\x04\x08l\xc2\x04\xd0j\xc2\x04\x80`\xc2\x04\xe0`\xc2\x04Xd\xc2\x04\xa0g\xc2\x04\x98`\xc2\x04\xc8f\xc2\x04pj\xc2\x04\xf0n\xc2\x04\xd8n\xc2\x04\xf8c\xc2\x04\xb0i\xc2\x048l\xc2\x04\xd8k\xc2\x04\x98f\xc2\x04\xe0l\xc2\x04Pl\xc2\x04hi\xc2\x04Hb\xc2\x04\xb0l\xc2\x04\xa8k\xc2\x04\xe8j\xc2\x04\x80l\xc2\x04\x00n\xc2\x04\xc0n\xc2\x04Hn\xc2\x04\x90b\xc2\x04\xb0`\xc2\x04`h\xc2\x04`n\xc2\x04\xa0j\xc2\x04(a\xc2\x04\xc8o\xc2\x04\xa8n\xc2\x04\xf0k\xc2\x04\x88d\xc2\x04`k\xc2\x04\x18n\xc2\x04\xf8l\xc2\x04\xd0a\xc2\x04\x10m\xc2\x04\x88j\xc2\x04 o\xc2\x04\xf0b\xc2\x04\xb0f\xc2\x04\x80o\xc2\x04\xc8l\xc2\x04\xe0o\xc2\x04\x08o\xc2\x04pd\xc2\x04\x90n\xc2\x040k\xc2\x04\x80i\xc2\x04\x10g\xc2\x04Xj\xc2\x048f\xc2\x04\x90h\xc2\x04P`\xc2\x04\xd0g\xc2\x04Xm\xc2\x04\xc0k\xc2\x04@d\xc2\x04\xb8d\xc2\x04\x00h\xc2\x04\x98l\xc2\x04\xc8i\xc2\x04(g\xc2\x04ho\xc2\x04Pi\xc2\x04`b\xc2\x04\xe8m\xc2\x04\xe8g\xc2\x04hc\xc2\x048o\xc2\x04\x18h\xc2\x04(j\xc2\x04\xd8b\xc2\x04\x10a\xc2\x04xn\xc2\x040e\xc2\x04(m\xc2\x04hl\xc2\x04\x90k\xc2\x04\x18\x9e\xf9\x04@\x9a\xf9\x04\x08\x93\xf9\x04\x08\x9f\xf9\x048\x90\xf9\x04\xd0\x97\xf9\x04\xf0\x92\xf9\x04x\x98\xf9\x04\xa8\x92\xf9\x04X\x9a\xf9\x04\xd8\x9e\xf9\x04\xa8\x9b\xf9\x04x\x9e\xf9\x04\x88\x97\xf9\x04\xc0\x95\xf9\x04\xc8\x9f\xf9\x04@\x9d\xf9\x04\x08\x96\xf9\x04\xa0\x97\xf9\x04\xd0\x94\xf9\x04p\x91\xf9\x04\xc8\x93\xf9\x04\xc8\x99\xf9\x04\xf0\x98\xf9\x04@\x97\xf9\x04X\x97\xf9\x04\xb8\x91\xf9\x04\xe8\x94\xf9\x04\x98\x9f\xf9\x04 \x9f\xf9\x04\xe0\x93\xf9\x04\x80\x93\xf9\x04\xb8\x97\xf9\x04\xc8\x90\xf9\x04\xe0\x90\xf9\x04\x88\x94\xf9\x04\x10\x97\xf9\x04\x98\x93\xf9\x04\xf0\x9b\xf9\x04\xf8\x96\xf9\x04\x10\x9d\xf9\x04\x00\x9e\xf9\x04@\x94\xf9\x048c\xc2\x04@a\xc2\x04\xc8`\xc2\x04\xf8f\xc2\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3657
sg3632
g3721
sg3646
g3664
sg3641
g3728
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3637
sg3632
g3770
sg3646
g3647
sg3641
g3777
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3657
sg3632
g3721
sg3646
g3664
sg3641
g3728
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3674
sg3632
g3858
sg3646
g3681
sg3641
g3865
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3877
sg3632
g3873
sg3646
g3884
sg3641
g3881
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3757
sg3632
g3890
sg3646
g3764
sg3641
g3897
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3909
sg3632
g3905
sg3646
g3916
sg3641
g3913
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3926
sg3632
g3922
sg3646
g3933
sg3641
g3930
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3740
sg3632
g3939
sg3646
g3747
sg3641
g3946
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3958
sg3632
g3954
sg3646
g3965
sg3641
g3962
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3988
sg3632
g3984
sg3646
g3995
sg3641
g3992
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3909
sg3632
g3905
sg3646
g3916
sg3641
g3913
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g3926
sg3632
g3922
sg3646
g3933
sg3641
g3930
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g3806
sg3632
g4040
sg3646
g3813
sg3641
g4047
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g4059
sg3632
g4055
sg3646
g4066
sg3641
g4063
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g3708
sg3632
g4072
sg3646
g3715
sg3641
g4079
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3757
sg3632
g3890
sg3646
g3764
sg3641
g3897
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g3877
sg3632
g3873
sg3646
g3884
sg3641
g3881
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3740
sg3632
g3939
sg3646
g3747
sg3641
g3946
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g4136
sg3632
g4126
sg3646
g4130
sg3641
g4134
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3691
sg3632
g4143
sg3646
g3698
sg3641
g4150
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g4175
sg3632
g4171
sg3646
g4182
sg3641
g4179
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3789
sg3632
g4188
sg3646
g3796
sg3641
g4195
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g4059
sg3632
g4203
sg3646
g4066
sg3641
g4210
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3789
sg3632
g4188
sg3646
g3796
sg3641
g4195
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3806
sg3632
g4040
sg3646
g3813
sg3641
g4047
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g4267
sg3632
g4257
sg3646
g4261
sg3641
g4265
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3909
sg3632
g4274
sg3646
g3916
sg3641
g4281
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3708
sg3632
g4072
sg3646
g3715
sg3641
g4079
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3637
sg3632
g3770
sg3646
g3647
sg3641
g3777
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g3674
sg3632
g3858
sg3646
g3681
sg3641
g3865
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g4175
sg3632
g4341
sg3646
g4182
sg3641
g4348
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g4373
sg3632
g4369
sg3646
g4380
sg3641
g4377
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g4059
sg3632
g4055
sg3646
g4066
sg3641
g4063
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g4403
sg3632
g4399
sg3646
g4410
sg3641
g4407
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g3877
sg3632
g3873
sg3646
g3884
sg3641
g3881
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g4403
sg3632
g4429
sg3646
g4410
sg3641
g4436
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g4267
sg3632
g4444
sg3646
g4261
sg3641
g4451
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3988
sg3632
g3984
sg3646
g3995
sg3641
g3992
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g4373
sg3632
g4485
sg3646
g4380
sg3641
g4492
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g4403
sg3632
g4399
sg3646
g4410
sg3641
g4407
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g4175
sg3632
g4171
sg3646
g4182
sg3641
g4179
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g3988
sg3632
g3984
sg3646
g3995
sg3641
g3992
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3877
sg3632
g4565
sg3646
g3884
sg3641
g4572
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g3909
sg3632
g4274
sg3646
g3916
sg3641
g4281
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3958
sg3632
g4593
sg3646
g3965
sg3641
g4600
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g3708
sg3632
g4072
sg3646
g3715
sg3641
g4079
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g3637
sg3632
g3770
sg3646
g3647
sg3641
g3777
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3708
sg3632
g4072
sg3646
g3715
sg3641
g4079
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3958
sg3632
g4593
sg3646
g3965
sg3641
g4600
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3958
sg3632
g4593
sg3646
g3965
sg3641
g4600
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g4373
sg3632
g4369
sg3646
g4380
sg3641
g4377
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g4403
sg3632
g4429
sg3646
g4410
sg3641
g4436
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g4373
sg3632
g4485
sg3646
g4380
sg3641
g4492
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g4403
sg3632
g4429
sg3646
g4410
sg3641
g4436
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g3909
sg3632
g4274
sg3646
g3916
sg3641
g4281
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g4175
sg3632
g4171
sg3646
g4182
sg3641
g4179
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g4267
sg3632
g4444
sg3646
g4261
sg3641
g4451
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g4373
sg3632
g4369
sg3646
g4380
sg3641
g4377
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g4059
sg3632
g4203
sg3646
g4066
sg3641
g4210
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g4175
sg3632
g4341
sg3646
g4182
sg3641
g4348
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g4136
sg3632
g4842
sg3646
g4130
sg3641
g4849
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g3958
sg3632
g3954
sg3646
g3965
sg3641
g3962
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g4403
sg3632
g4399
sg3646
g4410
sg3641
g4407
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g4136
sg3632
g4842
sg3646
g4130
sg3641
g4849
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g3674
sg3632
g3858
sg3646
g3681
sg3641
g3865
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g4136
sg3632
g4842
sg3646
g4130
sg3641
g4849
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g3691
sg3632
g4143
sg3646
g3698
sg3641
g4150
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g3926
sg3632
g4961
sg3646
g3933
sg3641
g4968
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g4373
sg3632
g4369
sg3646
g4380
sg3641
g4377
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g3988
sg3632
g3984
sg3646
g3995
sg3641
g3992
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3877
sg3632
g4565
sg3646
g3884
sg3641
g4572
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3657
sg3632
g3721
sg3646
g3664
sg3641
g3728
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g4373
sg3632
g4485
sg3646
g4380
sg3641
g4492
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3988
sg3632
g5041
sg3646
g3995
sg3641
g5048
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g4136
sg3632
g4842
sg3646
g4130
sg3641
g4849
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g3637
sg3632
g3770
sg3646
g3647
sg3641
g3777
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g3789
sg3632
g4188
sg3646
g3796
sg3641
g4195
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g3757
sg3632
g3890
sg3646
g3764
sg3641
g3897
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g3958
sg3632
g3954
sg3646
g3965
sg3641
g3962
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g3926
sg3632
g4961
sg3646
g3933
sg3641
g4968
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3877
sg3632
g3873
sg3646
g3884
sg3641
g3881
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3757
sg3632
g3890
sg3646
g3764
sg3641
g3897
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3691
sg3632
g4143
sg3646
g3698
sg3641
g4150
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g4403
sg3632
g4399
sg3646
g4410
sg3641
g4407
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3958
sg3632
g4593
sg3646
g3965
sg3641
g4600
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3988
sg3632
g5041
sg3646
g3995
sg3641
g5048
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g4059
sg3632
g4055
sg3646
g4066
sg3641
g4063
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g3958
sg3632
g3954
sg3646
g3965
sg3641
g3962
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g3877
sg3632
g4565
sg3646
g3884
sg3641
g4572
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g4267
sg3632
g4444
sg3646
g4261
sg3641
g4451
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g4059
sg3632
g4055
sg3646
g4066
sg3641
g4063
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g4373
sg3632
g4369
sg3646
g4380
sg3641
g4377
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g4267
sg3632
g4257
sg3646
g4261
sg3641
g4265
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g4403
sg3632
g4429
sg3646
g4410
sg3641
g4436
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3806
sg3632
g4040
sg3646
g3813
sg3641
g4047
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3674
sg3632
g3858
sg3646
g3681
sg3641
g3865
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g4059
sg3632
g4203
sg3646
g4066
sg3641
g4210
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g4059
sg3632
g4203
sg3646
g4066
sg3641
g4210
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g4175
sg3632
g4171
sg3646
g4182
sg3641
g4179
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g3926
sg3632
g3922
sg3646
g3933
sg3641
g3930
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g4267
sg3632
g4257
sg3646
g4261
sg3641
g4265
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3691
sg3632
g4143
sg3646
g3698
sg3641
g4150
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g4059
sg3632
g4055
sg3646
g4066
sg3641
g4063
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g4175
sg3632
g4171
sg3646
g4182
sg3641
g4179
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g3958
sg3632
g3954
sg3646
g3965
sg3641
g3962
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g4267
sg3632
g4444
sg3646
g4261
sg3641
g4451
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3806
sg3632
g4040
sg3646
g3813
sg3641
g4047
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g4373
sg3632
g4485
sg3646
g4380
sg3641
g4492
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g4403
sg3632
g4399
sg3646
g4410
sg3641
g4407
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g4136
sg3632
g4126
sg3646
g4130
sg3641
g4134
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g3657
sg3632
g3721
sg3646
g3664
sg3641
g3728
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3909
sg3632
g3905
sg3646
g3916
sg3641
g3913
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3877
sg3632
g4565
sg3646
g3884
sg3641
g4572
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g4403
sg3632
g4429
sg3646
g4410
sg3641
g4436
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g3877
sg3632
g3873
sg3646
g3884
sg3641
g3881
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g4059
sg3632
g4203
sg3646
g4066
sg3641
g4210
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g3909
sg3632
g4274
sg3646
g3916
sg3641
g4281
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g3988
sg3632
g5041
sg3646
g3995
sg3641
g5048
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g4136
sg3632
g4126
sg3646
g4130
sg3641
g4134
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3740
sg3632
g3939
sg3646
g3747
sg3641
g3946
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3757
sg3632
g3890
sg3646
g3764
sg3641
g3897
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g4175
sg3632
g4341
sg3646
g4182
sg3641
g4348
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g3958
sg3632
g4593
sg3646
g3965
sg3641
g4600
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g3674
sg3632
g3858
sg3646
g3681
sg3641
g3865
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3909
sg3632
g3905
sg3646
g3916
sg3641
g3913
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g3657
sg3632
g3721
sg3646
g3664
sg3641
g3728
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3637
sg3632
g3770
sg3646
g3647
sg3641
g3777
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g3877
sg3632
g4565
sg3646
g3884
sg3641
g4572
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g3988
sg3632
g5041
sg3646
g3995
sg3641
g5048
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g3909
sg3632
g3905
sg3646
g3916
sg3641
g3913
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g3740
sg3632
g3939
sg3646
g3747
sg3641
g3946
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g4175
sg3632
g4341
sg3646
g4182
sg3641
g4348
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3926
sg3632
g4961
sg3646
g3933
sg3641
g4968
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g4267
sg3632
g4257
sg3646
g4261
sg3641
g4265
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g4373
sg3632
g4485
sg3646
g4380
sg3641
g4492
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g4267
sg3632
g4257
sg3646
g4261
sg3641
g4265
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3806
sg3632
g4040
sg3646
g3813
sg3641
g4047
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g4136
sg3632
g4126
sg3646
g4130
sg3641
g4134
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g4175
sg3632
g4341
sg3646
g4182
sg3641
g4348
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3789
sg3632
g4188
sg3646
g3796
sg3641
g4195
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g3691
sg3632
g4143
sg3646
g3698
sg3641
g4150
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g3988
sg3632
g3984
sg3646
g3995
sg3641
g3992
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g3926
sg3632
g4961
sg3646
g3933
sg3641
g4968
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g4136
sg3632
g4842
sg3646
g4130
sg3641
g4849
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3789
sg3632
g4188
sg3646
g3796
sg3641
g4195
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g3740
sg3632
g3939
sg3646
g3747
sg3641
g3946
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g4136
sg3632
g4126
sg3646
g4130
sg3641
g4134
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3909
sg3632
g4274
sg3646
g3916
sg3641
g4281
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g3708
sg3632
g4072
sg3646
g3715
sg3641
g4079
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3926
sg3632
g3922
sg3646
g3933
sg3641
g3930
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g4267
sg3632
g4444
sg3646
g4261
sg3641
g4451
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3926
sg3632
g4961
sg3646
g3933
sg3641
g4968
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g3988
sg3632
g5041
sg3646
g3995
sg3641
g5048
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3926
sg3632
g3922
sg3646
g3933
sg3641
g3930
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I81482576
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'`\xddQ\x0c \xac\xc6\x12P\xac\xc6\x12`\xddQ\x0c\x80\xac\xc6\x12\xf0|\xc7\x12\xf8\xa2\xc7\x12 \xac\xc6\x12\xd0\xad\xc6\x12@}\xc7\x120\xa3\xc7\x12@}\xc7\x12h}\xc7\x12\x80\xac\xc6\x12 \xac\xc6\x12P\xac\xc6\x12\x80\xac\xc6\x12\x90}\xc7\x12 \xac\xc6\x12@}\xc7\x12\xb0\xac\xc6\x12h\xa3\xc7\x12\xd0~\xc7\x12\xb8}\xc7\x12P\xac\xc6\x12\x00\xdfQ\x0cP\xac\xc6\x12\xf8~\xc7\x12\xb8}\xc7\x12\x90}\xc7\x12 aQ\x0c0\xa3\xc7\x12@\xad\xc6\x12\xe0}\xc7\x12\x18}\xc7\x12``Q\x0c\xa0iQ\x0c\xa0\xa3\xc7\x12 aQ\x0c`\xddQ\x0c\xa0iQ\x0cH\xa4\xc7\x12\xe0}\xc7\x12\x90}\xc7\x12\xa0iQ\x0c@}\xc7\x12 \xac\xc6\x12\xd0\xad\xc6\x12\xf0|\xc7\x12\x80\xac\xc6\x12\x00\xdfQ\x0c\xa0iQ\x0c\xf0|\xc7\x12@}\xc7\x12\x18}\xc7\x12\xb8}\xc7\x120\xa3\xc7\x12\xf8\xa2\xc7\x12\x00\xdfQ\x0c\x18}\xc7\x12\xa0\xa3\xc7\x12P\xac\xc6\x12\x18}\xc7\x12h\xa3\xc7\x12@\xad\xc6\x12\xa0iQ\x0c aQ\x0c\xb0\xac\xc6\x12h}\xc7\x12\xb0\xac\xc6\x12\xf0|\xc7\x12h\xa3\xc7\x12\xb8}\xc7\x12\xb0\xac\xc6\x12 \xac\xc6\x12\xb8}\xc7\x12\xa0\xa3\xc7\x12\xf8\xa2\xc7\x12\x10\xad\xc6\x12\xe0}\xc7\x12`\xddQ\x0ch}\xc7\x12\xe0}\xc7\x12\xb8}\xc7\x12h\xa3\xc7\x12\x00\xae\xc6\x12``Q\x0c\x80\xac\xc6\x12 \xac\xc6\x12\xe0}\xc7\x12 \xac\xc6\x12 aQ\x0c\xa0\xa3\xc7\x12\x10\xa4\xc7\x12\x80~\xc7\x12H\x7f\xc7\x12\x00\xdfQ\x0c\xb0\xac\xc6\x12\xf8\xa2\xc7\x12\xa0iQ\x0c \xac\xc6\x12\x00\xdfQ\x0c\x80~\xc7\x12\xf0|\xc7\x12\x00\xdfQ\x0c\xb8}\xc7\x12``Q\x0cX~\xc7\x12 \x7f\xc7\x12``Q\x0c0\xa3\xc7\x12H\xa4\xc7\x12\x80\xac\xc6\x12\xa0iQ\x0c aQ\x0ch}\xc7\x120\xae\xc6\x12\xf8\xa2\xc7\x12\xf0|\xc7\x12@}\xc7\x12\xf8\xa2\xc7\x12H\x7f\xc7\x12\xa0iQ\x0cP\xac\xc6\x12`\xddQ\x0cP\xac\xc6\x12`\xddQ\x0cp\xad\xc6\x12@}\xc7\x12\x18}\xc7\x12\x90}\xc7\x12h}\xc7\x120\xa3\xc7\x12\xb8}\xc7\x12@gQ\x0c\x90}\xc7\x120~\xc7\x12p\xad\xc6\x12\xb0\xac\xc6\x120\xa3\xc7\x12``Q\x0c`\xddQ\x0c\xb0\xac\xc6\x12\x10\xa4\xc7\x12\xa8~\xc7\x12\xe0}\xc7\x12\x90}\xc7\x120\xa3\xc7\x12\x90}\xc7\x12h\xa3\xc7\x12\x00\xdfQ\x0c\xd0\xad\xc6\x12``Q\x0c\xb8}\xc7\x12 aQ\x0c\xd0\xad\xc6\x12\xb0\xac\xc6\x12`\xddQ\x0c\x18}\xc7\x12\x00\xdfQ\x0c@\xad\xc6\x12H\x7f\xc7\x12\x80\xac\xc6\x12 aQ\x0c\x00\xdfQ\x0ch}\xc7\x12\xe0}\xc7\x12\x10\xa4\xc7\x12\xa0\xa3\xc7\x12h\xa3\xc7\x12`\xddQ\x0cX~\xc7\x12P\xac\xc6\x12\xb0\xac\xc6\x12h\xa3\xc7\x120\xa3\xc7\x12h}\xc7\x12\xf8\xa2\xc7\x12@}\xc7\x12\xa0\xa3\xc7\x12\xf0|\xc7\x12\xa8~\xc7\x12``Q\x0c\xa0\xa3\xc7\x12\xa0iQ\x0c\xd8\xa3\xc7\x12\xa0\xa3\xc7\x12h}\xc7\x12\xf8\xa2\xc7\x12P\xac\xc6\x12 aQ\x0c\x90}\xc7\x12 \xac\xc6\x12 aQ\x0c\xf8\xa2\xc7\x120~\xc7\x12\xa0\xa3\xc7\x12\xf0|\xc7\x12\xf8\xa2\xc7\x12``Q\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x00\x1c\xc8\x12\xe0\x1a\xc8\x12\x80=\xcd\x04 \x1b\xc8\x12 \x1d\xc8\x12\x80\x1b\xc8\x12\xc0\x1b\xc8\x12@\x1d\xc8\x12\xc0\x1c\xc8\x12`\x1d\xc8\x12\xe0\x1c\xc8\x12 \x1c\xc8\x12\x80\x1d\xc8\x12\xa0\x1d\xc8\x12\xc0\x1d\xc8\x12 \x1e\xc8\x12@\x1e\xc8\x12\xa0\x1a\xc8\x12\xa0\x1c\xc8\x12`\x1e\xc8\x12\x80\x1e\xc8\x12\xe0\x1e\xc8\x12\x00\x1f\xc8\x12 \x1f\xc8\x12\xe0\x1b\xc8\x12`\x1b\xc8\x12\x80\x1f\xc8\x12\xc0\x1f\xc8\x12\xe0\x1f\xc8\x12\xa0\x1e\xc8\x12`\x1c\xc8\x12\xc0\x1a\xc8\x12\xa0\x1f\xc8\x12\xc0\x1e\xc8\x12\x80\x1a\xc8\x12`\x1a\xc8\x12\x00\x1b\xc8\x12\x00\x1e\xc8\x12`\x1f\xc8\x12\xe0\x1d\xc8\x12@\x1c\xc8\x12\x00\x1d\xc8\x12\xa0\x1b\xc8\x12@\x1b\xc8\x12@\x1f\xc8\x12\xe0\x15Q\x0c\x80\xb0\xda\x12\xe0\xb1\xda\x12`\xb2\xda\x12\xc0\xb1\xda\x12\xe0\xb0\xda\x12\xc0\xb2\xda\x12\x80\xb2\xda\x12\xa0\xb2\xda\x12\xe0\xb2\xda\x12@\xb3\xda\x12 \xb3\xda\x12@\xb2\xda\x12`\xb3\xda\x12\x80\xb3\xda\x12\xe0\xb3\xda\x12\xc0\xb3\xda\x12@\xb1\xda\x12@\xb4\xda\x12`\xb4\xda\x12\xc0\xb0\xda\x12@\xb0\xda\x12\x80\xb4\xda\x12\xe0\xb4\xda\x12\x00\xb5\xda\x12 \xb5\xda\x12`\xb0\xda\x12`\xb5\xda\x12@\xb5\xda\x12\xa0\xb5\xda\x12\x80\xb5\xda\x12\x00\xb1\xda\x12\xc0\xb5\xda\x12\xe0\xb5\xda\x12@\xb6\xda\x12 \xb6\xda\x12\x80\xb6\xda\x12 \xb4\xda\x12\xc0\xb6\xda\x12 \xb2\xda\x12\x00\xb7\xda\x12 \xb7\xda\x12\x80\xb1\xda\x12\x00\xb3\xda\x12@\xb7\xda\x12\xa0\xb7\xda\x12\xc0\xb7\xda\x12\xa0\xb6\xda\x12\x00\xb8\xda\x12\xe0\xb7\xda\x12\x80\x1c\xc8\x12\xa0\xb3\xda\x12`\xb7\xda\x12\xa0\xb8\xda\x12\xc0\xb8\xda\x12\xa0\xb0\xda\x12\x80\xb8\xda\x12\x00\xb9\xda\x12 \xb0\xda\x12\xc0\xb4\xda\x12\x80\xb9\xda\x12\xa0\xb9\xda\x12\xe0\xb6\xda\x12 \xb9\xda\x12`\xb9\xda\x12@\xb8\xda\x12\x00\xb2\xda\x12\xa0\xb4\xda\x12\x00\xb6\xda\x12`\xb1\xda\x12\xc0\xba\xda\x12`\xb6\xda\x12`\xb8\xda\x12\xe0\xb9\xda\x12\x00\xbb\xda\x12`\xbb\xda\x12 \xba\xda\x12\xa0\xba\xda\x12\x00\xba\xda\x12\xe0\xbb\xda\x12@\xbb\xda\x12\x00\xb4\xda\x12\xe0\xba\xda\x12\xc0\xb9\xda\x12\x80\xbc\xda\x12 \xbc\xda\x12\x80\xb7\xda\x12\xa0\xb1\xda\x12\xc0\xbc\xda\x12\xa0\xbb\xda\x12@\xbd\xda\x12\x80\xba\xda\x12`\xbd\xda\x12\x80\xbb\xda\x12@\xbc\xda\x12\xe0\xbc\xda\x12@\xba\xda\x12`\xbc\xda\x12@\xbe\xda\x12`\xbe\xda\x12\x00\xbc\xda\x12 \xbd\xda\x12\xa0\xbe\xda\x12 \xbe\xda\x12\xc0\xbe\xda\x12\xc0\xbd\xda\x12 \xbf\xda\x12@\xbf\xda\x12`\xba\xda\x12\xc0\xbf\xda\x12`\xbf\xda\x12\x80\xbf\xda\x12\x00\xbd\xda\x12\xa0\xbd\xda\x12\x80\xbe\xda\x12 \xbb\xda\x12\xe0\xb8\xda\x12\xa0\xbc\xda\x12\xa0\xbf\xda\x12\xe0\xbd\xda\x12\xe0\xbf\xda\x12 \xb1\xda\x12\x00\xbf\xda\x12\xc0\xbb\xda\x12@\xb9\xda\x12\xc0Q\x18\x03\x00\xbe\xda\x12 \xb8\xda\x12@p\x01\x13\xe0q\x01\x13@q\x01\x13\xc0r\x01\x13`r\x01\x13\xa0r\x01\x13\x80r\x01\x13 q\x01\x13\xe0r\x01\x13@s\x01\x13 s\x01\x13\xa0p\x01\x13`s\x01\x13\x80s\x01\x13\xe0s\x01\x13\x00t\x01\x13\xe0p\x01\x13@t\x01\x13 t\x01\x13`p\x01\x13`t\x01\x13\x80t\x01\x13\xe0t\x01\x13\xc0t\x01\x13 u\x01\x13\x00u\x01\x13`u\x01\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'k7\xd3?,\'\xa2?\x17?s?y4#@\x11\x0c@?lk\x86?>\x91H?\xd7\x8b\xa8?wrf?\x02\x11\xc0?\x9baU?r\x15\x91?\xf0\'\x82?\xfes&?\x0e\xea]?\xf6\xe2;?\n\xa6\x19?\x98)"?\xbd\x8eH?hF\xc4?\xcb\xf9n?\x9c\x1a!@\rWU?\t\x82H?XOD?Urf?\xfb\xd5L?\xb8\xa4Y?n\x19"?\xa4k&?\xb6\xeb\x1d?\xaf\xa2\xf9?\x97/"?\t\xa7Y?\x92\xd5L?i\\U?\x12j&?\x7f\xcb\xac?\xf4\xe3\xdd?z\x0e@?\x12n&?x:3?\x9e\x95H?\x05@3?\x97\xff\x1d?\x11]U?y.b?Q\x8b\x88? (\x82?\xa3q&?\x8b\x13\x80?j\xf9.?\x95."?\xfd?s?B\xae\xaa?N\xb3{?\x0f\x06\xc0?"\x0b@?b\x847?\xea\xdcL?A\x8eH?\xd2pf?4\x897?\xad\'\xa2?\x8d\xd7L?][U?\xe9k\x86?\x990\xa2?\xdc\x8e\xc8?\x9d+b?\xac\xe4\xbd?\x08\x8c\xe8?8+\xa2?t\xe5\x1d??0"?\x06PU?\x82\x05@?2?3?O\xf5\x8e?N\xa6Y?\xd2\xc8;?\x8bk\xe6?\xcd \x82?!\x99H?=y\x07@\x81PD?\xe8\x1cQ?\xad,"?\xdb\x00\x8f?*/b?\x87\x83w?\x8b\x05\xc0?Qg\xa6?\x8fL$@\x85\xf4\xae?\xd8tw?\xbb\xe4]?\x18\x0b@?\x1d\xa1Y?\xd8\xc2;?Ek\xc6?\x0e\xea]?\xdby\x07@\xe3Cb?\xfb\xd9L?.af?\xeb,"?\x81V5@Y\x11\x80?\x9d+b?\xa6\xa5\x19?\xf2\x04\xc0?\x80\xa9Y?\xccb\x15?\xeb\xcc\xfb?[\x17\xb1?\xa6\x0cQ?pOD?\xd0aU?\xb2\xc6{?\x9c\xc5;?|\x14/?=E\x04@u\x8b\x88?\x9a\x7f7?\xa3\xf9.?\xed\xa0Y?\x99\x9fY?\xca\xc6{?\x8a\x8f\x88?uv&?\x0c\xb0\x8a?\x8arf?E@D?T\xa0Y?\xaeZ\x95?\x04\x17\x91?3\x84w?4\xb2\xca?\x9cl\x86?69Q?jo&?hx\x97?\x96\xf1\xae?\x05s&?\x99\xb8*?\x02\x8c7?Zi\xa6?\xf5\xe3\x9d?;z\xd7?\xffI\x84?\x86\xcc;?\x1f\xfc.?%\x84\xa8?\xef9\x93?rrf?f\x04^?\x1d\xf9.?\x01\x90\x08?\x12\xc5{?)\x90H?\xa7B3?D\xd5\x8c?\x9b\x9d\xb9?d\x9a\x19@\x1c\xc1\xdb?b\x0c@?\xc6X\x05@eg\xe6?m\x9f\x99?n\x1bQ?\xcd\xf4n?\xf1\x92\x18@\xf8\x8e\x88?\x00i\x06@\x81\x9fY?\x8d5\xf3?\x03\x8b&?Z-b?\x11X\xb5?\xd5\x8d\xa8?e\x817?\xd2\x1dQ?\xe7""?E\x94H?V\x857?\x0b$"?\\\xe2\xfd?\xc2\x807?QdU?\x8e\xcf\xcc?y\xb0*?\xa4\x85w?\xbc\xc8\xfb?\xf6H\x84?ll\x86?\xda\xc1;?!I\x84?\x88OD?8n&?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S' \x96\xf9\x04\xf0\x95\xf9\x04\xf8`\xea\x040h\xea\x04pj\xea\x04(g\xea\x04(d\xea\x04(a\xea\x04\x08f\xea\x040k\xea\x04(j\xea\x04\xb0o\xea\x04\x18b\xea\x04xh\xea\x04@j\xea\x04ho\xea\x04\xc0k\xea\x04Xa\xea\x04\xd0a\xea\x04Hn\xea\x04\x08i\xea\x04\xe0c\xea\x04\x08c\xea\x04Po\xea\x04\xc8`\xea\x04\xb8j\xea\x04xe\xea\x04\xe0l\xea\x04\x90h\xea\x04h`\xea\x04Xm\xea\x04\xa0a\xea\x04\x18h\xea\x04\x88a\xea\x048i\xea\x04\xd0g\xea\x04 i\xea\x04\xc8l\xea\x04\xf8i\xea\x04\xf8c\xea\x04Pl\xea\x040b\xea\x04\x00e\xea\x04\xa0g\xea\x04`n\xea\x048l\xea\x04\xe0i\xea\x04\xd0j\xea\x048f\xea\x04(m\xea\x04\x88g\xea\x04hi\xea\x04\xf0k\xea\x04\xc8o\xea\x04\xe0`\xea\x04\x90k\xea\x04\x10m\xea\x04\xd8n\xea\x04\xa8k\xea\x04\x80l\xea\x04xk\xea\x04\x10g\xea\x04\xf0n\xea\x04Xj\xea\x04\xa8n\xea\x04\xd0d\xea\x04\xe0f\xea\x04\xb0l\xea\x04Pc\xea\x04\xb8m\xea\x04@a\xea\x04`b\xea\x04\x80i\xea\x04\xd8h\xea\x04\xc0n\xea\x04 `\xea\x04\x98l\xea\x04@m\xea\x04Hk\xea\x04\xe8m\xea\x04\xc8i\xea\x04\x18n\xea\x04`k\xea\x04\x80o\xea\x04\x88m\xea\x04\x98o\xea\x04\x98f\xea\x04\xe0o\xea\x04hl\xea\x04\xb0`\xea\x04\x08l\xea\x04xn\xea\x040e\xea\x04 l\xea\x04\x00b\xea\x04\xf8l\xea\x04\xe8j\xea\x04 c\xea\x04\xd8b\xea\x04\x10d\xea\x04pm\xea\x04\x18k\xea\x040n\xea\x04Pi\xea\x04 o\xea\x04\xd0m\xea\x04\x10j\xea\x04\xf0h\xea\x04`h\xea\x04\x00n\xea\x04\xa0m\xea\x04\xc0x\xc1\x04h|\xc1\x04\xf0{\xc1\x04\x88q\xc1\x04\xa8u\xc1\x04Ps\xc1\x04\xf8s\xc1\x04\xe8w\xc1\x04\xb0v\xc1\x04Xq\xc1\x04hp\xc1\x04\x18r\xc1\x04\xa8r\xc1\x04\x98s\xc1\x04pt\xc1\x04p}\xc1\x04Pp\xc1\x04\xc0r\xc1\x04\xd8r\xc1\x04\x90u\xc1\x04\xf8v\xc1\x04xx\xc1\x04pw\xc1\x04\x08v\xc1\x04 v\xc1\x04\xc8\x7f\xc1\x04\xd8x\xc1\x048s\xc1\x04\xb0p\xc1\x04\xd0}\xc1\x04\x98|\xc1\x04\xd0t\xc1\x04\x90~\xc1\x04\xe0p\xc1\x04pq\xc1\x040u\xc1\x04\x98p\xc1\x04\xf8f\xea\x04\x88j\xea\x04\x00k\xea\x04\x90e\xea\x04`e\xea\x04\xb0f\xea\x04\x10a\xea\x04\xa8e\xea\x04Xd\xea\x04\xb0c\xea\x04pd\xea\x04\xa8h\xea\x04\x80f\xea\x04\xf0e\xea\x04\x90n\xea\x04hc\xea\x04\xe8d\xea\x04pg\xea\x04Hh\xea\x04\xb0i\xea\x04\xb8a\xea\x04hf\xea\x04\xc0e\xea\x04@d\xea\x04\x98i\xea\x04\x98c\xea\x04Pf\xea\x04Xg\xea\x04\xf0b\xea\x04\xe8g\xea\x04\xc8c\xea\x04@g\xea\x048c\xea\x04\xe8a\xea\x04\xb8d\xea\x048`\xea\x04\x98`\xea\x04\xd8e\xea\x04pa\xea\x04\x80`\xea\x04 f\xea\x04\x88d\xea\x04\x00h\xea\x04Hb\xea\x04\xa8b\xea\x04\xa0j\xea\x04\xd8k\xea\x04\xb8g\xea\x04\x18e\xea\x04\x80c\xea\x04\xa0d\xea\x04He\xea\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6442
sg6370
g6438
sg6384
g6449
sg6379
g6446
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6459
sg6370
g6455
sg6384
g6466
sg6379
g6463
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6395
sg6370
g6489
sg6384
g6402
sg6379
g6496
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6514
sg6370
g6504
sg6384
g6508
sg6379
g6512
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6525
sg6370
g6555
sg6384
g6532
sg6379
g6562
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6574
sg6370
g6570
sg6384
g6581
sg6379
g6578
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6442
sg6370
g6587
sg6384
g6449
sg6379
g6594
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6412
sg6370
g6615
sg6384
g6419
sg6379
g6622
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6442
sg6370
g6438
sg6384
g6449
sg6379
g6446
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6395
sg6370
g6489
sg6384
g6402
sg6379
g6496
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6525
sg6370
g6555
sg6384
g6532
sg6379
g6562
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6690
sg6370
g6686
sg6384
g6697
sg6379
g6694
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6707
sg6370
g6703
sg6384
g6714
sg6379
g6711
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6730
sg6370
g6720
sg6384
g6724
sg6379
g6728
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6771
sg6370
g6767
sg6384
g6778
sg6379
g6775
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6412
sg6370
g6615
sg6384
g6419
sg6379
g6622
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6771
sg6370
g6767
sg6384
g6778
sg6379
g6775
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6840
sg6370
g6836
sg6384
g6847
sg6379
g6844
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6442
sg6370
g6587
sg6384
g6449
sg6379
g6594
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6883
sg6370
g6879
sg6384
g6890
sg6379
g6887
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6514
sg6370
g6896
sg6384
g6508
sg6379
g6903
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6915
sg6370
g6911
sg6384
g6922
sg6379
g6919
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6932
sg6370
g6928
sg6384
g6939
sg6379
g6936
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6730
sg6370
g6945
sg6384
g6724
sg6379
g6952
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6840
sg6370
g6960
sg6384
g6847
sg6379
g6967
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6932
sg6370
g6988
sg6384
g6939
sg6379
g6995
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6915
sg6370
g6911
sg6384
g6922
sg6379
g6919
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6883
sg6370
g7016
sg6384
g6890
sg6379
g7023
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6932
sg6370
g6928
sg6384
g6939
sg6379
g6936
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6514
sg6370
g6896
sg6384
g6508
sg6379
g6903
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6459
sg6370
g6455
sg6384
g6466
sg6379
g6463
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6442
sg6370
g6438
sg6384
g6449
sg6379
g6446
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6771
sg6370
g7122
sg6384
g6778
sg6379
g7129
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6932
sg6370
g6928
sg6384
g6939
sg6379
g6936
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6459
sg6370
g6455
sg6384
g6466
sg6379
g6463
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6514
sg6370
g6504
sg6384
g6508
sg6379
g6512
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6741
sg6370
g7189
sg6384
g6748
sg6379
g7196
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6476
sg6370
g7217
sg6384
g6483
sg6379
g7224
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6771
sg6370
g7122
sg6384
g6778
sg6379
g7129
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6514
sg6370
g6504
sg6384
g6508
sg6379
g6512
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6730
sg6370
g6945
sg6384
g6724
sg6379
g6952
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6514
sg6370
g6896
sg6384
g6508
sg6379
g6903
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6707
sg6370
g6703
sg6384
g6714
sg6379
g6711
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6442
sg6370
g6587
sg6384
g6449
sg6379
g6594
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6932
sg6370
g6988
sg6384
g6939
sg6379
g6995
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6840
sg6370
g6960
sg6384
g6847
sg6379
g6967
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6690
sg6370
g7349
sg6384
g6697
sg6379
g7356
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6574
sg6370
g7364
sg6384
g6581
sg6379
g7371
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6690
sg6370
g7349
sg6384
g6697
sg6379
g7356
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6459
sg6370
g7392
sg6384
g6466
sg6379
g7399
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6707
sg6370
g6703
sg6384
g6714
sg6379
g6711
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6741
sg6370
g7189
sg6384
g6748
sg6379
g7196
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6690
sg6370
g7349
sg6384
g6697
sg6379
g7356
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6395
sg6370
g6489
sg6384
g6402
sg6379
g6496
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6730
sg6370
g6945
sg6384
g6724
sg6379
g6952
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6476
sg6370
g7217
sg6384
g6483
sg6379
g7224
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6412
sg6370
g6615
sg6384
g6419
sg6379
g6622
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g6883
sg6370
g7016
sg6384
g6890
sg6379
g7023
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6574
sg6370
g7364
sg6384
g6581
sg6379
g7371
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6883
sg6370
g6879
sg6384
g6890
sg6379
g6887
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6741
sg6370
g7189
sg6384
g6748
sg6379
g7196
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6707
sg6370
g6703
sg6384
g6714
sg6379
g6711
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6690
sg6370
g6686
sg6384
g6697
sg6379
g6694
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6915
sg6370
g7602
sg6384
g6922
sg6379
g7609
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6442
sg6370
g6587
sg6384
g6449
sg6379
g6594
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6395
sg6370
g6489
sg6384
g6402
sg6379
g6496
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6883
sg6370
g6879
sg6384
g6890
sg6379
g6887
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6840
sg6370
g6836
sg6384
g6847
sg6379
g6844
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6730
sg6370
g6720
sg6384
g6724
sg6379
g6728
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6707
sg6370
g7695
sg6384
g6714
sg6379
g7702
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6574
sg6370
g6570
sg6384
g6581
sg6379
g6578
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6883
sg6370
g7016
sg6384
g6890
sg6379
g7023
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6771
sg6370
g6767
sg6384
g6778
sg6379
g6775
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6690
sg6370
g6686
sg6384
g6697
sg6379
g6694
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6476
sg6370
g7217
sg6384
g6483
sg6379
g7224
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6932
sg6370
g6988
sg6384
g6939
sg6379
g6995
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6771
sg6370
g7122
sg6384
g6778
sg6379
g7129
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6574
sg6370
g7364
sg6384
g6581
sg6379
g7371
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6459
sg6370
g6455
sg6384
g6466
sg6379
g6463
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6771
sg6370
g6767
sg6384
g6778
sg6379
g6775
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6915
sg6370
g6911
sg6384
g6922
sg6379
g6919
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6840
sg6370
g6960
sg6384
g6847
sg6379
g6967
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6915
sg6370
g6911
sg6384
g6922
sg6379
g6919
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6915
sg6370
g7602
sg6384
g6922
sg6379
g7609
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6442
sg6370
g6438
sg6384
g6449
sg6379
g6446
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6932
sg6370
g6988
sg6384
g6939
sg6379
g6995
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6840
sg6370
g6960
sg6384
g6847
sg6379
g6967
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6574
sg6370
g6570
sg6384
g6581
sg6379
g6578
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6741
sg6370
g7189
sg6384
g6748
sg6379
g7196
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6459
sg6370
g7392
sg6384
g6466
sg6379
g7399
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6525
sg6370
g6555
sg6384
g6532
sg6379
g6562
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6476
sg6370
g7217
sg6384
g6483
sg6379
g7224
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6883
sg6370
g7016
sg6384
g6890
sg6379
g7023
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6932
sg6370
g6988
sg6384
g6939
sg6379
g6995
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6412
sg6370
g6615
sg6384
g6419
sg6379
g6622
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6375
sg6370
g8126
sg6384
g6385
sg6379
g8133
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6459
sg6370
g7392
sg6384
g6466
sg6379
g7399
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6514
sg6370
g6504
sg6384
g6508
sg6379
g6512
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6647
sg6370
g8180
sg6384
g6654
sg6379
g8187
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6574
sg6370
g6570
sg6384
g6581
sg6379
g6578
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6542
sg6370
g8208
sg6384
g6549
sg6379
g8215
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6741
sg6370
g7189
sg6384
g6748
sg6379
g7196
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6932
sg6370
g6928
sg6384
g6939
sg6379
g6936
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6647
sg6370
g8180
sg6384
g6654
sg6379
g8187
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6459
sg6370
g7392
sg6384
g6466
sg6379
g7399
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6690
sg6370
g6686
sg6384
g6697
sg6379
g6694
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6542
sg6370
g8208
sg6384
g6549
sg6379
g8215
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6915
sg6370
g7602
sg6384
g6922
sg6379
g7609
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6375
sg6370
g8126
sg6384
g6385
sg6379
g8133
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6690
sg6370
g6686
sg6384
g6697
sg6379
g6694
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6707
sg6370
g7695
sg6384
g6714
sg6379
g7702
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6883
sg6370
g7016
sg6384
g6890
sg6379
g7023
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6647
sg6370
g8180
sg6384
g6654
sg6379
g8187
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6542
sg6370
g8208
sg6384
g6549
sg6379
g8215
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6647
sg6370
g8180
sg6384
g6654
sg6379
g8187
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6707
sg6370
g6703
sg6384
g6714
sg6379
g6711
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6771
sg6370
g6767
sg6384
g6778
sg6379
g6775
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6514
sg6370
g6504
sg6384
g6508
sg6379
g6512
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6915
sg6370
g6911
sg6384
g6922
sg6379
g6919
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6840
sg6370
g6836
sg6384
g6847
sg6379
g6844
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6514
sg6370
g6896
sg6384
g6508
sg6379
g6903
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6690
sg6370
g7349
sg6384
g6697
sg6379
g7356
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6375
sg6370
g8126
sg6384
g6385
sg6379
g8133
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6514
sg6370
g6896
sg6384
g6508
sg6379
g6903
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6771
sg6370
g7122
sg6384
g6778
sg6379
g7129
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6442
sg6370
g6587
sg6384
g6449
sg6379
g6594
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6883
sg6370
g6879
sg6384
g6890
sg6379
g6887
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6442
sg6370
g6438
sg6384
g6449
sg6379
g6446
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6840
sg6370
g6960
sg6384
g6847
sg6379
g6967
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6771
sg6370
g7122
sg6384
g6778
sg6379
g7129
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6574
sg6370
g7364
sg6384
g6581
sg6379
g7371
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6883
sg6370
g6879
sg6384
g6890
sg6379
g6887
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6707
sg6370
g7695
sg6384
g6714
sg6379
g7702
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6730
sg6370
g6720
sg6384
g6724
sg6379
g6728
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6707
sg6370
g7695
sg6384
g6714
sg6379
g7702
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6375
sg6370
g8126
sg6384
g6385
sg6379
g8133
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6542
sg6370
g8208
sg6384
g6549
sg6379
g8215
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6690
sg6370
g7349
sg6384
g6697
sg6379
g7356
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6707
sg6370
g7695
sg6384
g6714
sg6379
g7702
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6542
sg6370
g8208
sg6384
g6549
sg6379
g8215
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6574
sg6370
g6570
sg6384
g6581
sg6379
g6578
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6525
sg6370
g6555
sg6384
g6532
sg6379
g6562
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6730
sg6370
g6945
sg6384
g6724
sg6379
g6952
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6459
sg6370
g7392
sg6384
g6466
sg6379
g7399
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6647
sg6370
g8180
sg6384
g6654
sg6379
g8187
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6915
sg6370
g7602
sg6384
g6922
sg6379
g7609
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6730
sg6370
g6945
sg6384
g6724
sg6379
g6952
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6932
sg6370
g6928
sg6384
g6939
sg6379
g6936
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6375
sg6370
g8126
sg6384
g6385
sg6379
g8133
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6730
sg6370
g6720
sg6384
g6724
sg6379
g6728
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6574
sg6370
g7364
sg6384
g6581
sg6379
g7371
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6476
sg6370
g7217
sg6384
g6483
sg6379
g7224
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6412
sg6370
g6615
sg6384
g6419
sg6379
g6622
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6840
sg6370
g6836
sg6384
g6847
sg6379
g6844
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6395
sg6370
g6489
sg6384
g6402
sg6379
g6496
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6840
sg6370
g6836
sg6384
g6847
sg6379
g6844
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6525
sg6370
g6555
sg6384
g6532
sg6379
g6562
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6730
sg6370
g6720
sg6384
g6724
sg6379
g6728
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6459
sg6370
g6455
sg6384
g6466
sg6379
g6463
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6915
sg6370
g7602
sg6384
g6922
sg6379
g7609
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.