ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C25_infer_design1_no_eyetracking_2015_Oct_18_1020
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xc1\xe6r^L\x04N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Oct_18_1020
p66
sVparticipant
p67
VC25
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F0.83345250456306985
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F16.300254764140732
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P11'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F14.867000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F1.98
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p102
sg21
F2
sg69
Vn
sa(dp103
g63
g64
sg20
F8.1340000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F0.95999999999999908
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'\x07\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p109
sg21
F1.8999999999999999
sg69
Vn
sa(dp110
g63
g64
sg20
F3.8010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F0.31999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\x14\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p116
sg21
F1.5
sg69
Vn
sa(dp117
g63
g64
sg20
F3.6840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F0.67999999999999905
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'"\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p123
sg21
F1.7
sg69
Vn
sa(dp124
g63
g64
sg20
F5.5670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F2.0200000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x1c\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p130
sg21
F1.2
sg69
Vn
sa(dp131
g63
g64
sg20
F6.0670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F1
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x0f\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p137
sg21
F1.1000000000000001
sg69
Vn
sa(dp138
g63
g64
sg20
F6.7169999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F2.0000000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\x1f\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p144
sg21
F1.2
sg69
Vn
sa(dp145
g63
g64
sg20
F7.3010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F0.67999999999999905
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x18\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p151
sg21
F1.8
sg69
Vn
sa(dp152
g63
g64
sg20
F3.9340000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F0.39999999999999947
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x15\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V29-beans.png
p158
sg21
F1
sg69
Vn
sa(dp159
g63
g64
sg20
F3.7669999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F1.5200000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x06\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V7-olives.png
p165
sg21
F1.2
sg69
Vn
sa(dp166
g63
g64
sg20
F3.734
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F1.0399999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'%\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p172
sg21
F1.7
sg69
Vn
sa(dp173
g63
g64
sg20
F3.1339999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0.95999999999999908
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'&\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V50-polo.png
p179
sg21
F2
sg69
Vn
sa(dp180
g63
g64
sg20
F8.0839999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0.99999999999999978
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x1d\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V40-sardines.png
p186
sg21
F1.3
sg69
Vn
sa(dp187
g63
g64
sg20
F3.7669999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F1.0999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\x11\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p193
sg21
F1.6000000000000001
sg69
Vn
sa(dp194
g63
g64
sg20
F3.4009999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F1.4999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\r\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p200
sg21
F1.7
sg69
Vn
sa(dp201
g63
g64
sg20
F3.9009999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F2.5000000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'#\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p207
sg21
F1.2
sg69
Vn
sa(dp208
g63
g64
sg20
F2.8839999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F0.93999999999999972
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\n\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p214
sg21
F1.2
sg69
Vn
sa(dp215
g63
g64
sg20
F4.9169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F0.71999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S"'\x00\x00\x00"
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V51-mars.png
p221
sg21
F1.8
sg69
Vn
sa(dp222
g63
g64
sg20
F2.984
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F1.6200000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x03\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V4-corn.png
p228
sg21
F1.1000000000000001
sg69
Vn
sa(dp229
g63
g64
sg20
F2.2509999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F1.4999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\t\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p235
sg21
F1.8999999999999999
sg69
Vn
sa(dp236
g63
g64
sg20
F4.8840000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F1.9800000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x1a\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V35-raisins.png
p242
sg21
F1.3
sg69
Vn
sa(dp243
g63
g64
sg20
F2.867
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F1.4599999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x12\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p249
sg21
F1.7
sg69
Vn
sa(dp250
g63
g64
sg20
F2.5510000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F1.4600000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'\x02\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p256
sg21
F1
sg69
Vn
sa(dp257
g63
g64
sg20
F3.4169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F1.9800000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\x17\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p263
sg21
F1
sg69
Vn
sa(dp264
g63
g64
sg20
F3.0169999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F1.1800000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x10\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V22-daim.png
p270
sg21
F1.1000000000000001
sg69
Vn
sa(dp271
g63
g64
sg20
F2.4510000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F1.5800000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'!\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V44-crunch.png
p277
sg21
F1.3
sg69
Vn
sa(dp278
g63
g64
sg20
F4.7009999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F2.3800000000000008
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x0c\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V18-mms.png
p284
sg21
F1.3999999999999999
sg69
Vn
sa(dp285
g63
g64
sg20
F2.0009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F0.97999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'$\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V48-twix.png
p291
sg21
F1.1000000000000001
sg69
Vn
sa(dp292
g63
g64
sg20
F3.5510000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0.69999999999999929
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\x04\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p298
sg21
F1.3999999999999999
sg69
Vn
sa(dp299
g63
g64
sg20
F2.2669999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F0.87999999999999989
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x0e\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p305
sg21
F1.1000000000000001
sg69
Vn
sa(dp306
g63
g64
sg20
F3.4169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F1.1999999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x0b\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p312
sg21
F1.3999999999999999
sg69
Vn
sa(dp313
g63
g64
sg20
F4.1509999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F0.97999999999999976
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'\x08\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p319
sg21
F1.2
sg69
Vn
sa(dp320
g63
g64
sg20
F3.0009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F1.4999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x05\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p326
sg21
F1.8
sg69
Vn
sa(dp327
g63
g64
sg20
F7.7839999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F1.2600000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x19\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p333
sg21
F1
sg69
Vn
sa(dp334
g63
g64
sg20
F3.3170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F0.69999999999999929
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\x13\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p340
sg21
F1.3999999999999999
sg69
Vn
sa(dp341
g63
g64
sg20
F2.0009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F1.3000000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'\x1b\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p347
sg21
F1.1000000000000001
sg69
Vn
sa(dp348
g63
g64
sg20
F2.5169999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F0.8199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'\x16\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p354
sg21
F1.3999999999999999
sg69
Vn
sa(dp355
g63
g64
sg20
F3.2010000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F0.93999999999999906
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S' \x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p361
sg21
F1.8999999999999999
sg69
Vn
sa(dp362
g63
g64
sg20
F2.9009999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F1.5000000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x01\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p368
sg21
F1.2
sg69
Vn
sa(dp369
g63
g64
sg20
F2.1179999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F1.1000000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x1e\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p375
sg21
F1.1000000000000001
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F21.133169287578426
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p380
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'right'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F2.0833639814366052
sg27
F4.3339999999999996
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'50-polo.png'
p389
sg26
F5.2000000000000011
sg28
F3
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'right'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F1.96680881684631
sg27
F5.867
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'51-mars.png'
p398
sg26
F4.4000000000000004
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'left'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F1.7668471911226789
sg27
F2.7010000000000001
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'49-yorkie.png'
p407
sg26
F5.2000000000000002
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'right'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F1.5169151871472195
sg27
F1.5669999999999999
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'7-olives.png'
p416
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'right'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F1.5668462217873866
sg27
F1.3169999999999999
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p425
sg26
F5.1000000000000014
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'left'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F3.0168373552198773
sg27
F1.4510000000000001
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p434
sg26
F5.7999999999999989
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'left'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F1.4667572139933327
sg27
F2.0009999999999999
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'31-hobnobs.png'
p443
sg26
F5.2999999999999998
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'left'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F4.3000999555816861
sg27
F1.484
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'29-beans.png'
p452
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'right'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F2.7002056701556967
sg27
F2.0510000000000002
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p461
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'left'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F2.7334082572547231
sg27
F1.4510000000000001
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p470
sg26
F5.2000000000000002
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F2.850041823969832
sg27
F3.484
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p479
sg26
F5.4999999999999991
sg28
F4
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'right'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.1167305002511512
sg27
F1.3839999999999999
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p488
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'left'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.1000448175054771
sg27
F1.6339999999999999
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p497
sg26
F5.3999999999999995
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'right'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F1.4668846530834116
sg27
F1.284
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p506
sg26
F5.6999999999999984
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'left'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F1.316765966521416
sg27
F1.4510000000000001
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p515
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'right'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F1.7000309046921984
sg27
F1.8169999999999999
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'18-mms.png'
p524
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'left'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.5000553091352913
sg27
F1.7170000000000001
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p533
sg26
F5.6999999999999984
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'right'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F1.1165859552429538
sg27
F1.5509999999999999
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p542
sg26
F4.7000000000000011
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F1.2166991964210183
sg27
F3.0009999999999999
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p551
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'right'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F1.1000633489168195
sg27
F3.734
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p560
sg26
F4.7000000000000011
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'right'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F1.3167736641845522
sg27
F2.3340000000000001
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'4-corn.png'
p569
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'right'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.0334443507421156
sg27
F1.101
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p578
sg26
F4.6000000000000005
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'left'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F1.583545874366223
sg27
F1.734
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'22-daim.png'
p587
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'left'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F1.0002306447961473
sg27
F1.3009999999999999
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'25-kitkat.png'
p596
sg26
F5.2999999999999998
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'right'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F1.4501795836305291
sg27
F1.5669999999999999
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p605
sg26
F5.9999999999999982
sg28
F3
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'right'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F1.3002587555216678
sg27
F1.0009999999999999
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p614
sg26
F5.6999999999999993
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'right'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F1.4835318475132908
sg27
F2.351
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p623
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'right'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F0.95021008918456573
sg27
F0.90100000000000002
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'5-pineapple.png'
p632
sg26
F3.8000000000000003
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'left'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.5668710253686413
sg27
F1.8169999999999999
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'38-maltesers.png'
p641
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'left'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F1.3999286683214223
sg27
F1.1339999999999999
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p650
sg26
F5.9999999999999982
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'left'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F0.76672944538609045
sg27
F1.1839999999999999
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'35-raisins.png'
p659
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'left'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F1.2667422748249919
sg27
F1.2170000000000001
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p668
sg26
F5.1999999999999993
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'left'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F0.88338667528796577
sg27
F0.70099999999999996
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p677
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'left'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F1.1333865327387684
sg27
F1.2170000000000001
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'40-sardines.png'
p686
sg26
F4.1000000000000005
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'right'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F1.0002506017005999
sg27
F1.7669999999999999
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p695
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'right'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F0.88303429337429407
sg27
F1.2010000000000001
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p704
sg26
F3.7999999999999998
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'right'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F1.7168853658299668
sg27
F1.651
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'48-twix.png'
p713
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'left'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F0.90015703232847954
sg27
F1.284
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'46-pistachios.png'
p722
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'left'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F1.350120226094532
sg27
F1.2669999999999999
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'44-crunch.png'
p731
sg26
F3.4000000000000004
sg28
F3
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'left'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F1.4168683739512744
sg27
F1.6339999999999999
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F425.78959635164983
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F3.1002010515578604
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'15-walnut_whip.png'
p743
sg82
S'15-walnut_whip.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'28-maple_pecan.png'
p748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\n\x12\n$\x08\x06x@'
tRp753
sa(dp754
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p755
sg82
S'37-nakd_cashew_cookie.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'9-yu_mango_pieces.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\n\x12\n$\x19\x0e%\x18'
tRp764
sa(dp765
g63
g64
sg81
S'12-topic.png'
p766
sg82
S'12-topic.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'39-mackerel.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\n\x12\n$"\n\xd5p'
tRp775
sa(dp776
g63
g64
sg81
S'52-aero_mousse.png'
p777
sg82
S'14-discos_salt_vinegar.png'
p778
sg56
Vr
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'14-discos_salt_vinegar.png'
p782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\n\x12\n$*\x06\\\xe8'
tRp786
sa(dp787
g63
g64
sg81
S'32-hovis_crackers.png'
p788
sg82
S'32-hovis_crackers.png'
p789
sg56
Vr
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p792
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p794
sS'practice_loop.thisIndex'
p795
g59
(g98
S'\x04\x00\x00\x00'
tRp796
sg34
g752
(S'\x07\xdf\n\x12\n$2\n\xec\xe0'
tRp797
sa(dp798
g63
g64
sg81
S'53-cheestrings.png'
p799
sg82
S'53-cheestrings.png'
p800
sg56
Vr
sS'practice_loop.thisN'
p801
I5
sS'practice_loop.thisTrialN'
p802
I5
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p803
I0
sg83
S'47-picnic.png'
p804
sg33
g804
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p805
sS'practice_loop.thisIndex'
p806
g59
(g98
S'\x05\x00\x00\x00'
tRp807
sg34
g752
(S'\x07\xdf\n\x12\n$:\x0e\xc5@'
tRp808
sa(dp809
g63
g64
sg81
g755
sg82
S'9-yu_mango_pieces.png'
p810
sg56
Vr
sS'practice_loop.thisN'
p811
I6
sS'practice_loop.thisTrialN'
p812
I6
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p813
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p814
sS'practice_loop.thisIndex'
p815
g59
(g98
S'\x06\x00\x00\x00'
tRp816
sg34
g752
(S'\x07\xdf\n\x12\n%\x06\x02\xea\x18'
tRp817
sa(dp818
g63
g64
sg81
S'11-snickers.png'
p819
sg82
S'54-frubes_yogurt.png'
p820
sg56
Vr
sS'practice_loop.thisN'
p821
I7
sS'practice_loop.thisTrialN'
p822
I7
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p823
I0
sg83
S'54-frubes_yogurt.png'
p824
sg33
g819
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p825
sS'practice_loop.thisIndex'
p826
g59
(g98
S'\x07\x00\x00\x00'
tRp827
sg34
g752
(S'\x07\xdf\n\x12\n%\x0e\x01\xc5 '
tRp828
sa(dp829
g63
g64
sg81
g766
sg82
S'39-mackerel.png'
p830
sg56
Vr
sS'practice_loop.thisN'
p831
I8
sS'practice_loop.thisTrialN'
p832
I8
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p833
I0
sg83
g771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p834
sS'practice_loop.thisIndex'
p835
g59
(g98
S'\x08\x00\x00\x00'
tRp836
sg34
g752
(S'\x07\xdf\n\x12\n%\x15\x03\x05p'
tRp837
sa(dp838
g63
g64
sg81
g799
sg82
S'47-picnic.png'
p839
sg56
Vr
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p842
I0
sg83
g804
sg33
g799
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S'\x07\xdf\n\x12\n%\x1c\x05\x01@'
tRp846
sa(dp847
g63
g64
sg81
g788
sg82
S'24-food_doctor_apple_walnut_bar.png'
p848
sg56
Vr
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\n\x12\n%#\x08dp'
tRp855
sa(dp856
g63
g64
sg81
g777
sg82
S'52-aero_mousse.png'
p857
sg56
Vr
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\n\x12\n%*\x05\x9d\x80'
tRp864
sa(dp865
g63
g64
sg81
g743
sg82
S'28-maple_pecan.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\n\x12\n%1\x0e{\x08'
tRp873
sa(dp874
g63
g64
sg81
g819
sg82
S'11-snickers.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g824
sg33
g819
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\n\x12\n%9\x02\x9f\xe0'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F82.381706589028454
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'25-kitkat.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'right'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'25-kitkat.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'31-hobnobs.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p907
I0
sS'img_wrong'
p908
S'31-hobnobs.png'
p909
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F1.5668351029405585
sg34
g752
(S'\x07\xdf\n\x12\n\'"\n\xf8\x98'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'10-bounty_redo.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'left'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'4-corn.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'4-corn.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p925
I0
sg908
S'10-bounty_redo.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F1.0835287684481045
sg34
g752
(S"\x07\xdf\n\x12\n')\x04\xda0"
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'31-hobnobs.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'right'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p936
g59
(g98
S'\x02\x00\x00\x00'
tRp937
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p938
I0
sg903
S'25-kitkat.png'
p939
sS'block_loop.thisRepN'
p940
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p941
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p942
Nsg69
Vn
sS'block_loop.thisTrialN'
p943
I0
sg39
F1.4168563998086938
sg34
g752
(S"\x07\xdf\n\x12\n'/\x06\x9bh"
tRp944
sa(dp945
S'trial_loop.thisTrialN'
p946
I3
sg894
S'3-ellas_strawberries_apples.png'
p947
sS'block_loop.thisIndex'
p948
g888
sg38
S'right'
p949
sg58
g62
sS'trial_loop.thisN'
p950
I3
sg33
S'3-ellas_strawberries_apples.png'
p951
sg63
g64
sS'trial_loop.thisIndex'
p952
g59
(g98
S'\x03\x00\x00\x00'
tRp953
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p954
I0
sg903
S'13-mccoys_steak_crisps.png'
p955
sS'block_loop.thisRepN'
p956
I0
sg906
g951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p957
I0
sg908
S'13-mccoys_steak_crisps.png'
p958
sg55
g11
sS'block_loop.thisTrial'
p959
Nsg69
Vn
sS'block_loop.thisTrialN'
p960
I0
sg39
F1.3667172431646577
sg34
g752
(S"\x07\xdf\n\x12\n'5\r]\xe0"
tRp961
sa(dp962
S'trial_loop.thisTrialN'
p963
I4
sg894
S'50-polo.png'
p964
sS'block_loop.thisIndex'
p965
g888
sg38
S'right'
p966
sg58
g62
sS'trial_loop.thisN'
p967
I4
sg33
S'48-twix.png'
p968
sg63
g64
sS'trial_loop.thisIndex'
p969
g59
(g98
S'\x04\x00\x00\x00'
tRp970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p971
I0
sg903
S'48-twix.png'
p972
sS'block_loop.thisRepN'
p973
I0
sg906
g968
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p974
I0
sg908
S'50-polo.png'
p975
sg55
g11
sS'block_loop.thisTrial'
p976
Nsg69
Vn
sS'block_loop.thisTrialN'
p977
I0
sg39
F1.7505301409130425
sg34
g752
(S'\x07\xdf\n\x12\n(\x00\x04&\x80'
tRp978
sa(dp979
S'trial_loop.thisTrialN'
p980
I5
sg894
g915
sS'block_loop.thisIndex'
p981
g888
sg38
S'right'
p982
sg58
g62
sS'trial_loop.thisN'
p983
I5
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p984
g59
(g98
S'\x05\x00\x00\x00'
tRp985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p986
I0
sg903
g923
sS'block_loop.thisRepN'
p987
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p988
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p989
Nsg69
Vn
sS'block_loop.thisTrialN'
p990
I0
sg39
F1.5668718806646211
sg34
g752
(S'\x07\xdf\n\x12\n(\x07\x00\xe2\x90'
tRp991
sa(dp992
S'trial_loop.thisTrialN'
p993
I6
sg894
S'51-mars.png'
p994
sS'block_loop.thisIndex'
p995
g888
sg38
S'right'
p996
sg58
g62
sS'trial_loop.thisN'
p997
I6
sg33
S'51-mars.png'
p998
sg63
g64
sS'trial_loop.thisIndex'
p999
g59
(g98
S'\x06\x00\x00\x00'
tRp1000
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1001
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p1002
sS'block_loop.thisRepN'
p1003
I0
sg906
g998
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1004
I0
sg908
S'27-hartleys_raspberries_jelly.png'
p1005
sg55
g11
sS'block_loop.thisTrial'
p1006
Nsg69
Vn
sS'block_loop.thisTrialN'
p1007
I0
sg39
F1.8333869318769302
sg34
g752
(S'\x07\xdf\n\x12\n(\r\n\x06h'
tRp1008
sa(dp1009
S'trial_loop.thisTrialN'
p1010
I7
sg894
S'46-pistachios.png'
p1011
sS'block_loop.thisIndex'
p1012
g888
sg38
S'left'
p1013
sg58
g62
sS'trial_loop.thisN'
p1014
I7
sg33
S'46-pistachios.png'
p1015
sg63
g64
sS'trial_loop.thisIndex'
p1016
g59
(g98
S'\x07\x00\x00\x00'
tRp1017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1018
I0
sg903
S'29-beans.png'
p1019
sS'block_loop.thisRepN'
p1020
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1021
I0
sg908
S'29-beans.png'
p1022
sg55
g11
sS'block_loop.thisTrial'
p1023
Nsg69
Vn
sS'block_loop.thisTrialN'
p1024
I0
sg39
F1.0667758024242175
sg34
g752
(S'\x07\xdf\n\x12\n(\x14\x07\xf3('
tRp1025
sa(dp1026
S'trial_loop.thisTrialN'
p1027
I8
sg894
S'23-crunchie_redo.png'
p1028
sS'block_loop.thisIndex'
p1029
g888
sg38
S'left'
p1030
sg58
g62
sS'trial_loop.thisN'
p1031
I8
sg33
S'33-ambrosia_rice.png'
p1032
sg63
g64
sS'trial_loop.thisIndex'
p1033
g59
(g98
S'\x08\x00\x00\x00'
tRp1034
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1035
I0
sg903
S'33-ambrosia_rice.png'
p1036
sS'block_loop.thisRepN'
p1037
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1038
I0
sg908
S'23-crunchie_redo.png'
p1039
sg55
g11
sS'block_loop.thisTrial'
p1040
Nsg69
Vn
sS'block_loop.thisTrialN'
p1041
I0
sg39
F1.1669024432383139
sg34
g752
(S'\x07\xdf\n\x12\n(\x1a\tu\xe0'
tRp1042
sa(dp1043
S'trial_loop.thisTrialN'
p1044
I9
sg894
S'29-beans.png'
p1045
sS'block_loop.thisIndex'
p1046
g888
sg38
S'right'
p1047
sg58
g62
sS'trial_loop.thisN'
p1048
I9
sg33
g1015
sg63
g64
sS'trial_loop.thisIndex'
p1049
g59
(g98
S'\t\x00\x00\x00'
tRp1050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1051
I0
sg903
S'46-pistachios.png'
p1052
sS'block_loop.thisRepN'
p1053
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1054
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p1055
Nsg69
Vn
sS'block_loop.thisTrialN'
p1056
I0
sg39
F1.5835196452917444
sg34
g752
(S'\x07\xdf\n\x12\n( \x0c\xa6H'
tRp1057
sa(dp1058
S'trial_loop.thisTrialN'
p1059
I10
sg894
S'41-peanuts_redo.png'
p1060
sS'block_loop.thisIndex'
p1061
g888
sg38
S'left'
p1062
sg58
g62
sS'trial_loop.thisN'
p1063
I10
sg33
S'41-peanuts_redo.png'
p1064
sg63
g64
sS'trial_loop.thisIndex'
p1065
g59
(g98
S'\n\x00\x00\x00'
tRp1066
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1067
I0
sg903
S'45-chewy_nougat_redo.png'
p1068
sS'block_loop.thisRepN'
p1069
I0
sg906
g1064
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1070
I0
sg908
S'45-chewy_nougat_redo.png'
p1071
sg55
g11
sS'block_loop.thisTrial'
p1072
Nsg69
Vn
sS'block_loop.thisTrialN'
p1073
I0
sg39
F1.3001820639885864
sg34
g752
(S"\x07\xdf\n\x12\n('\x06\xc2x"
tRp1074
sa(dp1075
S'trial_loop.thisTrialN'
p1076
I11
sg894
S'21-nakd_banana_crunch.png'
p1077
sS'block_loop.thisIndex'
p1078
g888
sg38
S'left'
p1079
sg58
g62
sS'trial_loop.thisN'
p1080
I11
sg33
S'21-nakd_banana_crunch.png'
p1081
sg63
g64
sS'trial_loop.thisIndex'
p1082
g59
(g98
S'\x0b\x00\x00\x00'
tRp1083
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1084
I0
sg903
S'1-treacle_cookies.png'
p1085
sS'block_loop.thisRepN'
p1086
I0
sg906
g1081
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1087
I0
sg908
S'1-treacle_cookies.png'
p1088
sg55
g11
sS'block_loop.thisTrial'
p1089
Nsg69
Vn
sS'block_loop.thisTrialN'
p1090
I0
sg39
F1.7332708397125316
sg34
g752
(S'\x07\xdf\n\x12\n(-\x0b\xdb('
tRp1091
sa(dp1092
S'trial_loop.thisTrialN'
p1093
I12
sg894
S'26-walkers_smoky_bacon.png'
p1094
sS'block_loop.thisIndex'
p1095
g888
sg38
S'right'
p1096
sg58
g62
sS'trial_loop.thisN'
p1097
I12
sg33
S'44-crunch.png'
p1098
sg63
g64
sS'trial_loop.thisIndex'
p1099
g59
(g98
S'\x0c\x00\x00\x00'
tRp1100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1101
I0
sg903
S'44-crunch.png'
p1102
sS'block_loop.thisRepN'
p1103
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1104
I0
sg908
S'26-walkers_smoky_bacon.png'
p1105
sg55
g11
sS'block_loop.thisTrial'
p1106
Nsg69
Vn
sS'block_loop.thisTrialN'
p1107
I0
sg39
F1.4168849096722624
sg34
g752
(S'\x07\xdf\n\x12\n(4\x08X\xb8'
tRp1108
sa(dp1109
S'trial_loop.thisTrialN'
p1110
I13
sg894
S'22-daim.png'
p1111
sS'block_loop.thisIndex'
p1112
g888
sg38
S'left'
p1113
sg58
g62
sS'trial_loop.thisN'
p1114
I13
sg33
S'22-daim.png'
p1115
sg63
g64
sS'trial_loop.thisIndex'
p1116
g59
(g98
S'\r\x00\x00\x00'
tRp1117
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1118
I0
sg903
S'7-olives.png'
p1119
sS'block_loop.thisRepN'
p1120
I0
sg906
g1115
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1121
I0
sg908
S'7-olives.png'
p1122
sg55
g11
sS'block_loop.thisTrial'
p1123
Nsg69
Vn
sS'block_loop.thisTrialN'
p1124
I0
sg39
F1.0168527505459224
sg34
g752
(S'\x07\xdf\n\x12\n(:\x0f\x1b0'
tRp1125
sa(dp1126
S'trial_loop.thisTrialN'
p1127
I14
sg894
S'13-mccoys_steak_crisps.png'
p1128
sS'block_loop.thisIndex'
p1129
g888
sg38
S'right'
p1130
sg58
g62
sS'trial_loop.thisN'
p1131
I14
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p1132
g59
(g98
S'\x0e\x00\x00\x00'
tRp1133
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1134
I0
sg903
S'3-ellas_strawberries_apples.png'
p1135
sS'block_loop.thisRepN'
p1136
I0
sg906
g951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1137
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p1138
Nsg69
Vn
sS'block_loop.thisTrialN'
p1139
I0
sg39
F1.516905778892351
sg34
g752
(S'\x07\xdf\n\x12\n)\x05\x00\xa7\xf8'
tRp1140
sa(dp1141
S'trial_loop.thisTrialN'
p1142
I15
sg894
S'49-yorkie.png'
p1143
sS'block_loop.thisIndex'
p1144
g888
sg38
S'right'
p1145
sg58
g62
sS'trial_loop.thisN'
p1146
I15
sg33
S'35-raisins.png'
p1147
sg63
g64
sS'trial_loop.thisIndex'
p1148
g59
(g98
S'\x0f\x00\x00\x00'
tRp1149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1150
I0
sg903
S'35-raisins.png'
p1151
sS'block_loop.thisRepN'
p1152
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1153
I0
sg908
S'49-yorkie.png'
p1154
sg55
g11
sS'block_loop.thisTrial'
p1155
Nsg69
Vn
sS'block_loop.thisTrialN'
p1156
I0
sg39
F1.4167876910375981
sg34
g752
(S'\x07\xdf\n\x12\n)\x0b\t\x148'
tRp1157
sa(dp1158
S'trial_loop.thisTrialN'
p1159
I16
sg894
S'45-chewy_nougat_redo.png'
p1160
sS'block_loop.thisIndex'
p1161
g888
sg38
S'right'
p1162
sg58
g62
sS'trial_loop.thisN'
p1163
I16
sg33
g1064
sg63
g64
sS'trial_loop.thisIndex'
p1164
g59
(g98
S'\x10\x00\x00\x00'
tRp1165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1166
I0
sg903
S'41-peanuts_redo.png'
p1167
sS'block_loop.thisRepN'
p1168
I0
sg906
g1064
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1169
I0
sg908
g1071
sg55
g11
sS'block_loop.thisTrial'
p1170
Nsg69
Vn
sS'block_loop.thisTrialN'
p1171
I0
sg39
F1.2334133890301473
sg34
g752
(S'\x07\xdf\n\x12\n)\x12\x00\x94p'
tRp1172
sa(dp1173
S'trial_loop.thisTrialN'
p1174
I17
sg894
S'20-fruit_pastilles.png'
p1175
sS'block_loop.thisIndex'
p1176
g888
sg38
S'left'
p1177
sg58
g62
sS'trial_loop.thisN'
p1178
I17
sg33
S'20-fruit_pastilles.png'
p1179
sg63
g64
sS'trial_loop.thisIndex'
p1180
g59
(g98
S'\x11\x00\x00\x00'
tRp1181
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1182
I0
sg903
S'2-steamed_puddings.png'
p1183
sS'block_loop.thisRepN'
p1184
I0
sg906
S'2-steamed_puddings.png'
p1185
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1186
I0
sg908
g1179
sg55
g11
sS'block_loop.thisTrial'
p1187
Nsg69
Vn
sS'block_loop.thisTrialN'
p1188
I0
sg39
F1.5000966484374203
sg34
g752
(S'\x07\xdf\n\x12\n)\x18\x04\xb7\x08'
tRp1189
sa(dp1190
S'trial_loop.thisTrialN'
p1191
I18
sg894
S'16-skips_prawn.png'
p1192
sS'block_loop.thisIndex'
p1193
g888
sg38
S'left'
p1194
sg58
g62
sS'trial_loop.thisN'
p1195
I18
sg33
S'42-mrkipling_lemon_slices.png'
p1196
sg63
g64
sS'trial_loop.thisIndex'
p1197
g59
(g98
S'\x12\x00\x00\x00'
tRp1198
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1199
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1200
sS'block_loop.thisRepN'
p1201
I0
sg906
g1196
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1202
I0
sg908
S'16-skips_prawn.png'
p1203
sg55
g11
sS'block_loop.thisTrial'
p1204
Nsg69
Vn
sS'block_loop.thisTrialN'
p1205
I0
sg39
F1.2667419897261425
sg34
g752
(S'\x07\xdf\n\x12\n)\x1e\x0c\xe8\xb0'
tRp1206
sa(dp1207
S'trial_loop.thisTrialN'
p1208
I19
sg894
g1143
sS'block_loop.thisIndex'
p1209
g888
sg38
S'right'
p1210
sg58
g62
sS'trial_loop.thisN'
p1211
I19
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p1212
g59
(g98
S'\x13\x00\x00\x00'
tRp1213
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1214
I0
sg903
g1151
sS'block_loop.thisRepN'
p1215
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1216
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p1217
Nsg69
Vn
sS'block_loop.thisTrialN'
p1218
I0
sg39
F1.1672659439984727
sg34
g752
(S'\x07\xdf\n\x12\n)%\x02B '
tRp1219
sa(dp1220
S'trial_loop.thisTrialN'
p1221
I20
sg894
g895
sS'block_loop.thisIndex'
p1222
g888
sg38
S'left'
p1223
sg58
g62
sS'trial_loop.thisN'
p1224
I20
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1225
g59
(g98
S'\x14\x00\x00\x00'
tRp1226
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1227
I0
sg903
g904
sS'block_loop.thisRepN'
p1228
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1229
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1230
Nsg69
Vn
sS'block_loop.thisTrialN'
p1231
I0
sg39
F1.8168936907102307
sg34
g752
(S'\x07\xdf\n\x12\n)+\x054\x08'
tRp1232
sa(dp1233
S'trial_loop.thisTrialN'
p1234
I21
sg894
S'17-jacobs_mini_cheddars_redo.png'
p1235
sS'block_loop.thisIndex'
p1236
g888
sg38
S'left'
p1237
sg58
g62
sS'trial_loop.thisN'
p1238
I21
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1239
sg63
g64
sS'trial_loop.thisIndex'
p1240
g59
(g98
S'\x15\x00\x00\x00'
tRp1241
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1242
I0
sg903
S'8-liquorice_catherine_wheels.png'
p1243
sS'block_loop.thisRepN'
p1244
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1245
I0
sg908
S'8-liquorice_catherine_wheels.png'
p1246
sg55
g11
sS'block_loop.thisTrial'
p1247
Nsg69
Vn
sS'block_loop.thisTrialN'
p1248
I0
sg39
F1.3332620586745634
sg34
g752
(S'\x07\xdf\n\x12\n)2\x02\xe60'
tRp1249
sa(dp1250
S'trial_loop.thisTrialN'
p1251
I22
sg894
g1143
sS'block_loop.thisIndex'
p1252
g888
sg38
S'right'
p1253
sg58
g62
sS'trial_loop.thisN'
p1254
I22
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p1255
g59
(g98
S'\x16\x00\x00\x00'
tRp1256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1257
I0
sg903
g1151
sS'block_loop.thisRepN'
p1258
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1259
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p1260
Nsg69
Vn
sS'block_loop.thisTrialN'
p1261
I0
sg39
F1.3001660984650698
sg34
g752
(S'\x07\xdf\n\x12\n)8\x08t\x10'
tRp1262
sa(dp1263
S'trial_loop.thisTrialN'
p1264
I23
sg894
S'18-mms.png'
p1265
sS'block_loop.thisIndex'
p1266
g888
sg38
S'left'
p1267
sg58
g62
sS'trial_loop.thisN'
p1268
I23
sg33
S'18-mms.png'
p1269
sg63
g64
sS'trial_loop.thisIndex'
p1270
g59
(g98
S'\x17\x00\x00\x00'
tRp1271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1272
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1273
sS'block_loop.thisRepN'
p1274
I0
sg906
g1269
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1275
I0
sg908
S'43-mrporky_pork_crackles_redo.png'
p1276
sg55
g11
sS'block_loop.thisTrial'
p1277
Nsg69
Vn
sS'block_loop.thisTrialN'
p1278
I0
sg39
F1.0002183855547173
sg34
g752
(S'\x07\xdf\n\x12\n*\x02\r\x8c\xc0'
tRp1279
sa(dp1280
S'trial_loop.thisTrialN'
p1281
I24
sg894
S'30-spaghetti_hoops.png'
p1282
sS'block_loop.thisIndex'
p1283
g888
sg38
S'right'
p1284
sg58
g62
sS'trial_loop.thisN'
p1285
I24
sg33
S'19-caramello_redo.png'
p1286
sg63
g64
sS'trial_loop.thisIndex'
p1287
g59
(g98
S'\x18\x00\x00\x00'
tRp1288
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1289
I0
sg903
S'19-caramello_redo.png'
p1290
sS'block_loop.thisRepN'
p1291
I0
sg906
g1286
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1292
I0
sg908
S'30-spaghetti_hoops.png'
p1293
sg55
g11
sS'block_loop.thisTrial'
p1294
Nsg69
Vn
sS'block_loop.thisTrialN'
p1295
I0
sg39
F1.5501377311509259
sg34
g752
(S'\x07\xdf\n\x12\n*\x08\x0e\x1dH'
tRp1296
sa(dp1297
S'trial_loop.thisTrialN'
p1298
I25
sg894
S'38-maltesers.png'
p1299
sS'block_loop.thisIndex'
p1300
g888
sg38
S'left'
p1301
sg58
g62
sS'trial_loop.thisN'
p1302
I25
sg33
S'38-maltesers.png'
p1303
sg63
g64
sS'trial_loop.thisIndex'
p1304
g59
(g98
S'\x19\x00\x00\x00'
tRp1305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1306
I0
sg903
S'6-sour_patch_kids.png'
p1307
sS'block_loop.thisRepN'
p1308
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1309
I0
sg908
S'6-sour_patch_kids.png'
p1310
sg55
g11
sS'block_loop.thisTrial'
p1311
Nsg69
Vn
sS'block_loop.thisTrialN'
p1312
I0
sg39
F1.5999022681878614
sg34
g752
(S'\x07\xdf\n\x12\n*\x0f\x07\xc0`'
tRp1313
sa(dp1314
S'trial_loop.thisTrialN'
p1315
I26
sg894
g1265
sS'block_loop.thisIndex'
p1316
g888
sg38
S'left'
p1317
sg58
g62
sS'trial_loop.thisN'
p1318
I26
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p1319
g59
(g98
S'\x1a\x00\x00\x00'
tRp1320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1321
I0
sg903
g1273
sS'block_loop.thisRepN'
p1322
I0
sg906
g1269
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1323
I0
sg908
g1276
sg55
g11
sS'block_loop.thisTrial'
p1324
Nsg69
Vn
sS'block_loop.thisTrialN'
p1325
I0
sg39
F0.93354037196240824
sg34
g752
(S'\x07\xdf\n\x12\n*\x16\x02\x1b\x10'
tRp1326
sa(dp1327
S'trial_loop.thisTrialN'
p1328
I27
sg894
g1111
sS'block_loop.thisIndex'
p1329
g888
sg38
S'left'
p1330
sg58
g62
sS'trial_loop.thisN'
p1331
I27
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p1332
g59
(g98
S'\x1b\x00\x00\x00'
tRp1333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1334
I0
sg903
g1119
sS'block_loop.thisRepN'
p1335
I0
sg906
g1115
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1336
I0
sg908
g1122
sg55
g11
sS'block_loop.thisTrial'
p1337
Nsg69
Vn
sS'block_loop.thisTrialN'
p1338
I0
sg39
F0.96681908039727205
sg34
g752
(S'\x07\xdf\n\x12\n*\x1c\x01\xb9h'
tRp1339
sa(dp1340
S'trial_loop.thisTrialN'
p1341
I28
sg894
g915
sS'block_loop.thisIndex'
p1342
g888
sg38
S'right'
p1343
sg58
g62
sS'trial_loop.thisN'
p1344
I28
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1345
g59
(g98
S'\x1c\x00\x00\x00'
tRp1346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1347
I0
sg903
g923
sS'block_loop.thisRepN'
p1348
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1349
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1350
Nsg69
Vn
sS'block_loop.thisTrialN'
p1351
I0
sg39
F1.0834560682960728
sg34
g752
(S'\x07\xdf\n\x12\n*"\x01\x96@'
tRp1352
sa(dp1353
S'trial_loop.thisTrialN'
p1354
I29
sg894
S'1-treacle_cookies.png'
p1355
sS'block_loop.thisIndex'
p1356
g888
sg38
S'right'
p1357
sg58
g62
sS'trial_loop.thisN'
p1358
I29
sg33
g1081
sg63
g64
sS'trial_loop.thisIndex'
p1359
g59
(g98
S'\x1d\x00\x00\x00'
tRp1360
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1361
I0
sg903
S'21-nakd_banana_crunch.png'
p1362
sS'block_loop.thisRepN'
p1363
I0
sg906
g1081
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1364
I0
sg908
g1088
sg55
g11
sS'block_loop.thisTrial'
p1365
Nsg69
Vn
sS'block_loop.thisTrialN'
p1366
I0
sg39
F1.0502081505137539
sg34
g752
(S'\x07\xdf\n\x12\n*(\x03Wx'
tRp1367
sa(dp1368
S'trial_loop.thisTrialN'
p1369
I30
sg894
g1045
sS'block_loop.thisIndex'
p1370
g888
sg38
S'right'
p1371
sg58
g62
sS'trial_loop.thisN'
p1372
I30
sg33
g1015
sg63
g64
sS'trial_loop.thisIndex'
p1373
g59
(g98
S'\x1e\x00\x00\x00'
tRp1374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1375
I0
sg903
g1052
sS'block_loop.thisRepN'
p1376
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1377
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p1378
Nsg69
Vn
sS'block_loop.thisTrialN'
p1379
I0
sg39
F1.0171942987115017
sg34
g752
(S'\x07\xdf\n\x12\n*.\x04\x9f\x98'
tRp1380
sa(dp1381
S'trial_loop.thisTrialN'
p1382
I31
sg894
S'27-hartleys_raspberries_jelly.png'
p1383
sS'block_loop.thisIndex'
p1384
g888
sg38
S'right'
p1385
sg58
g62
sS'trial_loop.thisN'
p1386
I31
sg33
g998
sg63
g64
sS'trial_loop.thisIndex'
p1387
g59
(g98
S'\x1f\x00\x00\x00'
tRp1388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1389
I0
sg903
S'51-mars.png'
p1390
sS'block_loop.thisRepN'
p1391
I0
sg906
g998
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1392
I0
sg908
g1005
sg55
g11
sS'block_loop.thisTrial'
p1393
Nsg69
Vn
sS'block_loop.thisTrialN'
p1394
I0
sg39
F1.366877468597977
sg34
g752
(S'\x07\xdf\n\x12\n*4\x05n\xa0'
tRp1395
sa(dp1396
S'trial_loop.thisTrialN'
p1397
I32
sg894
S'40-sardines.png'
p1398
sS'block_loop.thisIndex'
p1399
g888
sg38
S'right'
p1400
sg58
g62
sS'trial_loop.thisN'
p1401
I32
sg33
S'5-pineapple.png'
p1402
sg63
g64
sS'trial_loop.thisIndex'
p1403
g59
(g98
S' \x00\x00\x00'
tRp1404
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1405
I0
sg903
S'5-pineapple.png'
p1406
sS'block_loop.thisRepN'
p1407
I0
sg906
g1402
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1408
I0
sg908
S'40-sardines.png'
p1409
sg55
g11
sS'block_loop.thisTrial'
p1410
Nsg69
Vn
sS'block_loop.thisTrialN'
p1411
I0
sg39
F1.3833977941346802
sg34
g752
(S'\x07\xdf\n\x12\n*:\x0by\x80'
tRp1412
sa(dp1413
S'trial_loop.thisTrialN'
p1414
I33
sg894
S'36-fig_rolls.png'
p1415
sS'block_loop.thisIndex'
p1416
g888
sg38
S'right'
p1417
sg58
g62
sS'trial_loop.thisN'
p1418
I33
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p1419
sg63
g64
sS'trial_loop.thisIndex'
p1420
g59
(g98
S'!\x00\x00\x00'
tRp1421
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1422
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1423
sS'block_loop.thisRepN'
p1424
I0
sg906
g1419
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1425
I0
sg908
S'36-fig_rolls.png'
p1426
sg55
g11
sS'block_loop.thisTrial'
p1427
Nsg69
Vn
sS'block_loop.thisTrialN'
p1428
I0
sg39
F1.5501559774634188
sg34
g752
(S'\x07\xdf\n\x12\n+\x05\x02\xbb8'
tRp1429
sa(dp1430
S'trial_loop.thisTrialN'
p1431
I34
sg894
S'4-corn.png'
p1432
sS'block_loop.thisIndex'
p1433
g888
sg38
S'left'
p1434
sg58
g62
sS'trial_loop.thisN'
p1435
I34
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1436
g59
(g98
S'"\x00\x00\x00'
tRp1437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1438
I0
sg903
S'10-bounty_redo.png'
p1439
sS'block_loop.thisRepN'
p1440
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1441
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1442
Nsg69
Vn
sS'block_loop.thisTrialN'
p1443
I0
sg39
F1.0672145692244612
sg34
g752
(S'\x07\xdf\n\x12\n+\x0b\x0b\xa0\x90'
tRp1444
sa(dp1445
S'trial_loop.thisTrialN'
p1446
I35
sg894
S'35-raisins.png'
p1447
sS'block_loop.thisIndex'
p1448
g888
sg38
S'left'
p1449
sg58
g62
sS'trial_loop.thisN'
p1450
I35
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p1451
g59
(g98
S'#\x00\x00\x00'
tRp1452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1453
I0
sg903
S'49-yorkie.png'
p1454
sS'block_loop.thisRepN'
p1455
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1456
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p1457
Nsg69
Vn
sS'block_loop.thisTrialN'
p1458
I0
sg39
F1.0334318064019499
sg34
g752
(S"\x07\xdf\n\x12\n+\x11\r'0"
tRp1459
sa(dp1460
S'trial_loop.thisTrialN'
p1461
I36
sg894
g947
sS'block_loop.thisIndex'
p1462
g888
sg38
S'right'
p1463
sg58
g62
sS'trial_loop.thisN'
p1464
I36
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p1465
g59
(g98
S'$\x00\x00\x00'
tRp1466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1467
I0
sg903
g955
sS'block_loop.thisRepN'
p1468
I0
sg906
g951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1469
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p1470
Nsg69
Vn
sS'block_loop.thisTrialN'
p1471
I0
sg39
F1.4167851251495449
sg34
g752
(S'\x07\xdf\n\x12\n+\x17\x0e0\xd0'
tRp1472
sa(dp1473
S'trial_loop.thisTrialN'
p1474
I37
sg894
S'33-ambrosia_rice.png'
p1475
sS'block_loop.thisIndex'
p1476
g888
sg38
S'right'
p1477
sg58
g62
sS'trial_loop.thisN'
p1478
I37
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p1479
g59
(g98
S'%\x00\x00\x00'
tRp1480
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1481
I0
sg903
S'23-crunchie_redo.png'
p1482
sS'block_loop.thisRepN'
p1483
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1484
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p1485
Nsg69
Vn
sS'block_loop.thisTrialN'
p1486
I0
sg39
F1.133493159628415
sg34
g752
(S'\x07\xdf\n\x12\n+\x1e\x05\xb1\x08'
tRp1487
sa(dp1488
S'trial_loop.thisTrialN'
p1489
I38
sg894
g1432
sS'block_loop.thisIndex'
p1490
g888
sg38
S'left'
p1491
sg58
g62
sS'trial_loop.thisN'
p1492
I38
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1493
g59
(g98
S'&\x00\x00\x00'
tRp1494
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1495
I0
sg903
g1439
sS'block_loop.thisRepN'
p1496
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1497
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1498
Nsg69
Vn
sS'block_loop.thisTrialN'
p1499
I0
sg39
F1.283399732805492
sg34
g752
(S'\x07\xdf\n\x12\n+$\x08)\xd8'
tRp1500
sa(dp1501
S'trial_loop.thisTrialN'
p1502
I39
sg894
g895
sS'block_loop.thisIndex'
p1503
g888
sg38
S'left'
p1504
sg58
g62
sS'trial_loop.thisN'
p1505
I39
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p1506
g59
(g98
S"'\x00\x00\x00"
tRp1507
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1508
I0
sg903
g904
sS'block_loop.thisRepN'
p1509
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1510
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1511
Nsg69
Vn
sS'block_loop.thisTrialN'
p1512
I0
sg39
F1.3338650422886076
sg34
g752
(S'\x07\xdf\n\x12\n+*\r\x04\x08'
tRp1513
sa(dp1514
S'trial_loop.thisTrialN'
p1515
I40
sg894
g1299
sS'block_loop.thisIndex'
p1516
g888
sg38
S'left'
p1517
sg58
g62
sS'trial_loop.thisN'
p1518
I40
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p1519
g59
(g98
S'(\x00\x00\x00'
tRp1520
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1521
I0
sg903
g1307
sS'block_loop.thisRepN'
p1522
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1523
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p1524
Nsg69
Vn
sS'block_loop.thisTrialN'
p1525
I0
sg39
F1.0499270432592311
sg34
g752
(S'\x07\xdf\n\x12\n+1\x03S\x90'
tRp1526
sa(dp1527
S'trial_loop.thisTrialN'
p1528
I41
sg894
g1077
sS'block_loop.thisIndex'
p1529
g888
sg38
S'left'
p1530
sg58
g62
sS'trial_loop.thisN'
p1531
I41
sg33
g1081
sg63
g64
sS'trial_loop.thisIndex'
p1532
g59
(g98
S')\x00\x00\x00'
tRp1533
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1534
I0
sg903
g1085
sS'block_loop.thisRepN'
p1535
I0
sg906
g1081
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1536
I0
sg908
g1088
sg55
g11
sS'block_loop.thisTrial'
p1537
Nsg69
Vn
sS'block_loop.thisTrialN'
p1538
I0
sg39
F1.7335177351308175
sg34
g752
(S'\x07\xdf\n\x12\n+7\x04\x9b\xb0'
tRp1539
sa(dp1540
S'trial_loop.thisTrialN'
p1541
I42
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1542
sS'block_loop.thisIndex'
p1543
g888
sg38
S'left'
p1544
sg58
g62
sS'trial_loop.thisN'
p1545
I42
sg33
g1426
sg63
g64
sS'trial_loop.thisIndex'
p1546
g59
(g98
S'*\x00\x00\x00'
tRp1547
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1548
I0
sg903
S'36-fig_rolls.png'
p1549
sS'block_loop.thisRepN'
p1550
I0
sg906
g1419
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1551
I0
sg908
g1426
sg55
g11
sS'block_loop.thisTrial'
p1552
Nsg69
Vn
sS'block_loop.thisTrialN'
p1553
I0
sg39
F1.2335354112462937
sg34
g752
(S'\x07\xdf\n\x12\n,\x02\x01\x19@'
tRp1554
sa(dp1555
S'trial_loop.thisTrialN'
p1556
I43
sg894
g1128
sS'block_loop.thisIndex'
p1557
g888
sg38
S'right'
p1558
sg58
g62
sS'trial_loop.thisN'
p1559
I43
sg33
g958
sg63
g64
sS'trial_loop.thisIndex'
p1560
g59
(g98
S'+\x00\x00\x00'
tRp1561
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1562
I0
sg903
g1135
sS'block_loop.thisRepN'
p1563
I0
sg906
g951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1564
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p1565
Nsg69
Vn
sS'block_loop.thisTrialN'
p1566
I0
sg39
F1.1167786819205503
sg34
g752
(S'\x07\xdf\n\x12\n,\x08\x05;\xd8'
tRp1567
sa(dp1568
S'trial_loop.thisTrialN'
p1569
I44
sg894
g1415
sS'block_loop.thisIndex'
p1570
g888
sg38
S'left'
p1571
sg58
g62
sS'trial_loop.thisN'
p1572
I44
sg33
g1419
sg63
g64
sS'trial_loop.thisIndex'
p1573
g59
(g98
S',\x00\x00\x00'
tRp1574
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1575
I0
sg903
g1423
sS'block_loop.thisRepN'
p1576
I0
sg906
g1419
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1577
I0
sg908
g1426
sg55
g11
sS'block_loop.thisTrial'
p1578
Nsg69
Vn
sS'block_loop.thisTrialN'
p1579
I0
sg39
F1.6335256608729196
sg34
g752
(S'\x07\xdf\n\x12\n,\x0e\x07z\x10'
tRp1580
sa(dp1581
S'trial_loop.thisTrialN'
p1582
I45
sg894
g1011
sS'block_loop.thisIndex'
p1583
g888
sg38
S'left'
p1584
sg58
g62
sS'trial_loop.thisN'
p1585
I45
sg33
g1015
sg63
g64
sS'trial_loop.thisIndex'
p1586
g59
(g98
S'-\x00\x00\x00'
tRp1587
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1588
I0
sg903
g1019
sS'block_loop.thisRepN'
p1589
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1590
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p1591
Nsg69
Vn
sS'block_loop.thisTrialN'
p1592
I0
sg39
F1.0169006471169268
sg34
g752
(S'\x07\xdf\n\x12\n,\x15\x02M\xd8'
tRp1593
sa(dp1594
S'trial_loop.thisTrialN'
p1595
I46
sg894
S'7-olives.png'
p1596
sS'block_loop.thisIndex'
p1597
g888
sg38
S'right'
p1598
sg58
g62
sS'trial_loop.thisN'
p1599
I46
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p1600
g59
(g98
S'.\x00\x00\x00'
tRp1601
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1602
I0
sg903
S'22-daim.png'
p1603
sS'block_loop.thisRepN'
p1604
I0
sg906
g1115
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1605
I0
sg908
g1122
sg55
g11
sS'block_loop.thisTrial'
p1606
Nsg69
Vn
sS'block_loop.thisTrialN'
p1607
I0
sg39
F0.85021887022253395
sg34
g752
(S'\x07\xdf\n\x12\n,\x1b\x03\x1c\xe0'
tRp1608
sa(dp1609
S'trial_loop.thisTrialN'
p1610
I47
sg894
S'44-crunch.png'
p1611
sS'block_loop.thisIndex'
p1612
g888
sg38
S'left'
p1613
sg58
g62
sS'trial_loop.thisN'
p1614
I47
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p1615
g59
(g98
S'/\x00\x00\x00'
tRp1616
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1617
I0
sg903
S'26-walkers_smoky_bacon.png'
p1618
sS'block_loop.thisRepN'
p1619
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1620
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p1621
Nsg69
Vn
sS'block_loop.thisTrialN'
p1622
I0
sg39
F1.56680345699192
sg34
g752
(S'\x07\xdf\n\x12\n,!\x01L\x08'
tRp1623
sa(dp1624
S'trial_loop.thisTrialN'
p1625
I48
sg894
g1282
sS'block_loop.thisIndex'
p1626
g888
sg38
S'right'
p1627
sg58
g62
sS'trial_loop.thisN'
p1628
I48
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p1629
g59
(g98
S'0\x00\x00\x00'
tRp1630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1631
I0
sg903
g1290
sS'block_loop.thisRepN'
p1632
I0
sg906
g1286
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1633
I0
sg908
g1293
sg55
g11
sS'block_loop.thisTrial'
p1634
Nsg69
Vn
sS'block_loop.thisTrialN'
p1635
I0
sg39
F1.0167632295747353
sg34
g752
(S"\x07\xdf\n\x12\n,'\no\xe0"
tRp1636
sa(dp1637
S'trial_loop.thisTrialN'
p1638
I49
sg894
g895
sS'block_loop.thisIndex'
p1639
g888
sg38
S'left'
p1640
sg58
g62
sS'trial_loop.thisN'
p1641
I49
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p1642
g59
(g98
S'1\x00\x00\x00'
tRp1643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1644
I0
sg903
g904
sS'block_loop.thisRepN'
p1645
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1646
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1647
Nsg69
Vn
sS'block_loop.thisTrialN'
p1648
I0
sg39
F1.7172545685630212
sg34
g752
(S'\x07\xdf\n\x12\n,-\x0b>\xe8'
tRp1649
sa(dp1650
S'trial_loop.thisTrialN'
p1651
I50
sg894
S'2-steamed_puddings.png'
p1652
sS'block_loop.thisIndex'
p1653
g888
sg38
S'right'
p1654
sg58
g62
sS'trial_loop.thisN'
p1655
I50
sg33
g1185
sg63
g64
sS'trial_loop.thisIndex'
p1656
g59
(g98
S'2\x00\x00\x00'
tRp1657
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1658
I0
sg903
S'20-fruit_pastilles.png'
p1659
sS'block_loop.thisRepN'
p1660
I0
sg906
g1185
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1661
I0
sg908
g1179
sg55
g11
sS'block_loop.thisTrial'
p1662
Nsg69
Vn
sS'block_loop.thisTrialN'
p1663
I0
sg39
F1.2167764581513438
sg34
g752
(S'\x07\xdf\n\x12\n,4\x07}\xf8'
tRp1664
sa(dp1665
S'trial_loop.thisTrialN'
p1666
I51
sg894
g947
sS'block_loop.thisIndex'
p1667
g888
sg38
S'right'
p1668
sg58
g62
sS'trial_loop.thisN'
p1669
I51
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p1670
g59
(g98
S'3\x00\x00\x00'
tRp1671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1672
I0
sg903
g955
sS'block_loop.thisRepN'
p1673
I0
sg906
g951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1674
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p1675
Nsg69
Vn
sS'block_loop.thisTrialN'
p1676
I0
sg39
F2.4334075159981694
sg34
g752
(S'\x07\xdf\n\x12\n,:\x0be\xf8'
tRp1677
sa(dp1678
S'trial_loop.thisTrialN'
p1679
I52
sg894
g1094
sS'block_loop.thisIndex'
p1680
g888
sg38
S'right'
p1681
sg58
g62
sS'trial_loop.thisN'
p1682
I52
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p1683
g59
(g98
S'4\x00\x00\x00'
tRp1684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1685
I0
sg903
g1102
sS'block_loop.thisRepN'
p1686
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1687
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p1688
Nsg69
Vn
sS'block_loop.thisTrialN'
p1689
I0
sg39
F1.2835277420931561
sg34
g752
(S'\x07\xdf\n\x12\n-\x06\x03\x1c\xe0'
tRp1690
sa(dp1691
S'trial_loop.thisTrialN'
p1692
I53
sg894
g1542
sS'block_loop.thisIndex'
p1693
g888
sg38
S'left'
p1694
sg58
g62
sS'trial_loop.thisN'
p1695
I53
sg33
g1419
sg63
g64
sS'trial_loop.thisIndex'
p1696
g59
(g98
S'5\x00\x00\x00'
tRp1697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1698
I0
sg903
g1549
sS'block_loop.thisRepN'
p1699
I0
sg906
g1419
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1700
I0
sg908
g1426
sg55
g11
sS'block_loop.thisTrial'
p1701
Nsg69
Vn
sS'block_loop.thisTrialN'
p1702
I0
sg39
F1.7001885642375782
sg34
g752
(S'\x07\xdf\n\x12\n-\x0c\x07\xf7\x10'
tRp1703
sa(dp1704
S'trial_loop.thisTrialN'
p1705
I54
sg894
g1398
sS'block_loop.thisIndex'
p1706
g888
sg38
S'right'
p1707
sg58
g62
sS'trial_loop.thisN'
p1708
I54
sg33
g1402
sg63
g64
sS'trial_loop.thisIndex'
p1709
g59
(g98
S'6\x00\x00\x00'
tRp1710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1711
I0
sg903
g1406
sS'block_loop.thisRepN'
p1712
I0
sg906
g1402
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1713
I0
sg908
g1409
sg55
g11
sS'block_loop.thisTrial'
p1714
Nsg69
Vn
sS'block_loop.thisTrialN'
p1715
I0
sg39
F1.1672639483081184
sg34
g752
(S'\x07\xdf\n\x12\n-\x13\x03\xfb\x88'
tRp1716
sa(dp1717
S'trial_loop.thisTrialN'
p1718
I55
sg894
g1160
sS'block_loop.thisIndex'
p1719
g888
sg38
S'right'
p1720
sg58
g62
sS'trial_loop.thisN'
p1721
I55
sg33
g1064
sg63
g64
sS'trial_loop.thisIndex'
p1722
g59
(g98
S'7\x00\x00\x00'
tRp1723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1724
I0
sg903
g1167
sS'block_loop.thisRepN'
p1725
I0
sg906
g1064
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1726
I0
sg908
g1071
sg55
g11
sS'block_loop.thisTrial'
p1727
Nsg69
Vn
sS'block_loop.thisTrialN'
p1728
I0
sg39
F1.0167791950980245
sg34
g752
(S'\x07\xdf\n\x12\n-\x19\x06\xedp'
tRp1729
sa(dp1730
S'trial_loop.thisTrialN'
p1731
I56
sg894
g1175
sS'block_loop.thisIndex'
p1732
g888
sg38
S'left'
p1733
sg58
g62
sS'trial_loop.thisN'
p1734
I56
sg33
g1185
sg63
g64
sS'trial_loop.thisIndex'
p1735
g59
(g98
S'8\x00\x00\x00'
tRp1736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1737
I0
sg903
g1183
sS'block_loop.thisRepN'
p1738
I0
sg906
g1185
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1739
I0
sg908
g1179
sg55
g11
sS'block_loop.thisTrial'
p1740
Nsg69
Vn
sS'block_loop.thisTrialN'
p1741
I0
sg39
F1.6001736820890073
sg34
g752
(S'\x07\xdf\n\x12\n-\x1f\x07\xbcx'
tRp1742
sa(dp1743
S'trial_loop.thisTrialN'
p1744
I57
sg894
g1383
sS'block_loop.thisIndex'
p1745
g888
sg38
S'right'
p1746
sg58
g62
sS'trial_loop.thisN'
p1747
I57
sg33
g1005
sg63
g64
sS'trial_loop.thisIndex'
p1748
g59
(g98
S'9\x00\x00\x00'
tRp1749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1750
I0
sg903
g1390
sS'block_loop.thisRepN'
p1751
I0
sg906
g998
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1752
I0
sg908
g1005
sg55
g11
sS'block_loop.thisTrial'
p1753
Nsg69
Vn
sS'block_loop.thisTrialN'
p1754
I0
sg39
F1.0167769143090482
sg34
g752
(S'\x07\xdf\n\x12\n-&\x02\x17('
tRp1755
sa(dp1756
S'trial_loop.thisTrialN'
p1757
I58
sg894
S'42-mrkipling_lemon_slices.png'
p1758
sS'block_loop.thisIndex'
p1759
g888
sg38
S'left'
p1760
sg58
g62
sS'trial_loop.thisN'
p1761
I58
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p1762
g59
(g98
S':\x00\x00\x00'
tRp1763
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1764
I0
sg903
S'16-skips_prawn.png'
p1765
sS'block_loop.thisRepN'
p1766
I0
sg906
g1196
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1767
I0
sg908
g1203
sg55
g11
sS'block_loop.thisTrial'
p1768
Nsg69
Vn
sS'block_loop.thisTrialN'
p1769
I0
sg39
F1.5834423835613052
sg34
g752
(S'\x07\xdf\n\x12\n-,\x02\xe60'
tRp1770
sa(dp1771
S'trial_loop.thisTrialN'
p1772
I59
sg894
S'5-pineapple.png'
p1773
sS'block_loop.thisIndex'
p1774
g888
sg38
S'right'
p1775
sg58
g62
sS'trial_loop.thisN'
p1776
I59
sg33
g1402
sg63
g64
sS'trial_loop.thisIndex'
p1777
g59
(g98
S';\x00\x00\x00'
tRp1778
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1779
I0
sg903
S'40-sardines.png'
p1780
sS'block_loop.thisRepN'
p1781
I0
sg906
g1402
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1782
I0
sg908
g1409
sg55
g11
sS'block_loop.thisTrial'
p1783
Nsg69
Vn
sS'block_loop.thisTrialN'
p1784
I0
sg39
F1.5668673190862137
sg34
g752
(S'\x07\xdf\n\x12\n-2\x0cD\xa0'
tRp1785
sa(dp1786
S'trial_loop.thisTrialN'
p1787
I60
sg894
S'43-mrporky_pork_crackles_redo.png'
p1788
sS'block_loop.thisIndex'
p1789
g888
sg38
S'right'
p1790
sg58
g62
sS'trial_loop.thisN'
p1791
I60
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p1792
g59
(g98
S'<\x00\x00\x00'
tRp1793
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1794
I0
sg903
S'18-mms.png'
p1795
sS'block_loop.thisRepN'
p1796
I0
sg906
g1269
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1797
I0
sg908
g1276
sg55
g11
sS'block_loop.thisTrial'
p1798
Nsg69
Vn
sS'block_loop.thisTrialN'
p1799
I0
sg39
F0.81688428245524847
sg34
g752
(S'\x07\xdf\n\x12\n-9\x06&8'
tRp1800
sa(dp1801
S'trial_loop.thisTrialN'
p1802
I61
sg894
g1011
sS'block_loop.thisIndex'
p1803
g888
sg38
S'left'
p1804
sg58
g62
sS'trial_loop.thisN'
p1805
I61
sg33
g1022
sg63
g64
sS'trial_loop.thisIndex'
p1806
g59
(g98
S'=\x00\x00\x00'
tRp1807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1808
I0
sg903
g1019
sS'block_loop.thisRepN'
p1809
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1810
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p1811
Nsg69
Vn
sS'block_loop.thisTrialN'
p1812
I0
sg39
F0.83353290237846522
sg34
g752
(S'\x07\xdf\n\x12\n.\x03\x03\xdcH'
tRp1813
sa(dp1814
S'trial_loop.thisTrialN'
p1815
I62
sg894
S'8-liquorice_catherine_wheels.png'
p1816
sS'block_loop.thisIndex'
p1817
g888
sg38
S'right'
p1818
sg58
g62
sS'trial_loop.thisN'
p1819
I62
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p1820
g59
(g98
S'>\x00\x00\x00'
tRp1821
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1822
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1823
sS'block_loop.thisRepN'
p1824
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1825
I0
sg908
g1246
sg55
g11
sS'block_loop.thisTrial'
p1826
Nsg69
Vn
sS'block_loop.thisTrialN'
p1827
I0
sg39
F1.2834424976008449
sg34
g752
(S'\x07\xdf\n\x12\n.\t\x01\xd0\xd8'
tRp1828
sa(dp1829
S'trial_loop.thisTrialN'
p1830
I63
sg894
g1077
sS'block_loop.thisIndex'
p1831
g888
sg38
S'right'
p1832
sg58
g62
sS'trial_loop.thisN'
p1833
I63
sg33
g1081
sg63
g64
sS'trial_loop.thisIndex'
p1834
g59
(g98
S'?\x00\x00\x00'
tRp1835
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1836
I0
sg903
g1085
sS'block_loop.thisRepN'
p1837
I0
sg906
g1081
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1838
I0
sg908
g1088
sg55
g11
sS'block_loop.thisTrial'
p1839
Nsg69
Vn
sS'block_loop.thisTrialN'
p1840
I0
sg39
F1.2334356267238036
sg34
g752
(S'\x07\xdf\n\x12\n.\x0f\x06\xab\x08'
tRp1841
sa(dp1842
S'trial_loop.thisTrialN'
p1843
I64
sg894
g932
sS'block_loop.thisIndex'
p1844
g888
sg38
S'right'
p1845
sg58
g62
sS'trial_loop.thisN'
p1846
I64
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1847
g59
(g98
S'@\x00\x00\x00'
tRp1848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1849
I0
sg903
g939
sS'block_loop.thisRepN'
p1850
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1851
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1852
Nsg69
Vn
sS'block_loop.thisTrialN'
p1853
I0
sg39
F1.6839544777303672
sg34
g752
(S'\x07\xdf\n\x12\n.\x15\n\xcd\xa0'
tRp1854
sa(dp1855
S'trial_loop.thisTrialN'
p1856
I65
sg894
S'6-sour_patch_kids.png'
p1857
sS'block_loop.thisIndex'
p1858
g888
sg38
S'right'
p1859
sg58
g62
sS'trial_loop.thisN'
p1860
I65
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p1861
g59
(g98
S'A\x00\x00\x00'
tRp1862
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1863
I0
sg903
S'38-maltesers.png'
p1864
sS'block_loop.thisRepN'
p1865
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1866
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p1867
Nsg69
Vn
sS'block_loop.thisTrialN'
p1868
I0
sg39
F0.74992858279165375
sg34
g752
(S'\x07\xdf\n\x12\n.\x1c\x06\x97\x80'
tRp1869
sa(dp1870
S'trial_loop.thisTrialN'
p1871
I66
sg894
g1816
sS'block_loop.thisIndex'
p1872
g888
sg38
S'right'
p1873
sg58
g62
sS'trial_loop.thisN'
p1874
I66
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p1875
g59
(g98
S'B\x00\x00\x00'
tRp1876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1877
I0
sg903
g1823
sS'block_loop.thisRepN'
p1878
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1879
I0
sg908
g1246
sg55
g11
sS'block_loop.thisTrial'
p1880
Nsg69
Vn
sS'block_loop.thisTrialN'
p1881
I0
sg39
F0.75022936185223443
sg34
g752
(S'\x07\xdf\n\x12\n."\x03\x1c\xe0'
tRp1882
sa(dp1883
S'trial_loop.thisTrialN'
p1884
I67
sg894
g964
sS'block_loop.thisIndex'
p1885
g888
sg38
S'right'
p1886
sg58
g62
sS'trial_loop.thisN'
p1887
I67
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p1888
g59
(g98
S'C\x00\x00\x00'
tRp1889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1890
I0
sg903
g972
sS'block_loop.thisRepN'
p1891
I0
sg906
g968
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1892
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p1893
Nsg69
Vn
sS'block_loop.thisTrialN'
p1894
I0
sg39
F1.1834678143600286
sg34
g752
(S"\x07\xdf\n\x12\n.'\x0f\x1f\x18"
tRp1895
sa(dp1896
S'trial_loop.thisTrialN'
p1897
I68
sg894
g1060
sS'block_loop.thisIndex'
p1898
g888
sg38
S'left'
p1899
sg58
g62
sS'trial_loop.thisN'
p1900
I68
sg33
g1064
sg63
g64
sS'trial_loop.thisIndex'
p1901
g59
(g98
S'D\x00\x00\x00'
tRp1902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1903
I0
sg903
g1068
sS'block_loop.thisRepN'
p1904
I0
sg906
g1064
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1905
I0
sg908
g1071
sg55
g11
sS'block_loop.thisTrial'
p1906
Nsg69
Vn
sS'block_loop.thisTrialN'
p1907
I0
sg39
F0.95018984718126376
sg34
g752
(S'\x07\xdf\n\x12\n..\x03\r@'
tRp1908
sa(dp1909
S'trial_loop.thisTrialN'
p1910
I69
sg894
g1758
sS'block_loop.thisIndex'
p1911
g888
sg38
S'right'
p1912
sg58
g62
sS'trial_loop.thisN'
p1913
I69
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p1914
g59
(g98
S'E\x00\x00\x00'
tRp1915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1916
I0
sg903
g1765
sS'block_loop.thisRepN'
p1917
I0
sg906
g1196
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1918
I0
sg908
g1203
sg55
g11
sS'block_loop.thisTrial'
p1919
Nsg69
Vn
sS'block_loop.thisTrialN'
p1920
I0
sg39
F1.3004546182842205
sg34
g752
(S'\x07\xdf\n\x12\n.4\x02\xe60'
tRp1921
sa(dp1922
S'trial_loop.thisTrialN'
p1923
I70
sg894
g1028
sS'block_loop.thisIndex'
p1924
g888
sg38
S'right'
p1925
sg58
g62
sS'trial_loop.thisN'
p1926
I70
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p1927
g59
(g98
S'F\x00\x00\x00'
tRp1928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1929
I0
sg903
g1036
sS'block_loop.thisRepN'
p1930
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1931
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p1932
Nsg69
Vn
sS'block_loop.thisTrialN'
p1933
I0
sg39
F1.0334349424870197
sg34
g752
(S'\x07\xdf\n\x12\n.:\x07\xfe\xe0'
tRp1934
sa(dp1935
S'trial_loop.thisTrialN'
p1936
I71
sg894
g1299
sS'block_loop.thisIndex'
p1937
g888
sg38
S'left'
p1938
sg58
g62
sS'trial_loop.thisN'
p1939
I71
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p1940
g59
(g98
S'G\x00\x00\x00'
tRp1941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1942
I0
sg903
g1307
sS'block_loop.thisRepN'
p1943
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1944
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p1945
Nsg69
Vn
sS'block_loop.thisTrialN'
p1946
I0
sg39
F1.1332559575635059
sg34
g752
(S'\x07\xdf\n\x12\n/\x04\t\x0ch'
tRp1947
sa(dp1948
S'trial_loop.thisTrialN'
p1949
I72
sg894
g1773
sS'block_loop.thisIndex'
p1950
g888
sg38
S'left'
p1951
sg58
g62
sS'trial_loop.thisN'
p1952
I72
sg33
g1409
sg63
g64
sS'trial_loop.thisIndex'
p1953
g59
(g98
S'H\x00\x00\x00'
tRp1954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1955
I0
sg903
g1780
sS'block_loop.thisRepN'
p1956
I0
sg906
g1402
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1957
I0
sg908
g1409
sg55
g11
sS'block_loop.thisTrial'
p1958
Nsg69
Vn
sS'block_loop.thisTrialN'
p1959
I0
sg39
F1.0834609149724201
sg34
g752
(S'\x07\xdf\n\x12\n/\n\x0b\x858'
tRp1960
sa(dp1961
S'trial_loop.thisTrialN'
p1962
I73
sg894
g1160
sS'block_loop.thisIndex'
p1963
g888
sg38
S'right'
p1964
sg58
g62
sS'trial_loop.thisN'
p1965
I73
sg33
g1064
sg63
g64
sS'trial_loop.thisIndex'
p1966
g59
(g98
S'I\x00\x00\x00'
tRp1967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1968
I0
sg903
g1167
sS'block_loop.thisRepN'
p1969
I0
sg906
g1064
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1970
I0
sg908
g1071
sg55
g11
sS'block_loop.thisTrial'
p1971
Nsg69
Vn
sS'block_loop.thisTrialN'
p1972
I0
sg39
F0.90025510625901006
sg34
g752
(S'\x07\xdf\n\x12\n/\x10\rFp'
tRp1973
sa(dp1974
S'trial_loop.thisTrialN'
p1975
I74
sg894
S'19-caramello_redo.png'
p1976
sS'block_loop.thisIndex'
p1977
g888
sg38
S'left'
p1978
sg58
g62
sS'trial_loop.thisN'
p1979
I74
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p1980
g59
(g98
S'J\x00\x00\x00'
tRp1981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1982
I0
sg903
S'30-spaghetti_hoops.png'
p1983
sS'block_loop.thisRepN'
p1984
I0
sg906
g1286
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1985
I0
sg908
g1293
sg55
g11
sS'block_loop.thisTrial'
p1986
Nsg69
Vn
sS'block_loop.thisTrialN'
p1987
I0
sg39
F1.2337594987739067
sg34
g752
(S'\x07\xdf\n\x12\n/\x16\x0cg\xc8'
tRp1988
sa(dp1989
S'trial_loop.thisTrialN'
p1990
I75
sg894
g994
sS'block_loop.thisIndex'
p1991
g888
sg38
S'left'
p1992
sg58
g62
sS'trial_loop.thisN'
p1993
I75
sg33
g998
sg63
g64
sS'trial_loop.thisIndex'
p1994
g59
(g98
S'K\x00\x00\x00'
tRp1995
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1996
I0
sg903
g1002
sS'block_loop.thisRepN'
p1997
I0
sg906
g998
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1998
I0
sg908
g1005
sg55
g11
sS'block_loop.thisTrial'
p1999
Nsg69
Vn
sS'block_loop.thisTrialN'
p2000
I0
sg39
F1.2501706315333649
sg34
g752
(S'\x07\xdf\n\x12\n/\x1d\x01\r\x88'
tRp2001
sa(dp2002
S'trial_loop.thisTrialN'
p2003
I76
sg894
S'48-twix.png'
p2004
sS'block_loop.thisIndex'
p2005
g888
sg38
S'left'
p2006
sg58
g62
sS'trial_loop.thisN'
p2007
I76
sg33
g975
sg63
g64
sS'trial_loop.thisIndex'
p2008
g59
(g98
S'L\x00\x00\x00'
tRp2009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2010
I0
sg903
S'50-polo.png'
p2011
sS'block_loop.thisRepN'
p2012
I0
sg906
g968
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2013
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p2014
Nsg69
Vn
sS'block_loop.thisTrialN'
p2015
I0
sg39
F1.4668527220364922
sg34
g752
(S'\x07\xdf\n\x12\n/#\x05n\xa0'
tRp2016
sa(dp2017
S'trial_loop.thisTrialN'
p2018
I77
sg894
g932
sS'block_loop.thisIndex'
p2019
g888
sg38
S'right'
p2020
sg58
g62
sS'trial_loop.thisN'
p2021
I77
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2022
g59
(g98
S'M\x00\x00\x00'
tRp2023
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2024
I0
sg903
g939
sS'block_loop.thisRepN'
p2025
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2026
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2027
Nsg69
Vn
sS'block_loop.thisTrialN'
p2028
I0
sg39
F0.95019098757575193
sg34
g752
(S'\x07\xdf\n\x12\n/)\r#H'
tRp2029
sa(dp2030
S'trial_loop.thisTrialN'
p2031
I78
sg894
g947
sS'block_loop.thisIndex'
p2032
g888
sg38
S'left'
p2033
sg58
g62
sS'trial_loop.thisN'
p2034
I78
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p2035
g59
(g98
S'N\x00\x00\x00'
tRp2036
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2037
I0
sg903
g955
sS'block_loop.thisRepN'
p2038
I0
sg906
g951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2039
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p2040
Nsg69
Vn
sS'block_loop.thisTrialN'
p2041
I0
sg39
F1.283463309801391
sg34
g752
(S'\x07\xdf\n\x12\n//\x0c\xc1\xa0'
tRp2042
sa(dp2043
S'trial_loop.thisTrialN'
p2044
I79
sg894
g1192
sS'block_loop.thisIndex'
p2045
g888
sg38
S'left'
p2046
sg58
g62
sS'trial_loop.thisN'
p2047
I79
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p2048
g59
(g98
S'O\x00\x00\x00'
tRp2049
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2050
I0
sg903
g1200
sS'block_loop.thisRepN'
p2051
I0
sg906
g1196
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2052
I0
sg908
g1203
sg55
g11
sS'block_loop.thisTrial'
p2053
Nsg69
Vn
sS'block_loop.thisTrialN'
p2054
I0
sg39
F1.2000882095180714
sg34
g752
(S'\x07\xdf\n\x12\n/6\x02Y\x90'
tRp2055
sa(dp2056
S'trial_loop.thisTrialN'
p2057
I80
sg894
g994
sS'block_loop.thisIndex'
p2058
g888
sg38
S'left'
p2059
sg58
g62
sS'trial_loop.thisN'
p2060
I80
sg33
g998
sg63
g64
sS'trial_loop.thisIndex'
p2061
g59
(g98
S'P\x00\x00\x00'
tRp2062
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2063
I0
sg903
g1002
sS'block_loop.thisRepN'
p2064
I0
sg906
g998
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2065
I0
sg908
g1005
sg55
g11
sS'block_loop.thisTrial'
p2066
Nsg69
Vn
sS'block_loop.thisTrialN'
p2067
I0
sg39
F1.0500564780395507
sg34
g752
(S'\x07\xdf\n\x12\n0\x00\x06\x03\x10'
tRp2068
sa(dp2069
S'trial_loop.thisTrialN'
p2070
I81
sg894
g1128
sS'block_loop.thisIndex'
p2071
g888
sg38
S'right'
p2072
sg58
g62
sS'trial_loop.thisN'
p2073
I81
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p2074
g59
(g98
S'Q\x00\x00\x00'
tRp2075
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2076
I0
sg903
g1135
sS'block_loop.thisRepN'
p2077
I0
sg906
g951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2078
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p2079
Nsg69
Vn
sS'block_loop.thisTrialN'
p2080
I0
sg39
F2.0500983875394923
sg34
g752
(S'\x07\xdf\n\x12\n0\x06\x07K0'
tRp2081
sa(dp2082
S'trial_loop.thisTrialN'
p2083
I82
sg894
g1265
sS'block_loop.thisIndex'
p2084
g888
sg38
S'left'
p2085
sg58
g62
sS'trial_loop.thisN'
p2086
I82
sg33
g1276
sg63
g64
sS'trial_loop.thisIndex'
p2087
g59
(g98
S'R\x00\x00\x00'
tRp2088
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2089
I0
sg903
g1273
sS'block_loop.thisRepN'
p2090
I0
sg906
g1269
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2091
I0
sg908
g1276
sg55
g11
sS'block_loop.thisTrial'
p2092
Nsg69
Vn
sS'block_loop.thisTrialN'
p2093
I0
sg39
F1.0002152494698748
sg34
g752
(S'\x07\xdf\n\x12\n0\r\x08\x8b\x80'
tRp2094
sa(dp2095
S'trial_loop.thisTrialN'
p2096
I83
sg894
g1976
sS'block_loop.thisIndex'
p2097
g888
sg38
S'left'
p2098
sg58
g62
sS'trial_loop.thisN'
p2099
I83
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p2100
g59
(g98
S'S\x00\x00\x00'
tRp2101
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2102
I0
sg903
g1983
sS'block_loop.thisRepN'
p2103
I0
sg906
g1286
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2104
I0
sg908
g1293
sg55
g11
sS'block_loop.thisTrial'
p2105
Nsg69
Vn
sS'block_loop.thisTrialN'
p2106
I0
sg39
F0.91691627052250624
sg34
g752
(S'\x07\xdf\n\x12\n0\x13\x08\xe1p'
tRp2107
sa(dp2108
S'trial_loop.thisTrialN'
p2109
I84
sg894
g1773
sS'block_loop.thisIndex'
p2110
g888
sg38
S'left'
p2111
sg58
g62
sS'trial_loop.thisN'
p2112
I84
sg33
g1402
sg63
g64
sS'trial_loop.thisIndex'
p2113
g59
(g98
S'T\x00\x00\x00'
tRp2114
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2115
I0
sg903
g1780
sS'block_loop.thisRepN'
p2116
I0
sg906
g1402
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2117
I0
sg908
g1409
sg55
g11
sS'block_loop.thisTrial'
p2118
Nsg69
Vn
sS'block_loop.thisTrialN'
p2119
I0
sg39
F1.5335104936252719
sg34
g752
(S'\x07\xdf\n\x12\n0\x19\x08AH'
tRp2120
sa(dp2121
S'trial_loop.thisTrialN'
p2122
I85
sg894
g1432
sS'block_loop.thisIndex'
p2123
g888
sg38
S'left'
p2124
sg58
g62
sS'trial_loop.thisN'
p2125
I85
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2126
g59
(g98
S'U\x00\x00\x00'
tRp2127
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2128
I0
sg903
g1439
sS'block_loop.thisRepN'
p2129
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2130
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2131
Nsg69
Vn
sS'block_loop.thisTrialN'
p2132
I0
sg39
F1.0169012173141709
sg34
g752
(S'\x07\xdf\n\x12\n0 \x01\xa9\xc8'
tRp2133
sa(dp2134
S'trial_loop.thisTrialN'
p2135
I86
sg894
g932
sS'block_loop.thisIndex'
p2136
g888
sg38
S'right'
p2137
sg58
g62
sS'trial_loop.thisN'
p2138
I86
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p2139
g59
(g98
S'V\x00\x00\x00'
tRp2140
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2141
I0
sg903
g939
sS'block_loop.thisRepN'
p2142
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2143
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2144
Nsg69
Vn
sS'block_loop.thisTrialN'
p2145
I0
sg39
F0.90011939930900553
sg34
g752
(S'\x07\xdf\n\x12\n0&\x02t\xe8'
tRp2146
sa(dp2147
S'trial_loop.thisTrialN'
p2148
I87
sg894
g1235
sS'block_loop.thisIndex'
p2149
g888
sg38
S'right'
p2150
sg58
g62
sS'trial_loop.thisN'
p2151
I87
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p2152
g59
(g98
S'W\x00\x00\x00'
tRp2153
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2154
I0
sg903
g1243
sS'block_loop.thisRepN'
p2155
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2156
I0
sg908
g1246
sg55
g11
sS'block_loop.thisTrial'
p2157
Nsg69
Vn
sS'block_loop.thisTrialN'
p2158
I0
sg39
F0.88347477076649739
sg34
g752
(S'\x07\xdf\n\x12\n0,\x01[\xa8'
tRp2159
sa(dp2160
S'trial_loop.thisTrialN'
p2161
I88
sg894
g1447
sS'block_loop.thisIndex'
p2162
g888
sg38
S'left'
p2163
sg58
g62
sS'trial_loop.thisN'
p2164
I88
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p2165
g59
(g98
S'X\x00\x00\x00'
tRp2166
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2167
I0
sg903
g1454
sS'block_loop.thisRepN'
p2168
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2169
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p2170
Nsg69
Vn
sS'block_loop.thisTrialN'
p2171
I0
sg39
F1.0168541760390326
sg34
g752
(S'\x07\xdf\n\x12\n02\x00\x07\xd0'
tRp2172
sa(dp2173
S'trial_loop.thisTrialN'
p2174
I89
sg894
g1383
sS'block_loop.thisIndex'
p2175
g888
sg38
S'right'
p2176
sg58
g62
sS'trial_loop.thisN'
p2177
I89
sg33
g998
sg63
g64
sS'trial_loop.thisIndex'
p2178
g59
(g98
S'Y\x00\x00\x00'
tRp2179
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2180
I0
sg903
g1390
sS'block_loop.thisRepN'
p2181
I0
sg906
g998
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2182
I0
sg908
g1005
sg55
g11
sS'block_loop.thisTrial'
p2183
Nsg69
Vn
sS'block_loop.thisTrialN'
p2184
I0
sg39
F1.0667663941694627
sg34
g752
(S'\x07\xdf\n\x12\n08\x00\xd6\xd8'
tRp2185
sa(dp2186
S'trial_loop.thisTrialN'
p2187
I90
sg894
g1077
sS'block_loop.thisIndex'
p2188
g888
sg38
S'left'
p2189
sg58
g62
sS'trial_loop.thisN'
p2190
I90
sg33
g1081
sg63
g64
sS'trial_loop.thisIndex'
p2191
g59
(g98
S'Z\x00\x00\x00'
tRp2192
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2193
I0
sg903
g1085
sS'block_loop.thisRepN'
p2194
I0
sg906
g1081
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2195
I0
sg908
g1088
sg55
g11
sS'block_loop.thisTrial'
p2196
Nsg69
Vn
sS'block_loop.thisTrialN'
p2197
I0
sg39
F1.1667698723731519
sg34
g752
(S'\x07\xdf\n\x12\n1\x02\x02Y\x90'
tRp2198
sa(dp2199
S'trial_loop.thisTrialN'
p2200
I91
sg894
g1596
sS'block_loop.thisIndex'
p2201
g888
sg38
S'right'
p2202
sg58
g62
sS'trial_loop.thisN'
p2203
I91
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p2204
g59
(g98
S'[\x00\x00\x00'
tRp2205
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2206
I0
sg903
g1603
sS'block_loop.thisRepN'
p2207
I0
sg906
g1115
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2208
I0
sg908
g1122
sg55
g11
sS'block_loop.thisTrial'
p2209
Nsg69
Vn
sS'block_loop.thisTrialN'
p2210
I0
sg39
F0.78345589723676312
sg34
g752
(S'\x07\xdf\n\x12\n1\x08\x05\x89\xf8'
tRp2211
sa(dp2212
S'trial_loop.thisTrialN'
p2213
I92
sg894
g1355
sS'block_loop.thisIndex'
p2214
g888
sg38
S'right'
p2215
sg58
g62
sS'trial_loop.thisN'
p2216
I92
sg33
g1081
sg63
g64
sS'trial_loop.thisIndex'
p2217
g59
(g98
S'\\\x00\x00\x00'
tRp2218
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2219
I0
sg903
g1362
sS'block_loop.thisRepN'
p2220
I0
sg906
g1081
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2221
I0
sg908
g1088
sg55
g11
sS'block_loop.thisTrial'
p2222
Nsg69
Vn
sS'block_loop.thisTrialN'
p2223
I0
sg39
F0.91676801923176754
sg34
g752
(S'\x07\xdf\n\x12\n1\x0e\x02\x88p'
tRp2224
sa(dp2225
S'trial_loop.thisTrialN'
p2226
I93
sg894
g1128
sS'block_loop.thisIndex'
p2227
g888
sg38
S'right'
p2228
sg58
g62
sS'trial_loop.thisN'
p2229
I93
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p2230
g59
(g98
S']\x00\x00\x00'
tRp2231
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2232
I0
sg903
g1135
sS'block_loop.thisRepN'
p2233
I0
sg906
g951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2234
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p2235
Nsg69
Vn
sS'block_loop.thisTrialN'
p2236
I0
sg39
F0.81686232986021423
sg34
g752
(S'\x07\xdf\n\x12\n1\x14\x01\xec0'
tRp2237
sa(dp2238
S'trial_loop.thisTrialN'
p2239
I94
sg894
g1432
sS'block_loop.thisIndex'
p2240
g888
sg38
S'left'
p2241
sg58
g62
sS'trial_loop.thisN'
p2242
I94
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p2243
g59
(g98
S'^\x00\x00\x00'
tRp2244
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2245
I0
sg903
g1439
sS'block_loop.thisRepN'
p2246
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2247
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2248
Nsg69
Vn
sS'block_loop.thisTrialN'
p2249
I0
sg39
F0.78352318051474867
sg34
g752
(S'\x07\xdf\n\x12\n1\x19\x0e\xe4\x80'
tRp2250
sa(dp2251
S'trial_loop.thisTrialN'
p2252
I95
sg894
g1596
sS'block_loop.thisIndex'
p2253
g888
sg38
S'right'
p2254
sg58
g62
sS'trial_loop.thisN'
p2255
I95
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p2256
g59
(g98
S'_\x00\x00\x00'
tRp2257
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2258
I0
sg903
g1603
sS'block_loop.thisRepN'
p2259
I0
sg906
g1115
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2260
I0
sg908
g1122
sg55
g11
sS'block_loop.thisTrial'
p2261
Nsg69
Vn
sS'block_loop.thisTrialN'
p2262
I0
sg39
F0.80056865773849495
sg34
g752
(S'\x07\xdf\n\x12\n1\x1f\x0c\x1d\x90'
tRp2263
sa(dp2264
S'trial_loop.thisTrialN'
p2265
I96
sg894
g1976
sS'block_loop.thisIndex'
p2266
g888
sg38
S'left'
p2267
sg58
g62
sS'trial_loop.thisN'
p2268
I96
sg33
g1293
sg63
g64
sS'trial_loop.thisIndex'
p2269
g59
(g98
S'`\x00\x00\x00'
tRp2270
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2271
I0
sg903
g1983
sS'block_loop.thisRepN'
p2272
I0
sg906
g1286
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2273
I0
sg908
g1293
sg55
g11
sS'block_loop.thisTrial'
p2274
Nsg69
Vn
sS'block_loop.thisTrialN'
p2275
I0
sg39
F0.83340403779493499
sg34
g752
(S'\x07\xdf\n\x12\n1%\t\x99\x08'
tRp2276
sa(dp2277
S'trial_loop.thisTrialN'
p2278
I97
sg894
g1596
sS'block_loop.thisIndex'
p2279
g888
sg38
S'right'
p2280
sg58
g62
sS'trial_loop.thisN'
p2281
I97
sg33
g1122
sg63
g64
sS'trial_loop.thisIndex'
p2282
g59
(g98
S'a\x00\x00\x00'
tRp2283
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2284
I0
sg903
g1603
sS'block_loop.thisRepN'
p2285
I0
sg906
g1115
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2286
I0
sg908
g1122
sg55
g11
sS'block_loop.thisTrial'
p2287
Nsg69
Vn
sS'block_loop.thisTrialN'
p2288
I0
sg39
F0.70019027482931051
sg34
g752
(S'\x07\xdf\n\x12\n1+\x07\x89\xb0'
tRp2289
sa(dp2290
S'trial_loop.thisTrialN'
p2291
I98
sg894
g1816
sS'block_loop.thisIndex'
p2292
g888
sg38
S'right'
p2293
sg58
g62
sS'trial_loop.thisN'
p2294
I98
sg33
g1246
sg63
g64
sS'trial_loop.thisIndex'
p2295
g59
(g98
S'b\x00\x00\x00'
tRp2296
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2297
I0
sg903
g1823
sS'block_loop.thisRepN'
p2298
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2299
I0
sg908
g1246
sg55
g11
sS'block_loop.thisTrial'
p2300
Nsg69
Vn
sS'block_loop.thisTrialN'
p2301
I0
sg39
F1.1001018372326143
sg34
g752
(S'\x07\xdf\n\x12\n11\x03[`'
tRp2302
sa(dp2303
S'trial_loop.thisTrialN'
p2304
I99
sg894
g1415
sS'block_loop.thisIndex'
p2305
g888
sg38
S'right'
p2306
sg58
g62
sS'trial_loop.thisN'
p2307
I99
sg33
g1419
sg63
g64
sS'trial_loop.thisIndex'
p2308
g59
(g98
S'c\x00\x00\x00'
tRp2309
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2310
I0
sg903
g1423
sS'block_loop.thisRepN'
p2311
I0
sg906
g1419
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2312
I0
sg908
g1426
sg55
g11
sS'block_loop.thisTrial'
p2313
Nsg69
Vn
sS'block_loop.thisTrialN'
p2314
I0
sg39
F1.1168499565796992
sg34
g752
(S'\x07\xdf\n\x12\n17\x05W0'
tRp2315
sa(dp2316
S'trial_loop.thisTrialN'
p2317
I100
sg894
g1265
sS'block_loop.thisIndex'
p2318
g888
sg38
S'left'
p2319
sg58
g62
sS'trial_loop.thisN'
p2320
I100
sg33
g1276
sg63
g64
sS'trial_loop.thisIndex'
p2321
g59
(g98
S'd\x00\x00\x00'
tRp2322
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2323
I0
sg903
g1273
sS'block_loop.thisRepN'
p2324
I0
sg906
g1269
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2325
I0
sg908
g1276
sg55
g11
sS'block_loop.thisTrial'
p2326
Nsg69
Vn
sS'block_loop.thisTrialN'
p2327
I0
sg39
F0.93352526173475781
sg34
g752
(S'\x07\xdf\n\x12\n2\x01\x07\xd0\x00'
tRp2328
sa(dp2329
S'trial_loop.thisTrialN'
p2330
I101
sg894
g895
sS'block_loop.thisIndex'
p2331
g888
sg38
S'left'
p2332
sg58
g62
sS'trial_loop.thisN'
p2333
I101
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2334
g59
(g98
S'e\x00\x00\x00'
tRp2335
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2336
I0
sg903
g904
sS'block_loop.thisRepN'
p2337
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2338
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2339
Nsg69
Vn
sS'block_loop.thisTrialN'
p2340
I0
sg39
F1.0502349497855903
sg34
g752
(S'\x07\xdf\n\x12\n2\x07\x073\xc0'
tRp2341
sa(dp2342
S'trial_loop.thisTrialN'
p2343
I102
sg894
g2004
sS'block_loop.thisIndex'
p2344
g888
sg38
S'left'
p2345
sg58
g62
sS'trial_loop.thisN'
p2346
I102
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p2347
g59
(g98
S'f\x00\x00\x00'
tRp2348
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2349
I0
sg903
g2011
sS'block_loop.thisRepN'
p2350
I0
sg906
g968
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2351
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p2352
Nsg69
Vn
sS'block_loop.thisTrialN'
p2353
I0
sg39
F0.86684183126817516
sg34
g752
(S'\x07\xdf\n\x12\n2\r\x08{\xe0'
tRp2354
sa(dp2355
S'trial_loop.thisTrialN'
p2356
I103
sg894
g1788
sS'block_loop.thisIndex'
p2357
g888
sg38
S'right'
p2358
sg58
g62
sS'trial_loop.thisN'
p2359
I103
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p2360
g59
(g98
S'g\x00\x00\x00'
tRp2361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2362
I0
sg903
g1795
sS'block_loop.thisRepN'
p2363
I0
sg906
g1269
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2364
I0
sg908
g1276
sg55
g11
sS'block_loop.thisTrial'
p2365
Nsg69
Vn
sS'block_loop.thisTrialN'
p2366
I0
sg39
F0.73353740693664804
sg34
g752
(S'\x07\xdf\n\x12\n2\x13\x06\xe5\xa0'
tRp2367
sa(dp2368
S'trial_loop.thisTrialN'
p2369
I104
sg894
g1192
sS'block_loop.thisIndex'
p2370
g888
sg38
S'right'
p2371
sg58
g62
sS'trial_loop.thisN'
p2372
I104
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p2373
g59
(g98
S'h\x00\x00\x00'
tRp2374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2375
I0
sg903
g1200
sS'block_loop.thisRepN'
p2376
I0
sg906
g1196
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2377
I0
sg908
g1203
sg55
g11
sS'block_loop.thisTrial'
p2378
Nsg69
Vn
sS'block_loop.thisTrialN'
p2379
I0
sg39
F1.5000821084072413
sg34
g752
(S'\x07\xdf\n\x12\n2\x19\x03k\x00'
tRp2380
sa(dp2381
S'trial_loop.thisTrialN'
p2382
I105
sg894
g1060
sS'block_loop.thisIndex'
p2383
g888
sg38
S'left'
p2384
sg58
g62
sS'trial_loop.thisN'
p2385
I105
sg33
g1071
sg63
g64
sS'trial_loop.thisIndex'
p2386
g59
(g98
S'i\x00\x00\x00'
tRp2387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2388
I0
sg903
g1068
sS'block_loop.thisRepN'
p2389
I0
sg906
g1064
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2390
I0
sg908
g1071
sg55
g11
sS'block_loop.thisTrial'
p2391
Nsg69
Vn
sS'block_loop.thisTrialN'
p2392
I0
sg39
F0.90025082977945203
sg34
g752
(S'\x07\xdf\n\x12\n2\x1f\x0b\x9c\xa8'
tRp2393
sa(dp2394
S'trial_loop.thisTrialN'
p2395
I106
sg894
g1475
sS'block_loop.thisIndex'
p2396
g888
sg38
S'left'
p2397
sg58
g62
sS'trial_loop.thisN'
p2398
I106
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p2399
g59
(g98
S'j\x00\x00\x00'
tRp2400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2401
I0
sg903
g1482
sS'block_loop.thisRepN'
p2402
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2403
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2404
Nsg69
Vn
sS'block_loop.thisTrialN'
p2405
I0
sg39
F1.2335148841443697
sg34
g752
(S'\x07\xdf\n\x12\n2%\n\x83h'
tRp2406
sa(dp2407
S'trial_loop.thisTrialN'
p2408
I107
sg894
g1611
sS'block_loop.thisIndex'
p2409
g888
sg38
S'left'
p2410
sg58
g62
sS'trial_loop.thisN'
p2411
I107
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p2412
g59
(g98
S'k\x00\x00\x00'
tRp2413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2414
I0
sg903
g1618
sS'block_loop.thisRepN'
p2415
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2416
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p2417
Nsg69
Vn
sS'block_loop.thisTrialN'
p2418
I0
sg39
F1.7667850396201175
sg34
g752
(S'\x07\xdf\n\x12\n2+\x0e\xa6\x00'
tRp2419
sa(dp2420
S'trial_loop.thisTrialN'
p2421
I108
sg894
g1857
sS'block_loop.thisIndex'
p2422
g888
sg38
S'right'
p2423
sg58
g62
sS'trial_loop.thisN'
p2424
I108
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p2425
g59
(g98
S'l\x00\x00\x00'
tRp2426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2427
I0
sg903
g1864
sS'block_loop.thisRepN'
p2428
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2429
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p2430
Nsg69
Vn
sS'block_loop.thisTrialN'
p2431
I0
sg39
F0.89994406364758106
sg34
g752
(S'\x07\xdf\n\x12\n22\x0b\xa0\x90'
tRp2432
sa(dp2433
S'trial_loop.thisTrialN'
p2434
I109
sg894
g1282
sS'block_loop.thisIndex'
p2435
g888
sg38
S'right'
p2436
sg58
g62
sS'trial_loop.thisN'
p2437
I109
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p2438
g59
(g98
S'm\x00\x00\x00'
tRp2439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2440
I0
sg903
g1290
sS'block_loop.thisRepN'
p2441
I0
sg906
g1286
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2442
I0
sg908
g1293
sg55
g11
sS'block_loop.thisTrial'
p2443
Nsg69
Vn
sS'block_loop.thisTrialN'
p2444
I0
sg39
F0.75018574176101538
sg34
g752
(S'\x07\xdf\n\x12\n28\n\x87P'
tRp2445
sa(dp2446
S'trial_loop.thisTrialN'
p2447
I110
sg894
g1816
sS'block_loop.thisIndex'
p2448
g888
sg38
S'right'
p2449
sg58
g62
sS'trial_loop.thisN'
p2450
I110
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p2451
g59
(g98
S'n\x00\x00\x00'
tRp2452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2453
I0
sg903
g1823
sS'block_loop.thisRepN'
p2454
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2455
I0
sg908
g1246
sg55
g11
sS'block_loop.thisTrial'
p2456
Nsg69
Vn
sS'block_loop.thisTrialN'
p2457
I0
sg39
F0.90020806498432648
sg34
g752
(S'\x07\xdf\n\x12\n3\x02\x07GH'
tRp2458
sa(dp2459
S'trial_loop.thisTrialN'
p2460
I111
sg894
g1976
sS'block_loop.thisIndex'
p2461
g888
sg38
S'left'
p2462
sg58
g62
sS'trial_loop.thisN'
p2463
I111
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p2464
g59
(g98
S'o\x00\x00\x00'
tRp2465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2466
I0
sg903
g1983
sS'block_loop.thisRepN'
p2467
I0
sg906
g1286
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2468
I0
sg908
g1293
sg55
g11
sS'block_loop.thisTrial'
p2469
Nsg69
Vn
sS'block_loop.thisTrialN'
p2470
I0
sg39
F1.0668388092226451
sg34
g752
(S'\x07\xdf\n\x12\n3\x08\x06.\x08'
tRp2471
sa(dp2472
S'trial_loop.thisTrialN'
p2473
I112
sg894
g1175
sS'block_loop.thisIndex'
p2474
g888
sg38
S'left'
p2475
sg58
g62
sS'trial_loop.thisN'
p2476
I112
sg33
g1185
sg63
g64
sS'trial_loop.thisIndex'
p2477
g59
(g98
S'p\x00\x00\x00'
tRp2478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2479
I0
sg903
g1183
sS'block_loop.thisRepN'
p2480
I0
sg906
g1185
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2481
I0
sg908
g1179
sg55
g11
sS'block_loop.thisTrial'
p2482
Nsg69
Vn
sS'block_loop.thisTrialN'
p2483
I0
sg39
F1.2835471287999098
sg34
g752
(S'\x07\xdf\n\x12\n3\x0e\x07\xb4\xa8'
tRp2484
sa(dp2485
S'trial_loop.thisTrialN'
p2486
I113
sg894
g994
sS'block_loop.thisIndex'
p2487
g888
sg38
S'left'
p2488
sg58
g62
sS'trial_loop.thisN'
p2489
I113
sg33
g998
sg63
g64
sS'trial_loop.thisIndex'
p2490
g59
(g98
S'q\x00\x00\x00'
tRp2491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2492
I0
sg903
g1002
sS'block_loop.thisRepN'
p2493
I0
sg906
g998
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2494
I0
sg908
g1005
sg55
g11
sS'block_loop.thisTrial'
p2495
Nsg69
Vn
sS'block_loop.thisTrialN'
p2496
I0
sg39
F0.88347306017431038
sg34
g752
(S'\x07\xdf\n\x12\n3\x14\x0c\x8e\xd8'
tRp2497
sa(dp2498
S'trial_loop.thisTrialN'
p2499
I114
sg894
g1475
sS'block_loop.thisIndex'
p2500
g888
sg38
S'left'
p2501
sg58
g62
sS'trial_loop.thisN'
p2502
I114
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p2503
g59
(g98
S'r\x00\x00\x00'
tRp2504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2505
I0
sg903
g1482
sS'block_loop.thisRepN'
p2506
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2507
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2508
Nsg69
Vn
sS'block_loop.thisTrialN'
p2509
I0
sg39
F0.81680302934410065
sg34
g752
(S'\x07\xdf\n\x12\n3\x1a\x0b7\x18'
tRp2510
sa(dp2511
S'trial_loop.thisTrialN'
p2512
I115
sg894
g1415
sS'block_loop.thisIndex'
p2513
g888
sg38
S'right'
p2514
sg58
g62
sS'trial_loop.thisN'
p2515
I115
sg33
g1419
sg63
g64
sS'trial_loop.thisIndex'
p2516
g59
(g98
S's\x00\x00\x00'
tRp2517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2518
I0
sg903
g1423
sS'block_loop.thisRepN'
p2519
I0
sg906
g1419
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2520
I0
sg908
g1426
sg55
g11
sS'block_loop.thisTrial'
p2521
Nsg69
Vn
sS'block_loop.thisTrialN'
p2522
I0
sg39
F1.0168692862671378
sg34
g752
(S'\x07\xdf\n\x12\n3 \x08\xed('
tRp2523
sa(dp2524
S'trial_loop.thisTrialN'
p2525
I116
sg894
g1475
sS'block_loop.thisIndex'
p2526
g888
sg38
S'left'
p2527
sg58
g62
sS'trial_loop.thisN'
p2528
I116
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p2529
g59
(g98
S't\x00\x00\x00'
tRp2530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2531
I0
sg903
g1482
sS'block_loop.thisRepN'
p2532
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2533
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2534
Nsg69
Vn
sS'block_loop.thisTrialN'
p2535
I0
sg39
F0.90010200829146925
sg34
g752
(S'\x07\xdf\n\x12\n3&\t\xbc0'
tRp2536
sa(dp2537
S'trial_loop.thisTrialN'
p2538
I117
sg894
g1299
sS'block_loop.thisIndex'
p2539
g888
sg38
S'left'
p2540
sg58
g62
sS'trial_loop.thisN'
p2541
I117
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p2542
g59
(g98
S'u\x00\x00\x00'
tRp2543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2544
I0
sg903
g1307
sS'block_loop.thisRepN'
p2545
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2546
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p2547
Nsg69
Vn
sS'block_loop.thisTrialN'
p2548
I0
sg39
F0.79993231758408001
sg34
g752
(S'\x07\xdf\n\x12\n3,\x08\xa2\xf0'
tRp2549
sa(dp2550
S'trial_loop.thisTrialN'
p2551
I118
sg894
g1011
sS'block_loop.thisIndex'
p2552
g888
sg38
S'left'
p2553
sg58
g62
sS'trial_loop.thisN'
p2554
I118
sg33
g1015
sg63
g64
sS'trial_loop.thisIndex'
p2555
g59
(g98
S'v\x00\x00\x00'
tRp2556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2557
I0
sg903
g1019
sS'block_loop.thisRepN'
p2558
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2559
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p2560
Nsg69
Vn
sS'block_loop.thisTrialN'
p2561
I0
sg39
F0.93355263120383825
sg34
g752
(S'\x07\xdf\n\x12\n32\x06\x1eh'
tRp2562
sa(dp2563
S'trial_loop.thisTrialN'
p2564
I119
sg894
g1235
sS'block_loop.thisIndex'
p2565
g888
sg38
S'left'
p2566
sg58
g62
sS'trial_loop.thisN'
p2567
I119
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p2568
g59
(g98
S'w\x00\x00\x00'
tRp2569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2570
I0
sg903
g1243
sS'block_loop.thisRepN'
p2571
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2572
I0
sg908
g1246
sg55
g11
sS'block_loop.thisTrial'
p2573
Nsg69
Vn
sS'block_loop.thisTrialN'
p2574
I0
sg39
F0.80018805106010404
sg34
g752
(S'\x07\xdf\n\x12\n38\x05\xb8\xd8'
tRp2575
sa(dp2576
S'trial_loop.thisTrialN'
p2577
I120
sg894
g1265
sS'block_loop.thisIndex'
p2578
g888
sg38
S'left'
p2579
sg58
g62
sS'trial_loop.thisN'
p2580
I120
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p2581
g59
(g98
S'x\x00\x00\x00'
tRp2582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2583
I0
sg903
g1273
sS'block_loop.thisRepN'
p2584
I0
sg906
g1269
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2585
I0
sg908
g1276
sg55
g11
sS'block_loop.thisTrial'
p2586
Nsg69
Vn
sS'block_loop.thisTrialN'
p2587
I0
sg39
F0.71691530118687297
sg34
g752
(S'\x07\xdf\n\x12\n4\x02\x034P'
tRp2588
sa(dp2589
S'trial_loop.thisTrialN'
p2590
I121
sg894
g1611
sS'block_loop.thisIndex'
p2591
g888
sg38
S'left'
p2592
sg58
g62
sS'trial_loop.thisN'
p2593
I121
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p2594
g59
(g98
S'y\x00\x00\x00'
tRp2595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2596
I0
sg903
g1618
sS'block_loop.thisRepN'
p2597
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2598
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p2599
Nsg69
Vn
sS'block_loop.thisTrialN'
p2600
I0
sg39
F0.83354459142219639
sg34
g752
(S'\x07\xdf\n\x12\n4\x07\x0e\x82\xd8'
tRp2601
sa(dp2602
S'trial_loop.thisTrialN'
p2603
I122
sg894
g1415
sS'block_loop.thisIndex'
p2604
g888
sg38
S'right'
p2605
sg58
g62
sS'trial_loop.thisN'
p2606
I122
sg33
g1419
sg63
g64
sS'trial_loop.thisIndex'
p2607
g59
(g98
S'z\x00\x00\x00'
tRp2608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2609
I0
sg903
g1423
sS'block_loop.thisRepN'
p2610
I0
sg906
g1419
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2611
I0
sg908
g1426
sg55
g11
sS'block_loop.thisTrial'
p2612
Nsg69
Vn
sS'block_loop.thisTrialN'
p2613
I0
sg39
F0.88342744439250964
sg34
g752
(S'\x07\xdf\n\x12\n4\r\x0cs\x80'
tRp2614
sa(dp2615
S'trial_loop.thisTrialN'
p2616
I123
sg894
g915
sS'block_loop.thisIndex'
p2617
g888
sg38
S'right'
p2618
sg58
g62
sS'trial_loop.thisN'
p2619
I123
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2620
g59
(g98
S'{\x00\x00\x00'
tRp2621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2622
I0
sg903
g923
sS'block_loop.thisRepN'
p2623
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2624
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2625
Nsg69
Vn
sS'block_loop.thisTrialN'
p2626
I0
sg39
F0.86677312249730676
sg34
g752
(S'\x07\xdf\n\x12\n4\x13\x0bZ@'
tRp2627
sa(dp2628
S'trial_loop.thisTrialN'
p2629
I124
sg894
g1788
sS'block_loop.thisIndex'
p2630
g888
sg38
S'right'
p2631
sg58
g62
sS'trial_loop.thisN'
p2632
I124
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p2633
g59
(g98
S'|\x00\x00\x00'
tRp2634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2635
I0
sg903
g1795
sS'block_loop.thisRepN'
p2636
I0
sg906
g1269
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2637
I0
sg908
g1276
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vn
sS'block_loop.thisTrialN'
p2639
I0
sg39
F0.7335459598957641
sg34
g752
(S'\x07\xdf\n\x12\n4\x19\t\xc7\xe8'
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g1773
sS'block_loop.thisIndex'
p2643
g888
sg38
S'left'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g1402
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g1780
sS'block_loop.thisRepN'
p2649
I0
sg906
g1402
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2650
I0
sg908
g1409
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vn
sS'block_loop.thisTrialN'
p2652
I0
sg39
F1.0333844800284169
sg34
g752
(S'\x07\xdf\n\x12\n4\x1f\x06\x0e\xc8'
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g1128
sS'block_loop.thisIndex'
p2656
g888
sg38
S'right'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g1135
sS'block_loop.thisRepN'
p2662
I0
sg906
g951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2663
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vn
sS'block_loop.thisTrialN'
p2665
I0
sg39
F0.85011794530555562
sg34
g752
(S'\x07\xdf\n\x12\n4%\x07\x1cP'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g994
sS'block_loop.thisIndex'
p2669
g888
sg38
S'left'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g998
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g1002
sS'block_loop.thisRepN'
p2675
I0
sg906
g998
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2676
I0
sg908
g1005
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vn
sS'block_loop.thisTrialN'
p2678
I0
sg39
F0.80055383260923918
sg34
g752
(S'\x07\xdf\n\x12\n4+\x05Kx'
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g1094
sS'block_loop.thisIndex'
p2682
g888
sg38
S'right'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g1102
sS'block_loop.thisRepN'
p2688
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2689
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vn
sS'block_loop.thisTrialN'
p2691
I0
sg39
F0.73351602453885789
sg34
g752
(S'\x07\xdf\n\x12\n41\x02\xc6\xf0'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g1398
sS'block_loop.thisIndex'
p2695
g888
sg38
S'right'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g1402
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g1406
sS'block_loop.thisRepN'
p2701
I0
sg906
g1402
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2702
I0
sg908
g1409
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vn
sS'block_loop.thisTrialN'
p2704
I0
sg39
F0.96685215183879336
sg34
g752
(S'\x07\xdf\n\x12\n46\x0e\x8e\x90'
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g1788
sS'block_loop.thisIndex'
p2708
g888
sg38
S'right'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g1795
sS'block_loop.thisRepN'
p2714
I0
sg906
g1269
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2715
I0
sg908
g1276
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vn
sS'block_loop.thisTrialN'
p2717
I0
sg39
F0.6835707349673612
sg34
g752
(S'\x07\xdf\n\x12\n5\x00\x0e\xa6\x00'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g1028
sS'block_loop.thisIndex'
p2721
g888
sg38
S'right'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g1036
sS'block_loop.thisRepN'
p2727
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vn
sS'block_loop.thisTrialN'
p2730
I0
sg39
F0.91687806730487864
sg34
g752
(S'\x07\xdf\n\x12\n5\x06\n5H'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g1398
sS'block_loop.thisIndex'
p2734
g888
sg38
S'right'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g1402
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g1406
sS'block_loop.thisRepN'
p2740
I0
sg906
g1402
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg908
g1409
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vn
sS'block_loop.thisTrialN'
p2743
I0
sg39
F0.91689602851920426
sg34
g752
(S'\x07\xdf\n\x12\n5\x0c\tZ\x88'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g1383
sS'block_loop.thisIndex'
p2747
g888
sg38
S'right'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g998
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g1390
sS'block_loop.thisRepN'
p2753
I0
sg906
g998
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg908
g1005
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F0.90020236301188561
sg34
g752
(S'\x07\xdf\n\x12\n5\x12\x08\xba`'
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g1282
sS'block_loop.thisIndex'
p2760
g888
sg38
S'right'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g1290
sS'block_loop.thisRepN'
p2766
I0
sg906
g1286
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg908
g1293
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F0.83344651749166587
sg34
g752
(S'\x07\xdf\n\x12\n5\x18\x07\xa1 '
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g1611
sS'block_loop.thisIndex'
p2773
g888
sg38
S'left'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g1618
sS'block_loop.thisRepN'
p2779
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F0.783451050559961
sg34
g752
(S'\x07\xdf\n\x12\n5\x1e\x05\x95\xb0'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g1143
sS'block_loop.thisIndex'
p2786
g888
sg38
S'right'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g1154
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g1151
sS'block_loop.thisRepN'
p2792
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F0.91685953589376368
sg34
g752
(S'\x07\xdf\n\x12\n5$\x02\xce\xc0'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g1652
sS'block_loop.thisIndex'
p2799
g888
sg38
S'left'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1185
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g1659
sS'block_loop.thisRepN'
p2805
I0
sg906
g1185
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg908
g1179
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F1.1668730780788792
sg34
g752
(S'\x07\xdf\n\x12\n5*\x022\x80'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g1143
sS'block_loop.thisIndex'
p2812
g888
sg38
S'right'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g1151
sS'block_loop.thisRepN'
p2818
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F1.0667854957778218
sg34
g752
(S'\x07\xdf\n\x12\n50\x05$h'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g1432
sS'block_loop.thisIndex'
p2825
g888
sg38
S'left'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g1439
sS'block_loop.thisRepN'
p2831
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F1.0668516386613192
sg34
g752
(S'\x07\xdf\n\x12\n56\x06\xa7 '
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g1398
sS'block_loop.thisIndex'
p2838
g888
sg38
S'right'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g1402
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g1406
sS'block_loop.thisRepN'
p2844
I0
sg906
g1402
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg908
g1409
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F0.76677962274607125
sg34
g752
(S'\x07\xdf\n\x12\n6\x00\x08-\xc0'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g1045
sS'block_loop.thisIndex'
p2851
g888
sg38
S'right'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g1015
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g1052
sS'block_loop.thisRepN'
p2857
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F0.63344184187417341
sg34
g752
(S'\x07\xdf\n\x12\n6\x06\x05,8'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1447
sS'block_loop.thisIndex'
p2864
g888
sg38
S'left'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1454
sS'block_loop.thisRepN'
p2870
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F0.85021544903884205
sg34
g752
(S'\x07\xdf\n\x12\n6\x0c\x00\x07\xd0'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g2004
sS'block_loop.thisIndex'
p2877
g888
sg38
S'left'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g2011
sS'block_loop.thisRepN'
p2883
I0
sg906
g968
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F1.1001340533784969
sg34
g752
(S'\x07\xdf\n\x12\n6\x11\ry8'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1383
sS'block_loop.thisIndex'
p2890
g888
sg38
S'right'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g998
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1390
sS'block_loop.thisRepN'
p2896
I0
sg906
g998
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg908
g1005
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F0.68345612531584266
sg34
g752
(S'\x07\xdf\n\x12\n6\x18\x006\xb0'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g1652
sS'block_loop.thisIndex'
p2903
g888
sg38
S'left'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g1185
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g1659
sS'block_loop.thisRepN'
p2909
I0
sg906
g1185
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg908
g1179
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F1.0001057715935531
sg34
g752
(S'\x07\xdf\n\x12\n6\x1d\x0bF\xb8'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1857
sS'block_loop.thisIndex'
p2916
g888
sg38
S'right'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1864
sS'block_loop.thisRepN'
p2922
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F0.69993425625443706
sg34
g752
(S'\x07\xdf\n\x12\n6#\x0b\xdb('
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1355
sS'block_loop.thisIndex'
p2929
g888
sg38
S'right'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1088
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1362
sS'block_loop.thisRepN'
p2935
I0
sg906
g1081
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg908
g1088
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F1.0334343722897756
sg34
g752
(S'\x07\xdf\n\x12\n6)\x07\xa8\xf0'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1175
sS'block_loop.thisIndex'
p2942
g888
sg38
S'right'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1179
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1183
sS'block_loop.thisRepN'
p2948
I0
sg906
g1185
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg908
g1179
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F0.86678652213277019
sg34
g752
(S'\x07\xdf\n\x12\n6/\x08\xb2\x90'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g964
sS'block_loop.thisIndex'
p2955
g888
sg38
S'right'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g975
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g972
sS'block_loop.thisRepN'
p2961
I0
sg906
g968
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F0.75021425162458399
sg34
g752
(S'\x07\xdf\n\x12\n65\x07 8'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g1773
sS'block_loop.thisIndex'
p2968
g888
sg38
S'left'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g1409
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g1780
sS'block_loop.thisRepN'
p2974
I0
sg906
g1402
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg908
g1409
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F1.3005196207727749
sg34
g752
(S'\x07\xdf\n\x12\n6;\x03\xe4\x18'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1788
sS'block_loop.thisIndex'
p2981
g888
sg38
S'right'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1795
sS'block_loop.thisRepN'
p2987
I0
sg906
g1269
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg908
g1276
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F0.70022733765199519
sg34
g752
(S'\x07\xdf\n\x12\n7\x05\x08\xf8\xe0'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1235
sS'block_loop.thisIndex'
p2994
g888
sg38
S'left'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1243
sS'block_loop.thisRepN'
p3000
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg908
g1246
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.4001752786411998
sg34
g752
(S'\x07\xdf\n\x12\n7\x0b\x04\xc6\xa8'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1192
sS'block_loop.thisIndex'
p3007
g888
sg38
S'right'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1200
sS'block_loop.thisRepN'
p3013
I0
sg906
g1196
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg908
g1203
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F1.0667495733496253
sg34
g752
(S'\x07\xdf\n\x12\n7\x11\x0b\x89 '
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1077
sS'block_loop.thisIndex'
p3020
g888
sg38
S'left'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1081
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1085
sS'block_loop.thisRepN'
p3026
I0
sg906
g1081
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg908
g1088
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F0.86686948583565027
sg34
g752
(S'\x07\xdf\n\x12\n7\x17\r\x0f\xc0'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g1447
sS'block_loop.thisIndex'
p3033
g888
sg38
S'left'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g1454
sS'block_loop.thisRepN'
p3039
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F0.76675938074322403
sg34
g752
(S'\x07\xdf\n\x12\n7\x1d\x0b}h'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1758
sS'block_loop.thisIndex'
p3046
g888
sg38
S'left'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1765
sS'block_loop.thisRepN'
p3052
I0
sg906
g1196
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg908
g1203
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F0.98343263318793106
sg34
g752
(S'\x07\xdf\n\x12\n7#\x08{\xe0'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g1160
sS'block_loop.thisIndex'
p3059
g888
sg38
S'right'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1064
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g1167
sS'block_loop.thisRepN'
p3065
I0
sg906
g1064
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg908
g1071
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F0.81676910260648583
sg34
g752
(S'\x07\xdf\n\x12\n7)\x08\x93P'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1857
sS'block_loop.thisIndex'
p3072
g888
sg38
S'right'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1864
sS'block_loop.thisRepN'
p3078
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F0.83326947123896389
sg34
g752
(S'\x07\xdf\n\x12\n7/\x06I`'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1028
sS'block_loop.thisIndex'
p3085
g888
sg38
S'right'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1036
sS'block_loop.thisRepN'
p3091
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F0.91675290900366235
sg34
g752
(S'\x07\xdf\n\x12\n75\x04:\x08'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1976
sS'block_loop.thisIndex'
p3098
g888
sg38
S'left'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1983
sS'block_loop.thisRepN'
p3104
I0
sg906
g1286
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg908
g1293
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F0.96677118382649496
sg34
g752
(S'\x07\xdf\n\x12\n7;\x03\x9d\xc8'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g947
sS'block_loop.thisIndex'
p3111
g888
sg38
S'left'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g955
sS'block_loop.thisRepN'
p3117
I0
sg906
g951
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F0.81686746163586577
sg34
g752
(S'\x07\xdf\n\x12\n8\x05\x03\xb58'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1111
sS'block_loop.thisIndex'
p3124
g888
sg38
S'left'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1119
sS'block_loop.thisRepN'
p3130
I0
sg906
g1115
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg908
g1122
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F1.1167681332708526
sg34
g752
(S'\x07\xdf\n\x12\n8\x0b\x01,\xc8'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1758
sS'block_loop.thisIndex'
p3137
g888
sg38
S'left'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1765
sS'block_loop.thisRepN'
p3143
I0
sg906
g1196
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg908
g1203
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F1.2499947256751511
sg34
g752
(S'\x07\xdf\n\x12\n8\x11\x03\xa5\x98'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g1045
sS'block_loop.thisIndex'
p3150
g888
sg38
S'right'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g1015
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g1052
sS'block_loop.thisRepN'
p3156
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F0.750179184492481
sg34
g752
(S'\x07\xdf\n\x12\n8\x17\x07\xc80'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g915
sS'block_loop.thisIndex'
p3163
g888
sg38
S'right'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g923
sS'block_loop.thisRepN'
p3169
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F1.4334511360893885
sg34
g752
(S'\x07\xdf\n\x12\n8\x1d\x04\x8c\x10'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g1111
sS'block_loop.thisIndex'
p3176
g888
sg38
S'left'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g1119
sS'block_loop.thisRepN'
p3182
I0
sg906
g1115
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg908
g1122
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F0.68395590322415956
sg34
g752
(S'\x07\xdf\n\x12\n8#\x0b\xc7\xa0'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g1542
sS'block_loop.thisIndex'
p3189
g888
sg38
S'left'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g1426
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1549
sS'block_loop.thisRepN'
p3195
I0
sg906
g1419
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg908
g1426
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F1.7834895388759833
sg34
g752
(S'\x07\xdf\n\x12\n8)\x07Z\xd0'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1355
sS'block_loop.thisIndex'
p3202
g888
sg38
S'right'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1088
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1362
sS'block_loop.thisRepN'
p3208
I0
sg906
g1081
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg908
g1088
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F1.5834375368849578
sg34
g752
(S'\x07\xdf\n\x12\n80\x04\x8f\xf8'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1652
sS'block_loop.thisIndex'
p3215
g888
sg38
S'left'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1179
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1659
sS'block_loop.thisRepN'
p3221
I0
sg906
g1185
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg908
g1179
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F1.1668628145280309
sg34
g752
(S'\x07\xdf\n\x12\n86\r\xeeh'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g1028
sS'block_loop.thisIndex'
p3228
g888
sg38
S'right'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g1036
sS'block_loop.thisRepN'
p3234
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F1.0168364999240112
sg34
g752
(S'\x07\xdf\n\x12\n9\x01\x01\xdc\x90'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g2004
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g975
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g2011
sS'block_loop.thisRepN'
p3247
I0
sg906
g968
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F1.0668770124398179
sg34
g752
(S'\x07\xdf\n\x12\n9\x07\x02\xab\x98'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g1094
sS'block_loop.thisIndex'
p3254
g888
sg38
S'right'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g1102
sS'block_loop.thisRepN'
p3260
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F0.95020723819834529
sg34
g752
(S'\x07\xdf\n\x12\n9\r\x04.P'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g964
sS'block_loop.thisIndex'
p3267
g888
sg38
S'right'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g972
sS'block_loop.thisRepN'
p3273
I0
sg906
g968
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F0.75018403116928312
sg34
g752
(S'\x07\xdf\n\x12\n9\x13\x03\xcc\xa8'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g1060
sS'block_loop.thisIndex'
p3280
g888
sg38
S'left'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1064
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1068
sS'block_loop.thisRepN'
p3286
I0
sg906
g1064
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg908
g1071
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F0.85015187204317044
sg34
g752
(S'\x07\xdf\n\x12\n9\x19\x00\x90\x88'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1447
sS'block_loop.thisIndex'
p3293
g888
sg38
S'left'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1454
sS'block_loop.thisRepN'
p3299
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F0.80025961081764763
sg34
g752
(S'\x07\xdf\n\x12\n9\x1e\x0e\x01\xf0'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g1111
sS'block_loop.thisIndex'
p3306
g888
sg38
S'left'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g1119
sS'block_loop.thisRepN'
p3312
I0
sg906
g1115
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg908
g1122
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F0.75018944804332932
sg34
g752
(S'\x07\xdf\n\x12\n9$\x0by\x80'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1475
sS'block_loop.thisIndex'
p3319
g888
sg38
S'right'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1039
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1482
sS'block_loop.thisRepN'
p3325
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F1.2334812425056043
sg34
g752
(S'\x07\xdf\n\x12\n9*\x08=`'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1299
sS'block_loop.thisIndex'
p3332
g888
sg38
S'left'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1307
sS'block_loop.thisRepN'
p3338
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F0.66651242830448609
sg34
g752
(S'\x07\xdf\n\x12\n90\x0c%`'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1542
sS'block_loop.thisIndex'
p3345
g888
sg38
S'left'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1419
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1549
sS'block_loop.thisRepN'
p3351
I0
sg906
g1419
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg908
g1426
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F1.0001659274057602
sg34
g752
(S'\x07\xdf\n\x12\n96\x07\xb4\xa8'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1758
sS'block_loop.thisIndex'
p3358
g888
sg38
S'left'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1765
sS'block_loop.thisRepN'
p3364
I0
sg906
g1196
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg908
g1203
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F0.98332458080494689
sg34
g752
(S'\x07\xdf\n\x12\n:\x00\x08\n\x98'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g1652
sS'block_loop.thisIndex'
p3371
g888
sg38
S'left'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g1185
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g1659
sS'block_loop.thisRepN'
p3377
I0
sg906
g1185
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg908
g1179
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F1.7167479482877752
sg34
g752
(S'\x07\xdf\n\x12\n:\x06\x08\\\xa0'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g932
sS'block_loop.thisIndex'
p3384
g888
sg38
S'right'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g939
sS'block_loop.thisRepN'
p3390
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F0.98358544605707721
sg34
g752
(S'\x07\xdf\n\x12\n:\r\x04\x9f\x98'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1542
sS'block_loop.thisIndex'
p3397
g888
sg38
S'left'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1426
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1549
sS'block_loop.thisRepN'
p3403
I0
sg906
g1419
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg908
g1426
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F1.1668260368041956
sg34
g752
(S'\x07\xdf\n\x12\n:\x13\x04\xb7\x08'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1192
sS'block_loop.thisIndex'
p3410
g888
sg38
S'right'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1200
sS'block_loop.thisRepN'
p3416
I0
sg906
g1196
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg908
g1203
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F1.250095080394658
sg34
g752
(S'\x07\xdf\n\x12\n:\x19\x07\xe7p'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g1857
sS'block_loop.thisIndex'
p3423
g888
sg38
S'right'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g1864
sS'block_loop.thisRepN'
p3429
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F0.76651961279048919
sg34
g752
(S'\x07\xdf\n\x12\n:\x1f\x0cH\x88'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g1045
sS'block_loop.thisIndex'
p3436
g888
sg38
S'right'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1022
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g1052
sS'block_loop.thisRepN'
p3442
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F1.2835243209092368
sg34
g752
(S'\x07\xdf\n\x12\n:%\t\x0ch'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1060
sS'block_loop.thisIndex'
p3449
g888
sg38
S'left'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g1064
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1068
sS'block_loop.thisRepN'
p3455
I0
sg906
g1064
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg908
g1071
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F0.71689791016979143
sg34
g752
(S'\x07\xdf\n\x12\n:+\r\xe6\x98'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g964
sS'block_loop.thisIndex'
p3462
g888
sg38
S'right'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g972
sS'block_loop.thisRepN'
p3468
I0
sg906
g968
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F0.71678244522263412
sg34
g752
(S'\x07\xdf\n\x12\n:1\n-x'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1611
sS'block_loop.thisIndex'
p3475
g888
sg38
S'left'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1105
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1618
sS'block_loop.thisRepN'
p3481
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F1.3834907362897866
sg34
g752
(S'\x07\xdf\n\x12\n:7\x06tX'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1160
sS'block_loop.thisIndex'
p3488
g888
sg38
S'right'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1064
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1167
sS'block_loop.thisRepN'
p3494
I0
sg906
g1064
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg908
g1071
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F0.68345612531584266
sg34
g752
(S'\x07\xdf\n\x12\n;\x01\x0c\xbd\xb8'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1011
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1022
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1019
sS'block_loop.thisRepN'
p3507
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F0.70020139367579759
sg34
g752
(S'\x07\xdf\n\x12\n;\x07\x08P\xe8'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g1094
sS'block_loop.thisIndex'
p3514
g888
sg38
S'right'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g1102
sS'block_loop.thisRepN'
p3520
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F0.73347382994097643
sg34
g752
(S'\x07\xdf\n\x12\n;\r\x04YH'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g1816
sS'block_loop.thisIndex'
p3527
g888
sg38
S'right'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g1823
sS'block_loop.thisRepN'
p3533
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg908
g1246
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F0.75024618267161713
sg34
g752
(S'\x07\xdf\n\x12\n;\x13\x00\xde\xa8'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1175
sS'block_loop.thisIndex'
p3540
g888
sg38
S'right'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g1185
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1183
sS'block_loop.thisRepN'
p3546
I0
sg906
g1185
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg908
g1179
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F0.73350604608685899
sg34
g752
(S'\x07\xdf\n\x12\n;\x18\x0c\xa6H'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g1235
sS'block_loop.thisIndex'
p3553
g888
sg38
S'left'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g1243
sS'block_loop.thisRepN'
p3559
I0
sg906
g1239
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg908
g1246
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F0.73347896171662796
sg34
g752
(S'\x07\xdf\n\x12\n;\x1e\t+\xa8'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g2004
sS'block_loop.thisIndex'
p3566
g888
sg38
S'left'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g975
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g2011
sS'block_loop.thisRepN'
p3572
I0
sg906
g968
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F0.90014762407326998
sg34
g752
(S'\x07\xdf\n\x12\n;$\x05\xb1\x08'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g1596
sS'block_loop.thisIndex'
p3579
g888
sg38
S'right'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g1603
sS'block_loop.thisRepN'
p3585
I0
sg906
g1115
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg908
g1122
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F0.73353256025984592
sg34
g752
(S'\x07\xdf\n\x12\n;*\x04\x97\xc8'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g1355
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g1081
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g1362
sS'block_loop.thisRepN'
p3598
I0
sg906
g1081
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg908
g1088
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F0.93349988795625904
sg34
g752
(S'\x07\xdf\n\x12\n;0\x01\x1d('
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g1282
sS'block_loop.thisIndex'
p3605
g888
sg38
S'right'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g1290
sS'block_loop.thisRepN'
p3611
I0
sg906
g1286
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg908
g1293
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F0.81686204476181956
sg34
g752
(S'\x07\xdf\n\x12\n;6\x00\x80\xe8'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F9.266718326539376
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'51-mars.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'left'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'51-mars.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'27-hartleys_raspberries_jelly.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'27-hartleys_raspberries_jelly.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F1.0835176496011627
sg34
g752
(S'\x07\xdf\n\x12\x0b\x00\x0e\x02\xde`'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'44-crunch.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'left'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'44-crunch.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'26-walkers_smoky_bacon.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3663
I1
sg3646
S'26-walkers_smoky_bacon.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F1.4168062224484856
sg34
g752
(S'\x07\xdf\n\x12\x0b\x00\x14\x04\x9f\x98'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'18-mms.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'left'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'18-mms.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3680
I1
sg3646
S'43-mrporky_pork_crackles_redo.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F0.6838404382765475
sg34
g752
(S'\x07\xdf\n\x12\x0b\x00\x1a\x0bb\x10'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'13-mccoys_steak_crisps.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'right'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'3-ellas_strawberries_apples.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'3-ellas_strawberries_apples.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3697
I1
sg3646
S'13-mccoys_steak_crisps.png'
p3698
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vn
sS'block_loop.thisTrialN'
p3700
I0
sg39
F0.76676451251842082
sg34
g752
(S'\x07\xdf\n\x12\x0b\x00 \x07/\xd8'
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'7-olives.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'right'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'7-olives.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'22-daim.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
S'22-daim.png'
p3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3715
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vn
sS'block_loop.thisTrialN'
p3717
I0
sg39
F0.66679695674338291
sg34
g752
(S'\x07\xdf\n\x12\x0b\x00&\x03\xf3\xb8'
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'2-steamed_puddings.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'left'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
S'2-steamed_puddings.png'
p3725
sg63
g64
sS'trial_loop.thisIndex'
p3726
g59
(g98
S'\x05\x00\x00\x00'
tRp3727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3728
I0
sg3641
S'20-fruit_pastilles.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3731
I1
sg3646
S'20-fruit_pastilles.png'
p3732
sg55
g11
sS'block_loop.thisTrial'
p3733
Nsg69
Vn
sS'block_loop.thisTrialN'
p3734
I0
sg39
F0.88343172087252242
sg34
g752
(S'\x07\xdf\n\x12\x0b\x00+\x0e\xc5@'
tRp3735
sa(dp3736
S'trial_loop.thisTrialN'
p3737
I6
sg3632
S'10-bounty_redo.png'
p3738
sS'block_loop.thisIndex'
p3739
g3626
sg38
S'right'
p3740
sg58
g62
sS'trial_loop.thisN'
p3741
I6
sg33
S'4-corn.png'
p3742
sg63
g64
sS'trial_loop.thisIndex'
p3743
g59
(g98
S'\x06\x00\x00\x00'
tRp3744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3745
I0
sg3641
S'4-corn.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3748
I1
sg3646
S'10-bounty_redo.png'
p3749
sg55
g11
sS'block_loop.thisTrial'
p3750
Nsg69
Vn
sS'block_loop.thisTrialN'
p3751
I0
sg39
F0.76689309200310163
sg34
g752
(S'\x07\xdf\n\x12\x0b\x001\rqh'
tRp3752
sa(dp3753
S'trial_loop.thisTrialN'
p3754
I7
sg3632
S'38-maltesers.png'
p3755
sS'block_loop.thisIndex'
p3756
g3626
sg38
S'left'
p3757
sg58
g62
sS'trial_loop.thisN'
p3758
I7
sg33
S'38-maltesers.png'
p3759
sg63
g64
sS'trial_loop.thisIndex'
p3760
g59
(g98
S'\x07\x00\x00\x00'
tRp3761
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3762
I0
sg3641
S'6-sour_patch_kids.png'
p3763
sS'block_loop.thisRepN'
p3764
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3765
I1
sg3646
S'6-sour_patch_kids.png'
p3766
sg55
g11
sS'block_loop.thisTrial'
p3767
Nsg69
Vn
sS'block_loop.thisTrialN'
p3768
I0
sg39
F0.69988265340180078
sg34
g752
(S'\x07\xdf\n\x12\x0b\x007\no\xe0'
tRp3769
sa(dp3770
S'trial_loop.thisTrialN'
p3771
I8
sg3632
S'36-fig_rolls.png'
p3772
sS'block_loop.thisIndex'
p3773
g3626
sg38
S'right'
p3774
sg58
g62
sS'trial_loop.thisN'
p3775
I8
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p3776
sg63
g64
sS'trial_loop.thisIndex'
p3777
g59
(g98
S'\x08\x00\x00\x00'
tRp3778
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3779
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p3780
sS'block_loop.thisRepN'
p3781
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3782
I1
sg3646
S'36-fig_rolls.png'
p3783
sg55
g11
sS'block_loop.thisTrial'
p3784
Nsg69
Vn
sS'block_loop.thisTrialN'
p3785
I0
sg39
F0.75016949113887677
sg34
g752
(S'\x07\xdf\n\x12\x0b\x01\x01\x06=\xa8'
tRp3786
sa(dp3787
S'trial_loop.thisTrialN'
p3788
I9
sg3632
g3670
sS'block_loop.thisIndex'
p3789
g3626
sg38
S'left'
p3790
sg58
g62
sS'trial_loop.thisN'
p3791
I9
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p3792
g59
(g98
S'\t\x00\x00\x00'
tRp3793
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3794
I0
sg3641
g3678
sS'block_loop.thisRepN'
p3795
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3796
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p3797
Nsg69
Vn
sS'block_loop.thisTrialN'
p3798
I0
sg39
F0.63355131975004042
sg34
g752
(S'\x07\xdf\n\x12\x0b\x01\x07\x03\x01\x88'
tRp3799
sa(dp3800
S'trial_loop.thisTrialN'
p3801
I10
sg3632
S'30-spaghetti_hoops.png'
p3802
sS'block_loop.thisIndex'
p3803
g3626
sg38
S'right'
p3804
sg58
g62
sS'trial_loop.thisN'
p3805
I10
sg33
S'19-caramello_redo.png'
p3806
sg63
g64
sS'trial_loop.thisIndex'
p3807
g59
(g98
S'\n\x00\x00\x00'
tRp3808
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3809
I0
sg3641
S'19-caramello_redo.png'
p3810
sS'block_loop.thisRepN'
p3811
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3812
I1
sg3646
S'30-spaghetti_hoops.png'
p3813
sg55
g11
sS'block_loop.thisTrial'
p3814
Nsg69
Vn
sS'block_loop.thisTrialN'
p3815
I0
sg39
F0.61680519609353723
sg34
g752
(S'\x07\xdf\n\x12\x0b\x01\x0c\r\x1f`'
tRp3816
sa(dp3817
S'trial_loop.thisTrialN'
p3818
I11
sg3632
g3633
sS'block_loop.thisIndex'
p3819
g3626
sg38
S'left'
p3820
sg58
g62
sS'trial_loop.thisN'
p3821
I11
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p3822
g59
(g98
S'\x0b\x00\x00\x00'
tRp3823
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3824
I0
sg3641
g3642
sS'block_loop.thisRepN'
p3825
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3826
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3827
Nsg69
Vn
sS'block_loop.thisTrialN'
p3828
I0
sg39
F1.0001927266775965
sg34
g752
(S'\x07\xdf\n\x12\x0b\x01\x12\x07\xf7\x10'
tRp3829
sa(dp3830
S'trial_loop.thisTrialN'
p3831
I12
sg3632
S'19-caramello_redo.png'
p3832
sS'block_loop.thisIndex'
p3833
g3626
sg38
S'left'
p3834
sg58
g62
sS'trial_loop.thisN'
p3835
I12
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p3836
g59
(g98
S'\x0c\x00\x00\x00'
tRp3837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3838
I0
sg3641
S'30-spaghetti_hoops.png'
p3839
sS'block_loop.thisRepN'
p3840
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3841
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p3842
Nsg69
Vn
sS'block_loop.thisTrialN'
p3843
I0
sg39
F0.96685528792431796
sg34
g752
(S'\x07\xdf\n\x12\x0b\x01\x18\x08M\x00'
tRp3844
sa(dp3845
S'trial_loop.thisTrialN'
p3846
I13
sg3632
S'41-peanuts_redo.png'
p3847
sS'block_loop.thisIndex'
p3848
g3626
sg38
S'left'
p3849
sg58
g62
sS'trial_loop.thisN'
p3850
I13
sg33
S'45-chewy_nougat_redo.png'
p3851
sg63
g64
sS'trial_loop.thisIndex'
p3852
g59
(g98
S'\r\x00\x00\x00'
tRp3853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3854
I0
sg3641
S'45-chewy_nougat_redo.png'
p3855
sS'block_loop.thisRepN'
p3856
I1
sg3644
S'41-peanuts_redo.png'
p3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3858
I1
sg3646
g3851
sg55
g11
sS'block_loop.thisTrial'
p3859
Nsg69
Vn
sS'block_loop.thisTrialN'
p3860
I0
sg39
F0.83357851815981121
sg34
g752
(S'\x07\xdf\n\x12\x0b\x01\x1e\x08dp'
tRp3861
sa(dp3862
S'trial_loop.thisTrialN'
p3863
I14
sg3632
S'40-sardines.png'
p3864
sS'block_loop.thisIndex'
p3865
g3626
sg38
S'right'
p3866
sg58
g62
sS'trial_loop.thisN'
p3867
I14
sg33
S'5-pineapple.png'
p3868
sg63
g64
sS'trial_loop.thisIndex'
p3869
g59
(g98
S'\x0e\x00\x00\x00'
tRp3870
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3871
I0
sg3641
S'5-pineapple.png'
p3872
sS'block_loop.thisRepN'
p3873
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3874
I1
sg3646
S'40-sardines.png'
p3875
sg55
g11
sS'block_loop.thisTrial'
p3876
Nsg69
Vn
sS'block_loop.thisTrialN'
p3877
I0
sg39
F0.98347539798351136
sg34
g752
(S'\x07\xdf\n\x12\x0b\x01$\x06Y\x00'
tRp3878
sa(dp3879
S'trial_loop.thisTrialN'
p3880
I15
sg3632
g3687
sS'block_loop.thisIndex'
p3881
g3626
sg38
S'right'
p3882
sg58
g62
sS'trial_loop.thisN'
p3883
I15
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p3884
g59
(g98
S'\x0f\x00\x00\x00'
tRp3885
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3886
I0
sg3641
g3695
sS'block_loop.thisRepN'
p3887
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3888
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p3889
Nsg69
Vn
sS'block_loop.thisTrialN'
p3890
I0
sg39
F1.4001196844074002
sg34
g752
(S'\x07\xdf\n\x12\x0b\x01*\x06\xab\x08'
tRp3891
sa(dp3892
S'trial_loop.thisTrialN'
p3893
I16
sg3632
S'49-yorkie.png'
p3894
sS'block_loop.thisIndex'
p3895
g3626
sg38
S'right'
p3896
sg58
g62
sS'trial_loop.thisN'
p3897
I16
sg33
S'49-yorkie.png'
p3898
sg63
g64
sS'trial_loop.thisIndex'
p3899
g59
(g98
S'\x10\x00\x00\x00'
tRp3900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3901
I0
sg3641
S'35-raisins.png'
p3902
sS'block_loop.thisRepN'
p3903
I1
sg3644
S'35-raisins.png'
p3904
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3905
I1
sg3646
g3898
sg55
g11
sS'block_loop.thisTrial'
p3906
Nsg69
Vn
sS'block_loop.thisTrialN'
p3907
I0
sg39
F0.75023021714832794
sg34
g752
(S'\x07\xdf\n\x12\x0b\x010\r/\x00'
tRp3908
sa(dp3909
S'trial_loop.thisTrialN'
p3910
I17
sg3632
S'42-mrkipling_lemon_slices.png'
p3911
sS'block_loop.thisIndex'
p3912
g3626
sg38
S'left'
p3913
sg58
g62
sS'trial_loop.thisN'
p3914
I17
sg33
S'42-mrkipling_lemon_slices.png'
p3915
sg63
g64
sS'trial_loop.thisIndex'
p3916
g59
(g98
S'\x11\x00\x00\x00'
tRp3917
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3918
I0
sg3641
S'16-skips_prawn.png'
p3919
sS'block_loop.thisRepN'
p3920
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3921
I1
sg3646
S'16-skips_prawn.png'
p3922
sg55
g11
sS'block_loop.thisTrial'
p3923
Nsg69
Vn
sS'block_loop.thisTrialN'
p3924
I0
sg39
F0.93333167976106779
sg34
g752
(S'\x07\xdf\n\x12\x0b\x016\t\xf2\xe0'
tRp3925
sa(dp3926
S'trial_loop.thisTrialN'
p3927
I18
sg3632
S'3-ellas_strawberries_apples.png'
p3928
sS'block_loop.thisIndex'
p3929
g3626
sg38
S'left'
p3930
sg58
g62
sS'trial_loop.thisN'
p3931
I18
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p3932
g59
(g98
S'\x12\x00\x00\x00'
tRp3933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3934
I0
sg3641
S'13-mccoys_steak_crisps.png'
p3935
sS'block_loop.thisRepN'
p3936
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3937
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p3938
Nsg69
Vn
sS'block_loop.thisTrialN'
p3939
I0
sg39
F1.0835207856862326
sg34
g752
(S'\x07\xdf\n\x12\x0b\x02\x00\tR\xb8'
tRp3940
sa(dp3941
S'trial_loop.thisTrialN'
p3942
I19
sg3632
g3894
sS'block_loop.thisIndex'
p3943
g3626
sg38
S'right'
p3944
sg58
g62
sS'trial_loop.thisN'
p3945
I19
sg33
g3904
sg63
g64
sS'trial_loop.thisIndex'
p3946
g59
(g98
S'\x13\x00\x00\x00'
tRp3947
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3948
I0
sg3641
g3902
sS'block_loop.thisRepN'
p3949
I1
sg3644
g3904
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3950
I1
sg3646
g3898
sg55
g11
sS'block_loop.thisTrial'
p3951
Nsg69
Vn
sS'block_loop.thisTrialN'
p3952
I0
sg39
F0.69994651549586706
sg34
g752
(S'\x07\xdf\n\x12\x0b\x02\x06\x0b\x13\xf0'
tRp3953
sa(dp3954
S'trial_loop.thisTrialN'
p3955
I20
sg3632
g3721
sS'block_loop.thisIndex'
p3956
g3626
sg38
S'left'
p3957
sg58
g62
sS'trial_loop.thisN'
p3958
I20
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p3959
g59
(g98
S'\x14\x00\x00\x00'
tRp3960
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3961
I0
sg3641
g3729
sS'block_loop.thisRepN'
p3962
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3963
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p3964
Nsg69
Vn
sS'block_loop.thisTrialN'
p3965
I0
sg39
F0.80020230599166098
sg34
g752
(S'\x07\xdf\n\x12\x0b\x02\x0c\x07 8'
tRp3966
sa(dp3967
S'trial_loop.thisTrialN'
p3968
I21
sg3632
S'50-polo.png'
p3969
sS'block_loop.thisIndex'
p3970
g3626
sg38
S'right'
p3971
sg58
g62
sS'trial_loop.thisN'
p3972
I21
sg33
S'48-twix.png'
p3973
sg63
g64
sS'trial_loop.thisIndex'
p3974
g59
(g98
S'\x15\x00\x00\x00'
tRp3975
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3976
I0
sg3641
S'48-twix.png'
p3977
sS'block_loop.thisRepN'
p3978
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3979
I1
sg3646
S'50-polo.png'
p3980
sg55
g11
sS'block_loop.thisTrial'
p3981
Nsg69
Vn
sS'block_loop.thisTrialN'
p3982
I0
sg39
F0.75011532239795997
sg34
g752
(S'\x07\xdf\n\x12\x0b\x02\x12\x04\x9b\xb0'
tRp3983
sa(dp3984
S'trial_loop.thisTrialN'
p3985
I22
sg3632
S'6-sour_patch_kids.png'
p3986
sS'block_loop.thisIndex'
p3987
g3626
sg38
S'right'
p3988
sg58
g62
sS'trial_loop.thisN'
p3989
I22
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p3990
g59
(g98
S'\x16\x00\x00\x00'
tRp3991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3992
I0
sg3641
S'38-maltesers.png'
p3993
sS'block_loop.thisRepN'
p3994
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3995
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p3996
Nsg69
Vn
sS'block_loop.thisTrialN'
p3997
I0
sg39
F0.6499259598840581
sg34
g752
(S'\x07\xdf\n\x12\x0b\x02\x18\x01!\x10'
tRp3998
sa(dp3999
S'trial_loop.thisTrialN'
p4000
I23
sg3632
S'35-raisins.png'
p4001
sS'block_loop.thisIndex'
p4002
g3626
sg38
S'left'
p4003
sg58
g62
sS'trial_loop.thisN'
p4004
I23
sg33
g3904
sg63
g64
sS'trial_loop.thisIndex'
p4005
g59
(g98
S'\x17\x00\x00\x00'
tRp4006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4007
I0
sg3641
S'49-yorkie.png'
p4008
sS'block_loop.thisRepN'
p4009
I1
sg3644
g3904
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4010
I1
sg3646
g3898
sg55
g11
sS'block_loop.thisTrial'
p4011
Nsg69
Vn
sS'block_loop.thisTrialN'
p4012
I0
sg39
F0.76682694911960425
sg34
g752
(S'\x07\xdf\n\x12\x0b\x02\x1d\x0b\xb8\x00'
tRp4013
sa(dp4014
S'trial_loop.thisTrialN'
p4015
I24
sg3632
S'26-walkers_smoky_bacon.png'
p4016
sS'block_loop.thisIndex'
p4017
g3626
sg38
S'right'
p4018
sg58
g62
sS'trial_loop.thisN'
p4019
I24
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4020
g59
(g98
S'\x18\x00\x00\x00'
tRp4021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4022
I0
sg3641
S'44-crunch.png'
p4023
sS'block_loop.thisRepN'
p4024
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4025
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4026
Nsg69
Vn
sS'block_loop.thisTrialN'
p4027
I0
sg39
F0.68358527499776756
sg34
g752
(S'\x07\xdf\n\x12\x0b\x02#\x08\xb6x'
tRp4028
sa(dp4029
S'trial_loop.thisTrialN'
p4030
I25
sg3632
S'46-pistachios.png'
p4031
sS'block_loop.thisIndex'
p4032
g3626
sg38
S'left'
p4033
sg58
g62
sS'trial_loop.thisN'
p4034
I25
sg33
S'46-pistachios.png'
p4035
sg63
g64
sS'trial_loop.thisIndex'
p4036
g59
(g98
S'\x19\x00\x00\x00'
tRp4037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4038
I0
sg3641
S'29-beans.png'
p4039
sS'block_loop.thisRepN'
p4040
I1
sg3644
g4035
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4041
I1
sg3646
S'29-beans.png'
p4042
sg55
g11
sS'block_loop.thisTrial'
p4043
Nsg69
Vn
sS'block_loop.thisTrialN'
p4044
I0
sg39
F0.83357025029954457
sg34
g752
(S'\x07\xdf\n\x12\x0b\x02)\x04I\xa8'
tRp4045
sa(dp4046
S'trial_loop.thisTrialN'
p4047
I26
sg3632
S'20-fruit_pastilles.png'
p4048
sS'block_loop.thisIndex'
p4049
g3626
sg38
S'right'
p4050
sg58
g62
sS'trial_loop.thisN'
p4051
I26
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4052
g59
(g98
S'\x1a\x00\x00\x00'
tRp4053
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4054
I0
sg3641
S'2-steamed_puddings.png'
p4055
sS'block_loop.thisRepN'
p4056
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4057
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4058
Nsg69
Vn
sS'block_loop.thisTrialN'
p4059
I0
sg39
F0.73351459904597505
sg34
g752
(S'\x07\xdf\n\x12\x0b\x02/\x02:P'
tRp4060
sa(dp4061
S'trial_loop.thisTrialN'
p4062
I27
sg3632
g3772
sS'block_loop.thisIndex'
p4063
g3626
sg38
S'right'
p4064
sg58
g62
sS'trial_loop.thisN'
p4065
I27
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4066
g59
(g98
S'\x1b\x00\x00\x00'
tRp4067
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4068
I0
sg3641
g3780
sS'block_loop.thisRepN'
p4069
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4070
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4071
Nsg69
Vn
sS'block_loop.thisTrialN'
p4072
I0
sg39
F1.133453816016754
sg34
g752
(S'\x07\xdf\n\x12\x0b\x024\x0e\x01\xf0'
tRp4073
sa(dp4074
S'trial_loop.thisTrialN'
p4075
I28
sg3632
S'45-chewy_nougat_redo.png'
p4076
sS'block_loop.thisIndex'
p4077
g3626
sg38
S'right'
p4078
sg58
g62
sS'trial_loop.thisN'
p4079
I28
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p4080
g59
(g98
S'\x1c\x00\x00\x00'
tRp4081
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4082
I0
sg3641
S'41-peanuts_redo.png'
p4083
sS'block_loop.thisRepN'
p4084
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4085
I1
sg3646
g3851
sg55
g11
sS'block_loop.thisTrial'
p4086
Nsg69
Vn
sS'block_loop.thisTrialN'
p4087
I0
sg39
F0.65015945566665323
sg34
g752
(S'\x07\xdf\n\x12\x0b\x02;\x018\x80'
tRp4088
sa(dp4089
S'trial_loop.thisTrialN'
p4090
I29
sg3632
S'5-pineapple.png'
p4091
sS'block_loop.thisIndex'
p4092
g3626
sg38
S'left'
p4093
sg58
g62
sS'trial_loop.thisN'
p4094
I29
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p4095
g59
(g98
S'\x1d\x00\x00\x00'
tRp4096
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4097
I0
sg3641
S'40-sardines.png'
p4098
sS'block_loop.thisRepN'
p4099
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4100
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p4101
Nsg69
Vn
sS'block_loop.thisTrialN'
p4102
I0
sg39
F0.91682646445224236
sg34
g752
(S'\x07\xdf\n\x12\x0b\x03\x04\x0b\x94\xd8'
tRp4103
sa(dp4104
S'trial_loop.thisTrialN'
p4105
I30
sg3632
S'21-nakd_banana_crunch.png'
p4106
sS'block_loop.thisIndex'
p4107
g3626
sg38
S'left'
p4108
sg58
g62
sS'trial_loop.thisN'
p4109
I30
sg33
S'21-nakd_banana_crunch.png'
p4110
sg63
g64
sS'trial_loop.thisIndex'
p4111
g59
(g98
S'\x1e\x00\x00\x00'
tRp4112
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4113
I0
sg3641
S'1-treacle_cookies.png'
p4114
sS'block_loop.thisRepN'
p4115
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4116
I1
sg3646
S'1-treacle_cookies.png'
p4117
sg55
g11
sS'block_loop.thisTrial'
p4118
Nsg69
Vn
sS'block_loop.thisTrialN'
p4119
I0
sg39
F0.86712635970707197
sg34
g752
(S'\x07\xdf\n\x12\x0b\x03\n\n\xf4\xb0'
tRp4120
sa(dp4121
S'trial_loop.thisTrialN'
p4122
I31
sg3632
g3704
sS'block_loop.thisIndex'
p4123
g3626
sg38
S'right'
p4124
sg58
g62
sS'trial_loop.thisN'
p4125
I31
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4126
g59
(g98
S'\x1f\x00\x00\x00'
tRp4127
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4128
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4129
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4130
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4131
Nsg69
Vn
sS'block_loop.thisTrialN'
p4132
I0
sg39
F0.66687421847336736
sg34
g752
(S'\x07\xdf\n\x12\x0b\x03\x10\tbX'
tRp4133
sa(dp4134
S'trial_loop.thisTrialN'
p4135
I32
sg3632
g3738
sS'block_loop.thisIndex'
p4136
g3626
sg38
S'right'
p4137
sg58
g62
sS'trial_loop.thisN'
p4138
I32
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4139
g59
(g98
S' \x00\x00\x00'
tRp4140
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4141
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4142
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4143
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4144
Nsg69
Vn
sS'block_loop.thisTrialN'
p4145
I0
sg39
F0.86677255230006267
sg34
g752
(S'\x07\xdf\n\x12\x0b\x03\x16\x04\xb7\x08'
tRp4146
sa(dp4147
S'trial_loop.thisTrialN'
p4148
I33
sg3632
g3969
sS'block_loop.thisIndex'
p4149
g3626
sg38
S'right'
p4150
sg58
g62
sS'trial_loop.thisN'
p4151
I33
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p4152
g59
(g98
S'!\x00\x00\x00'
tRp4153
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4154
I0
sg3641
g3977
sS'block_loop.thisRepN'
p4155
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4156
I1
sg3646
g3980
sg55
g11
sS'block_loop.thisTrial'
p4157
Nsg69
Vn
sS'block_loop.thisTrialN'
p4158
I0
sg39
F0.7335337006543341
sg34
g752
(S'\x07\xdf\n\x12\x0b\x03\x1c\x03_H'
tRp4159
sa(dp4160
S'trial_loop.thisTrialN'
p4161
I34
sg3632
g3633
sS'block_loop.thisIndex'
p4162
g3626
sg38
S'left'
p4163
sg58
g62
sS'trial_loop.thisN'
p4164
I34
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4165
g59
(g98
S'"\x00\x00\x00'
tRp4166
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4167
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4168
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4169
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4170
Nsg69
Vn
sS'block_loop.thisTrialN'
p4171
I0
sg39
F0.91682731974788112
sg34
g752
(S'\x07\xdf\n\x12\x0b\x03!\x0e\xe8h'
tRp4172
sa(dp4173
S'trial_loop.thisTrialN'
p4174
I35
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p4175
sS'block_loop.thisIndex'
p4176
g3626
sg38
S'left'
p4177
sg58
g62
sS'trial_loop.thisN'
p4178
I35
sg33
S'17-jacobs_mini_cheddars_redo.png'
p4179
sg63
g64
sS'trial_loop.thisIndex'
p4180
g59
(g98
S'#\x00\x00\x00'
tRp4181
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4182
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p4183
sS'block_loop.thisRepN'
p4184
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4185
I1
sg3646
S'8-liquorice_catherine_wheels.png'
p4186
sg55
g11
sS'block_loop.thisTrial'
p4187
Nsg69
Vn
sS'block_loop.thisTrialN'
p4188
I0
sg39
F0.9668458796691084
sg34
g752
(S"\x07\xdf\n\x12\x0b\x03'\x0eL("
tRp4189
sa(dp4190
S'trial_loop.thisTrialN'
p4191
I36
sg3632
S'25-kitkat.png'
p4192
sS'block_loop.thisIndex'
p4193
g3626
sg38
S'left'
p4194
sg58
g62
sS'trial_loop.thisN'
p4195
I36
sg33
S'31-hobnobs.png'
p4196
sg63
g64
sS'trial_loop.thisIndex'
p4197
g59
(g98
S'$\x00\x00\x00'
tRp4198
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4199
I0
sg3641
S'31-hobnobs.png'
p4200
sS'block_loop.thisRepN'
p4201
I1
sg3644
S'25-kitkat.png'
p4202
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4203
I1
sg3646
g4196
sg55
g11
sS'block_loop.thisTrial'
p4204
Nsg69
Vn
sS'block_loop.thisTrialN'
p4205
I0
sg39
F0.90060663287704301
sg34
g752
(S'\x07\xdf\n\x12\x0b\x03-\x0e%\x18'
tRp4206
sa(dp4207
S'trial_loop.thisTrialN'
p4208
I37
sg3632
S'8-liquorice_catherine_wheels.png'
p4209
sS'block_loop.thisIndex'
p4210
g3626
sg38
S'right'
p4211
sg58
g62
sS'trial_loop.thisN'
p4212
I37
sg33
g4179
sg63
g64
sS'trial_loop.thisIndex'
p4213
g59
(g98
S'%\x00\x00\x00'
tRp4214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4215
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p4216
sS'block_loop.thisRepN'
p4217
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4218
I1
sg3646
g4186
sg55
g11
sS'block_loop.thisTrial'
p4219
Nsg69
Vn
sS'block_loop.thisTrialN'
p4220
I0
sg39
F0.75021453672343341
sg34
g752
(S'\x07\xdf\n\x12\x0b\x033\rJX'
tRp4221
sa(dp4222
S'trial_loop.thisTrialN'
p4223
I38
sg3632
g3738
sS'block_loop.thisIndex'
p4224
g3626
sg38
S'right'
p4225
sg58
g62
sS'trial_loop.thisN'
p4226
I38
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4227
g59
(g98
S'&\x00\x00\x00'
tRp4228
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4229
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4230
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4231
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4232
Nsg69
Vn
sS'block_loop.thisTrialN'
p4233
I0
sg39
F0.88353464147985505
sg34
g752
(S'\x07\xdf\n\x12\x0b\x039\t\xcf\xb8'
tRp4234
sa(dp4235
S'trial_loop.thisTrialN'
p4236
I39
sg3632
g3911
sS'block_loop.thisIndex'
p4237
g3626
sg38
S'left'
p4238
sg58
g62
sS'trial_loop.thisN'
p4239
I39
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p4240
g59
(g98
S"'\x00\x00\x00"
tRp4241
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4242
I0
sg3641
g3919
sS'block_loop.thisRepN'
p4243
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4244
I1
sg3646
g3922
sg55
g11
sS'block_loop.thisTrial'
p4245
Nsg69
Vn
sS'block_loop.thisTrialN'
p4246
I0
sg39
F0.76675909564437461
sg34
g752
(S'\x07\xdf\n\x12\x0b\x04\x03\x08\xb6x'
tRp4247
sa(dp4248
S'trial_loop.thisTrialN'
p4249
I40
sg3632
S'22-daim.png'
p4250
sS'block_loop.thisIndex'
p4251
g3626
sg38
S'right'
p4252
sg58
g62
sS'trial_loop.thisN'
p4253
I40
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4254
g59
(g98
S'(\x00\x00\x00'
tRp4255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4256
I0
sg3641
S'7-olives.png'
p4257
sS'block_loop.thisRepN'
p4258
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4259
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4260
Nsg69
Vn
sS'block_loop.thisTrialN'
p4261
I0
sg39
F1.0668724508618652
sg34
g752
(S'\x07\xdf\n\x12\x0b\x04\t\x05vp'
tRp4262
sa(dp4263
S'trial_loop.thisTrialN'
p4264
I41
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p4265
sS'block_loop.thisIndex'
p4266
g3626
sg38
S'left'
p4267
sg58
g62
sS'trial_loop.thisN'
p4268
I41
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4269
g59
(g98
S')\x00\x00\x00'
tRp4270
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4271
I0
sg3641
S'36-fig_rolls.png'
p4272
sS'block_loop.thisRepN'
p4273
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4274
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4275
Nsg69
Vn
sS'block_loop.thisTrialN'
p4276
I0
sg39
F1.3999537570011853
sg34
g752
(S'\x07\xdf\n\x12\x0b\x04\x0f\x06\xfd\x10'
tRp4277
sa(dp4278
S'trial_loop.thisTrialN'
p4279
I42
sg3632
g3687
sS'block_loop.thisIndex'
p4280
g3626
sg38
S'right'
p4281
sg58
g62
sS'trial_loop.thisN'
p4282
I42
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4283
g59
(g98
S'*\x00\x00\x00'
tRp4284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4285
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4286
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4287
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4288
Nsg69
Vn
sS'block_loop.thisTrialN'
p4289
I0
sg39
F1.4001068549687261
sg34
g752
(S'\x07\xdf\n\x12\x0b\x04\x15\r\xbf\x88'
tRp4290
sa(dp4291
S'trial_loop.thisTrialN'
p4292
I43
sg3632
g3772
sS'block_loop.thisIndex'
p4293
g3626
sg38
S'left'
p4294
sg58
g62
sS'trial_loop.thisN'
p4295
I43
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4296
g59
(g98
S'+\x00\x00\x00'
tRp4297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4298
I0
sg3641
g3780
sS'block_loop.thisRepN'
p4299
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4300
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4301
Nsg69
Vn
sS'block_loop.thisTrialN'
p4302
I0
sg39
F1.6501172610687718
sg34
g752
(S'\x07\xdf\n\x12\x0b\x04\x1c\x05\x01@'
tRp4303
sa(dp4304
S'trial_loop.thisTrialN'
p4305
I44
sg3632
g3928
sS'block_loop.thisIndex'
p4306
g3626
sg38
S'right'
p4307
sg58
g62
sS'trial_loop.thisN'
p4308
I44
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4309
g59
(g98
S',\x00\x00\x00'
tRp4310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4311
I0
sg3641
g3935
sS'block_loop.thisRepN'
p4312
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4313
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4314
Nsg69
Vn
sS'block_loop.thisTrialN'
p4315
I0
sg39
F1.4668344757237719
sg34
g752
(S'\x07\xdf\n\x12\x0b\x04#\x00N '
tRp4316
sa(dp4317
S'trial_loop.thisTrialN'
p4318
I45
sg3632
g3864
sS'block_loop.thisIndex'
p4319
g3626
sg38
S'right'
p4320
sg58
g62
sS'trial_loop.thisN'
p4321
I45
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p4322
g59
(g98
S'-\x00\x00\x00'
tRp4323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4324
I0
sg3641
g3872
sS'block_loop.thisRepN'
p4325
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4326
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p4327
Nsg69
Vn
sS'block_loop.thisTrialN'
p4328
I0
sg39
F0.88344740129741695
sg34
g752
(S'\x07\xdf\n\x12\x0b\x04)\x07\xc80'
tRp4329
sa(dp4330
S'trial_loop.thisTrialN'
p4331
I46
sg3632
S'23-crunchie_redo.png'
p4332
sS'block_loop.thisIndex'
p4333
g3626
sg38
S'right'
p4334
sg58
g62
sS'trial_loop.thisN'
p4335
I46
sg33
S'33-ambrosia_rice.png'
p4336
sg63
g64
sS'trial_loop.thisIndex'
p4337
g59
(g98
S'.\x00\x00\x00'
tRp4338
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4339
I0
sg3641
S'33-ambrosia_rice.png'
p4340
sS'block_loop.thisRepN'
p4341
I1
sg3644
g4336
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4342
I1
sg3646
S'23-crunchie_redo.png'
p4343
sg55
g11
sS'block_loop.thisTrial'
p4344
Nsg69
Vn
sS'block_loop.thisTrialN'
p4345
I0
sg39
F0.90055018334669512
sg34
g752
(S'\x07\xdf\n\x12\x0b\x04/\x06pp'
tRp4346
sa(dp4347
S'trial_loop.thisTrialN'
p4348
I47
sg3632
g3928
sS'block_loop.thisIndex'
p4349
g3626
sg38
S'right'
p4350
sg58
g62
sS'trial_loop.thisN'
p4351
I47
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4352
g59
(g98
S'/\x00\x00\x00'
tRp4353
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4354
I0
sg3641
g3935
sS'block_loop.thisRepN'
p4355
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4356
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4357
Nsg69
Vn
sS'block_loop.thisTrialN'
p4358
I0
sg39
F1.1168530926647691
sg34
g752
(S'\x07\xdf\n\x12\x0b\x045\x05\x95\xb0'
tRp4359
sa(dp4360
S'trial_loop.thisTrialN'
p4361
I48
sg3632
g4250
sS'block_loop.thisIndex'
p4362
g3626
sg38
S'left'
p4363
sg58
g62
sS'trial_loop.thisN'
p4364
I48
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4365
g59
(g98
S'0\x00\x00\x00'
tRp4366
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4367
I0
sg3641
g4257
sS'block_loop.thisRepN'
p4368
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4369
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4370
Nsg69
Vn
sS'block_loop.thisTrialN'
p4371
I0
sg39
F0.71677987933480836
sg34
g752
(S'\x07\xdf\n\x12\x0b\x04;\x07\xd0\x00'
tRp4372
sa(dp4373
S'trial_loop.thisTrialN'
p4374
I49
sg3632
S'43-mrporky_pork_crackles_redo.png'
p4375
sS'block_loop.thisIndex'
p4376
g3626
sg38
S'right'
p4377
sg58
g62
sS'trial_loop.thisN'
p4378
I49
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4379
g59
(g98
S'1\x00\x00\x00'
tRp4380
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4381
I0
sg3641
S'18-mms.png'
p4382
sS'block_loop.thisRepN'
p4383
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4384
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4385
Nsg69
Vn
sS'block_loop.thisTrialN'
p4386
I0
sg39
F0.66688248633408875
sg34
g752
(S'\x07\xdf\n\x12\x0b\x05\x05\x04\x1a\xc8'
tRp4387
sa(dp4388
S'trial_loop.thisTrialN'
p4389
I50
sg3632
g4016
sS'block_loop.thisIndex'
p4390
g3626
sg38
S'right'
p4391
sg58
g62
sS'trial_loop.thisN'
p4392
I50
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4393
g59
(g98
S'2\x00\x00\x00'
tRp4394
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4395
I0
sg3641
g4023
sS'block_loop.thisRepN'
p4396
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4397
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4398
Nsg69
Vn
sS'block_loop.thisTrialN'
p4399
I0
sg39
F0.76687940726878878
sg34
g752
(S'\x07\xdf\n\x12\x0b\x05\n\x0e\xb1\xb8'
tRp4400
sa(dp4401
S'trial_loop.thisTrialN'
p4402
I51
sg3632
g4265
sS'block_loop.thisIndex'
p4403
g3626
sg38
S'left'
p4404
sg58
g62
sS'trial_loop.thisN'
p4405
I51
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4406
g59
(g98
S'3\x00\x00\x00'
tRp4407
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4408
I0
sg3641
g4272
sS'block_loop.thisRepN'
p4409
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4410
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4411
Nsg69
Vn
sS'block_loop.thisTrialN'
p4412
I0
sg39
F0.90021433715401145
sg34
g752
(S'\x07\xdf\n\x12\x0b\x05\x10\x0b\xb00'
tRp4413
sa(dp4414
S'trial_loop.thisTrialN'
p4415
I52
sg3632
S'33-ambrosia_rice.png'
p4416
sS'block_loop.thisIndex'
p4417
g3626
sg38
S'left'
p4418
sg58
g62
sS'trial_loop.thisN'
p4419
I52
sg33
g4336
sg63
g64
sS'trial_loop.thisIndex'
p4420
g59
(g98
S'4\x00\x00\x00'
tRp4421
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4422
I0
sg3641
S'23-crunchie_redo.png'
p4423
sS'block_loop.thisRepN'
p4424
I1
sg3644
g4336
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4425
I1
sg3646
g4343
sg55
g11
sS'block_loop.thisTrial'
p4426
Nsg69
Vn
sS'block_loop.thisTrialN'
p4427
I0
sg39
F0.83379547822187305
sg34
g752
(S'\x07\xdf\n\x12\x0b\x05\x16\n\x96\xf0'
tRp4428
sa(dp4429
S'trial_loop.thisTrialN'
p4430
I53
sg3632
g3721
sS'block_loop.thisIndex'
p4431
g3626
sg38
S'left'
p4432
sg58
g62
sS'trial_loop.thisN'
p4433
I53
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4434
g59
(g98
S'5\x00\x00\x00'
tRp4435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4436
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4437
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4438
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4439
Nsg69
Vn
sS'block_loop.thisTrialN'
p4440
I0
sg39
F0.7835633794225032
sg34
g752
(S'\x07\xdf\n\x12\x0b\x05\x1c\x08\x8b\x80'
tRp4441
sa(dp4442
S'trial_loop.thisTrialN'
p4443
I54
sg3632
S'16-skips_prawn.png'
p4444
sS'block_loop.thisIndex'
p4445
g3626
sg38
S'right'
p4446
sg58
g62
sS'trial_loop.thisN'
p4447
I54
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p4448
g59
(g98
S'6\x00\x00\x00'
tRp4449
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4450
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p4451
sS'block_loop.thisRepN'
p4452
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4453
I1
sg3646
g3922
sg55
g11
sS'block_loop.thisTrial'
p4454
Nsg69
Vn
sS'block_loop.thisTrialN'
p4455
I0
sg39
F0.78331249262328129
sg34
g752
(S'\x07\xdf\n\x12\x0b\x05"\x05\xc4\x90'
tRp4456
sa(dp4457
S'trial_loop.thisTrialN'
p4458
I55
sg3632
g4031
sS'block_loop.thisIndex'
p4459
g3626
sg38
S'left'
p4460
sg58
g62
sS'trial_loop.thisN'
p4461
I55
sg33
g4035
sg63
g64
sS'trial_loop.thisIndex'
p4462
g59
(g98
S'7\x00\x00\x00'
tRp4463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4464
I0
sg3641
g4039
sS'block_loop.thisRepN'
p4465
I1
sg3644
g4035
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4466
I1
sg3646
g4042
sg55
g11
sS'block_loop.thisTrial'
p4467
Nsg69
Vn
sS'block_loop.thisTrialN'
p4468
I0
sg39
F0.73343420123046599
sg34
g752
(S'\x07\xdf\n\x12\x0b\x05(\x03\x01\x88'
tRp4469
sa(dp4470
S'trial_loop.thisTrialN'
p4471
I56
sg3632
g3633
sS'block_loop.thisIndex'
p4472
g3626
sg38
S'left'
p4473
sg58
g62
sS'trial_loop.thisN'
p4474
I56
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p4475
g59
(g98
S'8\x00\x00\x00'
tRp4476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4477
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4478
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4479
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4480
Nsg69
Vn
sS'block_loop.thisTrialN'
p4481
I0
sg39
F0.75012016907521684
sg34
g752
(S'\x07\xdf\n\x12\x0b\x05-\x0e\xc9('
tRp4482
sa(dp4483
S'trial_loop.thisTrialN'
p4484
I57
sg3632
g4375
sS'block_loop.thisIndex'
p4485
g3626
sg38
S'right'
p4486
sg58
g62
sS'trial_loop.thisN'
p4487
I57
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p4488
g59
(g98
S'9\x00\x00\x00'
tRp4489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4490
I0
sg3641
g4382
sS'block_loop.thisRepN'
p4491
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4492
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4493
Nsg69
Vn
sS'block_loop.thisTrialN'
p4494
I0
sg39
F0.63351796320966969
sg34
g752
(S'\x07\xdf\n\x12\x0b\x053\x0bN\x88'
tRp4495
sa(dp4496
S'trial_loop.thisTrialN'
p4497
I58
sg3632
g3969
sS'block_loop.thisIndex'
p4498
g3626
sg38
S'right'
p4499
sg58
g62
sS'trial_loop.thisN'
p4500
I58
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p4501
g59
(g98
S':\x00\x00\x00'
tRp4502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4503
I0
sg3641
g3977
sS'block_loop.thisRepN'
p4504
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4505
I1
sg3646
g3980
sg55
g11
sS'block_loop.thisTrial'
p4506
Nsg69
Vn
sS'block_loop.thisTrialN'
p4507
I0
sg39
F0.88388502770339983
sg34
g752
(S'\x07\xdf\n\x12\x0b\x059\x06h\xa0'
tRp4508
sa(dp4509
S'trial_loop.thisTrialN'
p4510
I59
sg3632
g3802
sS'block_loop.thisIndex'
p4511
g3626
sg38
S'left'
p4512
sg58
g62
sS'trial_loop.thisN'
p4513
I59
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4514
g59
(g98
S';\x00\x00\x00'
tRp4515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4516
I0
sg3641
g3810
sS'block_loop.thisRepN'
p4517
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4518
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4519
Nsg69
Vn
sS'block_loop.thisTrialN'
p4520
I0
sg39
F1.166768731978209
sg34
g752
(S'\x07\xdf\n\x12\x0b\x06\x03\x05\x10\xe0'
tRp4521
sa(dp4522
S'trial_loop.thisTrialN'
p4523
I60
sg3632
g4175
sS'block_loop.thisIndex'
p4524
g3626
sg38
S'left'
p4525
sg58
g62
sS'trial_loop.thisN'
p4526
I60
sg33
g4179
sg63
g64
sS'trial_loop.thisIndex'
p4527
g59
(g98
S'<\x00\x00\x00'
tRp4528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4529
I0
sg3641
g4183
sS'block_loop.thisRepN'
p4530
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4531
I1
sg3646
g4186
sg55
g11
sS'block_loop.thisTrial'
p4532
Nsg69
Vn
sS'block_loop.thisTrialN'
p4533
I0
sg39
F0.83342656058721332
sg34
g752
(S'\x07\xdf\n\x12\x0b\x06\t\x08\x02\xc8'
tRp4534
sa(dp4535
S'trial_loop.thisTrialN'
p4536
I61
sg3632
S'29-beans.png'
p4537
sS'block_loop.thisIndex'
p4538
g3626
sg38
S'right'
p4539
sg58
g62
sS'trial_loop.thisN'
p4540
I61
sg33
g4035
sg63
g64
sS'trial_loop.thisIndex'
p4541
g59
(g98
S'=\x00\x00\x00'
tRp4542
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4543
I0
sg3641
S'46-pistachios.png'
p4544
sS'block_loop.thisRepN'
p4545
I1
sg3644
g4035
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4546
I1
sg3646
g4042
sg55
g11
sS'block_loop.thisTrial'
p4547
Nsg69
Vn
sS'block_loop.thisTrialN'
p4548
I0
sg39
F0.75021539201952692
sg34
g752
(S'\x07\xdf\n\x12\x0b\x06\x0f\x05\xf7X'
tRp4549
sa(dp4550
S'trial_loop.thisTrialN'
p4551
I62
sg3632
g4076
sS'block_loop.thisIndex'
p4552
g3626
sg38
S'right'
p4553
sg58
g62
sS'trial_loop.thisN'
p4554
I62
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p4555
g59
(g98
S'>\x00\x00\x00'
tRp4556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4557
I0
sg3641
g4083
sS'block_loop.thisRepN'
p4558
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4559
I1
sg3646
g3851
sg55
g11
sS'block_loop.thisTrial'
p4560
Nsg69
Vn
sS'block_loop.thisTrialN'
p4561
I0
sg39
F0.70009790287122087
sg34
g752
(S'\x07\xdf\n\x12\x0b\x06\x15\x02\xbb8'
tRp4562
sa(dp4563
S'trial_loop.thisTrialN'
p4564
I63
sg3632
g3772
sS'block_loop.thisIndex'
p4565
g3626
sg38
S'right'
p4566
sg58
g62
sS'trial_loop.thisN'
p4567
I63
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4568
g59
(g98
S'?\x00\x00\x00'
tRp4569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4570
I0
sg3641
g3780
sS'block_loop.thisRepN'
p4571
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4572
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4573
Nsg69
Vn
sS'block_loop.thisTrialN'
p4574
I0
sg39
F1.0168436273897896
sg34
g752
(S'\x07\xdf\n\x12\x0b\x06\x1a\x0e\x05\xd8'
tRp4575
sa(dp4576
S'trial_loop.thisTrialN'
p4577
I64
sg3632
g3721
sS'block_loop.thisIndex'
p4578
g3626
sg38
S'left'
p4579
sg58
g62
sS'trial_loop.thisN'
p4580
I64
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p4581
g59
(g98
S'@\x00\x00\x00'
tRp4582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4583
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4584
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4585
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4586
Nsg69
Vn
sS'block_loop.thisTrialN'
p4587
I0
sg39
F0.81682384154419196
sg34
g752
(S'\x07\xdf\n\x12\x0b\x06 \x0e\x9aH'
tRp4588
sa(dp4589
S'trial_loop.thisTrialN'
p4590
I65
sg3632
g4076
sS'block_loop.thisIndex'
p4591
g3626
sg38
S'right'
p4592
sg58
g62
sS'trial_loop.thisN'
p4593
I65
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p4594
g59
(g98
S'A\x00\x00\x00'
tRp4595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4596
I0
sg3641
g4083
sS'block_loop.thisRepN'
p4597
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4598
I1
sg3646
g3851
sg55
g11
sS'block_loop.thisTrial'
p4599
Nsg69
Vn
sS'block_loop.thisTrialN'
p4600
I0
sg39
F0.75017747390074874
sg34
g752
(S'\x07\xdf\n\x12\x0b\x06&\x0cPX'
tRp4601
sa(dp4602
S'trial_loop.thisTrialN'
p4603
I66
sg3632
g3802
sS'block_loop.thisIndex'
p4604
g3626
sg38
S'left'
p4605
sg58
g62
sS'trial_loop.thisN'
p4606
I66
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4607
g59
(g98
S'B\x00\x00\x00'
tRp4608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4609
I0
sg3641
g3810
sS'block_loop.thisRepN'
p4610
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4611
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4612
Nsg69
Vn
sS'block_loop.thisTrialN'
p4613
I0
sg39
F0.71677503265800624
sg34
g752
(S'\x07\xdf\n\x12\x0b\x06,\t\x10P'
tRp4614
sa(dp4615
S'trial_loop.thisTrialN'
p4616
I67
sg3632
g3847
sS'block_loop.thisIndex'
p4617
g3626
sg38
S'right'
p4618
sg58
g62
sS'trial_loop.thisN'
p4619
I67
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p4620
g59
(g98
S'C\x00\x00\x00'
tRp4621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4622
I0
sg3641
g3855
sS'block_loop.thisRepN'
p4623
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4624
I1
sg3646
g3851
sg55
g11
sS'block_loop.thisTrial'
p4625
Nsg69
Vn
sS'block_loop.thisTrialN'
p4626
I0
sg39
F1.2835234656135981
sg34
g752
(S'\x07\xdf\n\x12\x0b\x062\x05[\x18'
tRp4627
sa(dp4628
S'trial_loop.thisTrialN'
p4629
I68
sg3632
S'31-hobnobs.png'
p4630
sS'block_loop.thisIndex'
p4631
g3626
sg38
S'right'
p4632
sg58
g62
sS'trial_loop.thisN'
p4633
I68
sg33
g4196
sg63
g64
sS'trial_loop.thisIndex'
p4634
g59
(g98
S'D\x00\x00\x00'
tRp4635
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4636
I0
sg3641
S'25-kitkat.png'
p4637
sS'block_loop.thisRepN'
p4638
I1
sg3644
g4202
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4639
I1
sg3646
g4196
sg55
g11
sS'block_loop.thisTrial'
p4640
Nsg69
Vn
sS'block_loop.thisTrialN'
p4641
I0
sg39
F1.0835187899961056
sg34
g752
(S'\x07\xdf\n\x12\x0b\x068\n5H'
tRp4642
sa(dp4643
S'trial_loop.thisTrialN'
p4644
I69
sg3632
S'27-hartleys_raspberries_jelly.png'
p4645
sS'block_loop.thisIndex'
p4646
g3626
sg38
S'right'
p4647
sg58
g62
sS'trial_loop.thisN'
p4648
I69
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4649
g59
(g98
S'E\x00\x00\x00'
tRp4650
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4651
I0
sg3641
S'51-mars.png'
p4652
sS'block_loop.thisRepN'
p4653
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4654
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4655
Nsg69
Vn
sS'block_loop.thisTrialN'
p4656
I0
sg39
F1.2335337006543341
sg34
g752
(S'\x07\xdf\n\x12\x0b\x07\x02\x0b\xf6\x80'
tRp4657
sa(dp4658
S'trial_loop.thisTrialN'
p4659
I70
sg3632
g4001
sS'block_loop.thisIndex'
p4660
g3626
sg38
S'left'
p4661
sg58
g62
sS'trial_loop.thisN'
p4662
I70
sg33
g3904
sg63
g64
sS'trial_loop.thisIndex'
p4663
g59
(g98
S'F\x00\x00\x00'
tRp4664
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4665
I0
sg3641
g4008
sS'block_loop.thisRepN'
p4666
I1
sg3644
g3904
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4667
I1
sg3646
g3898
sg55
g11
sS'block_loop.thisTrial'
p4668
Nsg69
Vn
sS'block_loop.thisTrialN'
p4669
I0
sg39
F0.90019723123577933
sg34
g752
(S'\x07\xdf\n\x12\x0b\x07\t\x00\x98X'
tRp4670
sa(dp4671
S'trial_loop.thisTrialN'
p4672
I71
sg3632
g4106
sS'block_loop.thisIndex'
p4673
g3626
sg38
S'left'
p4674
sg58
g62
sS'trial_loop.thisN'
p4675
I71
sg33
g4110
sg63
g64
sS'trial_loop.thisIndex'
p4676
g59
(g98
S'G\x00\x00\x00'
tRp4677
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4678
I0
sg3641
g4114
sS'block_loop.thisRepN'
p4679
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4680
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p4681
Nsg69
Vn
sS'block_loop.thisTrialN'
p4682
I0
sg39
F1.000092942154879
sg34
g752
(S'\x07\xdf\n\x12\x0b\x07\x0e\x0e\xff\xd8'
tRp4683
sa(dp4684
S'trial_loop.thisTrialN'
p4685
I72
sg3632
g3847
sS'block_loop.thisIndex'
p4686
g3626
sg38
S'left'
p4687
sg58
g62
sS'trial_loop.thisN'
p4688
I72
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p4689
g59
(g98
S'H\x00\x00\x00'
tRp4690
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4691
I0
sg3641
g3855
sS'block_loop.thisRepN'
p4692
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4693
I1
sg3646
g3851
sg55
g11
sS'block_loop.thisTrial'
p4694
Nsg69
Vn
sS'block_loop.thisTrialN'
p4695
I0
sg39
F0.83346162771931631
sg34
g752
(S'\x07\xdf\n\x12\x0b\x07\x15\x00\x13\x88'
tRp4696
sa(dp4697
S'trial_loop.thisTrialN'
p4698
I73
sg3632
g3911
sS'block_loop.thisIndex'
p4699
g3626
sg38
S'left'
p4700
sg58
g62
sS'trial_loop.thisN'
p4701
I73
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p4702
g59
(g98
S'I\x00\x00\x00'
tRp4703
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4704
I0
sg3641
g3919
sS'block_loop.thisRepN'
p4705
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4706
I1
sg3646
g3922
sg55
g11
sS'block_loop.thisTrial'
p4707
Nsg69
Vn
sS'block_loop.thisTrialN'
p4708
I0
sg39
F0.83332706116334521
sg34
g752
(S'\x07\xdf\n\x12\x0b\x07\x1a\r\x84\xf0'
tRp4709
sa(dp4710
S'trial_loop.thisTrialN'
p4711
I74
sg3632
g4048
sS'block_loop.thisIndex'
p4712
g3626
sg38
S'right'
p4713
sg58
g62
sS'trial_loop.thisN'
p4714
I74
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p4715
g59
(g98
S'J\x00\x00\x00'
tRp4716
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4717
I0
sg3641
g4055
sS'block_loop.thisRepN'
p4718
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4719
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4720
Nsg69
Vn
sS'block_loop.thisTrialN'
p4721
I0
sg39
F0.7168072488038888
sg34
g752
(S'\x07\xdf\n\x12\x0b\x07 \x0bu\x98'
tRp4722
sa(dp4723
S'trial_loop.thisTrialN'
p4724
I75
sg3632
g4332
sS'block_loop.thisIndex'
p4725
g3626
sg38
S'right'
p4726
sg58
g62
sS'trial_loop.thisN'
p4727
I75
sg33
g4336
sg63
g64
sS'trial_loop.thisIndex'
p4728
g59
(g98
S'K\x00\x00\x00'
tRp4729
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4730
I0
sg3641
g4340
sS'block_loop.thisRepN'
p4731
I1
sg3644
g4336
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4732
I1
sg3646
g4343
sg55
g11
sS'block_loop.thisTrial'
p4733
Nsg69
Vn
sS'block_loop.thisTrialN'
p4734
I0
sg39
F0.90021177126664043
sg34
g752
(S'\x07\xdf\n\x12\x0b\x07&\x07\x81\xe0'
tRp4735
sa(dp4736
S'trial_loop.thisTrialN'
p4737
I76
sg3632
S'48-twix.png'
p4738
sS'block_loop.thisIndex'
p4739
g3626
sg38
S'left'
p4740
sg58
g62
sS'trial_loop.thisN'
p4741
I76
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p4742
g59
(g98
S'L\x00\x00\x00'
tRp4743
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4744
I0
sg3641
S'50-polo.png'
p4745
sS'block_loop.thisRepN'
p4746
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4747
I1
sg3646
g3980
sg55
g11
sS'block_loop.thisTrial'
p4748
Nsg69
Vn
sS'block_loop.thisTrialN'
p4749
I0
sg39
F1.9502269100044032
sg34
g752
(S'\x07\xdf\n\x12\x0b\x07,\x06\xa7 '
tRp4750
sa(dp4751
S'trial_loop.thisTrialN'
p4752
I77
sg3632
S'4-corn.png'
p4753
sS'block_loop.thisIndex'
p4754
g3626
sg38
S'left'
p4755
sg58
g62
sS'trial_loop.thisN'
p4756
I77
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4757
g59
(g98
S'M\x00\x00\x00'
tRp4758
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4759
I0
sg3641
S'10-bounty_redo.png'
p4760
sS'block_loop.thisRepN'
p4761
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4762
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4763
Nsg69
Vn
sS'block_loop.thisTrialN'
p4764
I0
sg39
F1.166797526940627
sg34
g752
(S'\x07\xdf\n\x12\x0b\x073\x06=\xa8'
tRp4765
sa(dp4766
S'trial_loop.thisTrialN'
p4767
I78
sg3632
g3894
sS'block_loop.thisIndex'
p4768
g3626
sg38
S'right'
p4769
sg58
g62
sS'trial_loop.thisN'
p4770
I78
sg33
g3904
sg63
g64
sS'trial_loop.thisIndex'
p4771
g59
(g98
S'N\x00\x00\x00'
tRp4772
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4773
I0
sg3641
g3902
sS'block_loop.thisRepN'
p4774
I1
sg3644
g3904
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4775
I1
sg3646
g3898
sg55
g11
sS'block_loop.thisTrial'
p4776
Nsg69
Vn
sS'block_loop.thisTrialN'
p4777
I0
sg39
F1.0668445111955407
sg34
g752
(S'\x07\xdf\n\x12\x0b\x079\tn\x10'
tRp4778
sa(dp4779
S'trial_loop.thisTrialN'
p4780
I79
sg3632
g4192
sS'block_loop.thisIndex'
p4781
g3626
sg38
S'left'
p4782
sg58
g62
sS'trial_loop.thisN'
p4783
I79
sg33
g4202
sg63
g64
sS'trial_loop.thisIndex'
p4784
g59
(g98
S'O\x00\x00\x00'
tRp4785
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4786
I0
sg3641
g4200
sS'block_loop.thisRepN'
p4787
I1
sg3644
g4202
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4788
I1
sg3646
g4196
sg55
g11
sS'block_loop.thisTrial'
p4789
Nsg69
Vn
sS'block_loop.thisTrialN'
p4790
I0
sg39
F1.333529481194546
sg34
g752
(S'\x07\xdf\n\x12\x0b\x08\x03\n\xf4\xb0'
tRp4791
sa(dp4792
S'trial_loop.thisTrialN'
p4793
I80
sg3632
g4106
sS'block_loop.thisIndex'
p4794
g3626
sg38
S'left'
p4795
sg58
g62
sS'trial_loop.thisN'
p4796
I80
sg33
g4117
sg63
g64
sS'trial_loop.thisIndex'
p4797
g59
(g98
S'P\x00\x00\x00'
tRp4798
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4799
I0
sg3641
g4114
sS'block_loop.thisRepN'
p4800
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4801
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p4802
Nsg69
Vn
sS'block_loop.thisTrialN'
p4803
I0
sg39
F0.80061740960491079
sg34
g752
(S'\x07\xdf\n\x12\x0b\x08\n\x01@P'
tRp4804
sa(dp4805
S'trial_loop.thisTrialN'
p4806
I81
sg3632
g3894
sS'block_loop.thisIndex'
p4807
g3626
sg38
S'right'
p4808
sg58
g62
sS'trial_loop.thisN'
p4809
I81
sg33
g3898
sg63
g64
sS'trial_loop.thisIndex'
p4810
g59
(g98
S'Q\x00\x00\x00'
tRp4811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4812
I0
sg3641
g3902
sS'block_loop.thisRepN'
p4813
I1
sg3644
g3904
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4814
I1
sg3646
g3898
sg55
g11
sS'block_loop.thisTrial'
p4815
Nsg69
Vn
sS'block_loop.thisTrialN'
p4816
I0
sg39
F0.8168044548369835
sg34
g752
(S'\x07\xdf\n\x12\x0b\x08\x0f\r\xfe\x08'
tRp4817
sa(dp4818
S'trial_loop.thisTrialN'
p4819
I82
sg3632
g4332
sS'block_loop.thisIndex'
p4820
g3626
sg38
S'left'
p4821
sg58
g62
sS'trial_loop.thisN'
p4822
I82
sg33
g4336
sg63
g64
sS'trial_loop.thisIndex'
p4823
g59
(g98
S'R\x00\x00\x00'
tRp4824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4825
I0
sg3641
g4340
sS'block_loop.thisRepN'
p4826
I1
sg3644
g4336
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4827
I1
sg3646
g4343
sg55
g11
sS'block_loop.thisTrial'
p4828
Nsg69
Vn
sS'block_loop.thisTrialN'
p4829
I0
sg39
F1.2335237222018804
sg34
g752
(S'\x07\xdf\n\x12\x0b\x08\x15\x0b\xb4\x18'
tRp4830
sa(dp4831
S'trial_loop.thisTrialN'
p4832
I83
sg3632
g4209
sS'block_loop.thisIndex'
p4833
g3626
sg38
S'right'
p4834
sg58
g62
sS'trial_loop.thisN'
p4835
I83
sg33
g4179
sg63
g64
sS'trial_loop.thisIndex'
p4836
g59
(g98
S'S\x00\x00\x00'
tRp4837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4838
I0
sg3641
g4216
sS'block_loop.thisRepN'
p4839
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4840
I1
sg3646
g4186
sg55
g11
sS'block_loop.thisTrial'
p4841
Nsg69
Vn
sS'block_loop.thisTrialN'
p4842
I0
sg39
F0.73351317355263745
sg34
g752
(S'\x07\xdf\n\x12\x0b\x08\x1c\x00U\xf0'
tRp4843
sa(dp4844
S'trial_loop.thisTrialN'
p4845
I84
sg3632
g3832
sS'block_loop.thisIndex'
p4846
g3626
sg38
S'right'
p4847
sg58
g62
sS'trial_loop.thisN'
p4848
I84
sg33
g3813
sg63
g64
sS'trial_loop.thisIndex'
p4849
g59
(g98
S'T\x00\x00\x00'
tRp4850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4851
I0
sg3641
g3839
sS'block_loop.thisRepN'
p4852
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4853
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4854
Nsg69
Vn
sS'block_loop.thisTrialN'
p4855
I0
sg39
F1.2335063311852537
sg34
g752
(S'\x07\xdf\n\x12\x0b\x08!\x0c\x1d\x90'
tRp4856
sa(dp4857
S'trial_loop.thisTrialN'
p4858
I85
sg3632
S'1-treacle_cookies.png'
p4859
sS'block_loop.thisIndex'
p4860
g3626
sg38
S'right'
p4861
sg58
g62
sS'trial_loop.thisN'
p4862
I85
sg33
g4110
sg63
g64
sS'trial_loop.thisIndex'
p4863
g59
(g98
S'U\x00\x00\x00'
tRp4864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4865
I0
sg3641
S'21-nakd_banana_crunch.png'
p4866
sS'block_loop.thisRepN'
p4867
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4868
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p4869
Nsg69
Vn
sS'block_loop.thisTrialN'
p4870
I0
sg39
F0.96690689077695424
sg34
g752
(S'\x07\xdf\n\x12\x0b\x08(\x01\x01\xd0'
tRp4871
sa(dp4872
S'trial_loop.thisTrialN'
p4873
I86
sg3632
g3633
sS'block_loop.thisIndex'
p4874
g3626
sg38
S'left'
p4875
sg58
g62
sS'trial_loop.thisN'
p4876
I86
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4877
g59
(g98
S'V\x00\x00\x00'
tRp4878
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4879
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4880
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4881
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4882
Nsg69
Vn
sS'block_loop.thisTrialN'
p4883
I0
sg39
F0.76685602918041695
sg34
g752
(S'\x07\xdf\n\x12\x0b\x08.\x00\xda\xc0'
tRp4884
sa(dp4885
S'trial_loop.thisTrialN'
p4886
I87
sg3632
g3721
sS'block_loop.thisIndex'
p4887
g3626
sg38
S'left'
p4888
sg58
g62
sS'trial_loop.thisN'
p4889
I87
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4890
g59
(g98
S'W\x00\x00\x00'
tRp4891
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4892
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4893
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4894
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4895
Nsg69
Vn
sS'block_loop.thisTrialN'
p4896
I0
sg39
F0.93345113608938846
sg34
g752
(S'\x07\xdf\n\x12\x0b\x083\r\x1bx'
tRp4897
sa(dp4898
S'trial_loop.thisTrialN'
p4899
I88
sg3632
g3928
sS'block_loop.thisIndex'
p4900
g3626
sg38
S'left'
p4901
sg58
g62
sS'trial_loop.thisN'
p4902
I88
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4903
g59
(g98
S'X\x00\x00\x00'
tRp4904
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4905
I0
sg3641
g3935
sS'block_loop.thisRepN'
p4906
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4907
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4908
Nsg69
Vn
sS'block_loop.thisTrialN'
p4909
I0
sg39
F1.4334417278346336
sg34
g752
(S'\x07\xdf\n\x12\x0b\x089\x0c\xb9\xd0'
tRp4910
sa(dp4911
S'trial_loop.thisTrialN'
p4912
I89
sg3632
g4001
sS'block_loop.thisIndex'
p4913
g3626
sg38
S'left'
p4914
sg58
g62
sS'trial_loop.thisN'
p4915
I89
sg33
g3904
sg63
g64
sS'trial_loop.thisIndex'
p4916
g59
(g98
S'Y\x00\x00\x00'
tRp4917
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4918
I0
sg3641
g4008
sS'block_loop.thisRepN'
p4919
I1
sg3644
g3904
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4920
I1
sg3646
g3898
sg55
g11
sS'block_loop.thisTrial'
p4921
Nsg69
Vn
sS'block_loop.thisTrialN'
p4922
I0
sg39
F0.71685086889510785
sg34
g752
(S'\x07\xdf\n\x12\x0b\t\x04\x04t\xa0'
tRp4923
sa(dp4924
S'trial_loop.thisTrialN'
p4925
I90
sg3632
g4416
sS'block_loop.thisIndex'
p4926
g3626
sg38
S'right'
p4927
sg58
g62
sS'trial_loop.thisN'
p4928
I90
sg33
g4336
sg63
g64
sS'trial_loop.thisIndex'
p4929
g59
(g98
S'Z\x00\x00\x00'
tRp4930
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4931
I0
sg3641
g4423
sS'block_loop.thisRepN'
p4932
I1
sg3644
g4336
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4933
I1
sg3646
g4343
sg55
g11
sS'block_loop.thisTrial'
p4934
Nsg69
Vn
sS'block_loop.thisTrialN'
p4935
I0
sg39
F0.80010622775171214
sg34
g752
(S'\x07\xdf\n\x12\x0b\t\n\x00\xbfh'
tRp4936
sa(dp4937
S'trial_loop.thisTrialN'
p4938
I91
sg3632
g4375
sS'block_loop.thisIndex'
p4939
g3626
sg38
S'right'
p4940
sg58
g62
sS'trial_loop.thisN'
p4941
I91
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4942
g59
(g98
S'[\x00\x00\x00'
tRp4943
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4944
I0
sg3641
g4382
sS'block_loop.thisRepN'
p4945
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4946
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4947
Nsg69
Vn
sS'block_loop.thisTrialN'
p4948
I0
sg39
F0.76680129024271082
sg34
g752
(S'\x07\xdf\n\x12\x0b\t\x0f\ry8'
tRp4949
sa(dp4950
S'trial_loop.thisTrialN'
p4951
I92
sg3632
g4016
sS'block_loop.thisIndex'
p4952
g3626
sg38
S'right'
p4953
sg58
g62
sS'trial_loop.thisN'
p4954
I92
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4955
g59
(g98
S'\\\x00\x00\x00'
tRp4956
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4957
I0
sg3641
g4023
sS'block_loop.thisRepN'
p4958
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4959
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4960
Nsg69
Vn
sS'block_loop.thisTrialN'
p4961
I0
sg39
F0.7001503610204054
sg34
g752
(S'\x07\xdf\n\x12\x0b\t\x15\n=\x18'
tRp4962
sa(dp4963
S'trial_loop.thisTrialN'
p4964
I93
sg3632
g4537
sS'block_loop.thisIndex'
p4965
g3626
sg38
S'right'
p4966
sg58
g62
sS'trial_loop.thisN'
p4967
I93
sg33
g4035
sg63
g64
sS'trial_loop.thisIndex'
p4968
g59
(g98
S']\x00\x00\x00'
tRp4969
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4970
I0
sg3641
g4544
sS'block_loop.thisRepN'
p4971
I1
sg3644
g4035
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4972
I1
sg3646
g4042
sg55
g11
sS'block_loop.thisTrial'
p4973
Nsg69
Vn
sS'block_loop.thisTrialN'
p4974
I0
sg39
F0.63352024399910079
sg34
g752
(S'\x07\xdf\n\x12\x0b\t\x1b\x06I`'
tRp4975
sa(dp4976
S'trial_loop.thisTrialN'
p4977
I94
sg3632
g4106
sS'block_loop.thisIndex'
p4978
g3626
sg38
S'left'
p4979
sg58
g62
sS'trial_loop.thisN'
p4980
I94
sg33
g4110
sg63
g64
sS'trial_loop.thisIndex'
p4981
g59
(g98
S'^\x00\x00\x00'
tRp4982
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4983
I0
sg3641
g4114
sS'block_loop.thisRepN'
p4984
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4985
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p4986
Nsg69
Vn
sS'block_loop.thisTrialN'
p4987
I0
sg39
F0.75017633350580581
sg34
g752
(S'\x07\xdf\n\x12\x0b\t!\x01!\x10'
tRp4988
sa(dp4989
S'trial_loop.thisTrialN'
p4990
I95
sg3632
g4645
sS'block_loop.thisIndex'
p4991
g3626
sg38
S'right'
p4992
sg58
g62
sS'trial_loop.thisN'
p4993
I95
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4994
g59
(g98
S'_\x00\x00\x00'
tRp4995
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4996
I0
sg3641
g4652
sS'block_loop.thisRepN'
p4997
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4998
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4999
Nsg69
Vn
sS'block_loop.thisTrialN'
p5000
I0
sg39
F0.71687652777245603
sg34
g752
(S"\x07\xdf\n\x12\x0b\t&\r'0"
tRp5001
sa(dp5002
S'trial_loop.thisTrialN'
p5003
I96
sg3632
g3653
sS'block_loop.thisIndex'
p5004
g3626
sg38
S'left'
p5005
sg58
g62
sS'trial_loop.thisN'
p5006
I96
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5007
g59
(g98
S'`\x00\x00\x00'
tRp5008
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5009
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5010
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5011
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5012
Nsg69
Vn
sS'block_loop.thisTrialN'
p5013
I0
sg39
F0.78354028643252605
sg34
g752
(S'\x07\xdf\n\x12\x0b\t,\t3x'
tRp5014
sa(dp5015
S'trial_loop.thisTrialN'
p5016
I97
sg3632
g4416
sS'block_loop.thisIndex'
p5017
g3626
sg38
S'left'
p5018
sg58
g62
sS'trial_loop.thisN'
p5019
I97
sg33
g4336
sg63
g64
sS'trial_loop.thisIndex'
p5020
g59
(g98
S'a\x00\x00\x00'
tRp5021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5022
I0
sg3641
g4423
sS'block_loop.thisRepN'
p5023
I1
sg3644
g4336
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5024
I1
sg3646
g4343
sg55
g11
sS'block_loop.thisTrial'
p5025
Nsg69
Vn
sS'block_loop.thisTrialN'
p5026
I0
sg39
F0.9834905082111618
sg34
g752
(S'\x07\xdf\n\x12\x0b\t2\x06pp'
tRp5027
sa(dp5028
S'trial_loop.thisTrialN'
p5029
I98
sg3632
g4753
sS'block_loop.thisIndex'
p5030
g3626
sg38
S'left'
p5031
sg58
g62
sS'trial_loop.thisN'
p5032
I98
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5033
g59
(g98
S'b\x00\x00\x00'
tRp5034
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5035
I0
sg3641
g4760
sS'block_loop.thisRepN'
p5036
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5037
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5038
Nsg69
Vn
sS'block_loop.thisTrialN'
p5039
I0
sg39
F0.91685525941420565
sg34
g752
(S'\x07\xdf\n\x12\x0b\t8\x06\xc2x'
tRp5040
sa(dp5041
S'trial_loop.thisTrialN'
p5042
I99
sg3632
g3986
sS'block_loop.thisIndex'
p5043
g3626
sg38
S'right'
p5044
sg58
g62
sS'trial_loop.thisN'
p5045
I99
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5046
g59
(g98
S'c\x00\x00\x00'
tRp5047
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5048
I0
sg3641
g3993
sS'block_loop.thisRepN'
p5049
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5050
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5051
Nsg69
Vn
sS'block_loop.thisTrialN'
p5052
I0
sg39
F0.64994791247909234
sg34
g752
(S'\x07\xdf\n\x12\x0b\n\x02\x05\xe7\xb8'
tRp5053
sa(dp5054
S'trial_loop.thisTrialN'
p5055
I100
sg3632
g3653
sS'block_loop.thisIndex'
p5056
g3626
sg38
S'left'
p5057
sg58
g62
sS'trial_loop.thisN'
p5058
I100
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5059
g59
(g98
S'd\x00\x00\x00'
tRp5060
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5061
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5062
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5063
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5064
Nsg69
Vn
sS'block_loop.thisTrialN'
p5065
I0
sg39
F0.91684556606060141
sg34
g752
(S'\x07\xdf\n\x12\x0b\n\x08\x01<h'
tRp5066
sa(dp5067
S'trial_loop.thisTrialN'
p5068
I101
sg3632
g4630
sS'block_loop.thisIndex'
p5069
g3626
sg38
S'right'
p5070
sg58
g62
sS'trial_loop.thisN'
p5071
I101
sg33
g4202
sg63
g64
sS'trial_loop.thisIndex'
p5072
g59
(g98
S'e\x00\x00\x00'
tRp5073
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5074
I0
sg3641
g4637
sS'block_loop.thisRepN'
p5075
I1
sg3644
g4202
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5076
I1
sg3646
g4196
sg55
g11
sS'block_loop.thisTrial'
p5077
Nsg69
Vn
sS'block_loop.thisTrialN'
p5078
I0
sg39
F0.88352751401407659
sg34
g752
(S'\x07\xdf\n\x12\x0b\n\x0e\x00a\xa8'
tRp5079
sa(dp5080
S'trial_loop.thisTrialN'
p5081
I102
sg3632
g4250
sS'block_loop.thisIndex'
p5082
g3626
sg38
S'left'
p5083
sg58
g62
sS'trial_loop.thisN'
p5084
I102
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p5085
g59
(g98
S'f\x00\x00\x00'
tRp5086
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5087
I0
sg3641
g4257
sS'block_loop.thisRepN'
p5088
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5089
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5090
Nsg69
Vn
sS'block_loop.thisTrialN'
p5091
I0
sg39
F1.2172029657099301
sg34
g752
(S'\x07\xdf\n\x12\x0b\n\x13\x0eL('
tRp5092
sa(dp5093
S'trial_loop.thisTrialN'
p5094
I103
sg3632
g4738
sS'block_loop.thisIndex'
p5095
g3626
sg38
S'left'
p5096
sg58
g62
sS'trial_loop.thisN'
p5097
I103
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p5098
g59
(g98
S'g\x00\x00\x00'
tRp5099
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5100
I0
sg3641
g4745
sS'block_loop.thisRepN'
p5101
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5102
I1
sg3646
g3980
sg55
g11
sS'block_loop.thisTrial'
p5103
Nsg69
Vn
sS'block_loop.thisTrialN'
p5104
I0
sg39
F0.8335562804663823
sg34
g752
(S'\x07\xdf\n\x12\x0b\n\x1a\x02\xf1\xe8'
tRp5105
sa(dp5106
S'trial_loop.thisTrialN'
p5107
I104
sg3632
g3802
sS'block_loop.thisIndex'
p5108
g3626
sg38
S'right'
p5109
sg58
g62
sS'trial_loop.thisN'
p5110
I104
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p5111
g59
(g98
S'h\x00\x00\x00'
tRp5112
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5113
I0
sg3641
g3810
sS'block_loop.thisRepN'
p5114
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5115
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p5116
Nsg69
Vn
sS'block_loop.thisTrialN'
p5117
I0
sg39
F0.75018631195825947
sg34
g752
(S'\x07\xdf\n\x12\x0b\n \x00\xe2\x90'
tRp5118
sa(dp5119
S'trial_loop.thisTrialN'
p5120
I105
sg3632
g4001
sS'block_loop.thisIndex'
p5121
g3626
sg38
S'left'
p5122
sg58
g62
sS'trial_loop.thisN'
p5123
I105
sg33
g3904
sg63
g64
sS'trial_loop.thisIndex'
p5124
g59
(g98
S'i\x00\x00\x00'
tRp5125
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5126
I0
sg3641
g4008
sS'block_loop.thisRepN'
p5127
I1
sg3644
g3904
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5128
I1
sg3646
g3898
sg55
g11
sS'block_loop.thisTrial'
p5129
Nsg69
Vn
sS'block_loop.thisTrialN'
p5130
I0
sg39
F0.83357310128576501
sg34
g752
(S'\x07\xdf\n\x12\x0b\n%\x0c\xe8\xb0'
tRp5131
sa(dp5132
S'trial_loop.thisTrialN'
p5133
I106
sg3632
g4859
sS'block_loop.thisIndex'
p5134
g3626
sg38
S'right'
p5135
sg58
g62
sS'trial_loop.thisN'
p5136
I106
sg33
g4117
sg63
g64
sS'trial_loop.thisIndex'
p5137
g59
(g98
S'j\x00\x00\x00'
tRp5138
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5139
I0
sg3641
g4866
sS'block_loop.thisRepN'
p5140
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5141
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p5142
Nsg69
Vn
sS'block_loop.thisTrialN'
p5143
I0
sg39
F0.71686284303768844
sg34
g752
(S'\x07\xdf\n\x12\x0b\n+\n\xd9X'
tRp5144
sa(dp5145
S'trial_loop.thisTrialN'
p5146
I107
sg3632
g3738
sS'block_loop.thisIndex'
p5147
g3626
sg38
S'right'
p5148
sg58
g62
sS'trial_loop.thisN'
p5149
I107
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5150
g59
(g98
S'k\x00\x00\x00'
tRp5151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5152
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5153
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5154
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5155
Nsg69
Vn
sS'block_loop.thisTrialN'
p5156
I0
sg39
F0.76675681485494351
sg34
g752
(S'\x07\xdf\n\x12\x0b\n1\x06\xe5\xa0'
tRp5157
sa(dp5158
S'trial_loop.thisTrialN'
p5159
I108
sg3632
g4265
sS'block_loop.thisIndex'
p5160
g3626
sg38
S'left'
p5161
sg58
g62
sS'trial_loop.thisN'
p5162
I108
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5163
g59
(g98
S'l\x00\x00\x00'
tRp5164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5165
I0
sg3641
g4272
sS'block_loop.thisRepN'
p5166
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5167
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p5168
Nsg69
Vn
sS'block_loop.thisTrialN'
p5169
I0
sg39
F1.3172269710153159
sg34
g752
(S'\x07\xdf\n\x12\x0b\n7\x03\xe4\x18'
tRp5170
sa(dp5171
S'trial_loop.thisTrialN'
p5172
I109
sg3632
g4375
sS'block_loop.thisIndex'
p5173
g3626
sg38
S'right'
p5174
sg58
g62
sS'trial_loop.thisN'
p5175
I109
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5176
g59
(g98
S'm\x00\x00\x00'
tRp5177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5178
I0
sg3641
g4382
sS'block_loop.thisRepN'
p5179
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5180
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5181
Nsg69
Vn
sS'block_loop.thisTrialN'
p5182
I0
sg39
F0.68352169800209595
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0b\x01\t;H'
tRp5183
sa(dp5184
S'trial_loop.thisTrialN'
p5185
I110
sg3632
g4209
sS'block_loop.thisIndex'
p5186
g3626
sg38
S'right'
p5187
sg58
g62
sS'trial_loop.thisN'
p5188
I110
sg33
g4179
sg63
g64
sS'trial_loop.thisIndex'
p5189
g59
(g98
S'n\x00\x00\x00'
tRp5190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5191
I0
sg3641
g4216
sS'block_loop.thisRepN'
p5192
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5193
I1
sg3646
g4186
sg55
g11
sS'block_loop.thisTrial'
p5194
Nsg69
Vn
sS'block_loop.thisTrialN'
p5195
I0
sg39
F0.71678729189943624
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0b\x07\x05\t\x10'
tRp5196
sa(dp5197
S'trial_loop.thisTrialN'
p5198
I111
sg3632
g4001
sS'block_loop.thisIndex'
p5199
g3626
sg38
S'left'
p5200
sg58
g62
sS'trial_loop.thisN'
p5201
I111
sg33
g3904
sg63
g64
sS'trial_loop.thisIndex'
p5202
g59
(g98
S'o\x00\x00\x00'
tRp5203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5204
I0
sg3641
g4008
sS'block_loop.thisRepN'
p5205
I1
sg3644
g3904
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5206
I1
sg3646
g3898
sg55
g11
sS'block_loop.thisTrial'
p5207
Nsg69
Vn
sS'block_loop.thisTrialN'
p5208
I0
sg39
F0.75024304658700203
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0b\r\x01\x15X'
tRp5209
sa(dp5210
S'trial_loop.thisTrialN'
p5211
I112
sg3632
g4537
sS'block_loop.thisIndex'
p5212
g3626
sg38
S'right'
p5213
sg58
g62
sS'trial_loop.thisN'
p5214
I112
sg33
g4035
sg63
g64
sS'trial_loop.thisIndex'
p5215
g59
(g98
S'p\x00\x00\x00'
tRp5216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5217
I0
sg3641
g4544
sS'block_loop.thisRepN'
p5218
I1
sg3644
g4035
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5219
I1
sg3646
g4042
sg55
g11
sS'block_loop.thisTrial'
p5220
Nsg69
Vn
sS'block_loop.thisTrialN'
p5221
I0
sg39
F0.70025641771280789
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0b\x12\r\x17\x90'
tRp5222
sa(dp5223
S'trial_loop.thisTrialN'
p5224
I113
sg3632
g3704
sS'block_loop.thisIndex'
p5225
g3626
sg38
S'right'
p5226
sg58
g62
sS'trial_loop.thisN'
p5227
I113
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p5228
g59
(g98
S'q\x00\x00\x00'
tRp5229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5230
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5231
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5232
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5233
Nsg69
Vn
sS'block_loop.thisTrialN'
p5234
I0
sg39
F0.58354986574704526
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0b\x18\t#\xd8'
tRp5235
sa(dp5236
S'trial_loop.thisTrialN'
p5237
I114
sg3632
g4209
sS'block_loop.thisIndex'
p5238
g3626
sg38
S'right'
p5239
sg58
g62
sS'trial_loop.thisN'
p5240
I114
sg33
g4179
sg63
g64
sS'trial_loop.thisIndex'
p5241
g59
(g98
S'r\x00\x00\x00'
tRp5242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5243
I0
sg3641
g4216
sS'block_loop.thisRepN'
p5244
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5245
I1
sg3646
g4186
sg55
g11
sS'block_loop.thisTrial'
p5246
Nsg69
Vn
sS'block_loop.thisTrialN'
p5247
I0
sg39
F0.6005765264612819
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0b\x1e\x03G\xd8'
tRp5248
sa(dp5249
S'trial_loop.thisTrialN'
p5250
I115
sg3632
g4031
sS'block_loop.thisIndex'
p5251
g3626
sg38
S'left'
p5252
sg58
g62
sS'trial_loop.thisN'
p5253
I115
sg33
g4042
sg63
g64
sS'trial_loop.thisIndex'
p5254
g59
(g98
S's\x00\x00\x00'
tRp5255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5256
I0
sg3641
g4039
sS'block_loop.thisRepN'
p5257
I1
sg3644
g4035
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5258
I1
sg3646
g4042
sg55
g11
sS'block_loop.thisTrial'
p5259
Nsg69
Vn
sS'block_loop.thisTrialN'
p5260
I0
sg39
F0.70019398111162445
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0b#\x0c\xec\x98'
tRp5261
sa(dp5262
S'trial_loop.thisTrialN'
p5263
I116
sg3632
g3864
sS'block_loop.thisIndex'
p5264
g3626
sg38
S'right'
p5265
sg58
g62
sS'trial_loop.thisN'
p5266
I116
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p5267
g59
(g98
S't\x00\x00\x00'
tRp5268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5269
I0
sg3641
g3872
sS'block_loop.thisRepN'
p5270
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5271
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p5272
Nsg69
Vn
sS'block_loop.thisTrialN'
p5273
I0
sg39
F1.7167750326580062
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0b)\x08\xba`'
tRp5274
sa(dp5275
S'trial_loop.thisTrialN'
p5276
I117
sg3632
g3928
sS'block_loop.thisIndex'
p5277
g3626
sg38
S'left'
p5278
sg58
g62
sS'trial_loop.thisN'
p5279
I117
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5280
g59
(g98
S'u\x00\x00\x00'
tRp5281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5282
I0
sg3641
g3935
sS'block_loop.thisRepN'
p5283
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5284
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5285
Nsg69
Vn
sS'block_loop.thisTrialN'
p5286
I0
sg39
F1.0501189146407341
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0b0\x04\xfdX'
tRp5287
sa(dp5288
S'trial_loop.thisTrialN'
p5289
I118
sg3632
g4444
sS'block_loop.thisIndex'
p5290
g3626
sg38
S'right'
p5291
sg58
g62
sS'trial_loop.thisN'
p5292
I118
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p5293
g59
(g98
S'v\x00\x00\x00'
tRp5294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5295
I0
sg3641
g4451
sS'block_loop.thisRepN'
p5296
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5297
I1
sg3646
g3922
sg55
g11
sS'block_loop.thisTrial'
p5298
Nsg69
Vn
sS'block_loop.thisTrialN'
p5299
I0
sg39
F0.88341832123660424
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0b6\x06Ex'
tRp5300
sa(dp5301
S'trial_loop.thisTrialN'
p5302
I119
sg3632
g3755
sS'block_loop.thisIndex'
p5303
g3626
sg38
S'left'
p5304
sg58
g62
sS'trial_loop.thisN'
p5305
I119
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5306
g59
(g98
S'w\x00\x00\x00'
tRp5307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5308
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5309
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5310
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5311
Nsg69
Vn
sS'block_loop.thisTrialN'
p5312
I0
sg39
F0.66697058181216562
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0c\x00\x04\xed\xb8'
tRp5313
sa(dp5314
S'trial_loop.thisTrialN'
p5315
I120
sg3632
g4265
sS'block_loop.thisIndex'
p5316
g3626
sg38
S'right'
p5317
sg58
g62
sS'trial_loop.thisN'
p5318
I120
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5319
g59
(g98
S'x\x00\x00\x00'
tRp5320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5321
I0
sg3641
g4272
sS'block_loop.thisRepN'
p5322
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5323
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p5324
Nsg69
Vn
sS'block_loop.thisTrialN'
p5325
I0
sg39
F0.81678335753804276
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0c\x06\x00\x80\xe8'
tRp5326
sa(dp5327
S'trial_loop.thisTrialN'
p5328
I121
sg3632
g4250
sS'block_loop.thisIndex'
p5329
g3626
sg38
S'left'
p5330
sg58
g62
sS'trial_loop.thisN'
p5331
I121
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p5332
g59
(g98
S'y\x00\x00\x00'
tRp5333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5334
I0
sg3641
g4257
sS'block_loop.thisRepN'
p5335
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5336
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vn
sS'block_loop.thisTrialN'
p5338
I0
sg39
F0.73345016675420993
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0c\x0b\ry8'
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g4192
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'left'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g4202
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g4200
sS'block_loop.thisRepN'
p5348
I1
sg3644
g4202
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g4196
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vn
sS'block_loop.thisTrialN'
p5351
I0
sg39
F1.0835239217713024
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0c\x11\t\xc0\x18'
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g4048
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'right'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g4055
sS'block_loop.thisRepN'
p5361
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vn
sS'block_loop.thisTrialN'
p5364
I0
sg39
F0.91674635173512797
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0c\x17\x0b\x81P'
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g4444
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'right'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g4451
sS'block_loop.thisRepN'
p5374
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g3922
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vn
sS'block_loop.thisTrialN'
p5377
I0
sg39
F0.86674860401444676
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0c\x1d\n\xe5\x10'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g3864
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'right'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g3875
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g3872
sS'block_loop.thisRepN'
p5387
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vn
sS'block_loop.thisTrialN'
p5390
I0
sg39
F0.866986946473844
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0c#\tN\xd0'
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g4192
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'left'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g4202
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g4200
sS'block_loop.thisRepN'
p5400
I1
sg3644
g4202
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g4196
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vn
sS'block_loop.thisTrialN'
p5403
I0
sg39
F1.7000890648137101
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0c)\x07\xbcx'
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g3670
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'left'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5413
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vn
sS'block_loop.thisTrialN'
p5416
I0
sg39
F0.68354022941321091
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0c0\x03\xc0\xf0'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g4175
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'left'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g4179
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g4183
sS'block_loop.thisRepN'
p5426
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g4186
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vn
sS'block_loop.thisTrialN'
p5429
I0
sg39
F0.75021795790689794
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0c5\x0e\x96`'
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g3687
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'left'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5439
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vn
sS'block_loop.thisTrialN'
p5442
I0
sg39
F0.75017633350626056
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0c;\x0bZ@'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g3986
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'right'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g3993
sS'block_loop.thisRepN'
p5452
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vn
sS'block_loop.thisTrialN'
p5455
I0
sg39
F1.1501380732693178
sg34
g752
(S'\x07\xdf\n\x12\x0b\r\x05\x08\x1a8'
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g3670
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'left'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5465
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vn
sS'block_loop.thisTrialN'
p5468
I0
sg39
F0.7334495965565111
sg34
g752
(S'\x07\xdf\n\x12\x0b\r\x0b\n\xd1\x88'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g3847
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'left'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g3855
sS'block_loop.thisRepN'
p5478
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g3851
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vn
sS'block_loop.thisTrialN'
p5481
I0
sg39
F0.71689391878908282
sg34
g752
(S'\x07\xdf\n\x12\x0b\r\x11\x07V\xe8'
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g4444
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'right'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g4451
sS'block_loop.thisRepN'
p5491
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g3922
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vn
sS'block_loop.thisTrialN'
p5494
I0
sg39
F0.85009741820385898
sg34
g752
(S'\x07\xdf\n\x12\x0b\r\x17\x03c0'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g4859
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'right'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g4110
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g4866
sS'block_loop.thisRepN'
p5504
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vn
sS'block_loop.thisTrialN'
p5507
I0
sg39
F0.80019375303299967
sg34
g752
(S'\x07\xdf\n\x12\x0b\r\x1d\x01\x92X'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g4016
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'right'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g4023
sS'block_loop.thisRepN'
p5517
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vn
sS'block_loop.thisTrialN'
p5520
I0
sg39
F0.63348859805000757
sg34
g752
(S'\x07\xdf\n\x12\x0b\r"\x0eL('
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g4753
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'right'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g3749
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g4760
sS'block_loop.thisRepN'
p5530
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vn
sS'block_loop.thisTrialN'
p5533
I0
sg39
F1.5338948065859768
sg34
g752
(S'\x07\xdf\n\x12\x0b\r(\tf@'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g4091
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'left'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g4098
sS'block_loop.thisRepN'
p5543
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F0.90015532173674728
sg34
g752
(S'\x07\xdf\n\x12\x0b\r/\x02\x90@'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g3653
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'right'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5556
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F0.81686232986021423
sg34
g752
(S'\x07\xdf\n\x12\x0b\r5\x01\xb1\x98'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g4031
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'left'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g4035
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g4039
sS'block_loop.thisRepN'
p5569
I1
sg3644
g4035
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g4042
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F0.76678304392953578
sg34
g752
(S'\x07\xdf\n\x12\x0b\r:\x0e\xa9\xe8'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g4332
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'right'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g4336
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g4340
sS'block_loop.thisRepN'
p5582
I1
sg3644
g4336
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g4343
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F0.8835551685815517
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0e\x04\x0b\xacH'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g4091
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'left'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3875
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g4098
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F0.8668463928465826
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0e\n\nT\x88'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g3911
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'right'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g3919
sS'block_loop.thisRepN'
p5608
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g3922
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F1.317105804095263
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0e\x10\x08\xc20'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4753
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'right'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g4760
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F1.0502027336397077
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0e\x16\x0e\x15x'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g4192
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'left'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g4202
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g4200
sS'block_loop.thisRepN'
p5634
I1
sg3644
g4202
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g4196
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F0.66677414885225517
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0e\x1d\x00\x1bX'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g3832
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'right'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g3839
sS'block_loop.thisRepN'
p5647
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F1.9501644734032197
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0e"\n\xb2H'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g3864
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'right'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g3872
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F0.71681637196024894
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0e)\n\x87P'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g4537
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'right'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g4035
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g4544
sS'block_loop.thisRepN'
p5673
I1
sg3644
g4035
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g4042
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.66723828943077024
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0e/\x06\xce0'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g3755
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'left'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F0.73321752626725356
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0e5\x02"\xe0'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g3802
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g3810
sS'block_loop.thisRepN'
p5699
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.93349589657509568
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0e:\r\xea\x80'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g4375
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'right'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g4382
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F0.70023703100559942
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0f\x04\rJX'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g4076
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'right'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g4083
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g3851
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.63341504260233705
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0f\n\tV\xa0'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g4859
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'right'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g4117
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g4866
sS'block_loop.thisRepN'
p5738
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F0.71686255793929377
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0f\x10\x0428'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g3704
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'right'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5751
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F0.6169200908439052
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0f\x16\x00y\x18'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g4444
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'right'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g4451
sS'block_loop.thisRepN'
p5764
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g3922
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F1.5666486484328743
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0f\x1b\n\\X'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g4265
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'left'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g4272
sS'block_loop.thisRepN'
p5777
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F0.81672861860033663
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0f"\x04=\xf0'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g3986
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'right'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g3993
sS'block_loop.thisRepN'
p5790
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F0.71648594264161147
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0f(\x01\xf4\x00'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g4416
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'left'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g4336
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g4423
sS'block_loop.thisRepN'
p5803
I1
sg3644
g4336
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g4343
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F1.0169000769196828
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0f-\r>\xa0'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g3847
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'left'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g3855
sS'block_loop.thisRepN'
p5816
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g3851
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.8505715372348277
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0f3\x0e\r\xa8'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g3687
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'right'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F1.1168111831648275
sg34
g752
(S'\x07\xdf\n\x12\x0b\x0f9\x0c<\xd0'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g4645
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'right'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g4652
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F0.95010545798504609
sg34
g752
(S'\x07\xdf\n\x12\x0b\x10\x03\x0e\xb5\xa0'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g3969
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'right'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3980
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g3977
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g3980
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F0.7334450349785584
sg34
g752
(S'\x07\xdf\n\x12\x0b\x10\t\x0eS\xf8'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g3653
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'right'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F1.3001090787379326
sg34
g752
(S'\x07\xdf\n\x12\x0b\x10\x0f\n\xd9X'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g3969
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'right'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g3977
sS'block_loop.thisRepN'
p5881
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g3980
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F0.86695644092014845
sg34
g752
(S'\x07\xdf\n\x12\x0b\x10\x16\x00\xaf\xc8'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g4091
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'left'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g4098
sS'block_loop.thisRepN'
p5894
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F1.1002056131360405
sg34
g752
(S'\x07\xdf\n\x12\x0b\x10\x1b\x0e_\xb0'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g4738
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'left'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g4745
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g3980
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F0.83342427979823697
sg34
g752
(S'\x07\xdf\n\x12\x0b\x10"\x01\x19@'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g4630
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'right'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g4202
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g4637
sS'block_loop.thisRepN'
p5920
I1
sg3644
g4202
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g4196
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F0.73351288845378804
sg34
g752
(S"\x07\xdf\n\x12\x0b\x10'\x0eP\x10"
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g4175
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'left'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g4179
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g4183
sS'block_loop.thisRepN'
p5933
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g4186
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F0.66684513841255466
sg34
g752
(S'\x07\xdf\n\x12\x0b\x10-\n\xd5p'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g4753
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3749
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g4760
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F0.96685785381168898
sg34
g752
(S'\x07\xdf\n\x12\x0b\x103\x06* '
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g4537
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'right'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g4035
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g4544
sS'block_loop.thisRepN'
p5959
I1
sg3644
g4035
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g4042
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F1.049957263714532
sg34
g752
(S'\x07\xdf\n\x12\x0b\x109\x06A\x90'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g4645
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'right'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g4652
sS'block_loop.thisRepN'
p5972
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F0.71686911520782814
sg34
g752
(S'\x07\xdf\n\x12\x0b\x11\x03\x07\x89\xb0'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g4859
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'right'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g4110
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g4866
sS'block_loop.thisRepN'
p5985
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F0.86684610774773319
sg34
g752
(S'\x07\xdf\n\x12\x0b\x11\t\x03\x95\xf8'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g4250
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'left'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g4257
sS'block_loop.thisRepN'
p5998
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F0.66680436930755604
sg34
g752
(S'\x07\xdf\n\x12\x0b\x11\x0f\x02>8'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g4175
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'left'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g4179
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g4183
sS'block_loop.thisRepN'
p6011
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g4186
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F0.68351571093035091
sg34
g752
(S'\x07\xdf\n\x12\x0b\x11\x14\x0c\xd5('
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g3894
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'right'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g3904
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g3902
sS'block_loop.thisRepN'
p6024
I1
sg3644
g3904
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g3898
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F0.91685126803304229
sg34
g752
(S'\x07\xdf\n\x12\x0b\x11\x1a\x08hX'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g3755
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'left'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g3763
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F1.0002332106842005
sg34
g752
(S'\x07\xdf\n\x12\x0b\x11 \x07\xc80'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g4091
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'left'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g4098
sS'block_loop.thisRepN'
p6050
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g3875
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F0.93355633748615219
sg34
g752
(S'\x07\xdf\n\x12\x0b\x11&\x08\x1e '
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g4209
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'right'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g4186
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g4216
sS'block_loop.thisRepN'
p6063
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g4186
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F0.916857540203182
sg34
g752
(S'\x07\xdf\n\x12\x0b\x11,\x07\xbcx'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g4738
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'left'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g4745
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g3980
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F0.66693808056788839
sg34
g752
(S'\x07\xdf\n\x12\x0b\x112\x06\xdd\xd0'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g3670
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'left'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g3678
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F0.80020943345789419
sg34
g752
(S'\x07\xdf\n\x12\x0b\x118\x02q\x00'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g4076
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'right'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g4083
sS'block_loop.thisRepN'
p6102
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g3851
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.60013348318079807
sg34
g752
(S'\x07\xdf\n\x12\x0b\x12\x01\x0f*\xd0'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g4645
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'right'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g4652
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F1.0001556638553666
sg34
g752
(S'\x07\xdf\n\x12\x0b\x12\x07\t\x8dP'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g4016
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'right'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g4023
sS'block_loop.thisRepN'
p6128
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F0.80011734659819922
sg34
g752
(S'\x07\xdf\n\x12\x0b\x12\r\n\x1d\xd8'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g3704
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'right'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g3712
sS'block_loop.thisRepN'
p6141
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.61689357667046352
sg34
g752
(S'\x07\xdf\n\x12\x0b\x12\x13\x07Z\xd0'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g3986
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'right'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g3993
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F0.93346510592255072
sg34
g752
(S'\x07\xdf\n\x12\x0b\x12\x19\x026h'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g4630
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'right'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g4196
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g4637
sS'block_loop.thisRepN'
p6167
I1
sg3644
g4202
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g4196
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F0.73353341555593943
sg34
g752
(S'\x07\xdf\n\x12\x0b\x12\x1f\x01\x96@'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g4738
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'left'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g4745
sS'block_loop.thisRepN'
p6180
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g3980
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F0.7335513767698103
sg34
g752
(S'\x07\xdf\n\x12\x0b\x12$\r]\xe0'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g4416
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'right'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g4336
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g4423
sS'block_loop.thisRepN'
p6193
I1
sg3644
g4336
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g4343
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F1.1839245423739158
sg34
g752
(S'\x07\xdf\n\x12\x0b\x12*\t\xa4\xc0'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g3772
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'right'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g3780
sS'block_loop.thisRepN'
p6206
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F1.6835034516893757
sg34
g752
(S'\x07\xdf\n\x12\x0b\x120\r\x13\xa8'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g4048
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'right'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g4055
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F0.86674033615418011
sg34
g752
(S'\x07\xdf\n\x12\x0b\x127\x08\x9f\x08'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g4031
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'left'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g4035
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g4039
sS'block_loop.thisRepN'
p6232
I1
sg3644
g4035
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g4042
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F0.73354653009300819
sg34
g752
(S'\x07\xdf\n\x12\x0b\x13\x01\x07GH'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g3911
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'left'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g3922
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g3919
sS'block_loop.thisRepN'
p6245
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g3922
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F0.85010711155700847
sg34
g752
(S'\x07\xdf\n\x12\x0b\x13\x07\x03\x8e('
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g3738
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'left'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g3746
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F1.3339311851723323
sg34
g752
(S'\x07\xdf\n\x12\x0b\x13\r\x01\xc18'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g4048
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'right'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g4055
sS'block_loop.thisRepN'
p6271
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F1.0501767896639649
sg34
g752
(S'\x07\xdf\n\x12\x0b\x13\x13\x07\x8d\x98'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g3832
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'left'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g3839
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F0.86680419824915589
sg34
g752
(S'\x07\xdf\n\x12\x0b\x13\x19\x08\xd5\xb8'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g4332
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'right'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g4343
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g4340
sS'block_loop.thisRepN'
p6297
I1
sg3644
g4336
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g4343
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F0.85018294779456483
sg34
g752
(S'\x07\xdf\n\x12\x0b\x13\x1f\x07C`'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g4106
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'left'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g4110
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g4114
sS'block_loop.thisRepN'
p6310
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F0.80019175734196324
sg34
g752
(S'\x07\xdf\n\x12\x0b\x13%\x05r\x88'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g3755
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'left'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g3763
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F0.66658826454204245
sg34
g752
(S'\x07\xdf\n\x12\x0b\x13+\x02\xee\x00'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g3832
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'left'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g3813
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g3839
sS'block_loop.thisRepN'
p6336
I1
sg3644
g3806
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F0.71693668358420837
sg34
g752
(S'\x07\xdf\n\x12\x0b\x130\r\x84\xf0'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g4630
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'right'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g4202
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g4637
sS'block_loop.thisRepN'
p6349
I1
sg3644
g4202
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g4196
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F0.73353598144331045
sg34
g752
(S'\x07\xdf\n\x12\x0b\x136\t\xcb\xd0'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F5.6501146951814007
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'19-caramello_redo.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'right'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'19-caramello_redo.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'30-spaghetti_hoops.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'30-spaghetti_hoops.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F1.4501419506104867
sg34
g752
(S'\x07\xdf\n\x12\x0b\x14\x0b\x01\x86\xa0'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'3-ellas_strawberries_apples.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'left'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'3-ellas_strawberries_apples.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'13-mccoys_steak_crisps.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6401
I2
sg6384
S'13-mccoys_steak_crisps.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F1.1001953495842827
sg34
g752
(S'\x07\xdf\n\x12\x0b\x14\x11\x08\xc20'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'6-sour_patch_kids.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'right'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'38-maltesers.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'38-maltesers.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6418
I2
sg6384
S'6-sour_patch_kids.png'
p6419
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.80029239716077427
sg34
g752
(S'\x07\xdf\n\x12\x0b\x14\x17\n\xc1\xe8'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'41-peanuts_redo.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'right'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'41-peanuts_redo.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'45-chewy_nougat_redo.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6435
I2
sg6384
S'45-chewy_nougat_redo.png'
p6436
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vn
sS'block_loop.thisTrialN'
p6438
I0
sg39
F1.0001944372697835
sg34
g752
(S'\x07\xdf\n\x12\x0b\x14\x1d\x089x'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'7-olives.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'right'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'22-daim.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'22-daim.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6452
I2
sg6384
S'7-olives.png'
p6453
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vn
sS'block_loop.thisTrialN'
p6455
I0
sg39
F0.70011614918439591
sg34
g752
(S'\x07\xdf\n\x12\x0b\x14#\x08\xca\x00'
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
g6391
sS'block_loop.thisIndex'
p6459
g6364
sg38
S'right'
p6460
sg58
g62
sS'trial_loop.thisN'
p6461
I5
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6462
g59
(g98
S'\x05\x00\x00\x00'
tRp6463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6464
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6465
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6466
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6467
Nsg69
Vn
sS'block_loop.thisTrialN'
p6468
I0
sg39
F1.066908088191667
sg34
g752
(S'\x07\xdf\n\x12\x0b\x14)\x04\x9b\xb0'
tRp6469
sa(dp6470
S'trial_loop.thisTrialN'
p6471
I6
sg6370
S'48-twix.png'
p6472
sS'block_loop.thisIndex'
p6473
g6364
sg38
S'left'
p6474
sg58
g62
sS'trial_loop.thisN'
p6475
I6
sg33
S'48-twix.png'
p6476
sg63
g64
sS'trial_loop.thisIndex'
p6477
g59
(g98
S'\x06\x00\x00\x00'
tRp6478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6479
I0
sg6379
S'50-polo.png'
p6480
sS'block_loop.thisRepN'
p6481
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6482
I2
sg6384
S'50-polo.png'
p6483
sg55
g11
sS'block_loop.thisTrial'
p6484
Nsg69
Vn
sS'block_loop.thisTrialN'
p6485
I0
sg39
F0.95017188596739288
sg34
g752
(S'\x07\xdf\n\x12\x0b\x14/\x06\x1eh'
tRp6486
sa(dp6487
S'trial_loop.thisTrialN'
p6488
I7
sg6370
S'4-corn.png'
p6489
sS'block_loop.thisIndex'
p6490
g6364
sg38
S'right'
p6491
sg58
g62
sS'trial_loop.thisN'
p6492
I7
sg33
S'4-corn.png'
p6493
sg63
g64
sS'trial_loop.thisIndex'
p6494
g59
(g98
S'\x07\x00\x00\x00'
tRp6495
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6496
I0
sg6379
S'10-bounty_redo.png'
p6497
sS'block_loop.thisRepN'
p6498
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6499
I2
sg6384
S'10-bounty_redo.png'
p6500
sg55
g11
sS'block_loop.thisTrial'
p6501
Nsg69
Vn
sS'block_loop.thisTrialN'
p6502
I0
sg39
F0.80011848699268739
sg34
g752
(S'\x07\xdf\n\x12\x0b\x145\x05\xfb@'
tRp6503
sa(dp6504
S'trial_loop.thisTrialN'
p6505
I8
sg6370
S'51-mars.png'
p6506
sS'block_loop.thisIndex'
p6507
g6364
sg38
S'right'
p6508
sg58
g62
sS'trial_loop.thisN'
p6509
I8
sg33
S'51-mars.png'
p6510
sg63
g64
sS'trial_loop.thisIndex'
p6511
g59
(g98
S'\x08\x00\x00\x00'
tRp6512
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6513
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6514
sS'block_loop.thisRepN'
p6515
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6516
I2
sg6384
S'27-hartleys_raspberries_jelly.png'
p6517
sg55
g11
sS'block_loop.thisTrial'
p6518
Nsg69
Vn
sS'block_loop.thisTrialN'
p6519
I0
sg39
F0.75022337478094414
sg34
g752
(S'\x07\xdf\n\x12\x0b\x14;\x03r\xd0'
tRp6520
sa(dp6521
S'trial_loop.thisTrialN'
p6522
I9
sg6370
S'50-polo.png'
p6523
sS'block_loop.thisIndex'
p6524
g6364
sg38
S'right'
p6525
sg58
g62
sS'trial_loop.thisN'
p6526
I9
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p6527
g59
(g98
S'\t\x00\x00\x00'
tRp6528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6529
I0
sg6379
S'48-twix.png'
p6530
sS'block_loop.thisRepN'
p6531
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6532
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p6533
Nsg69
Vn
sS'block_loop.thisTrialN'
p6534
I0
sg39
F0.68350259639373689
sg34
g752
(S'\x07\xdf\n\x12\x0b\x15\x04\x0f:p'
tRp6535
sa(dp6536
S'trial_loop.thisTrialN'
p6537
I10
sg6370
S'10-bounty_redo.png'
p6538
sS'block_loop.thisIndex'
p6539
g6364
sg38
S'left'
p6540
sg58
g62
sS'trial_loop.thisN'
p6541
I10
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p6542
g59
(g98
S'\n\x00\x00\x00'
tRp6543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6544
I0
sg6379
S'4-corn.png'
p6545
sS'block_loop.thisRepN'
p6546
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6547
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p6548
Nsg69
Vn
sS'block_loop.thisTrialN'
p6549
I0
sg39
F1.1834347429185073
sg34
g752
(S'\x07\xdf\n\x12\x0b\x15\n\x0b\x088'
tRp6550
sa(dp6551
S'trial_loop.thisTrialN'
p6552
I11
sg6370
S'45-chewy_nougat_redo.png'
p6553
sS'block_loop.thisIndex'
p6554
g6364
sg38
S'right'
p6555
sg58
g62
sS'trial_loop.thisN'
p6556
I11
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p6557
g59
(g98
S'\x0b\x00\x00\x00'
tRp6558
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6559
I0
sg6379
S'41-peanuts_redo.png'
p6560
sS'block_loop.thisRepN'
p6561
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6562
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p6563
Nsg69
Vn
sS'block_loop.thisTrialN'
p6564
I0
sg39
F0.65009359788200527
sg34
g752
(S'\x07\xdf\n\x12\x0b\x15\x10\x0e8\xa0'
tRp6565
sa(dp6566
S'trial_loop.thisTrialN'
p6567
I12
sg6370
S'22-daim.png'
p6568
sS'block_loop.thisIndex'
p6569
g6364
sg38
S'left'
p6570
sg58
g62
sS'trial_loop.thisN'
p6571
I12
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p6572
g59
(g98
S'\x0c\x00\x00\x00'
tRp6573
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6574
I0
sg6379
S'7-olives.png'
p6575
sS'block_loop.thisRepN'
p6576
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6577
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6578
Nsg69
Vn
sS'block_loop.thisTrialN'
p6579
I0
sg39
F1.2168018319298426
sg34
g752
(S'\x07\xdf\n\x12\x0b\x15\x16\t\x8dP'
tRp6580
sa(dp6581
S'trial_loop.thisTrialN'
p6582
I13
sg6370
S'27-hartleys_raspberries_jelly.png'
p6583
sS'block_loop.thisIndex'
p6584
g6364
sg38
S'right'
p6585
sg58
g62
sS'trial_loop.thisN'
p6586
I13
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p6587
g59
(g98
S'\r\x00\x00\x00'
tRp6588
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6589
I0
sg6379
S'51-mars.png'
p6590
sS'block_loop.thisRepN'
p6591
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6592
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p6593
Nsg69
Vn
sS'block_loop.thisTrialN'
p6594
I0
sg39
F1.7168762426736066
sg34
g752
(S'\x07\xdf\n\x12\x0b\x15\x1c\r6\xd0'
tRp6595
sa(dp6596
S'trial_loop.thisTrialN'
p6597
I14
sg6370
S'46-pistachios.png'
p6598
sS'block_loop.thisIndex'
p6599
g6364
sg38
S'left'
p6600
sg58
g62
sS'trial_loop.thisN'
p6601
I14
sg33
S'46-pistachios.png'
p6602
sg63
g64
sS'trial_loop.thisIndex'
p6603
g59
(g98
S'\x0e\x00\x00\x00'
tRp6604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6605
I0
sg6379
S'29-beans.png'
p6606
sS'block_loop.thisRepN'
p6607
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6608
I2
sg6384
S'29-beans.png'
p6609
sg55
g11
sS'block_loop.thisTrial'
p6610
Nsg69
Vn
sS'block_loop.thisTrialN'
p6611
I0
sg39
F0.71677047107914404
sg34
g752
(S'\x07\xdf\n\x12\x0b\x15#\ty\xc8'
tRp6612
sa(dp6613
S'trial_loop.thisTrialN'
p6614
I15
sg6370
S'35-raisins.png'
p6615
sS'block_loop.thisIndex'
p6616
g6364
sg38
S'left'
p6617
sg58
g62
sS'trial_loop.thisN'
p6618
I15
sg33
S'35-raisins.png'
p6619
sg63
g64
sS'trial_loop.thisIndex'
p6620
g59
(g98
S'\x0f\x00\x00\x00'
tRp6621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6622
I0
sg6379
S'49-yorkie.png'
p6623
sS'block_loop.thisRepN'
p6624
I2
sg6382
g6619
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6625
I2
sg6384
S'49-yorkie.png'
p6626
sg55
g11
sS'block_loop.thisTrial'
p6627
Nsg69
Vn
sS'block_loop.thisTrialN'
p6628
I0
sg39
F0.75018403116882837
sg34
g752
(S'\x07\xdf\n\x12\x0b\x15)\x05\xc0\xa8'
tRp6629
sa(dp6630
S'trial_loop.thisTrialN'
p6631
I16
sg6370
S'20-fruit_pastilles.png'
p6632
sS'block_loop.thisIndex'
p6633
g6364
sg38
S'right'
p6634
sg58
g62
sS'trial_loop.thisN'
p6635
I16
sg33
S'2-steamed_puddings.png'
p6636
sg63
g64
sS'trial_loop.thisIndex'
p6637
g59
(g98
S'\x10\x00\x00\x00'
tRp6638
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6639
I0
sg6379
S'2-steamed_puddings.png'
p6640
sS'block_loop.thisRepN'
p6641
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6642
I2
sg6384
S'20-fruit_pastilles.png'
p6643
sg55
g11
sS'block_loop.thisTrial'
p6644
Nsg69
Vn
sS'block_loop.thisTrialN'
p6645
I0
sg39
F0.75010420355101814
sg34
g752
(S'\x07\xdf\n\x12\x0b\x15/\x02F\x08'
tRp6646
sa(dp6647
S'trial_loop.thisTrialN'
p6648
I17
sg6370
g6568
sS'block_loop.thisIndex'
p6649
g6364
sg38
S'right'
p6650
sg58
g62
sS'trial_loop.thisN'
p6651
I17
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p6652
g59
(g98
S'\x11\x00\x00\x00'
tRp6653
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6654
I0
sg6379
g6575
sS'block_loop.thisRepN'
p6655
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6656
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6657
Nsg69
Vn
sS'block_loop.thisTrialN'
p6658
I0
sg39
F0.95019098757620668
sg34
g752
(S'\x07\xdf\n\x12\x0b\x154\x0eL('
tRp6659
sa(dp6660
S'trial_loop.thisTrialN'
p6661
I18
sg6370
S'16-skips_prawn.png'
p6662
sS'block_loop.thisIndex'
p6663
g6364
sg38
S'right'
p6664
sg58
g62
sS'trial_loop.thisN'
p6665
I18
sg33
S'42-mrkipling_lemon_slices.png'
p6666
sg63
g64
sS'trial_loop.thisIndex'
p6667
g59
(g98
S'\x12\x00\x00\x00'
tRp6668
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6669
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6670
sS'block_loop.thisRepN'
p6671
I2
sg6382
g6666
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6672
I2
sg6384
S'16-skips_prawn.png'
p6673
sg55
g11
sS'block_loop.thisTrial'
p6674
Nsg69
Vn
sS'block_loop.thisTrialN'
p6675
I0
sg39
F0.80008227946564148
sg34
g752
(S'\x07\xdf\n\x12\x0b\x15:\x0e%\x18'
tRp6676
sa(dp6677
S'trial_loop.thisTrialN'
p6678
I19
sg6370
S'36-fig_rolls.png'
p6679
sS'block_loop.thisIndex'
p6680
g6364
sg38
S'right'
p6681
sg58
g62
sS'trial_loop.thisN'
p6682
I19
sg33
S'36-fig_rolls.png'
p6683
sg63
g64
sS'trial_loop.thisIndex'
p6684
g59
(g98
S'\x13\x00\x00\x00'
tRp6685
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6686
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6687
sS'block_loop.thisRepN'
p6688
I2
sg6382
S'34-hula_hoops_bbq_beef_redo.png'
p6689
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6690
I2
sg6384
g6683
sg55
g11
sS'block_loop.thisTrial'
p6691
Nsg69
Vn
sS'block_loop.thisTrialN'
p6692
I0
sg39
F0.70027808520899271
sg34
g752
(S'\x07\xdf\n\x12\x0b\x16\x04\x0bb\x10'
tRp6693
sa(dp6694
S'trial_loop.thisTrialN'
p6695
I20
sg6370
S'40-sardines.png'
p6696
sS'block_loop.thisIndex'
p6697
g6364
sg38
S'right'
p6698
sg58
g62
sS'trial_loop.thisN'
p6699
I20
sg33
S'40-sardines.png'
p6700
sg63
g64
sS'trial_loop.thisIndex'
p6701
g59
(g98
S'\x14\x00\x00\x00'
tRp6702
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6703
I0
sg6379
S'5-pineapple.png'
p6704
sS'block_loop.thisRepN'
p6705
I2
sg6382
S'5-pineapple.png'
p6706
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6707
I2
sg6384
g6700
sg55
g11
sS'block_loop.thisTrial'
p6708
Nsg69
Vn
sS'block_loop.thisTrialN'
p6709
I0
sg39
F0.68355590983810544
sg34
g752
(S'\x07\xdf\n\x12\x0b\x16\n\x07nX'
tRp6710
sa(dp6711
S'trial_loop.thisTrialN'
p6712
I21
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p6713
sS'block_loop.thisIndex'
p6714
g6364
sg38
S'left'
p6715
sg58
g62
sS'trial_loop.thisN'
p6716
I21
sg33
S'8-liquorice_catherine_wheels.png'
p6717
sg63
g64
sS'trial_loop.thisIndex'
p6718
g59
(g98
S'\x15\x00\x00\x00'
tRp6719
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6720
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p6721
sS'block_loop.thisRepN'
p6722
I2
sg6382
S'17-jacobs_mini_cheddars_redo.png'
p6723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6724
I2
sg6384
g6717
sg55
g11
sS'block_loop.thisTrial'
p6725
Nsg69
Vn
sS'block_loop.thisTrialN'
p6726
I0
sg39
F0.96682392707407416
sg34
g752
(S'\x07\xdf\n\x12\x0b\x16\x10\x03\x01\x88'
tRp6727
sa(dp6728
S'trial_loop.thisTrialN'
p6729
I22
sg6370
S'5-pineapple.png'
p6730
sS'block_loop.thisIndex'
p6731
g6364
sg38
S'left'
p6732
sg58
g62
sS'trial_loop.thisN'
p6733
I22
sg33
g6706
sg63
g64
sS'trial_loop.thisIndex'
p6734
g59
(g98
S'\x16\x00\x00\x00'
tRp6735
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6736
I0
sg6379
S'40-sardines.png'
p6737
sS'block_loop.thisRepN'
p6738
I2
sg6382
g6706
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6739
I2
sg6384
g6700
sg55
g11
sS'block_loop.thisTrial'
p6740
Nsg69
Vn
sS'block_loop.thisTrialN'
p6741
I0
sg39
F1.5667430160810909
sg34
g752
(S'\x07\xdf\n\x12\x0b\x16\x16\x03\x18\xf8'
tRp6742
sa(dp6743
S'trial_loop.thisTrialN'
p6744
I23
sg6370
S'8-liquorice_catherine_wheels.png'
p6745
sS'block_loop.thisIndex'
p6746
g6364
sg38
S'right'
p6747
sg58
g62
sS'trial_loop.thisN'
p6748
I23
sg33
g6717
sg63
g64
sS'trial_loop.thisIndex'
p6749
g59
(g98
S'\x17\x00\x00\x00'
tRp6750
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6751
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p6752
sS'block_loop.thisRepN'
p6753
I2
sg6382
g6723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6754
I2
sg6384
g6717
sg55
g11
sS'block_loop.thisTrial'
p6755
Nsg69
Vn
sS'block_loop.thisTrialN'
p6756
I0
sg39
F1.4000800556968898
sg34
g752
(S'\x07\xdf\n\x12\x0b\x16\x1c\x0c8\xe8'
tRp6757
sa(dp6758
S'trial_loop.thisTrialN'
p6759
I24
sg6370
S'33-ambrosia_rice.png'
p6760
sS'block_loop.thisIndex'
p6761
g6364
sg38
S'right'
p6762
sg58
g62
sS'trial_loop.thisN'
p6763
I24
sg33
S'33-ambrosia_rice.png'
p6764
sg63
g64
sS'trial_loop.thisIndex'
p6765
g59
(g98
S'\x18\x00\x00\x00'
tRp6766
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6767
I0
sg6379
S'23-crunchie_redo.png'
p6768
sS'block_loop.thisRepN'
p6769
I2
sg6382
g6764
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6770
I2
sg6384
S'23-crunchie_redo.png'
p6771
sg55
g11
sS'block_loop.thisTrial'
p6772
Nsg69
Vn
sS'block_loop.thisTrialN'
p6773
I0
sg39
F0.88388645319628267
sg34
g752
(S'\x07\xdf\n\x12\x0b\x16#\x03~\x88'
tRp6774
sa(dp6775
S'trial_loop.thisTrialN'
p6776
I25
sg6370
g6615
sS'block_loop.thisIndex'
p6777
g6364
sg38
S'right'
p6778
sg58
g62
sS'trial_loop.thisN'
p6779
I25
sg33
g6626
sg63
g64
sS'trial_loop.thisIndex'
p6780
g59
(g98
S'\x19\x00\x00\x00'
tRp6781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6782
I0
sg6379
g6623
sS'block_loop.thisRepN'
p6783
I2
sg6382
g6619
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6784
I2
sg6384
g6626
sg55
g11
sS'block_loop.thisTrial'
p6785
Nsg69
Vn
sS'block_loop.thisTrialN'
p6786
I0
sg39
F0.60021160020733078
sg34
g752
(S'\x07\xdf\n\x12\x0b\x16)\x02eH'
tRp6787
sa(dp6788
S'trial_loop.thisTrialN'
p6789
I26
sg6370
g6583
sS'block_loop.thisIndex'
p6790
g6364
sg38
S'right'
p6791
sg58
g62
sS'trial_loop.thisN'
p6792
I26
sg33
g6517
sg63
g64
sS'trial_loop.thisIndex'
p6793
g59
(g98
S'\x1a\x00\x00\x00'
tRp6794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6795
I0
sg6379
g6590
sS'block_loop.thisRepN'
p6796
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6797
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p6798
Nsg69
Vn
sS'block_loop.thisTrialN'
p6799
I0
sg39
F0.833548582802905
sg34
g752
(S'\x07\xdf\n\x12\x0b\x16.\x0c\x06 '
tRp6800
sa(dp6801
S'trial_loop.thisTrialN'
p6802
I27
sg6370
g6632
sS'block_loop.thisIndex'
p6803
g6364
sg38
S'right'
p6804
sg58
g62
sS'trial_loop.thisN'
p6805
I27
sg33
g6636
sg63
g64
sS'trial_loop.thisIndex'
p6806
g59
(g98
S'\x1b\x00\x00\x00'
tRp6807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6808
I0
sg6379
g6640
sS'block_loop.thisRepN'
p6809
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6810
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p6811
Nsg69
Vn
sS'block_loop.thisTrialN'
p6812
I0
sg39
F0.85022856357591081
sg34
g752
(S'\x07\xdf\n\x12\x0b\x164\t\xfa\xb0'
tRp6813
sa(dp6814
S'trial_loop.thisTrialN'
p6815
I28
sg6370
g6662
sS'block_loop.thisIndex'
p6816
g6364
sg38
S'right'
p6817
sg58
g62
sS'trial_loop.thisN'
p6818
I28
sg33
g6666
sg63
g64
sS'trial_loop.thisIndex'
p6819
g59
(g98
S'\x1c\x00\x00\x00'
tRp6820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6821
I0
sg6379
g6670
sS'block_loop.thisRepN'
p6822
I2
sg6382
g6666
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6823
I2
sg6384
g6673
sg55
g11
sS'block_loop.thisTrial'
p6824
Nsg69
Vn
sS'block_loop.thisTrialN'
p6825
I0
sg39
F0.81674429902523116
sg34
g752
(S'\x07\xdf\n\x12\x0b\x16:\x08)\xd8'
tRp6826
sa(dp6827
S'trial_loop.thisTrialN'
p6828
I29
sg6370
S'49-yorkie.png'
p6829
sS'block_loop.thisIndex'
p6830
g6364
sg38
S'right'
p6831
sg58
g62
sS'trial_loop.thisN'
p6832
I29
sg33
g6619
sg63
g64
sS'trial_loop.thisIndex'
p6833
g59
(g98
S'\x1d\x00\x00\x00'
tRp6834
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6835
I0
sg6379
S'35-raisins.png'
p6836
sS'block_loop.thisRepN'
p6837
I2
sg6382
g6619
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6838
I2
sg6384
g6626
sg55
g11
sS'block_loop.thisTrial'
p6839
Nsg69
Vn
sS'block_loop.thisTrialN'
p6840
I0
sg39
F0.68344814255397068
sg34
g752
(S'\x07\xdf\n\x12\x0b\x17\x04\x05\xdf\xe8'
tRp6841
sa(dp6842
S'trial_loop.thisTrialN'
p6843
I30
sg6370
g6713
sS'block_loop.thisIndex'
p6844
g6364
sg38
S'left'
p6845
sg58
g62
sS'trial_loop.thisN'
p6846
I30
sg33
g6723
sg63
g64
sS'trial_loop.thisIndex'
p6847
g59
(g98
S'\x1e\x00\x00\x00'
tRp6848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6849
I0
sg6379
g6721
sS'block_loop.thisRepN'
p6850
I2
sg6382
g6723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6851
I2
sg6384
g6717
sg55
g11
sS'block_loop.thisTrial'
p6852
Nsg69
Vn
sS'block_loop.thisTrialN'
p6853
I0
sg39
F1.4835230094558938
sg34
g752
(S'\x07\xdf\n\x12\x0b\x17\n\x01\xad\xb0'
tRp6854
sa(dp6855
S'trial_loop.thisTrialN'
p6856
I31
sg6370
S'31-hobnobs.png'
p6857
sS'block_loop.thisIndex'
p6858
g6364
sg38
S'right'
p6859
sg58
g62
sS'trial_loop.thisN'
p6860
I31
sg33
S'25-kitkat.png'
p6861
sg63
g64
sS'trial_loop.thisIndex'
p6862
g59
(g98
S'\x1f\x00\x00\x00'
tRp6863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6864
I0
sg6379
S'25-kitkat.png'
p6865
sS'block_loop.thisRepN'
p6866
I2
sg6382
g6861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6867
I2
sg6384
S'31-hobnobs.png'
p6868
sg55
g11
sS'block_loop.thisTrial'
p6869
Nsg69
Vn
sS'block_loop.thisTrialN'
p6870
I0
sg39
F0.88351582496943593
sg34
g752
(S'\x07\xdf\n\x12\x0b\x17\x10\tf@'
tRp6871
sa(dp6872
S'trial_loop.thisTrialN'
p6873
I32
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6874
sS'block_loop.thisIndex'
p6875
g6364
sg38
S'left'
p6876
sg58
g62
sS'trial_loop.thisN'
p6877
I32
sg33
g6683
sg63
g64
sS'trial_loop.thisIndex'
p6878
g59
(g98
S' \x00\x00\x00'
tRp6879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6880
I0
sg6379
S'36-fig_rolls.png'
p6881
sS'block_loop.thisRepN'
p6882
I2
sg6382
g6689
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6883
I2
sg6384
g6683
sg55
g11
sS'block_loop.thisTrial'
p6884
Nsg69
Vn
sS'block_loop.thisTrialN'
p6885
I0
sg39
F0.86678395624494442
sg34
g752
(S'\x07\xdf\n\x12\x0b\x17\x16\x08M\x00'
tRp6886
sa(dp6887
S'trial_loop.thisTrialN'
p6888
I33
sg6370
g6696
sS'block_loop.thisIndex'
p6889
g6364
sg38
S'right'
p6890
sg58
g62
sS'trial_loop.thisN'
p6891
I33
sg33
g6700
sg63
g64
sS'trial_loop.thisIndex'
p6892
g59
(g98
S'!\x00\x00\x00'
tRp6893
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6894
I0
sg6379
g6704
sS'block_loop.thisRepN'
p6895
I2
sg6382
g6706
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6896
I2
sg6384
g6700
sg55
g11
sS'block_loop.thisTrial'
p6897
Nsg69
Vn
sS'block_loop.thisTrialN'
p6898
I0
sg39
F0.68352426388992171
sg34
g752
(S'\x07\xdf\n\x12\x0b\x17\x1c\x06\xb6\xc0'
tRp6899
sa(dp6900
S'trial_loop.thisTrialN'
p6901
I34
sg6370
S'21-nakd_banana_crunch.png'
p6902
sS'block_loop.thisIndex'
p6903
g6364
sg38
S'left'
p6904
sg58
g62
sS'trial_loop.thisN'
p6905
I34
sg33
S'21-nakd_banana_crunch.png'
p6906
sg63
g64
sS'trial_loop.thisIndex'
p6907
g59
(g98
S'"\x00\x00\x00'
tRp6908
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6909
I0
sg6379
S'1-treacle_cookies.png'
p6910
sS'block_loop.thisRepN'
p6911
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6912
I2
sg6384
S'1-treacle_cookies.png'
p6913
sg55
g11
sS'block_loop.thisTrial'
p6914
Nsg69
Vn
sS'block_loop.thisTrialN'
p6915
I0
sg39
F0.80014186508105922
sg34
g752
(S'\x07\xdf\n\x12\x0b\x17"\x02I\xf0'
tRp6916
sa(dp6917
S'trial_loop.thisTrialN'
p6918
I35
sg6370
g6538
sS'block_loop.thisIndex'
p6919
g6364
sg38
S'left'
p6920
sg58
g62
sS'trial_loop.thisN'
p6921
I35
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p6922
g59
(g98
S'#\x00\x00\x00'
tRp6923
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6924
I0
sg6379
g6545
sS'block_loop.thisRepN'
p6925
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6926
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p6927
Nsg69
Vn
sS'block_loop.thisTrialN'
p6928
I0
sg39
F1.0669135050657133
sg34
g752
(S"\x07\xdf\n\x12\x0b\x17'\x0f\x03\xc0"
tRp6929
sa(dp6930
S'trial_loop.thisTrialN'
p6931
I36
sg6370
S'18-mms.png'
p6932
sS'block_loop.thisIndex'
p6933
g6364
sg38
S'left'
p6934
sg58
g62
sS'trial_loop.thisN'
p6935
I36
sg33
S'18-mms.png'
p6936
sg63
g64
sS'trial_loop.thisIndex'
p6937
g59
(g98
S'$\x00\x00\x00'
tRp6938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6939
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p6940
sS'block_loop.thisRepN'
p6941
I2
sg6382
g6936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6942
I2
sg6384
S'43-mrporky_pork_crackles_redo.png'
p6943
sg55
g11
sS'block_loop.thisTrial'
p6944
Nsg69
Vn
sS'block_loop.thisTrialN'
p6945
I0
sg39
F0.66725710594073462
sg34
g752
(S'\x07\xdf\n\x12\x0b\x17.\x01H '
tRp6946
sa(dp6947
S'trial_loop.thisTrialN'
p6948
I37
sg6370
S'13-mccoys_steak_crisps.png'
p6949
sS'block_loop.thisIndex'
p6950
g6364
sg38
S'right'
p6951
sg58
g62
sS'trial_loop.thisN'
p6952
I37
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6953
g59
(g98
S'%\x00\x00\x00'
tRp6954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6955
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6956
sS'block_loop.thisRepN'
p6957
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6958
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6959
Nsg69
Vn
sS'block_loop.thisTrialN'
p6960
I0
sg39
F0.8335348980690469
sg34
g752
(S'\x07\xdf\n\x12\x0b\x173\x0b\xdf\x10'
tRp6961
sa(dp6962
S'trial_loop.thisTrialN'
p6963
I38
sg6370
g6932
sS'block_loop.thisIndex'
p6964
g6364
sg38
S'left'
p6965
sg58
g62
sS'trial_loop.thisN'
p6966
I38
sg33
g6936
sg63
g64
sS'trial_loop.thisIndex'
p6967
g59
(g98
S'&\x00\x00\x00'
tRp6968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6969
I0
sg6379
g6940
sS'block_loop.thisRepN'
p6970
I2
sg6382
g6936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6971
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p6972
Nsg69
Vn
sS'block_loop.thisTrialN'
p6973
I0
sg39
F0.6667678766825702
sg34
g752
(S'\x07\xdf\n\x12\x0b\x179\n\x0e8'
tRp6974
sa(dp6975
S'trial_loop.thisTrialN'
p6976
I39
sg6370
S'2-steamed_puddings.png'
p6977
sS'block_loop.thisIndex'
p6978
g6364
sg38
S'left'
p6979
sg58
g62
sS'trial_loop.thisN'
p6980
I39
sg33
g6636
sg63
g64
sS'trial_loop.thisIndex'
p6981
g59
(g98
S"'\x00\x00\x00"
tRp6982
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6983
I0
sg6379
S'20-fruit_pastilles.png'
p6984
sS'block_loop.thisRepN'
p6985
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6986
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p6987
Nsg69
Vn
sS'block_loop.thisTrialN'
p6988
I0
sg39
F0.80019232753966207
sg34
g752
(S'\x07\xdf\n\x12\x0b\x18\x03\x05b\xe8'
tRp6989
sa(dp6990
S'trial_loop.thisTrialN'
p6991
I40
sg6370
S'23-crunchie_redo.png'
p6992
sS'block_loop.thisIndex'
p6993
g6364
sg38
S'right'
p6994
sg58
g62
sS'trial_loop.thisN'
p6995
I40
sg33
g6764
sg63
g64
sS'trial_loop.thisIndex'
p6996
g59
(g98
S'(\x00\x00\x00'
tRp6997
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6998
I0
sg6379
S'33-ambrosia_rice.png'
p6999
sS'block_loop.thisRepN'
p7000
I2
sg6382
g6764
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7001
I2
sg6384
g6771
sg55
g11
sS'block_loop.thisTrial'
p7002
Nsg69
Vn
sS'block_loop.thisTrialN'
p7003
I0
sg39
F1.1168548032555918
sg34
g752
(S'\x07\xdf\n\x12\x0b\x18\t\x02\xde`'
tRp7004
sa(dp7005
S'trial_loop.thisTrialN'
p7006
I41
sg6370
g6829
sS'block_loop.thisIndex'
p7007
g6364
sg38
S'left'
p7008
sg58
g62
sS'trial_loop.thisN'
p7009
I41
sg33
g6619
sg63
g64
sS'trial_loop.thisIndex'
p7010
g59
(g98
S')\x00\x00\x00'
tRp7011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7012
I0
sg6379
g6836
sS'block_loop.thisRepN'
p7013
I2
sg6382
g6619
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7014
I2
sg6384
g6626
sg55
g11
sS'block_loop.thisTrial'
p7015
Nsg69
Vn
sS'block_loop.thisTrialN'
p7016
I0
sg39
F0.66684485331370524
sg34
g752
(S'\x07\xdf\n\x12\x0b\x18\x0f\x05\x18\xb0'
tRp7017
sa(dp7018
S'trial_loop.thisTrialN'
p7019
I42
sg6370
g6662
sS'block_loop.thisIndex'
p7020
g6364
sg38
S'right'
p7021
sg58
g62
sS'trial_loop.thisN'
p7022
I42
sg33
g6666
sg63
g64
sS'trial_loop.thisIndex'
p7023
g59
(g98
S'*\x00\x00\x00'
tRp7024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7025
I0
sg6379
g6670
sS'block_loop.thisRepN'
p7026
I2
sg6382
g6666
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7027
I2
sg6384
g6673
sg55
g11
sS'block_loop.thisTrial'
p7028
Nsg69
Vn
sS'block_loop.thisTrialN'
p7029
I0
sg39
F0.78375867198792548
sg34
g752
(S'\x07\xdf\n\x12\x0b\x18\x15\x00m`'
tRp7030
sa(dp7031
S'trial_loop.thisTrialN'
p7032
I43
sg6370
g6568
sS'block_loop.thisIndex'
p7033
g6364
sg38
S'left'
p7034
sg58
g62
sS'trial_loop.thisN'
p7035
I43
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7036
g59
(g98
S'+\x00\x00\x00'
tRp7037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7038
I0
sg6379
g6575
sS'block_loop.thisRepN'
p7039
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7040
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7041
Nsg69
Vn
sS'block_loop.thisTrialN'
p7042
I0
sg39
F0.61687076878024527
sg34
g752
(S'\x07\xdf\n\x12\x0b\x18\x1a\x0c\xec\x98'
tRp7043
sa(dp7044
S'trial_loop.thisTrialN'
p7045
I44
sg6370
S'25-kitkat.png'
p7046
sS'block_loop.thisIndex'
p7047
g6364
sg38
S'left'
p7048
sg58
g62
sS'trial_loop.thisN'
p7049
I44
sg33
g6861
sg63
g64
sS'trial_loop.thisIndex'
p7050
g59
(g98
S',\x00\x00\x00'
tRp7051
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7052
I0
sg6379
S'31-hobnobs.png'
p7053
sS'block_loop.thisRepN'
p7054
I2
sg6382
g6861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7055
I2
sg6384
g6868
sg55
g11
sS'block_loop.thisTrial'
p7056
Nsg69
Vn
sS'block_loop.thisTrialN'
p7057
I0
sg39
F0.65010300613721483
sg34
g752
(S'\x07\xdf\n\x12\x0b\x18 \x07\xc80'
tRp7058
sa(dp7059
S'trial_loop.thisTrialN'
p7060
I45
sg6370
S'26-walkers_smoky_bacon.png'
p7061
sS'block_loop.thisIndex'
p7062
g6364
sg38
S'right'
p7063
sg58
g62
sS'trial_loop.thisN'
p7064
I45
sg33
S'44-crunch.png'
p7065
sg63
g64
sS'trial_loop.thisIndex'
p7066
g59
(g98
S'-\x00\x00\x00'
tRp7067
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7068
I0
sg6379
S'44-crunch.png'
p7069
sS'block_loop.thisRepN'
p7070
I2
sg6382
g7065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7071
I2
sg6384
S'26-walkers_smoky_bacon.png'
p7072
sg55
g11
sS'block_loop.thisTrial'
p7073
Nsg69
Vn
sS'block_loop.thisTrialN'
p7074
I0
sg39
F0.66682176032463758
sg34
g752
(S'\x07\xdf\n\x12\x0b\x18&\x02\xde`'
tRp7075
sa(dp7076
S'trial_loop.thisTrialN'
p7077
I46
sg6370
g6902
sS'block_loop.thisIndex'
p7078
g6364
sg38
S'left'
p7079
sg58
g62
sS'trial_loop.thisN'
p7080
I46
sg33
g6906
sg63
g64
sS'trial_loop.thisIndex'
p7081
g59
(g98
S'.\x00\x00\x00'
tRp7082
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7083
I0
sg6379
g6910
sS'block_loop.thisRepN'
p7084
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7085
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p7086
Nsg69
Vn
sS'block_loop.thisTrialN'
p7087
I0
sg39
F0.71677588795409974
sg34
g752
(S'\x07\xdf\n\x12\x0b\x18+\ruP'
tRp7088
sa(dp7089
S'trial_loop.thisTrialN'
p7090
I47
sg6370
S'29-beans.png'
p7091
sS'block_loop.thisIndex'
p7092
g6364
sg38
S'right'
p7093
sg58
g62
sS'trial_loop.thisN'
p7094
I47
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p7095
g59
(g98
S'/\x00\x00\x00'
tRp7096
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7097
I0
sg6379
S'46-pistachios.png'
p7098
sS'block_loop.thisRepN'
p7099
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7100
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p7101
Nsg69
Vn
sS'block_loop.thisTrialN'
p7102
I0
sg39
F0.56678492558057769
sg34
g752
(S'\x07\xdf\n\x12\x0b\x181\t\xbc0'
tRp7103
sa(dp7104
S'trial_loop.thisTrialN'
p7105
I48
sg6370
g6874
sS'block_loop.thisIndex'
p7106
g6364
sg38
S'left'
p7107
sg58
g62
sS'trial_loop.thisN'
p7108
I48
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p7109
g59
(g98
S'0\x00\x00\x00'
tRp7110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7111
I0
sg6379
g6881
sS'block_loop.thisRepN'
p7112
I2
sg6382
g6689
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7113
I2
sg6384
g6683
sg55
g11
sS'block_loop.thisTrial'
p7114
Nsg69
Vn
sS'block_loop.thisTrialN'
p7115
I0
sg39
F1.1172758939410414
sg34
g752
(S'\x07\xdf\n\x12\x0b\x187\x03\xa5\x98'
tRp7116
sa(dp7117
S'trial_loop.thisTrialN'
p7118
I49
sg6370
g6760
sS'block_loop.thisIndex'
p7119
g6364
sg38
S'right'
p7120
sg58
g62
sS'trial_loop.thisN'
p7121
I49
sg33
g6764
sg63
g64
sS'trial_loop.thisIndex'
p7122
g59
(g98
S'1\x00\x00\x00'
tRp7123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7124
I0
sg6379
g6768
sS'block_loop.thisRepN'
p7125
I2
sg6382
g6764
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7126
I2
sg6384
g6771
sg55
g11
sS'block_loop.thisTrial'
p7127
Nsg69
Vn
sS'block_loop.thisTrialN'
p7128
I0
sg39
F0.75019429472013144
sg34
g752
(S'\x07\xdf\n\x12\x0b\x19\x01\x05\xdf\xe8'
tRp7129
sa(dp7130
S'trial_loop.thisTrialN'
p7131
I50
sg6370
g6553
sS'block_loop.thisIndex'
p7132
g6364
sg38
S'left'
p7133
sg58
g62
sS'trial_loop.thisN'
p7134
I50
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7135
g59
(g98
S'2\x00\x00\x00'
tRp7136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7137
I0
sg6379
g6560
sS'block_loop.thisRepN'
p7138
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7139
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7140
Nsg69
Vn
sS'block_loop.thisTrialN'
p7141
I0
sg39
F1.7834761392396103
sg34
g752
(S'\x07\xdf\n\x12\x0b\x19\x07\x02\xa3\xc8'
tRp7142
sa(dp7143
S'trial_loop.thisTrialN'
p7144
I51
sg6370
S'38-maltesers.png'
p7145
sS'block_loop.thisIndex'
p7146
g6364
sg38
S'left'
p7147
sg58
g62
sS'trial_loop.thisN'
p7148
I51
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7149
g59
(g98
S'3\x00\x00\x00'
tRp7150
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7151
I0
sg6379
S'6-sour_patch_kids.png'
p7152
sS'block_loop.thisRepN'
p7153
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7154
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7155
Nsg69
Vn
sS'block_loop.thisTrialN'
p7156
I0
sg39
F0.68327081120241928
sg34
g752
(S'\x07\xdf\n\x12\x0b\x19\r\x0f\x1b0'
tRp7157
sa(dp7158
S'trial_loop.thisTrialN'
p7159
I52
sg6370
S'42-mrkipling_lemon_slices.png'
p7160
sS'block_loop.thisIndex'
p7161
g6364
sg38
S'left'
p7162
sg58
g62
sS'trial_loop.thisN'
p7163
I52
sg33
g6666
sg63
g64
sS'trial_loop.thisIndex'
p7164
g59
(g98
S'4\x00\x00\x00'
tRp7165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7166
I0
sg6379
S'16-skips_prawn.png'
p7167
sS'block_loop.thisRepN'
p7168
I2
sg6382
g6666
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7169
I2
sg6384
g6673
sg55
g11
sS'block_loop.thisTrial'
p7170
Nsg69
Vn
sS'block_loop.thisTrialN'
p7171
I0
sg39
F0.71674965887996223
sg34
g752
(S'\x07\xdf\n\x12\x0b\x19\x13\n\xae`'
tRp7172
sa(dp7173
S'trial_loop.thisTrialN'
p7174
I53
sg6370
S'30-spaghetti_hoops.png'
p7175
sS'block_loop.thisIndex'
p7176
g6364
sg38
S'right'
p7177
sg58
g62
sS'trial_loop.thisN'
p7178
I53
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7179
g59
(g98
S'5\x00\x00\x00'
tRp7180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7181
I0
sg6379
S'19-caramello_redo.png'
p7182
sS'block_loop.thisRepN'
p7183
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7184
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7185
Nsg69
Vn
sS'block_loop.thisTrialN'
p7186
I0
sg39
F0.81677480457892671
sg34
g752
(S'\x07\xdf\n\x12\x0b\x19\x19\x06\xf5@'
tRp7187
sa(dp7188
S'trial_loop.thisTrialN'
p7189
I54
sg6370
g6425
sS'block_loop.thisIndex'
p7190
g6364
sg38
S'right'
p7191
sg58
g62
sS'trial_loop.thisN'
p7192
I54
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7193
g59
(g98
S'6\x00\x00\x00'
tRp7194
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7195
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7196
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7197
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7198
Nsg69
Vn
sS'block_loop.thisTrialN'
p7199
I0
sg39
F0.9002288771844178
sg34
g752
(S'\x07\xdf\n\x12\x0b\x19\x1f\x04\xabP'
tRp7200
sa(dp7201
S'trial_loop.thisTrialN'
p7202
I55
sg6370
g7061
sS'block_loop.thisIndex'
p7203
g6364
sg38
S'right'
p7204
sg58
g62
sS'trial_loop.thisN'
p7205
I55
sg33
g7065
sg63
g64
sS'trial_loop.thisIndex'
p7206
g59
(g98
S'7\x00\x00\x00'
tRp7207
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7208
I0
sg6379
g7069
sS'block_loop.thisRepN'
p7209
I2
sg6382
g7065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7210
I2
sg6384
g7072
sg55
g11
sS'block_loop.thisTrial'
p7211
Nsg69
Vn
sS'block_loop.thisTrialN'
p7212
I0
sg39
F0.66687450357221678
sg34
g752
(S'\x07\xdf\n\x12\x0b\x19%\x03\x92\x10'
tRp7213
sa(dp7214
S'trial_loop.thisTrialN'
p7215
I56
sg6370
g6632
sS'block_loop.thisIndex'
p7216
g6364
sg38
S'right'
p7217
sg58
g62
sS'trial_loop.thisN'
p7218
I56
sg33
g6636
sg63
g64
sS'trial_loop.thisIndex'
p7219
g59
(g98
S'8\x00\x00\x00'
tRp7220
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7221
I0
sg6379
g6640
sS'block_loop.thisRepN'
p7222
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7223
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p7224
Nsg69
Vn
sS'block_loop.thisTrialN'
p7225
I0
sg39
F0.76686429704113834
sg34
g752
(S'\x07\xdf\n\x12\x0b\x19*\x0e)\x00'
tRp7226
sa(dp7227
S'trial_loop.thisTrialN'
p7228
I57
sg6370
g6902
sS'block_loop.thisIndex'
p7229
g6364
sg38
S'left'
p7230
sg58
g62
sS'trial_loop.thisN'
p7231
I57
sg33
g6913
sg63
g64
sS'trial_loop.thisIndex'
p7232
g59
(g98
S'9\x00\x00\x00'
tRp7233
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7234
I0
sg6379
g6910
sS'block_loop.thisRepN'
p7235
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7236
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p7237
Nsg69
Vn
sS'block_loop.thisTrialN'
p7238
I0
sg39
F0.78348811338219093
sg34
g752
(S"\x07\xdf\n\x12\x0b\x190\x0b'x"
tRp7239
sa(dp7240
S'trial_loop.thisTrialN'
p7241
I58
sg6370
g6538
sS'block_loop.thisIndex'
p7242
g6364
sg38
S'left'
p7243
sg58
g62
sS'trial_loop.thisN'
p7244
I58
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p7245
g59
(g98
S':\x00\x00\x00'
tRp7246
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7247
I0
sg6379
g6545
sS'block_loop.thisRepN'
p7248
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7249
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p7250
Nsg69
Vn
sS'block_loop.thisTrialN'
p7251
I0
sg39
F1.1501919569109305
sg34
g752
(S'\x07\xdf\n\x12\x0b\x196\x08dp'
tRp7252
sa(dp7253
S'trial_loop.thisTrialN'
p7254
I59
sg6370
g6745
sS'block_loop.thisIndex'
p7255
g6364
sg38
S'right'
p7256
sg58
g62
sS'trial_loop.thisN'
p7257
I59
sg33
g6723
sg63
g64
sS'trial_loop.thisIndex'
p7258
g59
(g98
S';\x00\x00\x00'
tRp7259
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7260
I0
sg6379
g6752
sS'block_loop.thisRepN'
p7261
I2
sg6382
g6723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7262
I2
sg6384
g6717
sg55
g11
sS'block_loop.thisTrial'
p7263
Nsg69
Vn
sS'block_loop.thisTrialN'
p7264
I0
sg39
F0.88352010144990345
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1a\x00\x0b\x1b\xc0'
tRp7265
sa(dp7266
S'trial_loop.thisTrialN'
p7267
I60
sg6370
g6425
sS'block_loop.thisIndex'
p7268
g6364
sg38
S'left'
p7269
sg58
g62
sS'trial_loop.thisN'
p7270
I60
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7271
g59
(g98
S'<\x00\x00\x00'
tRp7272
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7273
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7274
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7275
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7276
Nsg69
Vn
sS'block_loop.thisTrialN'
p7277
I0
sg39
F0.73355536815142841
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1a\x06\n\x02\x80'
tRp7278
sa(dp7279
S'trial_loop.thisTrialN'
p7280
I61
sg6370
g6442
sS'block_loop.thisIndex'
p7281
g6364
sg38
S'right'
p7282
sg58
g62
sS'trial_loop.thisN'
p7283
I61
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7284
g59
(g98
S'=\x00\x00\x00'
tRp7285
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7286
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7287
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7288
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7289
Nsg69
Vn
sS'block_loop.thisTrialN'
p7290
I0
sg39
F0.68349689442038652
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1a\x0c\x06I`'
tRp7291
sa(dp7292
S'trial_loop.thisTrialN'
p7293
I62
sg6370
g6992
sS'block_loop.thisIndex'
p7294
g6364
sg38
S'right'
p7295
sg58
g62
sS'trial_loop.thisN'
p7296
I62
sg33
g6764
sg63
g64
sS'trial_loop.thisIndex'
p7297
g59
(g98
S'>\x00\x00\x00'
tRp7298
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7299
I0
sg6379
g6999
sS'block_loop.thisRepN'
p7300
I2
sg6382
g6764
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7301
I2
sg6384
g6771
sg55
g11
sS'block_loop.thisTrial'
p7302
Nsg69
Vn
sS'block_loop.thisTrialN'
p7303
I0
sg39
F0.90017584883844393
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1a\x12\x02\x17('
tRp7304
sa(dp7305
S'trial_loop.thisTrialN'
p7306
I63
sg6370
g6745
sS'block_loop.thisIndex'
p7307
g6364
sg38
S'right'
p7308
sg58
g62
sS'trial_loop.thisN'
p7309
I63
sg33
g6723
sg63
g64
sS'trial_loop.thisIndex'
p7310
g59
(g98
S'?\x00\x00\x00'
tRp7311
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7312
I0
sg6379
g6752
sS'block_loop.thisRepN'
p7313
I2
sg6382
g6723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7314
I2
sg6384
g6717
sg55
g11
sS'block_loop.thisTrial'
p7315
Nsg69
Vn
sS'block_loop.thisTrialN'
p7316
I0
sg39
F0.9835463875433561
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1a\x18\x00\xfd\xe8'
tRp7317
sa(dp7318
S'trial_loop.thisTrialN'
p7319
I64
sg6370
g6538
sS'block_loop.thisIndex'
p7320
g6364
sg38
S'right'
p7321
sg58
g62
sS'trial_loop.thisN'
p7322
I64
sg33
g6500
sg63
g64
sS'trial_loop.thisIndex'
p7323
g59
(g98
S'@\x00\x00\x00'
tRp7324
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7325
I0
sg6379
g6545
sS'block_loop.thisRepN'
p7326
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7327
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p7328
Nsg69
Vn
sS'block_loop.thisTrialN'
p7329
I0
sg39
F0.98351702238414873
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1a\x1e\x01S\xd8'
tRp7330
sa(dp7331
S'trial_loop.thisTrialN'
p7332
I65
sg6370
g6829
sS'block_loop.thisIndex'
p7333
g6364
sg38
S'right'
p7334
sg58
g62
sS'trial_loop.thisN'
p7335
I65
sg33
g6619
sg63
g64
sS'trial_loop.thisIndex'
p7336
g59
(g98
S'A\x00\x00\x00'
tRp7337
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7338
I0
sg6379
g6836
sS'block_loop.thisRepN'
p7339
I2
sg6382
g6619
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7340
I2
sg6384
g6626
sg55
g11
sS'block_loop.thisTrial'
p7341
Nsg69
Vn
sS'block_loop.thisTrialN'
p7342
I0
sg39
F0.76716707179184596
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1a$\x01kH'
tRp7343
sa(dp7344
S'trial_loop.thisTrialN'
p7345
I66
sg6370
g6902
sS'block_loop.thisIndex'
p7346
g6364
sg38
S'left'
p7347
sg58
g62
sS'trial_loop.thisN'
p7348
I66
sg33
g6906
sg63
g64
sS'trial_loop.thisIndex'
p7349
g59
(g98
S'B\x00\x00\x00'
tRp7350
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7351
I0
sg6379
g6910
sS'block_loop.thisRepN'
p7352
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7353
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p7354
Nsg69
Vn
sS'block_loop.thisTrialN'
p7355
I0
sg39
F0.65019936947555834
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1a)\r\xac\x00'
tRp7356
sa(dp7357
S'trial_loop.thisTrialN'
p7358
I67
sg6370
g6949
sS'block_loop.thisIndex'
p7359
g6364
sg38
S'right'
p7360
sg58
g62
sS'trial_loop.thisN'
p7361
I67
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p7362
g59
(g98
S'C\x00\x00\x00'
tRp7363
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7364
I0
sg6379
g6956
sS'block_loop.thisRepN'
p7365
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7366
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7367
Nsg69
Vn
sS'block_loop.thisTrialN'
p7368
I0
sg39
F0.81687202321336372
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1a/\t\x00\xb0'
tRp7369
sa(dp7370
S'trial_loop.thisTrialN'
p7371
I68
sg6370
g6568
sS'block_loop.thisIndex'
p7372
g6364
sg38
S'left'
p7373
sg58
g62
sS'trial_loop.thisN'
p7374
I68
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7375
g59
(g98
S'D\x00\x00\x00'
tRp7376
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7377
I0
sg6379
g6575
sS'block_loop.thisRepN'
p7378
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7379
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7380
Nsg69
Vn
sS'block_loop.thisTrialN'
p7381
I0
sg39
F0.65019936947555834
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1a5\x06\xb6\xc0'
tRp7382
sa(dp7383
S'trial_loop.thisTrialN'
p7384
I69
sg6370
g6696
sS'block_loop.thisIndex'
p7385
g6364
sg38
S'right'
p7386
sg58
g62
sS'trial_loop.thisN'
p7387
I69
sg33
g6706
sg63
g64
sS'trial_loop.thisIndex'
p7388
g59
(g98
S'E\x00\x00\x00'
tRp7389
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7390
I0
sg6379
g6704
sS'block_loop.thisRepN'
p7391
I2
sg6382
g6706
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7392
I2
sg6384
g6700
sg55
g11
sS'block_loop.thisTrial'
p7393
Nsg69
Vn
sS'block_loop.thisTrialN'
p7394
I0
sg39
F0.63348546196539246
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1a;\x01\xd0\xd8'
tRp7395
sa(dp7396
S'trial_loop.thisTrialN'
p7397
I70
sg6370
S'1-treacle_cookies.png'
p7398
sS'block_loop.thisIndex'
p7399
g6364
sg38
S'right'
p7400
sg58
g62
sS'trial_loop.thisN'
p7401
I70
sg33
g6906
sg63
g64
sS'trial_loop.thisIndex'
p7402
g59
(g98
S'F\x00\x00\x00'
tRp7403
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7404
I0
sg6379
S'21-nakd_banana_crunch.png'
p7405
sS'block_loop.thisRepN'
p7406
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7407
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p7408
Nsg69
Vn
sS'block_loop.thisTrialN'
p7409
I0
sg39
F0.68353424234192062
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1b\x04\x0b\xee\xb0'
tRp7410
sa(dp7411
S'trial_loop.thisTrialN'
p7412
I71
sg6370
g6371
sS'block_loop.thisIndex'
p7413
g6364
sg38
S'left'
p7414
sg58
g62
sS'trial_loop.thisN'
p7415
I71
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7416
g59
(g98
S'G\x00\x00\x00'
tRp7417
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7418
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7419
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7420
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7421
Nsg69
Vn
sS'block_loop.thisTrialN'
p7422
I0
sg39
F0.83355342948016187
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1b\n\x07\xbcx'
tRp7423
sa(dp7424
S'trial_loop.thisTrialN'
p7425
I72
sg6370
g6472
sS'block_loop.thisIndex'
p7426
g6364
sg38
S'left'
p7427
sg58
g62
sS'trial_loop.thisN'
p7428
I72
sg33
g6483
sg63
g64
sS'trial_loop.thisIndex'
p7429
g59
(g98
S'H\x00\x00\x00'
tRp7430
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7431
I0
sg6379
g6480
sS'block_loop.thisRepN'
p7432
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7433
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p7434
Nsg69
Vn
sS'block_loop.thisTrialN'
p7435
I0
sg39
F1.3002473515762176
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1b\x10\x05\xad '
tRp7436
sa(dp7437
S'trial_loop.thisTrialN'
p7438
I73
sg6370
g6553
sS'block_loop.thisIndex'
p7439
g6364
sg38
S'right'
p7440
sg58
g62
sS'trial_loop.thisN'
p7441
I73
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7442
g59
(g98
S'I\x00\x00\x00'
tRp7443
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7444
I0
sg6379
g6560
sS'block_loop.thisRepN'
p7445
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7446
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7447
Nsg69
Vn
sS'block_loop.thisTrialN'
p7448
I0
sg39
F0.71685942185376916
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1b\x16\n\xc5\xd0'
tRp7449
sa(dp7450
S'trial_loop.thisTrialN'
p7451
I74
sg6370
g7145
sS'block_loop.thisIndex'
p7452
g6364
sg38
S'left'
p7453
sg58
g62
sS'trial_loop.thisN'
p7454
I74
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p7455
g59
(g98
S'J\x00\x00\x00'
tRp7456
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7457
I0
sg6379
g7152
sS'block_loop.thisRepN'
p7458
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7459
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7460
Nsg69
Vn
sS'block_loop.thisTrialN'
p7461
I0
sg39
F0.73318046344502363
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1b\x1c\x06\xd2\x18'
tRp7462
sa(dp7463
S'trial_loop.thisTrialN'
p7464
I75
sg6370
S'43-mrporky_pork_crackles_redo.png'
p7465
sS'block_loop.thisIndex'
p7466
g6364
sg38
S'right'
p7467
sg58
g62
sS'trial_loop.thisN'
p7468
I75
sg33
g6936
sg63
g64
sS'trial_loop.thisIndex'
p7469
g59
(g98
S'K\x00\x00\x00'
tRp7470
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7471
I0
sg6379
S'18-mms.png'
p7472
sS'block_loop.thisRepN'
p7473
I2
sg6382
g6936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7474
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p7475
Nsg69
Vn
sS'block_loop.thisTrialN'
p7476
I0
sg39
F0.70011044721104554
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1b"\x03Wx'
tRp7477
sa(dp7478
S'trial_loop.thisTrialN'
p7479
I76
sg6370
g6679
sS'block_loop.thisIndex'
p7480
g6364
sg38
S'right'
p7481
sg58
g62
sS'trial_loop.thisN'
p7482
I76
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p7483
g59
(g98
S'L\x00\x00\x00'
tRp7484
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7485
I0
sg6379
g6687
sS'block_loop.thisRepN'
p7486
I2
sg6382
g6689
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7487
I2
sg6384
g6683
sg55
g11
sS'block_loop.thisTrial'
p7488
Nsg69
Vn
sS'block_loop.thisTrialN'
p7489
I0
sg39
F0.83352520471453317
sg34
g752
(S"\x07\xdf\n\x12\x0b\x1b'\x0eg\x80"
tRp7490
sa(dp7491
S'trial_loop.thisTrialN'
p7492
I77
sg6370
g6506
sS'block_loop.thisIndex'
p7493
g6364
sg38
S'left'
p7494
sg58
g62
sS'trial_loop.thisN'
p7495
I77
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p7496
g59
(g98
S'M\x00\x00\x00'
tRp7497
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7498
I0
sg6379
g6514
sS'block_loop.thisRepN'
p7499
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7500
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p7501
Nsg69
Vn
sS'block_loop.thisTrialN'
p7502
I0
sg39
F1.1005089580839922
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1b-\x0c\\\x10'
tRp7503
sa(dp7504
S'trial_loop.thisTrialN'
p7505
I78
sg6370
g6977
sS'block_loop.thisIndex'
p7506
g6364
sg38
S'left'
p7507
sg58
g62
sS'trial_loop.thisN'
p7508
I78
sg33
g6636
sg63
g64
sS'trial_loop.thisIndex'
p7509
g59
(g98
S'N\x00\x00\x00'
tRp7510
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7511
I0
sg6379
g6984
sS'block_loop.thisRepN'
p7512
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7513
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p7514
Nsg69
Vn
sS'block_loop.thisTrialN'
p7515
I0
sg39
F1.0667835000876948
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1b3\x0e\x96`'
tRp7516
sa(dp7517
S'trial_loop.thisTrialN'
p7518
I79
sg6370
S'44-crunch.png'
p7519
sS'block_loop.thisIndex'
p7520
g6364
sg38
S'left'
p7521
sg58
g62
sS'trial_loop.thisN'
p7522
I79
sg33
g7065
sg63
g64
sS'trial_loop.thisIndex'
p7523
g59
(g98
S'O\x00\x00\x00'
tRp7524
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7525
I0
sg6379
S'26-walkers_smoky_bacon.png'
p7526
sS'block_loop.thisRepN'
p7527
I2
sg6382
g7065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7528
I2
sg6384
g7072
sg55
g11
sS'block_loop.thisTrial'
p7529
Nsg69
Vn
sS'block_loop.thisTrialN'
p7530
I0
sg39
F1.2835143424572379
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1b:\x00\xda\xc0'
tRp7531
sa(dp7532
S'trial_loop.thisTrialN'
p7533
I80
sg6370
g6713
sS'block_loop.thisIndex'
p7534
g6364
sg38
S'left'
p7535
sg58
g62
sS'trial_loop.thisN'
p7536
I80
sg33
g6723
sg63
g64
sS'trial_loop.thisIndex'
p7537
g59
(g98
S'P\x00\x00\x00'
tRp7538
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7539
I0
sg6379
g6721
sS'block_loop.thisRepN'
p7540
I2
sg6382
g6723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7541
I2
sg6384
g6717
sg55
g11
sS'block_loop.thisTrial'
p7542
Nsg69
Vn
sS'block_loop.thisTrialN'
p7543
I0
sg39
F1.1835117195496423
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1c\x04\x05\xb4\xf0'
tRp7544
sa(dp7545
S'trial_loop.thisTrialN'
p7546
I81
sg6370
g7091
sS'block_loop.thisIndex'
p7547
g6364
sg38
S'right'
p7548
sg58
g62
sS'trial_loop.thisN'
p7549
I81
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p7550
g59
(g98
S'Q\x00\x00\x00'
tRp7551
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7552
I0
sg6379
g7098
sS'block_loop.thisRepN'
p7553
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7554
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p7555
Nsg69
Vn
sS'block_loop.thisTrialN'
p7556
I0
sg39
F0.73353427085203293
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1c\n\x08\xe1p'
tRp7557
sa(dp7558
S'trial_loop.thisTrialN'
p7559
I82
sg6370
g6408
sS'block_loop.thisIndex'
p7560
g6364
sg38
S'right'
p7561
sg58
g62
sS'trial_loop.thisN'
p7562
I82
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7563
g59
(g98
S'R\x00\x00\x00'
tRp7564
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7565
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7566
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7567
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7568
Nsg69
Vn
sS'block_loop.thisTrialN'
p7569
I0
sg39
F0.98362906614784151
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1c\x10\x05f\xd0'
tRp7570
sa(dp7571
S'trial_loop.thisTrialN'
p7572
I83
sg6370
g7061
sS'block_loop.thisIndex'
p7573
g6364
sg38
S'right'
p7574
sg58
g62
sS'trial_loop.thisN'
p7575
I83
sg33
g7065
sg63
g64
sS'trial_loop.thisIndex'
p7576
g59
(g98
S'S\x00\x00\x00'
tRp7577
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7578
I0
sg6379
g7069
sS'block_loop.thisRepN'
p7579
I2
sg6382
g7065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7580
I2
sg6384
g7072
sg55
g11
sS'block_loop.thisTrial'
p7581
Nsg69
Vn
sS'block_loop.thisTrialN'
p7582
I0
sg39
F0.88345281817146315
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1c\x16\x05~@'
tRp7583
sa(dp7584
S'trial_loop.thisTrialN'
p7585
I84
sg6370
g7175
sS'block_loop.thisIndex'
p7586
g6364
sg38
S'right'
p7587
sg58
g62
sS'trial_loop.thisN'
p7588
I84
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7589
g59
(g98
S'T\x00\x00\x00'
tRp7590
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7591
I0
sg6379
g7182
sS'block_loop.thisRepN'
p7592
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7593
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7594
Nsg69
Vn
sS'block_loop.thisTrialN'
p7595
I0
sg39
F0.9336153529029616
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1c\x1c\x04e\x00'
tRp7596
sa(dp7597
S'trial_loop.thisTrialN'
p7598
I85
sg6370
g6977
sS'block_loop.thisIndex'
p7599
g6364
sg38
S'left'
p7600
sg58
g62
sS'trial_loop.thisN'
p7601
I85
sg33
g6636
sg63
g64
sS'trial_loop.thisIndex'
p7602
g59
(g98
S'U\x00\x00\x00'
tRp7603
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7604
I0
sg6379
g6984
sS'block_loop.thisRepN'
p7605
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7606
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p7607
Nsg69
Vn
sS'block_loop.thisTrialN'
p7608
I0
sg39
F1.1501466262279791
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1c"\x03\xc8\xc0'
tRp7609
sa(dp7610
S'trial_loop.thisTrialN'
p7611
I86
sg6370
g6713
sS'block_loop.thisIndex'
p7612
g6364
sg38
S'left'
p7613
sg58
g62
sS'trial_loop.thisN'
p7614
I86
sg33
g6717
sg63
g64
sS'trial_loop.thisIndex'
p7615
g59
(g98
S'V\x00\x00\x00'
tRp7616
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7617
I0
sg6379
g6721
sS'block_loop.thisRepN'
p7618
I2
sg6382
g6723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7619
I2
sg6384
g6717
sg55
g11
sS'block_loop.thisTrial'
p7620
Nsg69
Vn
sS'block_loop.thisTrialN'
p7621
I0
sg39
F1.3168643255512507
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1c(\x06|('
tRp7622
sa(dp7623
S'trial_loop.thisTrialN'
p7624
I87
sg6370
g6874
sS'block_loop.thisIndex'
p7625
g6364
sg38
S'left'
p7626
sg58
g62
sS'trial_loop.thisN'
p7627
I87
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p7628
g59
(g98
S'W\x00\x00\x00'
tRp7629
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7630
I0
sg6379
g6881
sS'block_loop.thisRepN'
p7631
I2
sg6382
g6689
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7632
I2
sg6384
g6683
sg55
g11
sS'block_loop.thisTrial'
p7633
Nsg69
Vn
sS'block_loop.thisTrialN'
p7634
I0
sg39
F0.98391017340236431
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1c.\x0c\r\xf0'
tRp7635
sa(dp7636
S'trial_loop.thisTrialN'
p7637
I88
sg6370
g6598
sS'block_loop.thisIndex'
p7638
g6364
sg38
S'left'
p7639
sg58
g62
sS'trial_loop.thisN'
p7640
I88
sg33
g6609
sg63
g64
sS'trial_loop.thisIndex'
p7641
g59
(g98
S'X\x00\x00\x00'
tRp7642
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7643
I0
sg6379
g6606
sS'block_loop.thisRepN'
p7644
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7645
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p7646
Nsg69
Vn
sS'block_loop.thisTrialN'
p7647
I0
sg39
F1.1334327187178133
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1c4\x0c%`'
tRp7648
sa(dp7649
S'trial_loop.thisTrialN'
p7650
I89
sg6370
g6583
sS'block_loop.thisIndex'
p7651
g6364
sg38
S'right'
p7652
sg58
g62
sS'trial_loop.thisN'
p7653
I89
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p7654
g59
(g98
S'Y\x00\x00\x00'
tRp7655
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7656
I0
sg6379
g6590
sS'block_loop.thisRepN'
p7657
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7658
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p7659
Nsg69
Vn
sS'block_loop.thisTrialN'
p7660
I0
sg39
F1.1835054473795026
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1c:\x0e\xdc\xb0'
tRp7661
sa(dp7662
S'trial_loop.thisTrialN'
p7663
I90
sg6370
g6489
sS'block_loop.thisIndex'
p7664
g6364
sg38
S'left'
p7665
sg58
g62
sS'trial_loop.thisN'
p7666
I90
sg33
g6500
sg63
g64
sS'trial_loop.thisIndex'
p7667
g59
(g98
S'Z\x00\x00\x00'
tRp7668
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7669
I0
sg6379
g6497
sS'block_loop.thisRepN'
p7670
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7671
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p7672
Nsg69
Vn
sS'block_loop.thisTrialN'
p7673
I0
sg39
F1.2001007538574413
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1d\x05\x02\xca\xd8'
tRp7674
sa(dp7675
S'trial_loop.thisTrialN'
p7676
I91
sg6370
g6730
sS'block_loop.thisIndex'
p7677
g6364
sg38
S'left'
p7678
sg58
g62
sS'trial_loop.thisN'
p7679
I91
sg33
g6706
sg63
g64
sS'trial_loop.thisIndex'
p7680
g59
(g98
S'[\x00\x00\x00'
tRp7681
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7682
I0
sg6379
g6737
sS'block_loop.thisRepN'
p7683
I2
sg6382
g6706
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7684
I2
sg6384
g6700
sg55
g11
sS'block_loop.thisTrial'
p7685
Nsg69
Vn
sS'block_loop.thisTrialN'
p7686
I0
sg39
F1.1835487823718722
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1d\x0b\x06tX'
tRp7687
sa(dp7688
S'trial_loop.thisTrialN'
p7689
I92
sg6370
g6829
sS'block_loop.thisIndex'
p7690
g6364
sg38
S'right'
p7691
sg58
g62
sS'trial_loop.thisN'
p7692
I92
sg33
g6619
sg63
g64
sS'trial_loop.thisIndex'
p7693
g59
(g98
S'\\\x00\x00\x00'
tRp7694
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7695
I0
sg6379
g6836
sS'block_loop.thisRepN'
p7696
I2
sg6382
g6619
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7697
I2
sg6384
g6626
sg55
g11
sS'block_loop.thisTrial'
p7698
Nsg69
Vn
sS'block_loop.thisTrialN'
p7699
I0
sg39
F1.1171108218313748
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1d\x11\t\xa0\xd8'
tRp7700
sa(dp7701
S'trial_loop.thisTrialN'
p7702
I93
sg6370
g7519
sS'block_loop.thisIndex'
p7703
g6364
sg38
S'left'
p7704
sg58
g62
sS'trial_loop.thisN'
p7705
I93
sg33
g7065
sg63
g64
sS'trial_loop.thisIndex'
p7706
g59
(g98
S']\x00\x00\x00'
tRp7707
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7708
I0
sg6379
g7526
sS'block_loop.thisRepN'
p7709
I2
sg6382
g7065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7710
I2
sg6384
g7072
sg55
g11
sS'block_loop.thisTrial'
p7711
Nsg69
Vn
sS'block_loop.thisTrialN'
p7712
I0
sg39
F1.0501129275689891
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1d\x17\x0b\xdf\x10'
tRp7713
sa(dp7714
S'trial_loop.thisTrialN'
p7715
I94
sg6370
g7046
sS'block_loop.thisIndex'
p7716
g6364
sg38
S'left'
p7717
sg58
g62
sS'trial_loop.thisN'
p7718
I94
sg33
g6861
sg63
g64
sS'trial_loop.thisIndex'
p7719
g59
(g98
S'^\x00\x00\x00'
tRp7720
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7721
I0
sg6379
g7053
sS'block_loop.thisRepN'
p7722
I2
sg6382
g6861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7723
I2
sg6384
g6868
sg55
g11
sS'block_loop.thisTrial'
p7724
Nsg69
Vn
sS'block_loop.thisTrialN'
p7725
I0
sg39
F1.0834871440474672
sg34
g752
(S"\x07\xdf\n\x12\x0b\x1d\x1d\r'0"
tRp7726
sa(dp7727
S'trial_loop.thisTrialN'
p7728
I95
sg6370
g6391
sS'block_loop.thisIndex'
p7729
g6364
sg38
S'left'
p7730
sg58
g62
sS'trial_loop.thisN'
p7731
I95
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7732
g59
(g98
S'_\x00\x00\x00'
tRp7733
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7734
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7735
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7736
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7737
Nsg69
Vn
sS'block_loop.thisTrialN'
p7738
I0
sg39
F1.0001362771481581
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1d#\x0e\xe8h'
tRp7739
sa(dp7740
S'trial_loop.thisTrialN'
p7741
I96
sg6370
g6615
sS'block_loop.thisIndex'
p7742
g6364
sg38
S'left'
p7743
sg58
g62
sS'trial_loop.thisN'
p7744
I96
sg33
g6619
sg63
g64
sS'trial_loop.thisIndex'
p7745
g59
(g98
S'`\x00\x00\x00'
tRp7746
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7747
I0
sg6379
g6623
sS'block_loop.thisRepN'
p7748
I2
sg6382
g6619
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7749
I2
sg6384
g6626
sg55
g11
sS'block_loop.thisTrial'
p7750
Nsg69
Vn
sS'block_loop.thisTrialN'
p7751
I0
sg39
F1.1001862264283773
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1d*\x006\xb0'
tRp7752
sa(dp7753
S'trial_loop.thisTrialN'
p7754
I97
sg6370
g7061
sS'block_loop.thisIndex'
p7755
g6364
sg38
S'right'
p7756
sg58
g62
sS'trial_loop.thisN'
p7757
I97
sg33
g7065
sg63
g64
sS'trial_loop.thisIndex'
p7758
g59
(g98
S'a\x00\x00\x00'
tRp7759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7760
I0
sg6379
g7069
sS'block_loop.thisRepN'
p7761
I2
sg6382
g7065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7762
I2
sg6384
g7072
sg55
g11
sS'block_loop.thisTrial'
p7763
Nsg69
Vn
sS'block_loop.thisTrialN'
p7764
I0
sg39
F1.0502854122441931
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1d0\x026h'
tRp7765
sa(dp7766
S'trial_loop.thisTrialN'
p7767
I98
sg6370
g7046
sS'block_loop.thisIndex'
p7768
g6364
sg38
S'left'
p7769
sg58
g62
sS'trial_loop.thisN'
p7770
I98
sg33
g6861
sg63
g64
sS'trial_loop.thisIndex'
p7771
g59
(g98
S'b\x00\x00\x00'
tRp7772
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7773
I0
sg6379
g7053
sS'block_loop.thisRepN'
p7774
I2
sg6382
g6861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7775
I2
sg6384
g6868
sg55
g11
sS'block_loop.thisTrial'
p7776
Nsg69
Vn
sS'block_loop.thisTrialN'
p7777
I0
sg39
F1.1168508118762475
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1d6\x03~\x88'
tRp7778
sa(dp7779
S'trial_loop.thisTrialN'
p7780
I99
sg6370
g6568
sS'block_loop.thisIndex'
p7781
g6364
sg38
S'left'
p7782
sg58
g62
sS'trial_loop.thisN'
p7783
I99
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7784
g59
(g98
S'c\x00\x00\x00'
tRp7785
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7786
I0
sg6379
g6575
sS'block_loop.thisRepN'
p7787
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7788
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7789
Nsg69
Vn
sS'block_loop.thisTrialN'
p7790
I0
sg39
F0.98353583889456786
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1e\x00\x05\xb8\xd8'
tRp7791
sa(dp7792
S'trial_loop.thisTrialN'
p7793
I100
sg6370
g6902
sS'block_loop.thisIndex'
p7794
g6364
sg38
S'left'
p7795
sg58
g62
sS'trial_loop.thisN'
p7796
I100
sg33
g6913
sg63
g64
sS'trial_loop.thisIndex'
p7797
g59
(g98
S'd\x00\x00\x00'
tRp7798
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7799
I0
sg6379
g6910
sS'block_loop.thisRepN'
p7800
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7801
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p7802
Nsg69
Vn
sS'block_loop.thisTrialN'
p7803
I0
sg39
F1.1668023736174291
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1e\x06\x06\x0e\xc8'
tRp7804
sa(dp7805
S'trial_loop.thisTrialN'
p7806
I101
sg6370
g7519
sS'block_loop.thisIndex'
p7807
g6364
sg38
S'left'
p7808
sg58
g62
sS'trial_loop.thisN'
p7809
I101
sg33
g7065
sg63
g64
sS'trial_loop.thisIndex'
p7810
g59
(g98
S'e\x00\x00\x00'
tRp7811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7812
I0
sg6379
g7526
sS'block_loop.thisRepN'
p7813
I2
sg6382
g7065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7814
I2
sg6384
g7072
sg55
g11
sS'block_loop.thisTrial'
p7815
Nsg69
Vn
sS'block_loop.thisTrialN'
p7816
I0
sg39
F1.2501874523522929
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1e\x0c\t?0'
tRp7817
sa(dp7818
S'trial_loop.thisTrialN'
p7819
I102
sg6370
g6598
sS'block_loop.thisIndex'
p7820
g6364
sg38
S'left'
p7821
sg58
g62
sS'trial_loop.thisN'
p7822
I102
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p7823
g59
(g98
S'f\x00\x00\x00'
tRp7824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7825
I0
sg6379
g6606
sS'block_loop.thisRepN'
p7826
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7827
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p7828
Nsg69
Vn
sS'block_loop.thisTrialN'
p7829
I0
sg39
F0.80053216511259961
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1e\x12\ra\xc8'
tRp7830
sa(dp7831
S'trial_loop.thisTrialN'
p7832
I103
sg6370
g6506
sS'block_loop.thisIndex'
p7833
g6364
sg38
S'left'
p7834
sg58
g62
sS'trial_loop.thisN'
p7835
I103
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p7836
g59
(g98
S'g\x00\x00\x00'
tRp7837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7838
I0
sg6379
g6514
sS'block_loop.thisRepN'
p7839
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7840
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p7841
Nsg69
Vn
sS'block_loop.thisTrialN'
p7842
I0
sg39
F0.86674147654866829
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1e\x18\n\xd9X'
tRp7843
sa(dp7844
S'trial_loop.thisTrialN'
p7845
I104
sg6370
g6857
sS'block_loop.thisIndex'
p7846
g6364
sg38
S'right'
p7847
sg58
g62
sS'trial_loop.thisN'
p7848
I104
sg33
g6861
sg63
g64
sS'trial_loop.thisIndex'
p7849
g59
(g98
S'h\x00\x00\x00'
tRp7850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7851
I0
sg6379
g6865
sS'block_loop.thisRepN'
p7852
I2
sg6382
g6861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7853
I2
sg6384
g6868
sg55
g11
sS'block_loop.thisTrial'
p7854
Nsg69
Vn
sS'block_loop.thisTrialN'
p7855
I0
sg39
F1.2168602771498627
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1e\x1e\tG\x00'
tRp7856
sa(dp7857
S'trial_loop.thisTrialN'
p7858
I105
sg6370
g6425
sS'block_loop.thisIndex'
p7859
g6364
sg38
S'left'
p7860
sg58
g62
sS'trial_loop.thisN'
p7861
I105
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7862
g59
(g98
S'i\x00\x00\x00'
tRp7863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7864
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7865
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7866
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7867
Nsg69
Vn
sS'block_loop.thisTrialN'
p7868
I0
sg39
F0.61685537345329067
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1e$\r/\x00'
tRp7869
sa(dp7870
S'trial_loop.thisTrialN'
p7871
I106
sg6370
g6598
sS'block_loop.thisIndex'
p7872
g6364
sg38
S'left'
p7873
sg58
g62
sS'trial_loop.thisN'
p7874
I106
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p7875
g59
(g98
S'j\x00\x00\x00'
tRp7876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7877
I0
sg6379
g6606
sS'block_loop.thisRepN'
p7878
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7879
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p7880
Nsg69
Vn
sS'block_loop.thisTrialN'
p7881
I0
sg39
F0.63343927598634764
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1e*\x07\xcc\x18'
tRp7882
sa(dp7883
S'trial_loop.thisTrialN'
p7884
I107
sg6370
g6615
sS'block_loop.thisIndex'
p7885
g6364
sg38
S'left'
p7886
sg58
g62
sS'trial_loop.thisN'
p7887
I107
sg33
g6619
sg63
g64
sS'trial_loop.thisIndex'
p7888
g59
(g98
S'k\x00\x00\x00'
tRp7889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7890
I0
sg6379
g6623
sS'block_loop.thisRepN'
p7891
I2
sg6382
g6619
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7892
I2
sg6384
g6626
sg55
g11
sS'block_loop.thisTrial'
p7893
Nsg69
Vn
sS'block_loop.thisTrialN'
p7894
I0
sg39
F0.68359382795733836
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1e0\x02\xe60'
tRp7895
sa(dp7896
S'trial_loop.thisTrialN'
p7897
I108
sg6370
g6442
sS'block_loop.thisIndex'
p7898
g6364
sg38
S'right'
p7899
sg58
g62
sS'trial_loop.thisN'
p7900
I108
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7901
g59
(g98
S'l\x00\x00\x00'
tRp7902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7903
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7904
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7905
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7906
Nsg69
Vn
sS'block_loop.thisTrialN'
p7907
I0
sg39
F0.78389865541794279
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1e5\r\xb7\xb8'
tRp7908
sa(dp7909
S'trial_loop.thisTrialN'
p7910
I109
sg6370
g6932
sS'block_loop.thisIndex'
p7911
g6364
sg38
S'left'
p7912
sg58
g62
sS'trial_loop.thisN'
p7913
I109
sg33
g6936
sg63
g64
sS'trial_loop.thisIndex'
p7914
g59
(g98
S'm\x00\x00\x00'
tRp7915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7916
I0
sg6379
g6940
sS'block_loop.thisRepN'
p7917
I2
sg6382
g6936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7918
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p7919
Nsg69
Vn
sS'block_loop.thisTrialN'
p7920
I0
sg39
F1.0001767611538526
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1e;\n\xf4\xb0'
tRp7921
sa(dp7922
S'trial_loop.thisTrialN'
p7923
I110
sg6370
g6874
sS'block_loop.thisIndex'
p7924
g6364
sg38
S'left'
p7925
sg58
g62
sS'trial_loop.thisN'
p7926
I110
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p7927
g59
(g98
S'n\x00\x00\x00'
tRp7928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7929
I0
sg6379
g6881
sS'block_loop.thisRepN'
p7930
I2
sg6382
g6689
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7931
I2
sg6384
g6683
sg55
g11
sS'block_loop.thisTrial'
p7932
Nsg69
Vn
sS'block_loop.thisTrialN'
p7933
I0
sg39
F1.0501924700893142
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1f\x05\x0b\x858'
tRp7934
sa(dp7935
S'trial_loop.thisTrialN'
p7936
I111
sg6370
g7091
sS'block_loop.thisIndex'
p7937
g6364
sg38
S'right'
p7938
sg58
g62
sS'trial_loop.thisN'
p7939
I111
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p7940
g59
(g98
S'o\x00\x00\x00'
tRp7941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7942
I0
sg6379
g7098
sS'block_loop.thisRepN'
p7943
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7944
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p7945
Nsg69
Vn
sS'block_loop.thisTrialN'
p7946
I0
sg39
F1.1001944942890987
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1f\x0b\x0c\xcdX'
tRp7947
sa(dp7948
S'trial_loop.thisTrialN'
p7949
I112
sg6370
g6992
sS'block_loop.thisIndex'
p7950
g6364
sg38
S'right'
p7951
sg58
g62
sS'trial_loop.thisN'
p7952
I112
sg33
g6764
sg63
g64
sS'trial_loop.thisIndex'
p7953
g59
(g98
S'p\x00\x00\x00'
tRp7954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7955
I0
sg6379
g6999
sS'block_loop.thisRepN'
p7956
I2
sg6382
g6764
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7957
I2
sg6384
g6771
sg55
g11
sS'block_loop.thisTrial'
p7958
Nsg69
Vn
sS'block_loop.thisTrialN'
p7959
I0
sg39
F1.3000198428653675
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1f\x11\x0e\xcd\x10'
tRp7960
sa(dp7961
S'trial_loop.thisTrialN'
p7962
I113
sg6370
g7046
sS'block_loop.thisIndex'
p7963
g6364
sg38
S'left'
p7964
sg58
g62
sS'trial_loop.thisN'
p7965
I113
sg33
g6861
sg63
g64
sS'trial_loop.thisIndex'
p7966
g59
(g98
S'q\x00\x00\x00'
tRp7967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7968
I0
sg6379
g7053
sS'block_loop.thisRepN'
p7969
I2
sg6382
g6861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7970
I2
sg6384
g6868
sg55
g11
sS'block_loop.thisTrial'
p7971
Nsg69
Vn
sS'block_loop.thisTrialN'
p7972
I0
sg39
F1.1671858312820405
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1f\x18\x04\xa3\x80'
tRp7973
sa(dp7974
S'trial_loop.thisTrialN'
p7975
I114
sg6370
g6696
sS'block_loop.thisIndex'
p7976
g6364
sg38
S'right'
p7977
sg58
g62
sS'trial_loop.thisN'
p7978
I114
sg33
g6706
sg63
g64
sS'trial_loop.thisIndex'
p7979
g59
(g98
S'r\x00\x00\x00'
tRp7980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7981
I0
sg6379
g6704
sS'block_loop.thisRepN'
p7982
I2
sg6382
g6706
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7983
I2
sg6384
g6700
sg55
g11
sS'block_loop.thisTrial'
p7984
Nsg69
Vn
sS'block_loop.thisTrialN'
p7985
I0
sg39
F1.1501774168809789
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1f\x1e\x07\x95h'
tRp7986
sa(dp7987
S'trial_loop.thisTrialN'
p7988
I115
sg6370
g6992
sS'block_loop.thisIndex'
p7989
g6364
sg38
S'right'
p7990
sg58
g62
sS'trial_loop.thisN'
p7991
I115
sg33
g6764
sg63
g64
sS'trial_loop.thisIndex'
p7992
g59
(g98
S's\x00\x00\x00'
tRp7993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7994
I0
sg6379
g6999
sS'block_loop.thisRepN'
p7995
I2
sg6382
g6764
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7996
I2
sg6384
g6771
sg55
g11
sS'block_loop.thisTrial'
p7997
Nsg69
Vn
sS'block_loop.thisTrialN'
p7998
I0
sg39
F1.1167687034685514
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1f$\nH\xd0'
tRp7999
sa(dp8000
S'trial_loop.thisTrialN'
p8001
I116
sg6370
g6583
sS'block_loop.thisIndex'
p8002
g6364
sg38
S'right'
p8003
sg58
g62
sS'trial_loop.thisN'
p8004
I116
sg33
g6517
sg63
g64
sS'trial_loop.thisIndex'
p8005
g59
(g98
S't\x00\x00\x00'
tRp8006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8007
I0
sg6379
g6590
sS'block_loop.thisRepN'
p8008
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8009
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p8010
Nsg69
Vn
sS'block_loop.thisTrialN'
p8011
I0
sg39
F1.6834093691395537
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1f*\x0c\xc1\xa0'
tRp8012
sa(dp8013
S'trial_loop.thisTrialN'
p8014
I117
sg6370
g6949
sS'block_loop.thisIndex'
p8015
g6364
sg38
S'right'
p8016
sg58
g62
sS'trial_loop.thisN'
p8017
I117
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8018
g59
(g98
S'u\x00\x00\x00'
tRp8019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8020
I0
sg6379
g6956
sS'block_loop.thisRepN'
p8021
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8022
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8023
Nsg69
Vn
sS'block_loop.thisTrialN'
p8024
I0
sg39
F1.0835284833492551
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1f1\x08M\x00'
tRp8025
sa(dp8026
S'trial_loop.thisTrialN'
p8027
I118
sg6370
g7091
sS'block_loop.thisIndex'
p8028
g6364
sg38
S'right'
p8029
sg58
g62
sS'trial_loop.thisN'
p8030
I118
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p8031
g59
(g98
S'v\x00\x00\x00'
tRp8032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8033
I0
sg6379
g7098
sS'block_loop.thisRepN'
p8034
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8035
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p8036
Nsg69
Vn
sS'block_loop.thisTrialN'
p8037
I0
sg39
F0.75051788167093036
sg34
g752
(S'\x07\xdf\n\x12\x0b\x1f7\n\x12 '
tRp8038
sa(dp8039
S'trial_loop.thisTrialN'
p8040
I119
sg6370
g6472
sS'block_loop.thisIndex'
p8041
g6364
sg38
S'left'
p8042
sg58
g62
sS'trial_loop.thisN'
p8043
I119
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8044
g59
(g98
S'w\x00\x00\x00'
tRp8045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8046
I0
sg6379
g6480
sS'block_loop.thisRepN'
p8047
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8048
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8049
Nsg69
Vn
sS'block_loop.thisTrialN'
p8050
I0
sg39
F1.0168464783755553
sg34
g752
(S'\x07\xdf\n\x12\x0b \x01\x06\xd2\x18'
tRp8051
sa(dp8052
S'trial_loop.thisTrialN'
p8053
I120
sg6370
g6662
sS'block_loop.thisIndex'
p8054
g6364
sg38
S'right'
p8055
sg58
g62
sS'trial_loop.thisN'
p8056
I120
sg33
g6666
sg63
g64
sS'trial_loop.thisIndex'
p8057
g59
(g98
S'x\x00\x00\x00'
tRp8058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8059
I0
sg6379
g6670
sS'block_loop.thisRepN'
p8060
I2
sg6382
g6666
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8061
I2
sg6384
g6673
sg55
g11
sS'block_loop.thisTrial'
p8062
Nsg69
Vn
sS'block_loop.thisTrialN'
p8063
I0
sg39
F0.86675630167792406
sg34
g752
(S'\x07\xdf\n\x12\x0b \x07\x07\xa1 '
tRp8064
sa(dp8065
S'trial_loop.thisTrialN'
p8066
I121
sg6370
g6696
sS'block_loop.thisIndex'
p8067
g6364
sg38
S'right'
p8068
sg58
g62
sS'trial_loop.thisN'
p8069
I121
sg33
g6706
sg63
g64
sS'trial_loop.thisIndex'
p8070
g59
(g98
S'y\x00\x00\x00'
tRp8071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8072
I0
sg6379
g6704
sS'block_loop.thisRepN'
p8073
I2
sg6382
g6706
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8074
I2
sg6384
g6700
sg55
g11
sS'block_loop.thisTrial'
p8075
Nsg69
Vn
sS'block_loop.thisTrialN'
p8076
I0
sg39
F0.86685836698870844
sg34
g752
(S'\x07\xdf\n\x12\x0b \r\x06\x0e\xc8'
tRp8077
sa(dp8078
S'trial_loop.thisTrialN'
p8079
I122
sg6370
g7175
sS'block_loop.thisIndex'
p8080
g6364
sg38
S'right'
p8081
sg58
g62
sS'trial_loop.thisN'
p8082
I122
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8083
g59
(g98
S'z\x00\x00\x00'
tRp8084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8085
I0
sg6379
g7182
sS'block_loop.thisRepN'
p8086
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8087
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8088
Nsg69
Vn
sS'block_loop.thisTrialN'
p8089
I0
sg39
F0.71676391381151916
sg34
g752
(S'\x07\xdf\n\x12\x0b \x13\x04|p'
tRp8090
sa(dp8091
S'trial_loop.thisTrialN'
p8092
I123
sg6370
g6857
sS'block_loop.thisIndex'
p8093
g6364
sg38
S'right'
p8094
sg58
g62
sS'trial_loop.thisN'
p8095
I123
sg33
g6861
sg63
g64
sS'trial_loop.thisIndex'
p8096
g59
(g98
S'{\x00\x00\x00'
tRp8097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8098
I0
sg6379
g6865
sS'block_loop.thisRepN'
p8099
I2
sg6382
g6861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8100
I2
sg6384
g6868
sg55
g11
sS'block_loop.thisTrial'
p8101
Nsg69
Vn
sS'block_loop.thisTrialN'
p8102
I0
sg39
F0.80014984784338594
sg34
g752
(S'\x07\xdf\n\x12\x0b \x19\x00\xc3P'
tRp8103
sa(dp8104
S'trial_loop.thisTrialN'
p8105
I124
sg6370
g6745
sS'block_loop.thisIndex'
p8106
g6364
sg38
S'right'
p8107
sg58
g62
sS'trial_loop.thisN'
p8108
I124
sg33
g6717
sg63
g64
sS'trial_loop.thisIndex'
p8109
g59
(g98
S'|\x00\x00\x00'
tRp8110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8111
I0
sg6379
g6752
sS'block_loop.thisRepN'
p8112
I2
sg6382
g6723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8113
I2
sg6384
g6717
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vn
sS'block_loop.thisTrialN'
p8115
I0
sg39
F0.63350655926478794
sg34
g752
(S'\x07\xdf\n\x12\x0b \x1e\r\x81\x08'
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g7091
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'right'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g7098
sS'block_loop.thisRepN'
p8125
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8126
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vn
sS'block_loop.thisTrialN'
p8128
I0
sg39
F0.61688160252833768
sg34
g752
(S'\x07\xdf\n\x12\x0b $\x08X\xb8'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g6489
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'right'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6500
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g6497
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8139
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vn
sS'block_loop.thisTrialN'
p8141
I0
sg39
F1.0501822065380111
sg34
g752
(S'\x07\xdf\n\x12\x0b *\x02\xf9\xb8'
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g6874
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'left'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g6881
sS'block_loop.thisRepN'
p8151
I2
sg6382
g6689
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8152
I2
sg6384
g6683
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vn
sS'block_loop.thisTrialN'
p8154
I0
sg39
F1.4334257623113444
sg34
g752
(S'\x07\xdf\n\x12\x0b 0\x04A\xd8'
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g7046
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'left'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g6861
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g7053
sS'block_loop.thisRepN'
p8164
I2
sg6382
g6861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6384
g6868
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vn
sS'block_loop.thisTrialN'
p8167
I0
sg39
F1.0834517918165147
sg34
g752
(S'\x07\xdf\n\x12\x0b 6\x0b}h'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g6615
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'left'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6619
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g6623
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6619
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6384
g6626
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vn
sS'block_loop.thisTrialN'
p8180
I0
sg39
F1.0839059539430309
sg34
g752
(S'\x07\xdf\n\x12\x0b!\x00\r>\xa0'
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g6949
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'right'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g6956
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vn
sS'block_loop.thisTrialN'
p8193
I0
sg39
F1.5002423338401059
sg34
g752
(S'\x07\xdf\n\x12\x0b!\x06\x0e\xff\xd8'
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g6472
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'left'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g6480
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vn
sS'block_loop.thisTrialN'
p8206
I0
sg39
F1.3168711679181797
sg34
g752
(S'\x07\xdf\n\x12\x0b!\r\x07\xebX'
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g7061
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'right'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g7065
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g7069
sS'block_loop.thisRepN'
p8216
I2
sg6382
g7065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6384
g7072
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vn
sS'block_loop.thisTrialN'
p8219
I0
sg39
F1.283403724186428
sg34
g752
(S'\x07\xdf\n\x12\x0b!\x13\rB\x88'
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g6992
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'right'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6764
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g6999
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6764
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6384
g6771
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vn
sS'block_loop.thisTrialN'
p8232
I0
sg39
F1.1501717149076285
sg34
g752
(S'\x07\xdf\n\x12\x0b!\x1a\x02\xdax'
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g6932
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'left'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6936
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g6940
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vn
sS'block_loop.thisTrialN'
p8245
I0
sg39
F1.1839470651657393
sg34
g752
(S'\x07\xdf\n\x12\x0b! \x05\x8d\xe0'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g6632
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'right'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6636
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g6640
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vn
sS'block_loop.thisTrialN'
p8258
I0
sg39
F1.2001110174087444
sg34
g752
(S'\x07\xdf\n\x12\x0b!&\x08\xbeH'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g7160
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'left'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g6666
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g7167
sS'block_loop.thisRepN'
p8268
I2
sg6382
g6666
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6384
g6673
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vn
sS'block_loop.thisTrialN'
p8271
I0
sg39
F1.2500443328372057
sg34
g752
(S'\x07\xdf\n\x12\x0b!,\x0cg\xc8'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g6506
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'left'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g6514
sS'block_loop.thisRepN'
p8281
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vn
sS'block_loop.thisTrialN'
p8284
I0
sg39
F1.3001963189199159
sg34
g752
(S'\x07\xdf\n\x12\x0b!3\x01\x86\xa0'
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g7160
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'left'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6666
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g7167
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6666
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6384
g6673
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vn
sS'block_loop.thisTrialN'
p8297
I0
sg39
F0.98329892192850821
sg34
g752
(S'\x07\xdf\n\x12\x0b!9\x06\x9bh'
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g7465
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'right'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6943
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g7472
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vn
sS'block_loop.thisTrialN'
p8310
I0
sg39
F1.6005451656110381
sg34
g752
(S'\x07\xdf\n\x12\x0b"\x03\x06\xb2\xd8'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g6679
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'right'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g6687
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6689
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6384
g6683
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vn
sS'block_loop.thisTrialN'
p8323
I0
sg39
F1.2167747475596116
sg34
g752
(S'\x07\xdf\n\x12\x0b"\n\x01L\x08'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g7519
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'left'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g7072
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g7526
sS'block_loop.thisRepN'
p8333
I2
sg6382
g7065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6384
g7072
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vn
sS'block_loop.thisTrialN'
p8336
I0
sg39
F1.1668625294296362
sg34
g752
(S'\x07\xdf\n\x12\x0b"\x10\x04\xf5\x88'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g6730
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'left'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6706
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g6737
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6706
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6384
g6700
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vn
sS'block_loop.thisTrialN'
p8349
I0
sg39
F1.0667264803605576
sg34
g752
(S'\x07\xdf\n\x12\x0b"\x16\x08%\xf0'
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g7465
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'right'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6936
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g7472
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vn
sS'block_loop.thisTrialN'
p8362
I0
sg39
F0.93349361578657408
sg34
g752
(S'\x07\xdf\n\x12\x0b"\x1c\t\xac\x90'
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g7519
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'left'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g7065
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g7526
sS'block_loop.thisRepN'
p8372
I2
sg6382
g7065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g7072
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vn
sS'block_loop.thisTrialN'
p8375
I0
sg39
F1.1505434835289634
sg34
g752
(S'\x07\xdf\n\x12\x0b""\t\x0ch'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g6523
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'right'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6483
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g6530
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vn
sS'block_loop.thisTrialN'
p8388
I0
sg39
F1.2167718965729364
sg34
g752
(S'\x07\xdf\n\x12\x0b"(\x0b\xfeP'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g6408
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'right'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vn
sS'block_loop.thisTrialN'
p8401
I0
sg39
F0.99994383556895627
sg34
g752
(S'\x07\xdf\n\x12\x0b"/\x00e\x90'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g6472
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'left'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g6480
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vn
sS'block_loop.thisTrialN'
p8414
I0
sg39
F1.2000976177723714
sg34
g752
(S'\x07\xdf\n\x12\x0b"5\x00\xf6\x18'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g6949
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'right'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g6956
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.88350584651743702
sg34
g752
(S'\x07\xdf\n\x12\x0b";\x04\x9f\x98'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g6553
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'left'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g6560
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F1.2168733916869314
sg34
g752
(S'\x07\xdf\n\x12\x0b#\x05\x03K\xc0'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6371
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'left'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F1.1167410489006215
sg34
g752
(S'\x07\xdf\n\x12\x0b#\x0b\x06\xf5@'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g6977
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'left'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6643
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g6984
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F1.0001434046134818
sg34
g752
(S'\x07\xdf\n\x12\x0b#\x11\tn\x10'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g7175
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'right'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g7182
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F1.4668641259813739
sg34
g752
(S'\x07\xdf\n\x12\x0b#\x17\t\xc0\x18'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g6553
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'right'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g6560
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F0.98343662456863967
sg34
g752
(S'\x07\xdf\n\x12\x0b#\x1e\x022\x80'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6442
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'right'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F1.033822106433945
sg34
g752
(S'\x07\xdf\n\x12\x0b#$\x02\x88p'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g6679
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'right'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g6687
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6689
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6683
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F1.133468641145555
sg34
g752
(S'\x07\xdf\n\x12\x0b#*\x03\x92\x10'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g7160
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'left'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6666
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g7167
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6666
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g6673
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F1.1333027137397949
sg34
g752
(S'\x07\xdf\n\x12\x0b#0\x06\n\xe0'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g6506
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'left'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g6514
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.98342807160952361
sg34
g752
(S'\x07\xdf\n\x12\x0b#6\x08\x83\xb0'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g6408
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'right'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F0.93319882379728369
sg34
g752
(S'\x07\xdf\n\x12\x0b$\x00\x08\xd9\xa0'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6713
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'left'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6723
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6721
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6717
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F1.4005399197958468
sg34
g752
(S'\x07\xdf\n\x12\x0b$\x06\x089x'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6857
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'right'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6868
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6865
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6868
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F1.0502050144295936
sg34
g752
(S'\x07\xdf\n\x12\x0b$\x0c\x0e\xfb\xf0'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g6523
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'right'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g6530
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F1.1834814990943414
sg34
g752
(S'\x07\xdf\n\x12\x0b$\x13\x01\x01\xd0'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g7398
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'right'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6906
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g7405
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F1.3501718289471683
sg34
g752
(S'\x07\xdf\n\x12\x0b$\x19\x0428'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g7175
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'right'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g7182
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F1.3168001783578802
sg34
g752
(S'\x07\xdf\n\x12\x0b$\x1f\t\xfe\x98'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g7160
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'left'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6666
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g7167
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6666
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g6673
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F1.8500854440608236
sg34
g752
(S'\x07\xdf\n\x12\x0b$&\x00\x13\x88'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g6583
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g6590
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F1.0334779923805399
sg34
g752
(S'\x07\xdf\n\x12\x0b$,\r\xbb\xa0'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6523
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'right'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6483
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6530
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F1.5501767896630554
sg34
g752
(S'\x07\xdf\n\x12\x0b$2\x0e\xc5@'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g6745
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'right'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6723
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g6752
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6717
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F1.1668465639058923
sg34
g752
(S'\x07\xdf\n\x12\x0b$9\x08hX'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g7465
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'right'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6936
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g7472
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F1.0166953760990509
sg34
g752
(S'\x07\xdf\n\x12\x0b%\x03\x0b^('
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g6760
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'right'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6764
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g6768
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6764
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g6771
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.65020649694179156
sg34
g752
(S'\x07\xdf\n\x12\x0b%\t\x0c)H'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g7145
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'left'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g7152
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.99983920436989138
sg34
g752
(S'\x07\xdf\n\x12\x0b%\x0f\x07C`'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g6371
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'left'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F1.0001180308354378
sg34
g752
(S'\x07\xdf\n\x12\x0b%\x15\x07\xd3\xe8'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g6730
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'left'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6706
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g6737
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6706
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6700
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F1.0501451437157812
sg34
g752
(S'\x07\xdf\n\x12\x0b%\x1b\x08dp'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g7398
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'right'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6906
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g7405
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.86679935157189902
sg34
g752
(S'\x07\xdf\n\x12\x0b%!\t\xac\x90'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g6730
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'left'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6706
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g6737
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6706
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6700
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.85010568606412562
sg34
g752
(S"\x07\xdf\n\x12\x0b%'\x08\x1a8"
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6391
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'left'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F0.93352583193245664
sg34
g752
(S'\x07\xdf\n\x12\x0b%-\x06I`'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g6679
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'right'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g6687
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6689
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6683
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.71681238057863084
sg34
g752
(S'\x07\xdf\n\x12\x0b%3\x05\xa98'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g6829
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6619
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g6836
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6619
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g6626
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F0.93344571921534225
sg34
g752
(S'\x07\xdf\n\x12\x0b%9\x01\xf4\x00'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g7398
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'right'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6906
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g7405
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.66686138903514802
sg34
g752
(S'\x07\xdf\n\x12\x0b&\x03\x01S\xd8'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g6760
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'right'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6771
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g6768
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6764
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g6771
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F1.1834746567274124
sg34
g752
(S'\x07\xdf\n\x12\x0b&\x08\x0c)H'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g7145
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'left'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g7152
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.73327597148727364
sg34
g752
(S'\x07\xdf\n\x12\x0b&\x0f\x00\x17p'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g6760
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'left'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6764
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g6768
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6764
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6771
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F0.96685186674039869
sg34
g752
(S'\x07\xdf\n\x12\x0b&\x14\x0b\xdf\x10'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g6632
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'right'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6636
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g6640
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.7668719947041609
sg34
g752
(S'\x07\xdf\n\x12\x0b&\x1a\x0b\xf6\x80'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g7145
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'left'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g7152
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F0.80032603879953967
sg34
g752
(S'\x07\xdf\n\x12\x0b& \x08\xb6x'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g6932
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'left'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6936
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g6940
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F0.66683259407272999
sg34
g752
(S'\x07\xdf\n\x12\x0b&&\x061\xf0'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g6391
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'right'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F1.0001950074674824
sg34
g752
(S'\x07\xdf\n\x12\x0b&,\x01\xc18'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6662
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'right'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6673
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6670
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6666
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6673
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F0.86675174009906186
sg34
g752
(S'\x07\xdf\n\x12\x0b&2\x02\x17('
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g7465
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'right'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6936
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g7472
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F0.7168263504127026
sg34
g752
(S'\x07\xdf\n\x12\x0b&8\x00\xbfh'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g6442
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'right'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.63346835604716034
sg34
g752
(S"\x07\xdf\n\x12\x0b'\x01\x0c\r\xf0"
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g6538
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'left'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g6545
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.88351525477264659
sg34
g752
(S"\x07\xdf\n\x12\x0b'\x07\x06\xe9\x88"
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g6523
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'right'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6483
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g6530
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F0.68355590983810544
sg34
g752
(S"\x07\xdf\n\x12\x0b'\r\x05\xd0H"
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g6425
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'left'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F0.81685919377559912
sg34
g752
(S"\x07\xdf\n\x12\x0b'\x13\x01_\x90"
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g6598
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'left'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g6606
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F0.70027095774275949
sg34
g752
(S"\x07\xdf\n\x12\x0b'\x18\x0eW\xe0"
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g6371
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'right'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g6380
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F1.100099556443638
sg34
g752
(S"\x07\xdf\n\x12\x0b'\x1e\nd("
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6857
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'right'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6868
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6865
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6861
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g6868
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F0.95010973446460412
sg34
g752
(S"\x07\xdf\n\x12\x0b'$\x0cc\xe0"
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g6489
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'left'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g6497
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F0.81678820421529963
sg34
g752
(S"\x07\xdf\n\x12\x0b'*\x0c\x028"
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g7398
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'right'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6906
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g7405
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F0.65022531345221068
sg34
g752
(S"\x07\xdf\n\x12\x0b'0\t\xb8H"
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6489
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'right'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6497
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F1.0335210422754244
sg34
g752
(S"\x07\xdf\n\x12\x0b'6\x05\x0c\xf8"
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g6977
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'left'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6643
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g6984
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.78389523423447827
sg34
g752
(S'\x07\xdf\n\x12\x0b(\x00\x06\x16\x98'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g6408
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'right'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g6416
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.63319608685014828
sg34
g752
(S'\x07\xdf\n\x12\x0b(\x06\x03\x18\xf8'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I64
sg56
Vr
sg57
Vn
sg42
I536
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I64
sg55
g11
sg56
Vr
sg45
F2.21
sg42
I536
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I00
sg48
I25
sg47
g516
sg51
F30.359999999999999
sg46
F1
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I81245008
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\xa4p\xfd?\x00\x00\xc0?H\xe1\xba?)\\\xcf?333?\x00\x00\xc0?\\\x8f\xc2?\x8f\xc2u?H\xe1z?\x00\x00\xc0?\xd7\xa3p?\x9a\x99\x99?\xecQ\x18@\x00\x00\xc0?\xaeGa?\x00\x00\x80?=\n\x97?\xcd\xcc\x8c?H\xe1\xba?333?\n\xd7\xa3>\xcd\xcc\xcc>\x85\xebQ?\xa4p\xfd?{\x14.?\xaeG\xa1?\xa4p\xfd?ff\xa6?\xaeG\x01@\x00\x00\x80?\xcd\xcc\x8c?\x00\x00\x00@\xd7\xa3p?q=\xca?{\x14.?\x00\x00 @H\xe1z?\xb8\x1e\x85?\x8f\xc2u?\xecQ8?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S';\xdfmA\xfc\xa99@\x96C#@\xdb\xf9>@\x96Cc@b\x10@@\x87\x16q@\xdd$\x02A\xfe\xd4\x84@b\x10\x10@u\x938@!\xb0Z@\x98n\x96@\xfc\xa9Y@\x87\x16\x11@\xdd$\xc2@\x87\x16A@\x87\x16q@\xee|7@\xbaIT@\x96Cs@\xa8\xc6{@\x87\x16!@!\xb0Z@\xcb\xa1\xe9@\x87\x16\xf9@\xbaI\x9c@b\x10\x00@\xdd$\xb2@\x10X\x01AP\x8d\x07@\xaa\xf1\xd6@/\xddL@/\xdd\x1c@\xa8\xc6k@\xfc\xa9y@b\x10\x00@\xdb\xf9n@u\x93H@\x10X\x9d@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x18B\x00\x00\xb0A\x00\x00\x90A\x00\x00\xe0A\x00\x00\x00B\x00\x00\x10A\x00\x00\x80?\x00\x00\xf8A\x00\x00\x98A\x00\x00\x80A\x00\x00\xf0A\x00\x00\xd0A\x00\x00`A\x00\x00\xe8A\x00\x00\xa0@\x00\x00\xc0A\x00\x00PA\x00\x00\xa8A\x00\x00\x08B\x00\x00\x00@\x00\x00\x00A\x00\x00\x10B\x00\x00\xb8A\x00\x00\xe0@\x00\x00\x04B\x00\x00\xa0A\x00\x00\x0cB\x00\x00\x80@\x00\x00@A\x00\x00\x1cB\x00\x00\xc0@\x00\x00\x14B\x00\x00\xc8A\x00\x00@@\x00\x00pA\x00\x00\xd8A\x00\x00 A\x00\x000A\x00\x00\x88A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00@\x9a\x99\x99?\x00\x00\x80?\xcd\xcc\x8c?33\xb3?ff\xe6?\x9a\x99\x99?33\xf3?\x9a\x99\x99?33\xf3?\x9a\x99\x99?33\xb3?33\xb3?\x9a\x99\xd9?\xcd\xcc\x8c?\xcd\xcc\x8c?\xcd\xcc\x8c?\xcd\xcc\xcc?\x9a\x99\xd9?33\xb3?\x00\x00\xc0?\x00\x00\x80?33\xb3?\x00\x00\x80?ff\xe6?\x00\x00\x80?ff\xa6?\xcd\xcc\x8c?\x9a\x99\x99?ff\xa6?\xcd\xcc\x8c?\x9a\x99\x99?33\xf3?ff\xa6?\x9a\x99\xd9?\x9a\x99\x99?\xcd\xcc\x8c?\x9a\x99\xd9?\x00\x00\x00@ff\xe6?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\x00\x00\x00\x00\x07\x00\x00\x00\x14\x00\x00\x00"\x00\x00\x00\x1c\x00\x00\x00\x0f\x00\x00\x00\x1f\x00\x00\x00\x18\x00\x00\x00\x15\x00\x00\x00\x06\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\x1d\x00\x00\x00\x11\x00\x00\x00\r\x00\x00\x00#\x00\x00\x00\n\x00\x00\x00\'\x00\x00\x00\x03\x00\x00\x00\t\x00\x00\x00\x1a\x00\x00\x00\x12\x00\x00\x00\x02\x00\x00\x00\x17\x00\x00\x00\x10\x00\x00\x00!\x00\x00\x00\x0c\x00\x00\x00$\x00\x00\x00\x04\x00\x00\x00\x0e\x00\x00\x00\x0b\x00\x00\x00\x08\x00\x00\x00\x05\x00\x00\x00\x19\x00\x00\x00\x13\x00\x00\x00\x1b\x00\x00\x00\x16\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g102
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g368
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g256
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g228
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g298
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g326
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g165
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g109
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g319
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g235
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g214
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g312
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g284
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g200
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g305
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g137
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g270
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g193
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g249
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g340
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g116
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g158
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g354
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g263
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g151
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g333
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g242
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g347
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g130
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g186
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g375
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g144
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g361
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g277
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g123
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g207
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g291
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g172
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g179
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g221
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I81245008
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xc0@ff\xa6@\xcd\xcc\x8c@ff\xa6@\x00\x00\xc0@33\xa3@\x9a\x99\xb9@\x9a\x99\xa9@\x00\x00\xc0@\x00\x00\xc0@ff\xa6@\x00\x00\xb0@\x00\x00\xc0@\xcd\xcc\xac@ff\xb6@\x00\x00\xc0@\x00\x00\xc0@ff\xb6@ff\x96@\x00\x00\xc0@ff\x96@\x00\x00\xc0@33\x93@\x00\x00\xc0@\x9a\x99\xa9@\x00\x00\xc0@ff\xb6@\x00\x00\xc0@33s@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@ff\xa6@\x00\x00\xc0@33\x83@\x00\x00\xc0@33s@\x00\x00\xc0@\x00\x00\xc0@\x9a\x99Y@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'\xd6U\x05@d\xc0\xfb?\x0c(\xe2?G*\xc2?k\x8e\xc8?\xdd\x13A@\xb3\xbe\xbb?k\x9a\x89@+\xd0,@)\xf0.@\x16g6@\x06\xf1\x8e?E\xce\x8c?\xe0\xc2\xbb?\xca\x8b\xa8?\x9d\x9a\xd9?\xd0\x01\xc0?J\xec\x8e?\xcd\xbc\x9b?\xe0\xce\x8c?\n\x8c\xa8?\xe8G\x84?\xa2\xb1\xca?\x8f\x07\x80?|\x9f\xb9?\xe1n\xa6?_\xe4\xbd?\xf8@s?;\x8f\xc8?\xdd0\xb3?bHD?\x9c$\xa2?\xa1%b?\xcf\x12\x91?6\x08\x80?\x89\x0eb?\xe6\xc2\xdb?\xb1pf?\xbd\xd0\xac?\xf1[\xb5?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'\x9a\x999@\x00\x00@@\x9a\x99Y@fff@33s@\x9a\x999@\xcd\xcc,@\x00\x00`@\x9a\x99y@ff\x86@\x9a\x99Y@\x00\x00\x80@33\x83@33\x83@\x9a\x99y@33s@\x00\x00`@\x9a\x99Y@fff@333@\xcd\xcc,@\x00\x00`@33\x83@\x9a\x999@33S@\x00\x00@@\x9a\x999@33\x83@\xcd\xccl@fff@\xcd\xcc,@\x9a\x99y@\x9a\x99\x89@\x00\x00`@\xcd\xccl@\x00\x00\x80@33s@fff@\x00\x00`@\x00\x00@@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S"\x00\r\xa0\x04 \xa8'\x03`\xa8'\x03\x80\xc0%\x03\xc0\t\xa0\x04@\x0c\xa0\x04\x80\x05\xa0\x04\x00\x0f\xa0\x04\xc0\xc0%\x03@\r\xa0\x04\xc0\r\xa0\x04\x80/J\r`/J\r`\xc0%\x03 k\x9f\x04\xa0/J\r\xe0\x0c\xa0\x04\x00\n\xa0\x04`\x0f\xa0\x04\xe0\x0e\xa0\x04\xe0\r\xa0\x04 \n\xa0\x04@\n\xa0\x04`\x0b\xa0\x04 \x0b\xa0\x04 \x0e\xa0\x04\xe0\x0f\xa0\x04\xa0\x0b\xa0\x04\xa0\x0f\xa0\x04\xe0\x0b\xa0\x04\xa0\x0c\xa0\x04 \x0c\xa0\x04\xa0\t\xa0\x04`\r\xa0\x04\xa0\r\xa0\x04`\x0c\xa0\x04`\x0e\xa0\x04\xa0\x0e\xa0\x04 \x0f\xa0\x04 Q\xa1\x04"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'!\xb0\x8a@w\xbe\xbb@/\xdd,@u\x93\xc8?u\x93\xa8?^\xba\xb9?b\x10\x00@\xb6\xf3\xbd?\x96C\x03@^\xba\xb9?\xdb\xf9^@\xe9&\xb1?\xe9&\xd1?\x1dZ\xa4?^\xba\xb9?u\x93\xe8?\xa8\xc6\xdb?+\x87\xc6?b\x10@@\xdb\xf9n@B`\x15@\x91\xed\x8c?\xb6\xf3\xdd?+\x87\xa6?u\x93\xc8?\xc5 \x80?\xc9v\x16@\xf0\xa7f?u\x93\xe8?\xe9&\x91?P\x8d\x97?\xa8\xc6\x9b?\xbct3?\xa8\xc6\x9b?\x0e-\xe2?^\xba\x99?\xf8S\xd3?\x1dZ\xa4?\x0e-\xa2?\xe9&\xd1?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I81245008
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'\xa0B\x84\r\x80&\xa1\x04\xc8B\x84\r\xf0B\x84\rP&\xa1\x04\xe0C\x84\r\x80&\xa1\x04@C\x84\r\xc8B\x84\r\x18C\x84\rP&\xa1\x04\xf0B\x84\r\xa0B\x84\r@C\x84\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'\x90\xbe\xc2\x03\xe8\xa1d\x02\x88j\xef\x04He\xef\x048`\xef\x04`n\xef\x04\xe8m\xef\x04\xe0`\xef\x04Pf\xef\x04\xe0c\xef\x04 o\xef\x04HK\xfb\x04\x88M\xfb\x04\x88A\xfb\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g788
sg82
g789
sg83
g793
sg84
g794
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g799
sg82
g800
sg83
g804
sg84
g805
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g755
sg82
g810
sg83
g760
sg84
g814
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g819
sg82
g820
sg83
g824
sg84
g825
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g766
sg82
g830
sg83
g771
sg84
g834
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g799
sg82
g839
sg83
g804
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g788
sg82
g848
sg83
g793
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g777
sg82
g857
sg83
g782
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g743
sg82
g866
sg83
g748
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g819
sg82
g875
sg83
g824
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I81245008
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I81245008
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'\xb8C\x86\r\xc0\n\x9f\x04\xb8C\x86\r\xd0\x15\x86\r\x80\x05\x9f\x04\xc0\n\x9f\x04\x80\x08\x9f\x04\xe0C\x86\r\xe0P\x86\r\xe0C\x86\r\x08D\x86\r\x10Q\x86\r0D\x86\r\xc0\x05\x9f\x04\xd0\x15\x86\rXD\x86\r\x08D\x86\r\x90R\x86\r\x08\x16\x86\rXD\x86\r\xb8C\x86\r@\x16\x86\rXD\x86\r\xa0Q\xa1\x04pQ\x86\r\x80D\x86\r\xa0Q\xa1\x04\xc0\x05\x9f\x04\xc0\n\x9f\x04\x10Q\x86\r\xe0C\x86\r\x80\x08\x9f\x04\xa8D\x86\rx\x16\x86\r\xc0\n\x9f\x04XD\x86\r\xd0\x15\x86\r\xe0P\x86\r\xc0\n\x9f\x04\xf8D\x86\r\x80D\x86\r\x10Q\x86\r\x10F\x86\r\xa0Q\x86\rx\x16\x86\r\xe0C\x86\r\xc0\x05\x9f\x040D\x86\rpQ\x86\r\xf8D\x86\r@Q\x86\r\xd0\x15\x86\r0D\x86\rx\x16\x86\r\xa8D\x86\r\x08D\x86\r@Q\x86\r\xb0\x16\x86\r\x08\x16\x86\r\xa8D\x86\r\xa0Q\xa1\x04HE\x86\r@\x16\x86\r\x10Q\x86\r\xb8C\x86\r\x80D\x86\r@\x16\x86\r\x80\x05\x9f\x04\x08D\x86\r\x08\x16\x86\r\xe0P\x86\r\x80D\x86\r\xe8E\x86\r\x08D\x86\rpQ\x86\r\x80\x08\x9f\x04\x00Q\xa1\x04\xb8C\x86\r\xd0\x15\x86\r\x08\x16\x86\r\x80\x08\x9f\x04\xd0\x15\x86\r \x17\x86\rpQ\x86\r\xa8D\x86\r\xc0\n\x9f\x04\xf8D\x86\r@\x16\x86\rXD\x86\r\x80\x08\x9f\x04\x10Q\x86\r\xc0\x05\x9f\x04\x10Q\x86\r\xd0\x15\x86\r E\x86\r\xc0\x05\x9f\x04\xc0R\x86\rpE\x86\r\xe8\x16\x86\rx\x16\x86\r \x17\x86\r\xb8C\x86\r\x80\x05\x9f\x04\xa0Q\xa1\x04\x08\x16\x86\r\x00R\x86\r\xe0P\x86\r0D\x86\r\x80D\x86\rpQ\x86\r@\x16\x86\rpQ\x86\r@Q\x86\r\x80\x08\x9f\x04\xe0P\x86\rx\x16\x86\r\xe0P\x86\r\x80D\x86\r\xe0C\x86\r@\x16\x86\r\xa0Q\xa1\x040D\x86\rx\x16\x86\r\xc0\n\x9f\x04\xa0Q\xa1\x04\xa8D\x86\r\xd0\x15\x86\r\x80\x08\x9f\x040D\x86\r\xa8D\x86\r\xa0Q\xa1\x04\xe0P\x86\r\xa8D\x86\r\x80\x08\x9f\x04pQ\x86\r0D\x86\r\x98E\x86\r@Q\x86\rXD\x86\r E\x86\r\xa8D\x86\r\xe0C\x86\rXD\x86\r\x80\x05\x9f\x04\x80\x08\x9f\x04@Q\x86\r\x80D\x86\r0R\x86\r\x90R\x86\r\x00Q\xa1\x04\xe8E\x86\r\xa0Q\xa1\x04@\x16\x86\r\x08\x16\x86\r\x10Q\x86\rXD\x86\r\x08\x16\x86\r\x08D\x86\r\x80D\x86\r\xe0P\x86\rpQ\x86\r\xd0\x15\x86\r\xc0\x05\x9f\x04\x08\x16\x86\r\xe0C\x86\r\xc0\n\x9f\x04\xc0\x05\x9f\x04\x10F\x86\r0R\x86\r\x90R\x86\r\xe0P\x86\r\x00Q\xa1\x040D\x86\r\x80\x05\x9f\x04\x08D\x86\rXD\x86\r\xc0\x05\x9f\x04\xd0Q\x86\r\x80D\x86\rx\x16\x86\r\x08\x16\x86\r@Q\x86\r\xb8C\x86\r\x10F\x86\r\x08\x16\x86\r\x80D\x86\rHE\x86\r\x08D\x86\r\x80\x05\x9f\x04`R\x86\r\x08D\x86\rHE\x86\r0D\x86\r@\x16\x86\r@Q\x86\r@\x16\x86\r\x00Q\xa1\x04\xc0\x05\x9f\x04\x10Q\x86\rpQ\x86\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S' \r\xa0\x04\xe0\xc3L\r\xc0\xcdL\r\xc0PL\r\x80\xc8L\r\x00\xc2L\r`\xb8\xa0\x04@\xba\xa0\x04\x80\xbc\xa0\x04\xa0\xb8\xa0\x04\xa0\xbb\xa0\x04 R\xa1\x04\xa0\xba\xa0\x04\x00\xb9\xa0\x04\xe0\xb9\xa0\x04`\xb9\xa0\x04\xc0\xba\xa0\x04\xe0\xba\xa0\x04 \xb8\xa0\x04@\xb8\xa0\x04\xe0\xbc\xa0\x04\x00\t\x9f\x04@\xbc\xa0\x04\xc0\xbb\xa0\x04\xe0\xb8\xa0\x04`\xbb\xa0\x04\xc0\xb9\xa0\x04\xe0\xbd\xa0\x04\x80\xbb\xa0\x04\x80\xbd\xa0\x04\x80\xb6\xa0\x04`\xb6\xa0\x04`\xba\xa0\x04`\xb3\xa0\x04\xc0\xb8\xa0\x04@\xbb\xa0\x04\x80\xba\xa0\x04`\xbd\xa0\x04\x00\xbb\xa0\x04\xa0\xb9\xa0\x04\xa0\xc2L\r\xe0\xef$\x03\xe0\xee$\x03`\xef$\x03 \xba\xa0\x04\x80\xea$\x03\x80\xef$\x03 \xef$\x03 \xc6F\r`\xc7F\r@\xcbF\r\x00\xc7F\r\xa0\xc3F\r\x80\xc7F\r`\xccF\r\x80\xcbF\r\xe0\xc7F\r@\xcdF\r \xcbF\r\x80\xc3F\r`\xcdF\r\xe0\xcfF\r\xc0\xc2F\r\x00\xccF\r\x80\xccF\r\xa0\xc2F\r\xc0\xcbF\r\x80\xc6F\r\xe0\xc2F\r\xa0\xc7F\r@\xc6F\r\xa0\xccF\r \xcdF\r`\xc6F\r\xe0\xcbF\r@\xc0F\r \xc7F\r`\xc2F\r\xe0\xc6F\r\x80\xc2F\r\x00\xc6F\r\xc0\xc7F\r@\xc3F\r\x00\xc3F\r\x00\xcbF\r@\xb9\xa0\x04 \xc0F\r\xa0\xc6F\r\x80\xb0I\r\xe0\xb0I\r\xc0\xb0I\r\xa0\xb2I\r\x00\xbbI\r@\xb3I\r\x00\xb9I\r@\xb1I\r\xe0\xb2I\r\x80a&\x03\x00\xee$\x03\xe0\x84\xae\x04`\x84\xae\x04 \x84\xae\x04\xc0\x80\xae\x04@\x81\xae\x04 \x81\xae\x04\xe0\x82\xae\x04\x00\x82\xae\x04\xe0\x81\xae\x04\xe0\x80\xae\x04`\x83\xae\x04`\x81\xae\x04`\x85\xae\x04\x80\x82\xae\x04\xa0\x81\xae\x04\x00\x85\xae\x04\xe0\x85\xae\x04\x80\x85\xae\x04@\x86\xae\x04\xc0\x82\xae\x04\xc0\x81\xae\x04\x80\x86\xae\x04\x00\x86\xae\x04\x00\x87\xae\x04 \x87\xae\x04\x00\x84\xae\x04`\x82\xae\x04\x80\x84\xae\x04 \x85\xae\x04`\x86\xae\x04@\x85\xae\x04@\x84\xae\x04 \x88\xae\x04\xa0\x88\xae\x04\x80\x87\xae\x04 \x83\xae\x04\xe0\x88\xae\x04@\x83\xae\x04\x00\x89\xae\x04`\x88\xae\x04\xc0\x86\xae\x04\x00\x88\xae\x04\x00\x81\xae\x04\xe0\x89\xae\x04\xa0\x86\xae\x04@\x82\xae\x04 \x8a\xae\x04\xa0\x89\xae\x04\x80\x89\xae\x04\xc0\x85\xae\x04\x80\x88\xae\x04`\x87\xae\x04\xc0\x89\xae\x04\xc0\x88\xae\x04\xa0\x84\xae\x04\xa0\x85\xae\x04\xe0\x87\xae\x04\xa0\x82\xae\x04\xa0\x80\xae\x04\xa0\x8a\xae\x04`\x8a\xae\x04\x00\x8a\xae\x04@\x8a\xae\x04\xc0\x84\xae\x04\x80\x8a\xae\x04\xc0\x8a\xae\x04 \x8b\xae\x04\x00\x8b\xae\x04\xe0\x86\xae\x04@\x8b\xae\x04`\x8b\xae\x04\x80\x8b\xae\x04\xe0\x8b\xae\x04\xc0\x8b\xae\x04@\x88\xae\x04\x00\x8c\xae\x04`\x8c\xae\x04@\x8c\xae\x04\xa0\x83\xae\x04\xc0\x8c\xae\x04\xa0\x8c\xae\x04\xe0\x83\xae\x04\xe0\x8c\xae\x04\x00\x8d\xae\x04 \x8d\xae\x04@\x8d\xae\x04\xa0\x8d\xae\x04\x80\x8d\xae\x04\xe0\x8d\xae\x04\x00\x8e\xae\x04\xa0\x8b\xae\x04 \x86\xae\x04`\x8e\xae\x04@\x8e\xae\x04\xc0\x87\xae\x04\xc0\x8e\xae\x04\xa0\x8e\xae\x04\x80\x8c\xae\x04\xe0\x8e\xae\x04\x00\x8f\xae\x04 \x8f\xae\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'\r\x8e\xc8?\x12\xb1\x8a?\x8d[\xb5?\x97\xf0\xae?_\x11\xe0?B\x8f\xc8?l\xac\xea?\x1c\x8c\x88?\x0f]\x95?\xc6\xb0\xca?^l\xa6?\xd2\xdb\xdd?|\\\xb5?;(\x82?\xf8)\xc2?MY\xb5?}\xe0\x9d?+\x03\xc0?\x9a$\xa2?\xf8h\x95?\xf9\x8f\xe8?U\xa8\xaa?\xd8k\xa6?(\x07\x80?\xeaj\xc6?\x99\xc9\xcc?\x80\xfcn?u\x81w?\xb0\xae\x8a?8m\x86?l3\x82?\xd7\xf5\xae?.\x13\xb1?\x83k\xc6?}\x9a\x88?~G\x84?7Y\xb5?N\x16\x91?qF\xa4?\x17\xbc\xaa?\x02d\x86?\xe9\xe3\xdd?}\xe4\x9d?\x9b\xf2\x8e?^\x17\xd1?\xcd)\x82?\xf2\xa7Y?\x04\x8d\xc8?L%\x82?\xff\xce\xdb?U\xbf\x9b?\xf3\xbc\x1b@\xa3J\xa4?\xc7\x9f\xd9?\xe8h\x95?\xd2%\x82?~\xd2\xcc?\xbf%\x82?=\xae\xca?\x1c\x8f\xc8?T\x1fQ?jbU?\xd8G\xa4?8\xe1\x9d?\xd2\x8b\xd7?R\xfb??\x08\x0f@?\xe0{\x97?\xa4?s?Lu\xa6?\x99G\x84?\x88\x0e\x91?\xd9\xae\x8a?\x1ewf?\xd5\xeb\x9d?\x97\x05\xa0?\xd4\xc1\xbb?\xb7?s?\x87H\xa4?~\x9c\x99?@h\x86?\xd04\x03@\x0e\x07\x80?\x06\xbbj?\x12J\xc4?\xd2)\x82?:nf?g+b?G(\x82?\xcd\x8b\x88?\xb7X\x95?\x91\x90H?O\xb1j?\xe4\x1dQ?\xfa\x94H?\x11\xf2L?\xf8YU?\xab?3?#\xd0\x8c?\xf0\xf4\x8e?\x83\xfbn?\x19n\x86?Y\xe9]?\x1c\xc9;?\xb1\x02\xc0?\xd7vf?\xd1\xe3\x9d?\x03&\xe2?\xbcbf?,\x0c@?\ttf?-\x8e\x88?FK\xa4?J+b?\x01\x1aQ?\xc6(\x82?\x16mf?]\xc8L?N\xfdn? \xd9L?\xc3\x877?.cU?M(b?\xd8\xe4]?\xab\xc9;?\xf1E\x84?T\xa1Y?\x19\xf1L?\xb5\xc7;?\x9f\x83w?~\xfe.?\x85\xb8j?\xb3\xb9j?\xa9sf?\xc0\\U?@\x90H?N\xb7j?\x19\\\x95?m\x8c\x88?\x98\x8e\x88?\xabKD??)"?\xb8\xa7Y?1\xd1\x8c?\xfb\xf6.?w\x03\x80?\xe4.3?\x94G\x84?\xb9\xe5]?\x0b\x0e@?mw\xa6?\x19B3?\xf28\xb3?@\x8b\x88?)\xeb]?XJD?>\xc2{?\xc8\x17Q?&QU?R\xb0j?Q~w?:\x1eQ?B\xf2\x8e?\xd4\xff\x9f?\xbe\x0b@?T{\xb7?\xbc\x17/?cI\xe4?\x15\xae\xca?\xc3[\x95?\xb3\'\x82?m\x8f\x88?\xc8@s?\x10\x0c@?\x8e\xa3Y?\xd0\xddL?j\x0c@?\xb7\xe2\x9d?\x8f\xa0*?p\x05\x80?)\xbb{?f\xbe\xdb?A\xcc{?\x8eZ\x95?\x1e\x03\xa0?\xa1:D?\x86J\xa4?\x9f\x867?\x0e\x7f7?9\x16\xb1?\xfb\xf6.?f@3?\xf1\xc4;?"\x10@?\r\xc7;?G\xc5;?\x13pf?\xca\xc8;?\xd9\xf9n?\xdf\x1dQ?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'0H\xfb\x04\xf8@\xfb\x04\x98Y\xf1\x04\x10T\xf1\x04\xc0^\xf1\x04\x90[\xf1\x04\xf0X\xf1\x040[\xf1\x04\xd0T\xf1\x04(Q\xf1\x040^\xf1\x04\x80Y\xf1\x04HX\xf1\x04PY\xf1\x04\xd0]\xf1\x04\x88]\xf1\x04\xf8Y\xf1\x04\xe0S\xf1\x04pW\xf1\x04\x18^\xf1\x04\x80_\xf1\x04H^\xf1\x04\x98S\xf1\x04\xb8T\xf1\x04\xc0U\xf1\x04\x00X\xf1\x04h\\\xf1\x04x[\xf1\x048\\\xf1\x04P_\xf1\x04\xb0_\xf1\x04`^\xf1\x04\xc8_\xf1\x04\xa8^\xf1\x048_\xf1\x04\xd0Q\xf1\x04@]\xf1\x04\x00[\xf1\x04HR\xf1\x048V\xf1\x04\xc0X\xf1\x04PV\xf1\x04H[\xf1\x04pZ\xf1\x04\xd0Z\xf1\x04 Y\xf1\x04\x18X\xf1\x04\xe8T\xf1\x04XZ\xf1\x04\xe0_\xf1\x04\x88W\xf1\x04xU\xf1\x04\x08_\xf1\x04\x98V\xf1\x04\xc0R\xf1\x04(T\xf1\x04\xf0^\xf1\x04\x88Z\xf1\x04\x98_\xf1\x04\x98\t\xf4\x04\xf8\x0c\xf4\x04\xf8\x06\xf4\x04x\x0b\xf4\x04\xf0\x0e\xf4\x04\x88\x01\xf4\x04\x98\x00\xf4\x048\x03\xf4\x04\x88\x04\xf4\x04\x10\x04\xf4\x04\xc8\x0c\xf4\x04\xd8\x02\xf4\x04H\x05\xf4\x04\xa0\x07\xf4\x04\x88\r\xf4\x04\x18\x05\xf4\x04\xf8\x03\xf4\x04H\x08\xf4\x04H\x02\xf4\x04\xb8\x01\xf4\x04\xa8\x0e\xf4\x040\x05\xf4\x04\x80\x00\xf4\x04p\x01\xf4\x04 \x00\xf4\x04`\x0b\xf4\x04\xc8\x06\xf4\x04\xc0\x0b\xf4\x04(\x01\xf4\x04\xb0\x00\xf4\x040\x0b\xf4\x04@\x01\xf4\x04(\r\xf4\x04\x08\x03\xf4\x04\xa8\x08\xf4\x04`\x05\xf4\x04\xa8\x02\xf4\x04\xf0\x0b\xf4\x04h\x0c\xf4\x04\x00\x05\xf4\x04\xc0\x05\xf4\x04\x00\x08\xf4\x04\x90\x0e\xf4\x04\xe8\x01\xf4\x04\x08\t\xf4\x04(\x04\xf4\x04\x80\x03\xf4\x04\x18\x02\xf4\x04\xb8\n\xf4\x04\xe8\r\xf4\x04h\x06\xf4\x04\x10\n\xf4\x04\xb8\x07\xf4\x04P\x03\xf4\x04\xe0\x03\xf4\x04\x18\x08\xf4\x04`\x02\xf4\x04p\x07\xf4\x04X\x07\xf4\x04@\r\xf4\x04h\x0f\xf4\x04\x80\x06\xf4\x04\xd8\x08\xf4\x04\xa0\n\xf4\x04H\x0e\xf4\x04\xe8\x04\xf4\x04X\r\xf4\x04\x80\x0c\xf4\x04\x80\t\xf4\x04\x18\x0e\xf4\x04 \x03\xf4\x04\xb0\x0f\xf4\x04\x10\x01\xf4\x04\x08\x0c\xf4\x04 \x0f\xf4\x04\xe0\x00\xf4\x04\x08\x0f\xf4\x048\x0c\xf4\x04\xa8\x0b\xf4\x04\x88\n\xf4\x04X\x01\xf4\x04\xb0\x03\xf4\x04\x98\x03\xf4\x04\xf0\x08\xf4\x04\xb0\x0c\xf4\x04P\t\xf4\x04h\x03\xf4\x04\x88\x07\xf4\x04p\x04\xf4\x04P\x0f\xf4\x04x\x0e\xf4\x04\xb0\x06\xf4\x04\xc0\x0e\xf4\x04 \t\xf4\x04\xd8\x0e\xf4\x04`\x0e\xf4\x04\xc8\x0f\xf4\x04\xd0\r\xf4\x04x\x08\xf4\x04\xd0\n\xf4\x04\x00\x0b\xf4\x040\x02\xf4\x04\x90\x0b\xf4\x04\x00\x02\xf4\x04\xc8\t\xf4\x04\xb8\x04\xf4\x04(\x07\xf4\x04`\x08\xf4\x04\xe0\x0f\xf4\x04\x98\x06\xf4\x04\xf8\t\xf4\x04\xe0\t\xf4\x04H\x0b\xf4\x04\x80\x0f\xf4\x04X\n\xf4\x04\xd8\x0b\xf4\x04\xd0\x07\xf4\x04\x98\x0c\xf4\x04 \x0c\xf4\x04\xe0\x06\xf4\x04\xa0\r\xf4\x04\x90\x02\xf4\x04\xb0\t\xf4\x04P\x0c\xf4\x04\xf8\x00\xf4\x04\x10\r\xf4\x04\xc0\x02\xf4\x04X\x04\xf4\x04\xb8\r\xf4\x04@\n\xf4\x04p\r\xf4\x04@\x04\xf4\x048\x00\xf4\x040\x08\xf4\x04P\x00\xf4\x04(\n\xf4\x04\xe0\x0c\xf4\x04\xd0\x04\xf4\x04\xd0\x01\xf4\x04h\x00\xf4\x04\x18\x0b\xf4\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g899
sg894
g932
sg908
g909
sg903
g939
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g951
sg894
g947
sg908
g958
sg903
g955
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g968
sg894
g964
sg908
g975
sg903
g972
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g998
sg894
g994
sg908
g1005
sg903
g1002
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g1015
sg894
g1011
sg908
g1022
sg903
g1019
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g1015
sg894
g1045
sg908
g1022
sg903
g1052
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1064
sg894
g1060
sg908
g1071
sg903
g1068
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g1081
sg894
g1077
sg908
g1088
sg903
g1085
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g1098
sg894
g1094
sg908
g1105
sg903
g1102
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g1115
sg894
g1111
sg908
g1122
sg903
g1119
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g951
sg894
g1128
sg908
g958
sg903
g1135
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1147
sg894
g1143
sg908
g1154
sg903
g1151
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g1064
sg894
g1160
sg908
g1071
sg903
g1167
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g1185
sg894
g1175
sg908
g1179
sg903
g1183
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1196
sg894
g1192
sg908
g1203
sg903
g1200
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1147
sg894
g1143
sg908
g1154
sg903
g1151
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g1239
sg894
g1235
sg908
g1246
sg903
g1243
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1147
sg894
g1143
sg908
g1154
sg903
g1151
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g1269
sg894
g1265
sg908
g1276
sg903
g1273
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g1286
sg894
g1282
sg908
g1293
sg903
g1290
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1303
sg894
g1299
sg908
g1310
sg903
g1307
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g1269
sg894
g1265
sg908
g1276
sg903
g1273
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1115
sg894
g1111
sg908
g1122
sg903
g1119
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1081
sg894
g1355
sg908
g1088
sg903
g1362
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1015
sg894
g1045
sg908
g1022
sg903
g1052
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g998
sg894
g1383
sg908
g1005
sg903
g1390
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1402
sg894
g1398
sg908
g1409
sg903
g1406
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1419
sg894
g1415
sg908
g1426
sg903
g1423
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g919
sg894
g1432
sg908
g926
sg903
g1439
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1147
sg894
g1447
sg908
g1154
sg903
g1454
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g951
sg894
g947
sg908
g958
sg903
g955
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1032
sg894
g1475
sg908
g1039
sg903
g1482
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g919
sg894
g1432
sg908
g926
sg903
g1439
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1303
sg894
g1299
sg908
g1310
sg903
g1307
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g1081
sg894
g1077
sg908
g1088
sg903
g1085
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1419
sg894
g1542
sg908
g1426
sg903
g1549
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g951
sg894
g1128
sg908
g958
sg903
g1135
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g1419
sg894
g1415
sg908
g1426
sg903
g1423
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1015
sg894
g1011
sg908
g1022
sg903
g1019
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g1115
sg894
g1596
sg908
g1122
sg903
g1603
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g1098
sg894
g1611
sg908
g1105
sg903
g1618
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g1286
sg894
g1282
sg908
g1293
sg903
g1290
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1185
sg894
g1652
sg908
g1179
sg903
g1659
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g951
sg894
g947
sg908
g958
sg903
g955
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1098
sg894
g1094
sg908
g1105
sg903
g1102
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g1419
sg894
g1542
sg908
g1426
sg903
g1549
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1402
sg894
g1398
sg908
g1409
sg903
g1406
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g1064
sg894
g1160
sg908
g1071
sg903
g1167
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1185
sg894
g1175
sg908
g1179
sg903
g1183
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g998
sg894
g1383
sg908
g1005
sg903
g1390
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1196
sg894
g1758
sg908
g1203
sg903
g1765
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1402
sg894
g1773
sg908
g1409
sg903
g1780
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1269
sg894
g1788
sg908
g1276
sg903
g1795
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1015
sg894
g1011
sg908
g1022
sg903
g1019
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1239
sg894
g1816
sg908
g1246
sg903
g1823
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1081
sg894
g1077
sg908
g1088
sg903
g1085
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g899
sg894
g932
sg908
g909
sg903
g939
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1303
sg894
g1857
sg908
g1310
sg903
g1864
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1239
sg894
g1816
sg908
g1246
sg903
g1823
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g968
sg894
g964
sg908
g975
sg903
g972
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1064
sg894
g1060
sg908
g1071
sg903
g1068
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1196
sg894
g1758
sg908
g1203
sg903
g1765
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1303
sg894
g1299
sg908
g1310
sg903
g1307
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1402
sg894
g1773
sg908
g1409
sg903
g1780
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g1064
sg894
g1160
sg908
g1071
sg903
g1167
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1286
sg894
g1976
sg908
g1293
sg903
g1983
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g998
sg894
g994
sg908
g1005
sg903
g1002
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g968
sg894
g2004
sg908
g975
sg903
g2011
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g899
sg894
g932
sg908
g909
sg903
g939
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g951
sg894
g947
sg908
g958
sg903
g955
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1196
sg894
g1192
sg908
g1203
sg903
g1200
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g998
sg894
g994
sg908
g1005
sg903
g1002
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g951
sg894
g1128
sg908
g958
sg903
g1135
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1269
sg894
g1265
sg908
g1276
sg903
g1273
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g1286
sg894
g1976
sg908
g1293
sg903
g1983
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1402
sg894
g1773
sg908
g1409
sg903
g1780
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g919
sg894
g1432
sg908
g926
sg903
g1439
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g899
sg894
g932
sg908
g909
sg903
g939
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1239
sg894
g1235
sg908
g1246
sg903
g1243
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1147
sg894
g1447
sg908
g1154
sg903
g1454
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g998
sg894
g1383
sg908
g1005
sg903
g1390
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1081
sg894
g1077
sg908
g1088
sg903
g1085
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1115
sg894
g1596
sg908
g1122
sg903
g1603
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g1081
sg894
g1355
sg908
g1088
sg903
g1362
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g951
sg894
g1128
sg908
g958
sg903
g1135
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g919
sg894
g1432
sg908
g926
sg903
g1439
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1115
sg894
g1596
sg908
g1122
sg903
g1603
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1286
sg894
g1976
sg908
g1293
sg903
g1983
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g1115
sg894
g1596
sg908
g1122
sg903
g1603
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1239
sg894
g1816
sg908
g1246
sg903
g1823
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g1419
sg894
g1415
sg908
g1426
sg903
g1423
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g1269
sg894
g1265
sg908
g1276
sg903
g1273
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g968
sg894
g2004
sg908
g975
sg903
g2011
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1269
sg894
g1788
sg908
g1276
sg903
g1795
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g1196
sg894
g1192
sg908
g1203
sg903
g1200
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1064
sg894
g1060
sg908
g1071
sg903
g1068
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1032
sg894
g1475
sg908
g1039
sg903
g1482
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1098
sg894
g1611
sg908
g1105
sg903
g1618
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g1303
sg894
g1857
sg908
g1310
sg903
g1864
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1286
sg894
g1282
sg908
g1293
sg903
g1290
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g1239
sg894
g1816
sg908
g1246
sg903
g1823
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g1286
sg894
g1976
sg908
g1293
sg903
g1983
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g1185
sg894
g1175
sg908
g1179
sg903
g1183
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g998
sg894
g994
sg908
g1005
sg903
g1002
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1032
sg894
g1475
sg908
g1039
sg903
g1482
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1419
sg894
g1415
sg908
g1426
sg903
g1423
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1032
sg894
g1475
sg908
g1039
sg903
g1482
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1303
sg894
g1299
sg908
g1310
sg903
g1307
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1015
sg894
g1011
sg908
g1022
sg903
g1019
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1239
sg894
g1235
sg908
g1246
sg903
g1243
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1269
sg894
g1265
sg908
g1276
sg903
g1273
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1098
sg894
g1611
sg908
g1105
sg903
g1618
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1419
sg894
g1415
sg908
g1426
sg903
g1423
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1269
sg894
g1788
sg908
g1276
sg903
g1795
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1402
sg894
g1773
sg908
g1409
sg903
g1780
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g951
sg894
g1128
sg908
g958
sg903
g1135
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g998
sg894
g994
sg908
g1005
sg903
g1002
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g1098
sg894
g1094
sg908
g1105
sg903
g1102
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1402
sg894
g1398
sg908
g1409
sg903
g1406
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1269
sg894
g1788
sg908
g1276
sg903
g1795
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g1402
sg894
g1398
sg908
g1409
sg903
g1406
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g998
sg894
g1383
sg908
g1005
sg903
g1390
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g1286
sg894
g1282
sg908
g1293
sg903
g1290
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1098
sg894
g1611
sg908
g1105
sg903
g1618
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g1147
sg894
g1143
sg908
g1154
sg903
g1151
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1185
sg894
g1652
sg908
g1179
sg903
g1659
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1147
sg894
g1143
sg908
g1154
sg903
g1151
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g919
sg894
g1432
sg908
g926
sg903
g1439
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g1402
sg894
g1398
sg908
g1409
sg903
g1406
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g1015
sg894
g1045
sg908
g1022
sg903
g1052
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1147
sg894
g1447
sg908
g1154
sg903
g1454
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g968
sg894
g2004
sg908
g975
sg903
g2011
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g998
sg894
g1383
sg908
g1005
sg903
g1390
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g1185
sg894
g1652
sg908
g1179
sg903
g1659
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g1303
sg894
g1857
sg908
g1310
sg903
g1864
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1081
sg894
g1355
sg908
g1088
sg903
g1362
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1185
sg894
g1175
sg908
g1179
sg903
g1183
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g968
sg894
g964
sg908
g975
sg903
g972
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g1402
sg894
g1773
sg908
g1409
sg903
g1780
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g1269
sg894
g1788
sg908
g1276
sg903
g1795
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1239
sg894
g1235
sg908
g1246
sg903
g1243
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1196
sg894
g1192
sg908
g1203
sg903
g1200
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1081
sg894
g1077
sg908
g1088
sg903
g1085
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g1147
sg894
g1447
sg908
g1154
sg903
g1454
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g1196
sg894
g1758
sg908
g1203
sg903
g1765
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1064
sg894
g1160
sg908
g1071
sg903
g1167
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1303
sg894
g1857
sg908
g1310
sg903
g1864
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1286
sg894
g1976
sg908
g1293
sg903
g1983
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g951
sg894
g947
sg908
g958
sg903
g955
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1115
sg894
g1111
sg908
g1122
sg903
g1119
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1196
sg894
g1758
sg908
g1203
sg903
g1765
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g1015
sg894
g1045
sg908
g1022
sg903
g1052
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g1115
sg894
g1111
sg908
g1122
sg903
g1119
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g1419
sg894
g1542
sg908
g1426
sg903
g1549
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1081
sg894
g1355
sg908
g1088
sg903
g1362
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1185
sg894
g1652
sg908
g1179
sg903
g1659
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g968
sg894
g2004
sg908
g975
sg903
g2011
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g1098
sg894
g1094
sg908
g1105
sg903
g1102
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g968
sg894
g964
sg908
g975
sg903
g972
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1064
sg894
g1060
sg908
g1071
sg903
g1068
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g1147
sg894
g1447
sg908
g1154
sg903
g1454
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g1115
sg894
g1111
sg908
g1122
sg903
g1119
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1032
sg894
g1475
sg908
g1039
sg903
g1482
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1303
sg894
g1299
sg908
g1310
sg903
g1307
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1419
sg894
g1542
sg908
g1426
sg903
g1549
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1196
sg894
g1758
sg908
g1203
sg903
g1765
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g1185
sg894
g1652
sg908
g1179
sg903
g1659
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g899
sg894
g932
sg908
g909
sg903
g939
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1419
sg894
g1542
sg908
g1426
sg903
g1549
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g1196
sg894
g1192
sg908
g1203
sg903
g1200
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g1303
sg894
g1857
sg908
g1310
sg903
g1864
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1015
sg894
g1045
sg908
g1022
sg903
g1052
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g1064
sg894
g1060
sg908
g1071
sg903
g1068
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g968
sg894
g964
sg908
g975
sg903
g972
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1098
sg894
g1611
sg908
g1105
sg903
g1618
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1064
sg894
g1160
sg908
g1071
sg903
g1167
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1015
sg894
g1011
sg908
g1022
sg903
g1019
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g1098
sg894
g1094
sg908
g1105
sg903
g1102
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1239
sg894
g1816
sg908
g1246
sg903
g1823
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g1185
sg894
g1175
sg908
g1179
sg903
g1183
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1239
sg894
g1235
sg908
g1246
sg903
g1243
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g968
sg894
g2004
sg908
g975
sg903
g2011
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g1115
sg894
g1596
sg908
g1122
sg903
g1603
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g1081
sg894
g1355
sg908
g1088
sg903
g1362
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1286
sg894
g1282
sg908
g1293
sg903
g1290
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I81245008
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'\x80\x8e\xae\x04\xd8F\xd1\r\xc0\x8f\xae\x04\xa0\xfa\xd0\r\x18H\xd1\rp\x07\xd1\r\xa0\x8f\xae\x04\x00G\xd1\r\xd8\xfa\xd0\r\xb8\xfb\xd0\r\xa0\x07\xd1\r\x80\x8e\xae\x04\xa0\x07\xd1\r \t\xd1\rPG\xd1\r\xa0\xfa\xd0\r\xb8H\xd1\r\x10\xfb\xd0\r\xa0\xfa\xd0\rxG\xd1\rp\x07\xd1\r P\xd1\r\x00G\xd1\rxG\xd1\r\xd8F\xd1\r\xa0G\xd1\rp\x07\xd1\r\xd8\xfa\xd0\r(G\xd1\rPG\xd1\r\xd0\x07\xd1\r\xe0\x8f\xae\x04\xa0\x8f\xae\x04 P\xd1\r\x80\x8e\xae\x04H\xfb\xd0\r0I\xd1\rH\xfb\xd0\r\xa0\x8f\xae\x04\x10\xfb\xd0\r\x18H\xd1\r\xd8\xfa\xd0\r\xa0\xfa\xd0\r\xd8\xfa\xd0\r\xa0\xfa\xd0\rPG\xd1\r\x00\x08\xd1\r\xa0\xfa\xd0\r\xe0\x8f\xae\x04\xc0\x8f\xae\x04\xd8F\xd1\r\xd8\xfa\xd0\r\x00\x08\xd1\rp\x07\xd1\r\x10\xfb\xd0\r\xa0G\xd1\r\x80\xfb\xd0\r\xb8\xfb\xd0\r P\xd1\r\xa0\x07\xd1\rH\xfb\xd0\r\xa0G\xd1\r(G\xd1\r\xd8\xfa\xd0\r\x90\x08\xd1\r(G\xd1\r\xa0\x07\xd1\r(G\xd1\r0I\xd1\r\x80\x8e\xae\x04xG\xd1\r\xd0\x07\xd1\r(G\xd1\r\x10\xfb\xd0\r\x90\x08\xd1\r\x00\x08\xd1\r P\xd1\r\xa0\x8f\xae\x04xG\xd1\r\xc8G\xd1\rP\t\xd1\r\xb8H\xd1\r\x00\x08\xd1\rH\xfb\xd0\r\xf0\x08\xd1\r\xd0\x07\xd1\r\x80\x8e\xae\x04p\x07\xd1\r\xa0\xfa\xd0\rxG\xd1\r\x00\x08\xd1\r\xc0\x8f\xae\x04\xd8F\xd1\r\xa0G\xd1\r\xd0\x07\xd1\r\x80\x8e\xae\x04\xd8F\xd1\r\x00\x08\xd1\r\xa0\x8f\xae\x04\x00G\xd1\r\xd8F\xd1\r\xc8G\xd1\r\xe0\x8f\xae\x04 P\xd1\r\xa0\x07\xd1\rxG\xd1\rP\t\xd1\r\xa0\x8f\xae\x04\xd8\xfa\xd0\r\xc0\x8f\xae\x04H\xfb\xd0\rxG\xd1\r\xa0G\xd1\r\xe0\x8f\xae\x04H\xfb\xd0\r\x08I\xd1\rPG\xd1\r\xa0\xfa\xd0\r\x10\xfb\xd0\r\x00G\xd1\r\xd8\xfa\xd0\r\xe0\x8f\xae\x04\xc8G\xd1\r\x90\x08\xd1\r\x10\xfb\xd0\r\x90H\xd1\r\xc8G\xd1\r\xb8\xfb\xd0\rH\xfb\xd0\r\xa0\xfa\xd0\r\xc0\x08\xd1\r\xc0\x8f\xae\x04(G\xd1\r\x10\xfb\xd0\r\xd0\x07\xd1\r\xd8F\xd1\r@H\xd1\rPG\xd1\r\xd8F\xd1\r\xa0G\xd1\r\x00\x08\xd1\r\x90H\xd1\r\x10\xfb\xd0\r\xa0\x8f\xae\x04\xc8G\xd1\r\xa0\x07\xd1\rPG\xd1\r\xa0G\xd1\r\xc0\x08\xd1\r\xa0\x07\xd1\r\xc0\x8f\xae\x04(G\xd1\rP\t\xd1\r\xe0\x8f\xae\x04\x10\xfb\xd0\r\xd8\xfa\xd0\r\x00G\xd1\r\x00\x08\xd1\r(G\xd1\r\xa0\xfa\xd0\r\x80\x8e\xae\x04@P\xd1\r\xd8F\xd1\r P\xd1\rPG\xd1\r P\xd1\r\xc8G\xd1\rH\xfb\xd0\r@H\xd1\r\xa0G\xd1\r\x80\xfb\xd0\r\xd0\x07\xd1\r\xe0\x8f\xae\x04H\xfb\xd0\rxG\xd1\r\x00G\xd1\rPG\xd1\r\xf0\xfb\xd0\r P\xd1\r\xc0\x8f\xae\x04(G\xd1\r\x80\x8e\xae\x04\xd8F\xd1\r\x18H\xd1\r\xc0\x08\xd1\r0I\xd1\r P\xd1\r\x00\x08\xd1\r\xd8\xfa\xd0\rp\x07\xd1\r\xa0G\xd1\r\xe0H\xd1\r\xa0\x8f\xae\x04p\x07\xd1\r\xa0\x07\xd1\r\x80\t\xd1\r\xd0\x07\xd1\r\x00G\xd1\r\xf0\x08\xd1\r\xc8G\xd1\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S"\x00b\x9f\x04``\x9f\x04\xe0\x8a\xae\x04@R\xd1\r`R\xd1\r Q\xd1\r\x00R\xd1\r\xa0R\xd1\r\xc0R\xd1\r S\xd1\r@S\xd1\r`S\xd1\r@Q\xd1\r\x80P\xd1\r\xc0S\xd1\r\xa0S\xd1\r\x00T\xd1\r T\xd1\r\x80Q\xd1\r@\xc7F\r\x80R\xd1\r`T\xd1\r\xc0T\xd1\r\xe0Q\xd1\r\x80T\xd1\r`Q\xd1\r R\xd1\r\xa0Q\xd1\r`U\xd1\r\x00S\xd1\r\xe0R\xd1\r\x00Q\xd1\r\xa0P\xd1\r\x00U\xd1\r@V\xd1\r\x80U\xd1\r\xe0P\xd1\r\x80S\xd1\r V\xd1\r\x00V\xd1\r\x00W\xd1\r@XL\r U\xd1\r\xc0V\xd1\r\xa0V\xd1\r\xe0V\xd1\r\x80V\xd1\r\xc0W\xd1\r\xc0U\xd1\r\xc0Q\xd1\r\xa0T\xd1\r`W\xd1\r\xa0U\xd1\r`V\xd1\r\xe0T\xd1\r X\xd1\r\xe0W\xd1\r`X\xd1\r`P\xd1\r\xc0P\xd1\r@T\xd1\r\xa0X\xd1\r@U\xd1\r\xa0\xbf\xa0\x04\xc0\xbf\xa0\x04\x00\xbd\xa0\x04\x80\xb4\xa0\x04\xa0\xb5\xa0\x04 \xb3\xa0\x04 \xbf\xa0\x04 \xbb\xa0\x04\xe0\xbf\xa0\x04\xe0\xb4\xa0\x04\xa0\xbe\xa0\x04 \xb6\xa0\x04@\xbd\xa0\x04\xe0\xbb\xa0\x04 \xb9\xa0\x04 \xb5\xa0\x04 \xbd\xa0\x04@\xb6\xa0\x04\x00\xb6\xa0\x04`\xbf\xa0\x04\xc0\xb4\xa0\x04\x00\xba\xa0\x04@\xbf\xa0\x04\xa0\xbd\xa0\x04\x80\xbf\xa0\x04\x00\xb4\xa0\x04@\xb4\xa0\x04\xe0P\xa1\x04@P\xa1\x04\xa0P\xa1\x04\x80R\xa1\x04\xc0Q\xa1\x04`R\xa1\x04\x00R\xa1\x04@S\xa1\x04 P\xa1\x04\x80\xbe\xa0\x04\x80Q\xa1\x04@R\xa1\x04\xe0\xdf\xab\x04\xc0R\xa1\x04`P\xa1\x04\x80U\xa1\x04\xe0R\xa1\x04\xa0\xb3\xa0\x04\x80\xcdF\r@Q\xa1\x04\x00S\xa1\x04\xc0\xbd\xa0\x04@b&\x03@\x0b\xa0\x04@\x0f\xa0\x04\x00\x0e\xa0\x04\x00\x0c\xa0\x04@\x0e\xa0\x04\x80\x0f\xa0\x04\xc0\x0e\xa0\x04\xe0Q\xa1\x04\xc0\x0f\xa0\x04\x00\x0b\xa0\x04 \xc2F\r`\xad'\x03\x00\xaa'\x03@\xa5'\x03`\xaa'\x03\xa0\xa4'\x03\x80\xaa'\x03\xe0\xa5'\x03\xc0\xa5'\x03 \xa5'\x03\x00\xa4'\x03\x00\xa2'\x03\xa0\xab'\x03@\xab'\x03`\xb5\xa0\x04\x80\xac'\x03\xc0\xbc\xa0\x04\xa0K(\x03\xe0F(\x03\xe0A(\x03\x00E(\x03`C(\x03\xe0O(\x03\xe0K(\x03\xc0D(\x03\x00A(\x03\xc0G(\x03\x00L(\x03\xc0B(\x03`N(\x03\xa0D(\x03\xe0D(\x03\x00C(\x03\xe0C(\x03\xa0A(\x03\x00B(\x03 A(\x03\x00\xab'\x03\xc0\x0c\xa0\x04`Q\xa1\x04 \xb3I\r\xc0\xb2I\r\xc0\xbaI\r\xa0\xbaI\r`\xb1I\r\xa0\xb0I\r\x00\xb7I\r@\xb0I\r\x80D(\x03\xc0K(\x03\xc0\x04L\r\x00\x07L\r \x0fL\r\xc0\x06L\r\xe0\x02L\r@\x00L\r\x00\x06L\r\xa0\x06L\r\xa0\x05L\r\xc0\x05L\r\xe0\x00L\r\x80\x02L\r\xe0\x06L\r\x80\x00L\r\xc0\x00L\r\xc0\x03L\r \x07L\r\xa0\x00L\r`\tL\r\x80C(\x03\xc0\xc1L\r\xc0\xc3L\r`\xc4L\r@\xc2L\r\xa0\xc3L\r`\xc1L\r\xa0\xcdL\r"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'\xb5\xb0\x8a?\xe8Y\xb5?+\x10/?\xaeJD?5\xb3*?\x95(b?\x1bSD?\x82+3?\x1c\x0b@?k0"?\xf2\xe6\x1d?Q\x06\x80?\xd4\x83w?geU?\x0b\xc5{?\x1f7\xb3?\x16\x0f@?\xd3\xeen?\xcf\xb0\x8a?\xb2/3?\x0f\xdaL?\x8f\x07@?\x8ca&?\xc5ND?r\xff.?\xdcdU?\x9d\xc7;?\x04\x15\x91?\xdap&?$\xb5j?\xfe\xfb]?E\xb8*?\xce\xe4]?\xdd\xc8;?2\xb5j?6\x83w?(\x8ef?\x0f\x0e@?T/b?SJD?G\x8f\x88?\xaf1\xb3?\xb46\xb3?\x0b7\xd3?;\xc1\xbb?\x9c)b?u\x8af?\x0b\xf5\x8e?\xe3~7?\xd0\xb8*?5RD?rtf?\x9fsU?\x9c\x97H?+\x87H?X\xc2;?\xe0\x07@?<."?JFb?\xaeX\x95?q[U?\x1e\x0e@?\x9e93?\xef\'\x82?^\x1bQ?\xa2\x0b@?\x92~7?\x7fJ\xa4?\xbe\xb0\x8a?o\xe4\x9d?Ssf?\x0c\x03\x80?\xbe]U?\xecTU?\xae\x807?Gtf?\t\xa1\xf9?\x9fY\x95?\\\x8e\x88?\x18\xb1\xaa?C\xf5L?\x19\x1aQ?\x1b\xe4\x9d?\x85\xc7;?\x89\xe3\x9d?6\x87w?\xadPD?\xa7\xf6n?\x05{\xb7?\x8a\x837?\xc3\xd3L?\x17MD?\x0e=3?b."?\x8e\x0b@?8\x857?\x19\x96H?\t\xc6{?\x07\xb7j?\xfdb&?d\xb6j?\xdc.b?O\xcd\x9b?\xf2cU?6\x0c@?\x0ceU?S\x847?-JD?\xe5\x9a\xa8?G\xfb.?_\x7f7?\xee\x0f@?\x01D3?\x86c\x15?b\xbf\x19?\xea?3?I\xbf\xdb?Lj\x86?\xb4\'b?\x96\xbe*?\xb7\x18Q?d\xc3;?\xe9\xb0\x8a?\xe4\xafj?=\xe3]?\xdb\xf2]?\x85\x9c\xd9?~\xfc.?I\x0e@?\x8e\x0b@?\xb97\x93?Z\xc3;?\\\x867?\xfc\x9fY?\x7f\xd9L?O,"?\xaaV\xc4?\x94pf?\xe4\x1dQ?\xe5KD?\xac0b?\xa5\xe9]?\xec\x96\xa8?\x0bm\x86?\xb6\xb1*?\xfd\x9e\xf9?G\x817?!\xd0*?%\xb4;?\x96\xf9n?\xbcB3?}\'"?N\x847?z\xee\x1d?\xf1\x87\xc8? \x15Q?\x9fk7?\xc8)\x82?\x0e\xbfY?\xab\xf3\x8e?\x1c:s?\x0e\xc3;?\xf9i\xa6?\xdb\xf0]?\x8a\xd3\x8c?K[U?\x80\xc7;?]\xb6*?\xff\x83w?\x00e\x86?\xbc\x847?\xa0\xe9]?\xb1\xb3*?\xe3\xfa.?\xc4\xb6j?\xa4\x07\x80?\x8c\xfdn?-\xb7j?t\xbc*?\x87\xdaL?Y\xa2\x19?\x1a\x05\x80?~\xd4L?\xbd\xec\x1d?\x92\xf7n?\xd9\xc8;?\x06\xca;?\xd7\x8a\x97?\x0b}\xd7?\xb2\xe2]?\xb5\xc9;?\x9f\xa0Y?B\xbe\xaa?1l\x86?\xe1\xe6]?\x97\xa5Y?^\xd9L?\x87\xa5*?*\x897?\x04\xc9;?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'hP\xf1\x04\x10W\xf1\x04X\xa1\xf0\x04\xd8\xa8\xf0\x04\xf0\xa8\xf0\x04P\xa3\xf0\x04\xd8\xa5\xf0\x04H\xa5\xf0\x04\xf0\xa5\xf0\x04\xe8\xa4\xf0\x04\xb8\xa4\xf0\x04\xa0\xa4\xf0\x04\x10\xa1\xf0\x04p\xa4\xf0\x04h\xa3\xf0\x04X\xa4\xf0\x04\xb8\xaa\xf0\x04\xf0\xa2\xf0\x04\xb0\xa0\xf0\x04\x90\xa5\xf0\x04\xe0\xa3\xf0\x04\xa8\xa2\xf0\x04H\xa2\xf0\x040\xa2\xf0\x04\xa8\xa8\xf0\x04\xc8\xa3\xf0\x04\xd8\xa2\xf0\x04\xa0\xa1\xf0\x04\xc0\xa2\xf0\x04 \xaf\xf0\x04\xc8\xa0\xf0\x04\x10\xad\xf0\x04\x88\xa4\xf0\x04(\xa1\xf0\x04\x80\xa3\xf0\x04\xe0\xa9\xf0\x04\xa8\xab\xf0\x04H\xa8\xf0\x04\xa8\xa5\xf0\x04\xb0\xa9\xf0\x048\xa6\xf0\x04\x18\xab\xf0\x04@\xa1\xf0\x04(\xa4\xf0\x04\xe8\xa7\xf0\x04\xe8\xaa\xf0\x048\xa9\xf0\x048\xa3\xf0\x04\x00\xa5\xf0\x04\xc8\xac\xf0\x04\x00\xa2\xf0\x04\xd0\xa7\xf0\x04\x98\xac\xf0\x04\x98\xa9\xf0\x04X\xaa\xf0\x04\xc8\xaf\xf0\x04p\xa7\xf0\x04 \xa0\xf0\x04(\xaa\xf0\x04\xa0\xaa\xf0\x04\xc8\xa6\xf0\x04\x18\xa5\xf0\x04\xa0\xad\xf0\x04 \xa3\xf0\x04x\xa8\xf0\x040\xa5\xf0\x04\xf0\xae\xf0\x04\x90\xa8\xf0\x04X\xad\xf0\x04\xe0\xac\xf0\x04p\xaa\xf0\x04\x88\xa1\xf0\x04\x98\xa0\xf0\x04\xf8\xa3\xf0\x040\xa8\xf0\x04h\xa0\xf0\x04P\xa6\xf0\x04H\xab\xf0\x04`\xae\xf0\x04h\xaf\xf0\x04\x98\xa3\xf0\x04h\xa9\xf0\x04@\xad\xf0\x04\x90\xab\xf0\x04\x08\xa6\xf0\x04P\xac\xf0\x04\xc0\xab\xf0\x04\x08\xa9\xf0\x04\xd0\xa1\xf0\x04 \xac\xf0\x04`\xab\xf0\x04\x88\xaa\xf0\x04\xf0\xab\xf0\x04\x08\xaf\xf0\x04\x98\xaf\xf0\x04\xb8\xad\xf0\x04\x18\xa2\xf0\x04\x80\xa0\xf0\x04\x18\xa8\xf0\x04\xd0\xad\xf0\x04\x10\xaa\xf0\x04\xf8\xa0\xf0\x04\xb0\xaf\xf0\x040\xae\xf0\x04\x80\xaf\xf0\x04\x10\xa4\xf0\x04\x00\xab\xf0\x04\x88\xad\xf0\x04h\xac\xf0\x04p\xa1\xf0\x04\x00\xae\xf0\x04\xf8\xa9\xf0\x048\xaf\xf0\x04x\xa2\xf0\x04 \xa6\xf0\x04\xd8\xae\xf0\x048\xac\xf0\x04P\xaf\xf0\x04x\xae\xf0\x04x\xa5\xf0\x04\x18\xae\xf0\x04\xd0\xaa\xf0\x04 \xa9\xf0\x04\xb0\xa6\xf0\x04\xf8\xac\xf0\x04\xc0\xa5\xf0\x04`\xa8\xf0\x048\xa0\xf0\x04X\xa7\xf0\x04\xb0\xac\xf0\x04H\xae\xf0\x04\x98\xa6\xf0\x04@\xa4\xf0\x04\xa0\xa7\xf0\x04\x08\xac\xf0\x04\x80\xa9\xf0\x04\x80\xa6\xf0\x04\xc0\xae\xf0\x04@\xaa\xf0\x04\xe8\xa1\xf0\x04p\xad\xf0\x04\x88\xa7\xf0\x04\x08\xa3\xf0\x04\x90\xae\xf0\x04\xb8\xa7\xf0\x04\xe0\xaf\xf0\x04`\xa2\xf0\x04\xe0\xa0\xf0\x04\xe8\xad\xf0\x04\xd0\xa4\xf0\x04\x80\xac\xf0\x04\xd8\xab\xf0\x040\xab\xf0\x04xN\xfb\x04\x10D\xfb\x04\xc0H\xfb\x04 C\xfb\x04\x08I\xfb\x04\xb0L\xfb\x04XD\xfb\x04\xf8C\xfb\x04\xe0I\xfb\x04\xc8I\xfb\x04\xc0E\xfb\x04\xb8G\xfb\x04\x88D\xfb\x04\x98C\xfb\x04\xf0H\xfb\x04\xc8O\xfb\x04\x80C\xfb\x04 @\xfb\x04\xc0N\xfb\x04\xd0G\xfb\x04\xc8F\xfb\x04hC\xfb\x04h@\xfb\x04\xf8F\xfb\x048O\xfb\x04 O\xfb\x04\xb0O\xfb\x04\x10A\xfb\x04(G\xfb\x04\xe0F\xfb\x04\xa0A\xfb\x04\xf8L\xfb\x04\x00N\xfb\x04\xe8G\xfb\x040K\xfb\x04\x98F\xfb\x040N\xfb\x04P@\xfb\x04\xb8A\xfb\x04\x18B\xfb\x04\xe0L\xfb\x04 L\xfb\x04\xb0F\xfb\x04P\xa0\xf0\x04(\xad\xf0\x04\x00\xa8\xf0\x04x\xab\xf0\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3806
sg3632
g3832
sg3646
g3813
sg3641
g3839
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3857
sg3632
g3847
sg3646
g3851
sg3641
g3855
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3868
sg3632
g3864
sg3646
g3875
sg3641
g3872
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3904
sg3632
g3894
sg3646
g3898
sg3641
g3902
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3915
sg3632
g3911
sg3646
g3922
sg3641
g3919
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3691
sg3632
g3928
sg3646
g3698
sg3641
g3935
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3904
sg3632
g3894
sg3646
g3898
sg3641
g3902
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3973
sg3632
g3969
sg3646
g3980
sg3641
g3977
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3759
sg3632
g3986
sg3646
g3766
sg3641
g3993
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3904
sg3632
g4001
sg3646
g3898
sg3641
g4008
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g3657
sg3632
g4016
sg3646
g3664
sg3641
g4023
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g4035
sg3632
g4031
sg3646
g4042
sg3641
g4039
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g3725
sg3632
g4048
sg3646
g3732
sg3641
g4055
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g3857
sg3632
g4076
sg3646
g3851
sg3641
g4083
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3868
sg3632
g4091
sg3646
g3875
sg3641
g4098
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g4110
sg3632
g4106
sg3646
g4117
sg3641
g4114
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3973
sg3632
g3969
sg3646
g3980
sg3641
g3977
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g4179
sg3632
g4175
sg3646
g4186
sg3641
g4183
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g4202
sg3632
g4192
sg3646
g4196
sg3641
g4200
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g4179
sg3632
g4209
sg3646
g4186
sg3641
g4216
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3915
sg3632
g3911
sg3646
g3922
sg3641
g3919
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3714
sg3632
g4250
sg3646
g3708
sg3641
g4257
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g3776
sg3632
g4265
sg3646
g3783
sg3641
g4272
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3691
sg3632
g3928
sg3646
g3698
sg3641
g3935
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g3868
sg3632
g3864
sg3646
g3875
sg3641
g3872
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g4336
sg3632
g4332
sg3646
g4343
sg3641
g4340
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g3691
sg3632
g3928
sg3646
g3698
sg3641
g3935
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3714
sg3632
g4250
sg3646
g3708
sg3641
g4257
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g3674
sg3632
g4375
sg3646
g3681
sg3641
g4382
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3657
sg3632
g4016
sg3646
g3664
sg3641
g4023
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3776
sg3632
g4265
sg3646
g3783
sg3641
g4272
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g4336
sg3632
g4416
sg3646
g4343
sg3641
g4423
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g3915
sg3632
g4444
sg3646
g3922
sg3641
g4451
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g4035
sg3632
g4031
sg3646
g4042
sg3641
g4039
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g3674
sg3632
g4375
sg3646
g3681
sg3641
g4382
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3973
sg3632
g3969
sg3646
g3980
sg3641
g3977
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g4179
sg3632
g4175
sg3646
g4186
sg3641
g4183
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g4035
sg3632
g4537
sg3646
g4042
sg3641
g4544
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g3857
sg3632
g4076
sg3646
g3851
sg3641
g4083
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3857
sg3632
g4076
sg3646
g3851
sg3641
g4083
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g3857
sg3632
g3847
sg3646
g3851
sg3641
g3855
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g4202
sg3632
g4630
sg3646
g4196
sg3641
g4637
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g3637
sg3632
g4645
sg3646
g3647
sg3641
g4652
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3904
sg3632
g4001
sg3646
g3898
sg3641
g4008
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g4110
sg3632
g4106
sg3646
g4117
sg3641
g4114
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3857
sg3632
g3847
sg3646
g3851
sg3641
g3855
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3915
sg3632
g3911
sg3646
g3922
sg3641
g3919
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3725
sg3632
g4048
sg3646
g3732
sg3641
g4055
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g4336
sg3632
g4332
sg3646
g4343
sg3641
g4340
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3973
sg3632
g4738
sg3646
g3980
sg3641
g4745
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g3742
sg3632
g4753
sg3646
g3749
sg3641
g4760
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g3904
sg3632
g3894
sg3646
g3898
sg3641
g3902
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g4202
sg3632
g4192
sg3646
g4196
sg3641
g4200
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g4110
sg3632
g4106
sg3646
g4117
sg3641
g4114
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3904
sg3632
g3894
sg3646
g3898
sg3641
g3902
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g4336
sg3632
g4332
sg3646
g4343
sg3641
g4340
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g4179
sg3632
g4209
sg3646
g4186
sg3641
g4216
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3806
sg3632
g3832
sg3646
g3813
sg3641
g3839
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g4110
sg3632
g4859
sg3646
g4117
sg3641
g4866
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g3691
sg3632
g3928
sg3646
g3698
sg3641
g3935
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3904
sg3632
g4001
sg3646
g3898
sg3641
g4008
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g4336
sg3632
g4416
sg3646
g4343
sg3641
g4423
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3674
sg3632
g4375
sg3646
g3681
sg3641
g4382
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3657
sg3632
g4016
sg3646
g3664
sg3641
g4023
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g4035
sg3632
g4537
sg3646
g4042
sg3641
g4544
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g4110
sg3632
g4106
sg3646
g4117
sg3641
g4114
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g3637
sg3632
g4645
sg3646
g3647
sg3641
g4652
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g4336
sg3632
g4416
sg3646
g4343
sg3641
g4423
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g3742
sg3632
g4753
sg3646
g3749
sg3641
g4760
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3759
sg3632
g3986
sg3646
g3766
sg3641
g3993
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g4202
sg3632
g4630
sg3646
g4196
sg3641
g4637
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g3714
sg3632
g4250
sg3646
g3708
sg3641
g4257
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g3973
sg3632
g4738
sg3646
g3980
sg3641
g4745
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g3904
sg3632
g4001
sg3646
g3898
sg3641
g4008
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g4110
sg3632
g4859
sg3646
g4117
sg3641
g4866
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3776
sg3632
g4265
sg3646
g3783
sg3641
g4272
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3674
sg3632
g4375
sg3646
g3681
sg3641
g4382
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g4179
sg3632
g4209
sg3646
g4186
sg3641
g4216
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3904
sg3632
g4001
sg3646
g3898
sg3641
g4008
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g4035
sg3632
g4537
sg3646
g4042
sg3641
g4544
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g4179
sg3632
g4209
sg3646
g4186
sg3641
g4216
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g4035
sg3632
g4031
sg3646
g4042
sg3641
g4039
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3868
sg3632
g3864
sg3646
g3875
sg3641
g3872
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g3691
sg3632
g3928
sg3646
g3698
sg3641
g3935
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3915
sg3632
g4444
sg3646
g3922
sg3641
g4451
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g3776
sg3632
g4265
sg3646
g3783
sg3641
g4272
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g3714
sg3632
g4250
sg3646
g3708
sg3641
g4257
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g4202
sg3632
g4192
sg3646
g4196
sg3641
g4200
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g3725
sg3632
g4048
sg3646
g3732
sg3641
g4055
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g3915
sg3632
g4444
sg3646
g3922
sg3641
g4451
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g3868
sg3632
g3864
sg3646
g3875
sg3641
g3872
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g4202
sg3632
g4192
sg3646
g4196
sg3641
g4200
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g4179
sg3632
g4175
sg3646
g4186
sg3641
g4183
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3759
sg3632
g3986
sg3646
g3766
sg3641
g3993
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3857
sg3632
g3847
sg3646
g3851
sg3641
g3855
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g3915
sg3632
g4444
sg3646
g3922
sg3641
g4451
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g4110
sg3632
g4859
sg3646
g4117
sg3641
g4866
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3657
sg3632
g4016
sg3646
g3664
sg3641
g4023
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g3742
sg3632
g4753
sg3646
g3749
sg3641
g4760
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3868
sg3632
g4091
sg3646
g3875
sg3641
g4098
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g4035
sg3632
g4031
sg3646
g4042
sg3641
g4039
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g4336
sg3632
g4332
sg3646
g4343
sg3641
g4340
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3868
sg3632
g4091
sg3646
g3875
sg3641
g4098
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g3915
sg3632
g3911
sg3646
g3922
sg3641
g3919
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3742
sg3632
g4753
sg3646
g3749
sg3641
g4760
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g4202
sg3632
g4192
sg3646
g4196
sg3641
g4200
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g3806
sg3632
g3832
sg3646
g3813
sg3641
g3839
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3868
sg3632
g3864
sg3646
g3875
sg3641
g3872
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g4035
sg3632
g4537
sg3646
g4042
sg3641
g4544
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3674
sg3632
g4375
sg3646
g3681
sg3641
g4382
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3857
sg3632
g4076
sg3646
g3851
sg3641
g4083
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g4110
sg3632
g4859
sg3646
g4117
sg3641
g4866
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g3915
sg3632
g4444
sg3646
g3922
sg3641
g4451
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g3776
sg3632
g4265
sg3646
g3783
sg3641
g4272
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g3759
sg3632
g3986
sg3646
g3766
sg3641
g3993
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g4336
sg3632
g4416
sg3646
g4343
sg3641
g4423
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g3857
sg3632
g3847
sg3646
g3851
sg3641
g3855
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3637
sg3632
g4645
sg3646
g3647
sg3641
g4652
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3973
sg3632
g3969
sg3646
g3980
sg3641
g3977
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g3973
sg3632
g3969
sg3646
g3980
sg3641
g3977
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g3868
sg3632
g4091
sg3646
g3875
sg3641
g4098
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3973
sg3632
g4738
sg3646
g3980
sg3641
g4745
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g4202
sg3632
g4630
sg3646
g4196
sg3641
g4637
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g4179
sg3632
g4175
sg3646
g4186
sg3641
g4183
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3742
sg3632
g4753
sg3646
g3749
sg3641
g4760
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g4035
sg3632
g4537
sg3646
g4042
sg3641
g4544
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g3637
sg3632
g4645
sg3646
g3647
sg3641
g4652
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g4110
sg3632
g4859
sg3646
g4117
sg3641
g4866
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g3714
sg3632
g4250
sg3646
g3708
sg3641
g4257
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g4179
sg3632
g4175
sg3646
g4186
sg3641
g4183
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g3904
sg3632
g3894
sg3646
g3898
sg3641
g3902
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g3868
sg3632
g4091
sg3646
g3875
sg3641
g4098
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g4179
sg3632
g4209
sg3646
g4186
sg3641
g4216
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3973
sg3632
g4738
sg3646
g3980
sg3641
g4745
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g3857
sg3632
g4076
sg3646
g3851
sg3641
g4083
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3637
sg3632
g4645
sg3646
g3647
sg3641
g4652
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g3657
sg3632
g4016
sg3646
g3664
sg3641
g4023
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3759
sg3632
g3986
sg3646
g3766
sg3641
g3993
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g4202
sg3632
g4630
sg3646
g4196
sg3641
g4637
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g3973
sg3632
g4738
sg3646
g3980
sg3641
g4745
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g4336
sg3632
g4416
sg3646
g4343
sg3641
g4423
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3725
sg3632
g4048
sg3646
g3732
sg3641
g4055
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g4035
sg3632
g4031
sg3646
g4042
sg3641
g4039
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g3915
sg3632
g3911
sg3646
g3922
sg3641
g3919
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g3725
sg3632
g4048
sg3646
g3732
sg3641
g4055
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3806
sg3632
g3832
sg3646
g3813
sg3641
g3839
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g4336
sg3632
g4332
sg3646
g4343
sg3641
g4340
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g4110
sg3632
g4106
sg3646
g4117
sg3641
g4114
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g3806
sg3632
g3832
sg3646
g3813
sg3641
g3839
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g4202
sg3632
g4630
sg3646
g4196
sg3641
g4637
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I81245008
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S" \xbc'\x13\xa8\xb1(\x13\xd0~(\x13\xf8~(\x13\xe0\x0f\x9f\x04\xa8\xb1(\x13\x80\r\x9f\x04\xa0\r\x9f\x04\x00\x0c\x9f\x04\x80\r\x9f\x04\xa0\r\x9f\x04p\xbd'\x13\xe0\x0f\x9f\x04\x00\x0c\x9f\x04 \x7f(\x13H\x7f(\x13P\xbc'\x13\xe0\x0f\x9f\x04\xe0\xb1(\x13\x10\xc1(\x138\xc1(\x13\xc0\xb2(\x13p\x7f(\x13\xc0\xb2(\x13\x80\xbc'\x13\xc0\xc0(\x13\x88\xb2(\x13P\xbc'\x13\xe0\xb1(\x13H\x7f(\x13P\xb2(\x13\x98\x7f(\x13\x10\xc1(\x138\xc1(\x13\xb0\xbc'\x13\xa0\r\x9f\x04`\x0c\x9f\x04\xa8\xb1(\x13`\x0c\x9f\x04P\xbc'\x13\x80\xbc'\x13H\x7f(\x13\xe0\xb1(\x13\xe0\x0f\x9f\x04\x98\x7f(\x13\xc0\x7f(\x13\xb0\xbc'\x13 \x7f(\x13\x18\xb2(\x13\x80\xbc'\x13\xf8~(\x13\xd0~(\x13\xe0\xb1(\x13 \xbc'\x13\xf8~(\x13\xc0\x7f(\x13P\xbc'\x13\x00\xbe'\x13\xa0\r\x9f\x04P\xb2(\x13\xf8~(\x13\xe0\x0f\x9f\x04\x80\xbc'\x13P\xb2(\x13p\xc0(\x13H\x7f(\x13\xb0\xbc'\x13\x10\xbd'\x13\xe0\x0f\x9f\x04p\x7f(\x13\xb0\xbc'\x13 \xbc'\x13 \x0c\x9f\x04\xf8~(\x13@\xbd'\x13`\x0c\x9f\x04\x18\xb2(\x13\x00\x0c\x9f\x04P\xbc'\x13\xc0\x7f(\x13P\xb2(\x13 \x7f(\x13\xd0~(\x13\xc0\x7f(\x13 \xbc'\x13P\xbc'\x13\xc0\xb2(\x13\x18\xb2(\x13\x98\xc0(\x13\x00\x0c\x9f\x04p\xc0(\x13p\x7f(\x13H\x7f(\x13\xc0\x7f(\x13\x98\x7f(\x13\xa8\xb1(\x13H\x7f(\x13\xc0\x7f(\x13\x98\x7f(\x13\xe0\x0f\x9f\x04\x00\xbe'\x13\xc0\x7f(\x13 \x7f(\x13\x00\x0c\x9f\x04\x98\x7f(\x13\xf8~(\x13 \x7f(\x13H\x7f(\x13\xe0\x0f\x9f\x04`\x0c\x9f\x04\x18\xb2(\x13 \x7f(\x13\x80\xbc'\x13\x98\x7f(\x13p\x7f(\x13\x80\xbc'\x13\x88\xb2(\x13\xa8\xb1(\x13 \x7f(\x13\x80\r\x9f\x04\xe0\xb1(\x13p\x7f(\x13 \xbc'\x13\x98\x7f(\x13\xc0\xb2(\x13 \x7f(\x13p\xc0(\x13\x18\xb2(\x13\x98\x7f(\x13H\x7f(\x13\xa8\xb1(\x13\x80\r\x9f\x04\xc0\x7f(\x13\x80\xbc'\x13`\x0c\x9f\x04P\xbc'\x13\xe0\xb1(\x13\x00\x0c\x9f\x04\xe0\xb1(\x13\xf8\xb2(\x13\x18\xb2(\x130\xbe'\x13p\x7f(\x13`\x0c\x9f\x04\xc0\x7f(\x13 \x0c\x9f\x04\xd0~(\x13\x80\r\x9f\x04\x10\xbd'\x13\xf8~(\x13 \xbc'\x13\xa0\xbd'\x13 \xbc'\x13\xf8~(\x13\xe0\x0f\x9f\x04\x18\xb2(\x13\xe0\xb1(\x13\x00\x0c\x9f\x04\xd0~(\x13P\xb2(\x13`\xc1(\x13\x80\r\x9f\x04\xb0\xbc'\x13 \xbc'\x13\xe0\xb1(\x13\x00\x0c\x9f\x04 \x0c\x9f\x04P\xb2(\x13`\x0c\x9f\x04\x80\xbc'\x13\xd0~(\x13 \xbc'\x13p\x7f(\x13\xb0\xbc'\x13p\x7f(\x13\xa8\xb1(\x13\x18\xb2(\x13H\x7f(\x13\xb0\xbc'\x13\xd0\xbd'\x13\xd0~(\x13\x80\xbc'\x13P\xbc'\x13\xd0~(\x13`\x0c\x9f\x04\xa8\xb1(\x13\xe8\xc0(\x13`\x0c\x9f\x04H\xc0(\x13\xa0\r\x9f\x04 \x0c\x9f\x04\xf8~(\x13 \x7f(\x13 \xbc'\x13`\xc1(\x13\xa0\r\x9f\x04\xb0\xbc'\x13\xa0\r\x9f\x04\xa0\xbd'\x13\xd0~(\x13"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x80\x9b)\x13\xa0\x9a)\x13`\x9a)\x13\x00\x9a)\x13@\x9b)\x13@\x9c)\x13\xc0\x9c)\x13\xe0\x9b)\x13\xe0\x9c)\x13 \x9a)\x13\x80\x9a)\x13\xc0\x9b)\x13`\x9d)\x13\x80\x9c)\x13\xe0\x99)\x13\x00\x9d)\x13 \x9d)\x13@\x9d)\x13\xa0\x9b)\x13\xc0\x9d)\x13\x80\x9e)\x13\xa0\x9e)\x13\x00\x9b)\x13\xe0\x9d)\x13\xe0\x9a)\x13 \x9f)\x13@\x9f)\x13@\x9a)\x13 \x9e)\x13\xa0\x9d)\x13\xe0\x9f)\x13\xc0\x9f)\x13\xc0\x9e)\x13 \x9c)\x13`\x9e)\x13\xa0\x9c)\x13\xe0\x9e)\x13`\x9b)\x13\x00\x9f)\x13\x00\x9e)\x13\x80\x9d)\x13`\x9c)\x13\x80\x9f)\x13@\x9e)\x13\x00\x9c)\x13\xa0\x9f)\x13`\x9f)\x13`\x00L\r@\xf0=\x13\xe0\xf1=\x13`\xf2=\x13\xc0\xf2=\x13\xe0\xf0=\x13\x80\xf0=\x13\xe0\xf2=\x13\x00\xf3=\x13 \xf0=\x13\xc0\xf0=\x13`\xf3=\x13@\xf3=\x13\xa0\xf3=\x13\xc0\xf3=\x13\xa0\xf1=\x13\x00\xf4=\x13 \xf4=\x13\x00\xf1=\x13`\xf4=\x13\x80\xf4=\x13\xa0\xf4=\x13\xc0\xf1=\x13\xa0\xf0=\x13\xc0\xf4=\x13\xe0\xf4=\x13\x00\xf5=\x13`\xf5=\x13@\xf5=\x13 \xf3=\x13\xc0\xf5=\x13\xa0\xf5=\x13`\xf1=\x13\xe0\xf5=\x13\x00\xf6=\x13`\xf6=\x13@\xf6=\x13`\xf0=\x13\xc0\xf6=\x13\xa0\xf6=\x13 \xf1=\x13\xe0\xf6=\x13\x00\xf7=\x13 \xf7=\x13\x80\xf7=\x13`\xf7=\x13\xc0\xf7=\x13\xa0\xf7=\x13\x00\xf8=\x13\xe0\xf7=\x13@\xf4=\x13 \xf8=\x13\x80\xf8=\x13`\xf8=\x13\xc0\xf8=\x13\xa0\xf8=\x13\x80\xf3=\x13\xe0\xf8=\x13\x00\xf9=\x13`\xf9=\x13@\xf9=\x13\x80\xf1=\x13\x80\xf9=\x13\xe0\xf9=\x13\xc0\xf9=\x13 \xfa=\x13@\xfa=\x13`\xfa=\x13@\xf2=\x13\xa0\xfa=\x13\x80\xfa=\x13\xe0\xfa=\x13\x00\xfb=\x13\x80\xf5=\x13@\xfb=\x13 \xfb=\x13\x80\xfb=\x13`\xfb=\x13\xc0\xfb=\x13\xe0\xfb=\x13\x00\xfc=\x13 \xf5=\x13@\xfc=\x13 \xfc=\x13\x80\xfc=\x13`\xfc=\x13\xc0\xfa=\x13\xe0\xfc=\x13\x00\xfd=\x13 \xf9=\x13\xe0\xf3=\x13 \xfd=\x13@\xfd=\x13`\xfd=\x13\xc0\xfd=\x13\xa0\xfd=\x13@\xf7=\x13\xe0\xfd=\x13\x00\xfe=\x13 \xfe=\x13@\xfe=\x13`\xfe=\x13\xc0\xfe=\x13\xe0\xfe=\x13\xc0\xfc=\x13\x00\xf2=\x13@\xff=\x13`\xff=\x13 \xf6=\x13\xc0\xff=\x13\x80\xff=\x13\xa0\xfe=\x13 \xff=\x13@\xf1=\x13\xa0\xff=\x13 \xf2=\x13\x80\xfe=\x13\xa0\xfb=\x13\x80\xfd=\x13@\xf8=\x13\x80\xf2=\x13 \x9b)\x13\xa0\xfc=\x13\xa0\xf2=\x13\x00\xff=\x13\xa0\xf9=\x13\x00\xfa=\x13\x80\xf6=\x13 \x91H\x13`\x92H\x13\xa0\x91H\x13\xe0\x92H\x13\x80\x91H\x13@\x92H\x13\xc0\x92H\x13\x00\x93H\x13\xa0\x92H\x13\xa0\x90H\x13`\x93H\x13@\x93H\x13\xa0\x93H\x13\x80\x93H\x13@\x90H\x13\xc0\x93H\x13\xe0\x93H\x13@\x94H\x13 \x94H\x13 \x92H\x13`\x94H\x13\xc0\x94H\x13\xa0\x94H\x13\x00\x95H\x13\xe0\x94H\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'@\x9e\xb9?4\xd3\x8c?\xf6\xdfL?_\x06\x80?\xd0:3?r\x90\x88?w>s?\x91\xd4L?\xa4\x0e@?\x07\xfa.?\xcaz\x97?\x89l&?*\xc0\x9b?\x9a\xc2\xdb?E~7?\x10\x0c@?\xd4\x06@?\xb7?s?1\xd2L?mE3?\x85\xfd.?\xc6\x81w?\t\x8b\xc8?\xd35\xb3?bFb?x\xa7\x19?qcU?\x94\xa8Y?(\x16Q?u\xf6.?\x15\xe4\xbd?\x18.b?\x8e\xe5]?r\xfb.?\x19\xd6L?\x9f\x90\x88?]\xd1*?\x8bbU?M\xb1*?h\xd9L?\x19\xf5\x8e?X\xb6*?i\xa4H?>\xeb\x1d?\'m&?\xd5\xb4*?\xa0~7?\xd1\x18\x11?\xe6\x02\x8f?\xbc\x0c@?\xf2H\xe4?\xd6\xea.?\xe8|7?\'\x18Q?fuf?J\xb8*?8QD?\xad\x92H?}9\x93?`.b?I\xca;?\xa7\xf9.?\xedqf?\xb2\xc9{?\xc6\xc7{?\x10eD?ws&?\x86\x1eQ?ws&?\x1a,"?\x1a\xfc.?\xc2cU?\x81n\xa6?\x19\x847?\xb7\xb1;?p:3?\xe8aU?z\xdd\x8c?]\x8c\x88?3J\xa4?P}\x97?\xe7\xc8;?\x1d\xcf{?\xf7)b?j\x01o?\x018\x93?\x03\x8f\xa8?\x8a\xe1{?S\x14\x91?\x1b}\x97?\xe7\x9c\x99?\x87~\x97?}\xfd\x8e?\x1aj\x86?\xb5\xaf\x8a?w\x04\x80?\xe7\xd2\x8c?\xc1o\x86?\xf8\xf4\x8e?\x01\xc9{?\xc8Y\x95?$\x06\xa0?\xad\xefL?\xc5\xe2]?\x14\xc2\x9b?<\xea\x1d?\x14)"?\x01\x00/?\x95\xadH?\xcb\x05\x80?\xb5l\x86?,\xd3\x8c?\rg\xa6?Xf\x95?\x039\x93?G\xf2\x8e?\xf5y\xd7?\x10\xb1\x8a?\xf1!@?\x07(\x82?\xbe\xe3]?n\xea]?\xd7}7?\x9f\xd6L?|-"?\xf4\xeb\x1d?_l\x86?\x7fz\xb7?\x8c\xae\x8a?n\xbd\x8a?\xf1\x07\xc0?<\x8f\xa8?\x93F\xa4?\xd48\x93?\x94\x8b\x97?=\x9d\x99?t\x01\xa0?\xd5l\xa6?z\xb9{?\xaa\xde\xcc?F\xbf\x9b?\xc0[\x95?~\x8a\x88?p\xf9n?\x02E\x93?.\xbf\x9b?R\xfc\x7f?\xcc\x9c\x99?p-b?\x82\xc2\x9b?_\xf1\x8e?\xb3\x04\x80?4\xc2\xbb?\x81\xc2{?HT\x84?\x80\x15\x91?\x10\x10\x91?\xf1\xc1{?\x1e\xe6n?\xe4D\xb3?\x1em\x86?R|\x97?n\xd2\xac?\xe9\x8c\xa8?\x9a\xcf\xec?\x02I\x84?1l\xc6?:[\x95?\x13#\x82?\xefs&?v\xf5\x7f?\xde\x03\x80?(k\x86?\x90\xe6]?\x87\xa0Y?\x8d\xfbn?\x04\x817?L\xf6n?n\xb7*?\x19|\x97?\xf9\xb7;?\x9b\x83w?\xb9QD?+\xe2L?\x8a\xb5*?d\x06\x80?q\xe3]?\xef\x817?\xfb*"?\x0e.b?\x85\xfd.?\xaf\x1dQ?\xf5D3?\x10\xd0\x8c?d:s?\x08\x19Q?+u&?kJ\x84?\\\xadH?$\x19"?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'\x18H\xfb\x04HB\xfb\x04\xf8\xd0\xe3\x04\xa8\xd8\xe3\x04\xa0\xd7\xe3\x04X\xd7\xe3\x04\x08\xd3\xe3\x04(\xd1\xe3\x04h\xd6\xe3\x04\xd8\xdb\xe3\x04\xa0\xda\xe3\x048\xdf\xe3\x04\x90\xd2\xe3\x04 \xd9\xe3\x04\xb8\xda\xe3\x04\xb0\xdf\xe3\x04P\xdc\xe3\x04X\xd1\xe3\x04H\xd2\xe3\x04\xa8\xde\xe3\x04\xd0\xd7\xe3\x04@\xd4\xe3\x04h\xd3\xe3\x04\x98\xdf\xe3\x04\xc8\xd0\xe3\x04`\xdb\xe3\x04\xf0\xd5\xe3\x04X\xdd\xe3\x04\xe8\xd7\xe3\x048\xd0\xe3\x04\xd0\xdd\xe3\x04\xe8\xd1\xe3\x04\x90\xd8\xe3\x04\xd0\xd1\xe3\x04\xb0\xd9\xe3\x04\xe0\xd3\xe3\x04\x98\xd9\xe3\x04(\xdd\xe3\x04P\xd9\xe3\x04X\xd4\xe3\x04\xc8\xdc\xe3\x04\xa8\xd2\xe3\x04`\xd5\xe3\x04\x00\xd8\xe3\x04\xd8\xde\xe3\x04\xb0\xdc\xe3\x04p\xda\xe3\x04x\xdb\xe3\x04\xb0\xd6\xe3\x04\xa0\xdd\xe3\x04\xb8\xd7\xe3\x04`\xd8\xe3\x04\x80\xdc\xe3\x04\xf0\xd8\xe3\x04\xe0\xd0\xe3\x04\x08\xdc\xe3\x04\x88\xdd\xe3\x040\xd8\xe3\x048\xdc\xe3\x04\xf8\xdc\xe3\x04X\xda\xe3\x04\xd8\xd2\xe3\x04P\xdf\xe3\x04\xd0\xda\xe3\x04 \xdf\xe3\x04x\xd5\xe3\x04(\xd7\xe3\x04 \xdc\xe3\x04\xc8\xd3\xe3\x040\xde\xe3\x04@\xd1\xe3\x04`\xd2\xe3\x04\xf8\xd9\xe3\x04h\xd9\xe3\x04\x00\xdb\xe3\x04 \xd0\xe3\x04@\xdd\xe3\x04\xb8\xdd\xe3\x04(\xda\xe3\x04x\xde\xe3\x04@\xda\xe3\x04H\xde\xe3\x04\xf0\xdb\xe3\x04\xc8\xdf\xe3\x04\x10\xdd\xe3\x04\xe0\xdf\xe3\x04\xe0\xd6\xe3\x04\x00\xde\xe3\x04\xe0\xdc\xe3\x04\xb0\xd0\xe3\x040\xdb\xe3\x04\xf0\xde\xe3\x04\xa8\xd5\xe3\x04\x98\xdc\xe3\x04x\xd2\xe3\x04p\xdd\xe3\x04\x90\xdb\xe3\x04\x80\xd3\xe3\x04P\xd3\xe3\x04p\xd4\xe3\x04\xe8\xda\xe3\x04\xc0\xdb\xe3\x04\xc0\xde\xe3\x04\xc8\xd9\xe3\x04h\xdf\xe3\x04`\xde\xe3\x04\x88\xda\xe3\x04\x80\xd9\xe3\x04\xd8\xd8\xe3\x04\x90\xde\xe3\x04\x18\xde\xe3\x04\xa8[\xf1\x04xX\xf1\x04\xd8^\xf1\x04\x08V\xf1\x04\x88Q\xf1\x040X\xf1\x04hS\xf1\x04\x08S\xf1\x04h_\xf1\x04\xf8P\xf1\x04\xa8U\xf1\x04hV\xf1\x04\x00U\xf1\x04\x80V\xf1\x04\xe0\\\xf1\x04xR\xf1\x04`U\xf1\x040R\xf1\x04pT\xf1\x04P\\\xf1\x048P\xf1\x04\xf0R\xf1\x04\x90X\xf1\x04\xa0Q\xf1\x04\xf0U\xf1\x04\xb8Q\xf1\x04\xb0\\\xf1\x04\xd0W\xf1\x04\xb0P\xf1\x04\xd8U\xf1\x04 P\xf1\x04HU\xf1\x04XW\xf1\x04\x00^\xf1\x04\xa0]\xf1\x04\xc8P\xf1\x04\x80S\xf1\x04@\xd7\xe3\x04\x18\xdb\xe3\x04\xa8\xdb\xe3\x04\x08\xd6\xe3\x04\xd8\xd5\xe3\x04\xf8\xd6\xe3\x04\x10\xd1\xe3\x04 \xd6\xe3\x04\x88\xd1\xe3\x04\x10\xd4\xe3\x04\xe8\xd4\xe3\x04\x08\xd9\xe3\x04\x98\xd6\xe3\x04\x00\xd5\xe3\x04\x08\xdf\xe3\x04\xb0\xd3\xe3\x04\x90\xd5\xe3\x04\xa0\xd4\xe3\x04\xc0\xd8\xe3\x04\xe0\xd9\xe3\x04\x00\xd2\xe3\x04\xb8\xd4\xe3\x048\xd6\xe3\x04\x88\xd4\xe3\x04\x10\xda\xe3\x04\xf8\xd3\xe3\x04\xc8\xd6\xe3\x04\x88\xd7\xe3\x04\xb8\xd1\xe3\x04H\xd8\xe3\x04(\xd4\xe3\x04p\xd7\xe3\x04\x98\xd3\xe3\x04\x18\xd2\xe3\x04H\xd5\xe3\x04P\xd0\xe3\x04\x98\xd0\xe3\x04P\xd6\xe3\x04\xa0\xd1\xe3\x04\x80\xd0\xe3\x04\x80\xd6\xe3\x04\x18\xd5\xe3\x04x\xd8\xe3\x04p\xd1\xe3\x04 \xd3\xe3\x04H\xdb\xe3\x04h\xdc\xe3\x04\x18\xd8\xe3\x04\xc0\xd5\xe3\x040\xd2\xe3\x040\xd5\xe3\x04\xd0\xd4\xe3\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6476
sg6370
g6523
sg6384
g6483
sg6379
g6530
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6493
sg6370
g6538
sg6384
g6500
sg6379
g6545
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6429
sg6370
g6553
sg6384
g6436
sg6379
g6560
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6446
sg6370
g6568
sg6384
g6453
sg6379
g6575
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6510
sg6370
g6583
sg6384
g6517
sg6379
g6590
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6602
sg6370
g6598
sg6384
g6609
sg6379
g6606
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6619
sg6370
g6615
sg6384
g6626
sg6379
g6623
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6636
sg6370
g6632
sg6384
g6643
sg6379
g6640
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6446
sg6370
g6568
sg6384
g6453
sg6379
g6575
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6666
sg6370
g6662
sg6384
g6673
sg6379
g6670
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6689
sg6370
g6679
sg6384
g6683
sg6379
g6687
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6706
sg6370
g6696
sg6384
g6700
sg6379
g6704
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6723
sg6370
g6713
sg6384
g6717
sg6379
g6721
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6706
sg6370
g6730
sg6384
g6700
sg6379
g6737
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6723
sg6370
g6745
sg6384
g6717
sg6379
g6752
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6764
sg6370
g6760
sg6384
g6771
sg6379
g6768
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6619
sg6370
g6615
sg6384
g6626
sg6379
g6623
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6510
sg6370
g6583
sg6384
g6517
sg6379
g6590
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6636
sg6370
g6632
sg6384
g6643
sg6379
g6640
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6666
sg6370
g6662
sg6384
g6673
sg6379
g6670
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6619
sg6370
g6829
sg6384
g6626
sg6379
g6836
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6723
sg6370
g6713
sg6384
g6717
sg6379
g6721
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6861
sg6370
g6857
sg6384
g6868
sg6379
g6865
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6689
sg6370
g6874
sg6384
g6683
sg6379
g6881
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6706
sg6370
g6696
sg6384
g6700
sg6379
g6704
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6906
sg6370
g6902
sg6384
g6913
sg6379
g6910
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6493
sg6370
g6538
sg6384
g6500
sg6379
g6545
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6936
sg6370
g6932
sg6384
g6943
sg6379
g6940
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6395
sg6370
g6949
sg6384
g6402
sg6379
g6956
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6936
sg6370
g6932
sg6384
g6943
sg6379
g6940
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6636
sg6370
g6977
sg6384
g6643
sg6379
g6984
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6764
sg6370
g6992
sg6384
g6771
sg6379
g6999
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6619
sg6370
g6829
sg6384
g6626
sg6379
g6836
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6666
sg6370
g6662
sg6384
g6673
sg6379
g6670
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6446
sg6370
g6568
sg6384
g6453
sg6379
g6575
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6861
sg6370
g7046
sg6384
g6868
sg6379
g7053
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g7065
sg6370
g7061
sg6384
g7072
sg6379
g7069
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6906
sg6370
g6902
sg6384
g6913
sg6379
g6910
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6602
sg6370
g7091
sg6384
g6609
sg6379
g7098
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6689
sg6370
g6874
sg6384
g6683
sg6379
g6881
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6764
sg6370
g6760
sg6384
g6771
sg6379
g6768
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6429
sg6370
g6553
sg6384
g6436
sg6379
g6560
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6412
sg6370
g7145
sg6384
g6419
sg6379
g7152
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6666
sg6370
g7160
sg6384
g6673
sg6379
g7167
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6375
sg6370
g7175
sg6384
g6385
sg6379
g7182
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g7065
sg6370
g7061
sg6384
g7072
sg6379
g7069
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6636
sg6370
g6632
sg6384
g6643
sg6379
g6640
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6906
sg6370
g6902
sg6384
g6913
sg6379
g6910
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6493
sg6370
g6538
sg6384
g6500
sg6379
g6545
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6723
sg6370
g6745
sg6384
g6717
sg6379
g6752
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6764
sg6370
g6992
sg6384
g6771
sg6379
g6999
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6723
sg6370
g6745
sg6384
g6717
sg6379
g6752
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6493
sg6370
g6538
sg6384
g6500
sg6379
g6545
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6619
sg6370
g6829
sg6384
g6626
sg6379
g6836
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6906
sg6370
g6902
sg6384
g6913
sg6379
g6910
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6395
sg6370
g6949
sg6384
g6402
sg6379
g6956
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6446
sg6370
g6568
sg6384
g6453
sg6379
g6575
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6706
sg6370
g6696
sg6384
g6700
sg6379
g6704
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6906
sg6370
g7398
sg6384
g6913
sg6379
g7405
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6429
sg6370
g6553
sg6384
g6436
sg6379
g6560
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6412
sg6370
g7145
sg6384
g6419
sg6379
g7152
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6936
sg6370
g7465
sg6384
g6943
sg6379
g7472
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6689
sg6370
g6679
sg6384
g6683
sg6379
g6687
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6636
sg6370
g6977
sg6384
g6643
sg6379
g6984
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g7065
sg6370
g7519
sg6384
g7072
sg6379
g7526
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6723
sg6370
g6713
sg6384
g6717
sg6379
g6721
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6602
sg6370
g7091
sg6384
g6609
sg6379
g7098
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g7065
sg6370
g7061
sg6384
g7072
sg6379
g7069
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6375
sg6370
g7175
sg6384
g6385
sg6379
g7182
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6636
sg6370
g6977
sg6384
g6643
sg6379
g6984
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6723
sg6370
g6713
sg6384
g6717
sg6379
g6721
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6689
sg6370
g6874
sg6384
g6683
sg6379
g6881
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6602
sg6370
g6598
sg6384
g6609
sg6379
g6606
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6510
sg6370
g6583
sg6384
g6517
sg6379
g6590
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6706
sg6370
g6730
sg6384
g6700
sg6379
g6737
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6619
sg6370
g6829
sg6384
g6626
sg6379
g6836
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g7065
sg6370
g7519
sg6384
g7072
sg6379
g7526
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6861
sg6370
g7046
sg6384
g6868
sg6379
g7053
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6619
sg6370
g6615
sg6384
g6626
sg6379
g6623
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g7065
sg6370
g7061
sg6384
g7072
sg6379
g7069
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6861
sg6370
g7046
sg6384
g6868
sg6379
g7053
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6446
sg6370
g6568
sg6384
g6453
sg6379
g6575
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6906
sg6370
g6902
sg6384
g6913
sg6379
g6910
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g7065
sg6370
g7519
sg6384
g7072
sg6379
g7526
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6602
sg6370
g6598
sg6384
g6609
sg6379
g6606
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6861
sg6370
g6857
sg6384
g6868
sg6379
g6865
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6602
sg6370
g6598
sg6384
g6609
sg6379
g6606
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6619
sg6370
g6615
sg6384
g6626
sg6379
g6623
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6936
sg6370
g6932
sg6384
g6943
sg6379
g6940
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6689
sg6370
g6874
sg6384
g6683
sg6379
g6881
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6602
sg6370
g7091
sg6384
g6609
sg6379
g7098
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6764
sg6370
g6992
sg6384
g6771
sg6379
g6999
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6861
sg6370
g7046
sg6384
g6868
sg6379
g7053
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6706
sg6370
g6696
sg6384
g6700
sg6379
g6704
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6764
sg6370
g6992
sg6384
g6771
sg6379
g6999
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6510
sg6370
g6583
sg6384
g6517
sg6379
g6590
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6395
sg6370
g6949
sg6384
g6402
sg6379
g6956
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6602
sg6370
g7091
sg6384
g6609
sg6379
g7098
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6666
sg6370
g6662
sg6384
g6673
sg6379
g6670
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6706
sg6370
g6696
sg6384
g6700
sg6379
g6704
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6375
sg6370
g7175
sg6384
g6385
sg6379
g7182
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6861
sg6370
g6857
sg6384
g6868
sg6379
g6865
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6723
sg6370
g6745
sg6384
g6717
sg6379
g6752
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6602
sg6370
g7091
sg6384
g6609
sg6379
g7098
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6689
sg6370
g6874
sg6384
g6683
sg6379
g6881
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6861
sg6370
g7046
sg6384
g6868
sg6379
g7053
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6619
sg6370
g6615
sg6384
g6626
sg6379
g6623
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6395
sg6370
g6949
sg6384
g6402
sg6379
g6956
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g7065
sg6370
g7061
sg6384
g7072
sg6379
g7069
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6764
sg6370
g6992
sg6384
g6771
sg6379
g6999
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6936
sg6370
g6932
sg6384
g6943
sg6379
g6940
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6636
sg6370
g6632
sg6384
g6643
sg6379
g6640
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6666
sg6370
g7160
sg6384
g6673
sg6379
g7167
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6666
sg6370
g7160
sg6384
g6673
sg6379
g7167
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6936
sg6370
g7465
sg6384
g6943
sg6379
g7472
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6689
sg6370
g6679
sg6384
g6683
sg6379
g6687
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g7065
sg6370
g7519
sg6384
g7072
sg6379
g7526
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6706
sg6370
g6730
sg6384
g6700
sg6379
g6737
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6936
sg6370
g7465
sg6384
g6943
sg6379
g7472
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g7065
sg6370
g7519
sg6384
g7072
sg6379
g7526
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6476
sg6370
g6523
sg6384
g6483
sg6379
g6530
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6395
sg6370
g6949
sg6384
g6402
sg6379
g6956
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6429
sg6370
g6553
sg6384
g6436
sg6379
g6560
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6636
sg6370
g6977
sg6384
g6643
sg6379
g6984
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6375
sg6370
g7175
sg6384
g6385
sg6379
g7182
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6429
sg6370
g6553
sg6384
g6436
sg6379
g6560
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6689
sg6370
g6679
sg6384
g6683
sg6379
g6687
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6666
sg6370
g7160
sg6384
g6673
sg6379
g7167
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6723
sg6370
g6713
sg6384
g6717
sg6379
g6721
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6861
sg6370
g6857
sg6384
g6868
sg6379
g6865
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6476
sg6370
g6523
sg6384
g6483
sg6379
g6530
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6906
sg6370
g7398
sg6384
g6913
sg6379
g7405
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6375
sg6370
g7175
sg6384
g6385
sg6379
g7182
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6666
sg6370
g7160
sg6384
g6673
sg6379
g7167
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6510
sg6370
g6583
sg6384
g6517
sg6379
g6590
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6476
sg6370
g6523
sg6384
g6483
sg6379
g6530
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6723
sg6370
g6745
sg6384
g6717
sg6379
g6752
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6936
sg6370
g7465
sg6384
g6943
sg6379
g7472
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6764
sg6370
g6760
sg6384
g6771
sg6379
g6768
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6412
sg6370
g7145
sg6384
g6419
sg6379
g7152
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6706
sg6370
g6730
sg6384
g6700
sg6379
g6737
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6906
sg6370
g7398
sg6384
g6913
sg6379
g7405
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6706
sg6370
g6730
sg6384
g6700
sg6379
g6737
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6689
sg6370
g6679
sg6384
g6683
sg6379
g6687
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6619
sg6370
g6829
sg6384
g6626
sg6379
g6836
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6906
sg6370
g7398
sg6384
g6913
sg6379
g7405
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6764
sg6370
g6760
sg6384
g6771
sg6379
g6768
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6412
sg6370
g7145
sg6384
g6419
sg6379
g7152
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6764
sg6370
g6760
sg6384
g6771
sg6379
g6768
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6636
sg6370
g6632
sg6384
g6643
sg6379
g6640
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6412
sg6370
g7145
sg6384
g6419
sg6379
g7152
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6936
sg6370
g6932
sg6384
g6943
sg6379
g6940
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6666
sg6370
g6662
sg6384
g6673
sg6379
g6670
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6936
sg6370
g7465
sg6384
g6943
sg6379
g7472
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6493
sg6370
g6538
sg6384
g6500
sg6379
g6545
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6476
sg6370
g6523
sg6384
g6483
sg6379
g6530
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6602
sg6370
g6598
sg6384
g6609
sg6379
g6606
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6861
sg6370
g6857
sg6384
g6868
sg6379
g6865
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6906
sg6370
g7398
sg6384
g6913
sg6379
g7405
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6636
sg6370
g6977
sg6384
g6643
sg6379
g6984
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.