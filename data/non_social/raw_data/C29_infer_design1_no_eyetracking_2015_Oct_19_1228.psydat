ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C29_infer_design1_no_eyetracking_2015_Oct_19_1228
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x1d\x9f\xd5\xa9\xf6\x00N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Oct_19_1228
p66
sVparticipant
p67
VC29
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F1.03363916901435
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F9.2834108043571177
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P10'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F8.8000000000000007
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F1.4600000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'$\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V48-twix.png
p102
sg21
F1.2
sg69
Vn
sa(dp103
g63
g64
sg20
F5.5010000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F0.81999999999999917
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'&\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V50-polo.png
p109
sg21
F1.7
sg69
Vn
sa(dp110
g63
g64
sg20
F5.3339999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F1.0799999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\x19\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p116
sg21
F1.3
sg69
Vn
sa(dp117
g63
g64
sg20
F4.1340000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F0.43999999999999861
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\x14\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p123
sg21
F2
sg69
Vn
sa(dp124
g63
g64
sg20
F3.734
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F1.5400000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x0e\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p130
sg21
F1
sg69
Vn
sa(dp131
g63
g64
sg20
F2.3180000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F1.5399999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x12\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p137
sg21
F1.7
sg69
Vn
sa(dp138
g63
g64
sg20
F3.2010000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.9599999999999993
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\x04\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p144
sg21
F1.8
sg69
Vn
sa(dp145
g63
g64
sg20
F2.468
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F1.0199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x15\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V29-beans.png
p151
sg21
F1.7
sg69
Vn
sa(dp152
g63
g64
sg20
F6.3840000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F1.0999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x0f\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p158
sg21
F1.3
sg69
Vn
sa(dp159
g63
g64
sg20
F2.0840000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F1.6000000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'#\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p165
sg21
F1.6000000000000001
sg69
Vn
sa(dp166
g63
g64
sg20
F4.7169999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F1.0599999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\x1a\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V35-raisins.png
p172
sg21
F1.5
sg69
Vn
sa(dp173
g63
g64
sg20
F4.6669999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0.47999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S' \x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p179
sg21
F1.5
sg69
Vn
sa(dp180
g63
g64
sg20
F2.734
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0.21999999999999936
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'"\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p186
sg21
F1.1000000000000001
sg69
Vn
sa(dp187
g63
g64
sg20
F3.0670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F1.2000000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\t\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p193
sg21
F1.1000000000000001
sg69
Vn
sa(dp194
g63
g64
sg20
F3.7509999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F1.1199999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\x06\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V7-olives.png
p200
sg21
F1.6000000000000001
sg69
Vn
sa(dp201
g63
g64
sg20
F4.9169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F0.83999999999999986
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\x02\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p207
sg21
F1.1000000000000001
sg69
Vn
sa(dp208
g63
g64
sg20
F4.851
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F1.6400000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\r\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p214
sg21
F1.3
sg69
Vn
sa(dp215
g63
g64
sg20
F3.117
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F1.9800000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'!\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V44-crunch.png
p221
sg21
F1.1000000000000001
sg69
Vn
sa(dp222
g63
g64
sg20
F2.4670000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F1.0999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x1b\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p228
sg21
F1.3
sg69
Vn
sa(dp229
g63
g64
sg20
F3.234
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F1.0999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\x01\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p235
sg21
F1.3
sg69
Vn
sa(dp236
g63
g64
sg20
F1.617
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F1
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x1d\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V40-sardines.png
p242
sg21
F1
sg69
Vn
sa(dp243
g63
g64
sg20
F2.0680000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F1.5
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x13\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p249
sg21
F1.5
sg69
Vn
sa(dp250
g63
g64
sg20
F1.8169999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F1.4999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S"'\x00\x00\x00"
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V51-mars.png
p256
sg21
F1.7
sg69
Vn
sa(dp257
g63
g64
sg20
F6.9669999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F2.120000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\x08\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p263
sg21
F1.1000000000000001
sg69
Vn
sa(dp264
g63
g64
sg20
F2.8340000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F1.0199999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x18\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p270
sg21
F1.6000000000000001
sg69
Vn
sa(dp271
g63
g64
sg20
F2.351
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F1.5399999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x0c\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V18-mms.png
p277
sg21
F1.7
sg69
Vn
sa(dp278
g63
g64
sg20
F3.984
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F1.6000000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x1e\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p284
sg21
F1.6000000000000001
sg69
Vn
sa(dp285
g63
g64
sg20
F3.1339999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F1.8800000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'\n\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p291
sg21
F1.6000000000000001
sg69
Vn
sa(dp292
g63
g64
sg20
F9.234
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F1.9800000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\x00\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p298
sg21
F1.1000000000000001
sg69
Vn
sa(dp299
g63
g64
sg20
F2.867
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F1.6000000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x0b\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p305
sg21
F1.1000000000000001
sg69
Vn
sa(dp306
g63
g64
sg20
F3.4340000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F1.9600000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x17\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p312
sg21
F1.3999999999999999
sg69
Vn
sa(dp313
g63
g64
sg20
F1.6839999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F1.0199999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'\x03\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V4-corn.png
p319
sg21
F1.2
sg69
Vn
sa(dp320
g63
g64
sg20
F2.9009999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F0.31999999999999917
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x07\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p326
sg21
F1.3
sg69
Vn
sa(dp327
g63
g64
sg20
F3.101
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F1.9800000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x10\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V22-daim.png
p333
sg21
F1.2
sg69
Vn
sa(dp334
g63
g64
sg20
F9.8670000000000009
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'%\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p340
sg21
F1.2
sg69
Vn
sa(dp341
g63
g64
sg20
F4.984
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F1.9000000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'\x1c\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p347
sg21
F1.5
sg69
Vn
sa(dp348
g63
g64
sg20
F5.617
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F1.4800000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'\x11\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p354
sg21
F1.3
sg69
Vn
sa(dp355
g63
g64
sg20
F5.1340000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F1.3800000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'\x05\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p361
sg21
F1.1000000000000001
sg69
Vn
sa(dp362
g63
g64
sg20
F2.9169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F0.91999999999999904
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x1f\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p368
sg21
F1.8999999999999999
sg69
Vn
sa(dp369
g63
g64
sg20
F1.617
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F0.93999999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x16\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p375
sg21
F1.1000000000000001
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F5.4000173340464244
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'18-mms.png'
p380
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'left'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F1.7000209262987482
sg27
F2.601
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'7-olives.png'
p389
sg26
F3.7000000000000006
sg28
F3
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'right'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F1.0501729413263092
sg27
F1.917
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p398
sg26
F5.5999999999999988
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'right'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F1.2172101422420383
sg27
F3.1509999999999998
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p407
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'right'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F1.0334347527114005
sg27
F1.1839999999999999
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'38-maltesers.png'
p416
sg26
F2.1999999999999993
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'right'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F0.066463238707001437
sg27
F6.1669999999999998
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'4-corn.png'
p425
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'right'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F1.0833932992500195
sg27
F2.617
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p434
sg26
F3.8999999999999999
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'right'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F0.066795664664823562
sg27
F2.3839999999999999
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'51-mars.png'
p443
sg26
F5.2999999999999998
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'left'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F0.93381359285740473
sg27
F2.2669999999999999
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p452
sg26
F5.2000000000000002
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'right'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F0.96673317086424504
sg27
F5.5170000000000003
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p461
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'left'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F1.0002015653099079
sg27
F1.0509999999999999
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p470
sg26
F5.2000000000000002
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F0.76668601541496173
sg27
F2.3839999999999999
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'50-polo.png'
p479
sg26
F5.8999999999999986
sg28
F3
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'right'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.0000746960558899
sg27
F5.617
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p488
sg26
F5.4999999999999991
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'left'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.0500018816564989
sg27
F2.3010000000000002
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p497
sg26
F5.1000000000000014
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'left'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F1.0667098497306142
sg27
F1.851
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p506
sg26
F3.1999999999999993
sg28
F4
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'left'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F0.86671486747945892
sg27
F1.8839999999999999
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p515
sg26
F3.6000000000000005
sg28
F3
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'right'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F1.2333881104405009
sg27
F6.984
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p524
sg26
F5.1999999999999993
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'left'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F0.95043004400758946
sg27
F1.284
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'49-yorkie.png'
p533
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'right'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F2.0000344970339938
sg27
F1.5840000000000001
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p542
sg26
F5.0000000000000009
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F0.94956106088829983
sg27
F3.6669999999999998
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'29-beans.png'
p551
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'right'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F1.1001411812467268
sg27
F1.3839999999999999
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p560
sg26
F4.9000000000000021
sg28
F3
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'left'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F0.91675153126925579
sg27
F2.1669999999999998
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'5-pineapple.png'
p569
sg26
F5.2000000000000011
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'left'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.4001858278206782
sg27
F1.7509999999999999
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p578
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'left'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F0.96666303640085971
sg27
F0.93400000000000005
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p587
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'right'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F0.81674662755904137
sg27
F0.751
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'48-twix.png'
p596
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'left'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F0.65005097578068671
sg27
F1.4339999999999999
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'44-crunch.png'
p605
sg26
F3.6000000000000001
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'right'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F3.1167294075530663
sg27
F0.90100000000000002
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'46-pistachios.png'
p614
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'left'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F0.71672718377703859
sg27
F1.0840000000000001
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p623
sg26
F5.799999999999998
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'right'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F0.73338354884981527
sg27
F1.3680000000000001
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p632
sg26
F5.1000000000000014
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'right'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F0.76645451466356462
sg27
F3.8010000000000002
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'40-sardines.png'
p641
sg26
F5.2000000000000011
sg28
F3
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'right'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F0.73339922931882029
sg27
F1.601
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p650
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'right'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F0.70007794618868502
sg27
F0.88400000000000001
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'25-kitkat.png'
p659
sg26
F3.6000000000000001
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'right'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F0.73338326374869212
sg27
F1.4179999999999999
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p668
sg26
F3.399999999999999
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'left'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F8.0667058583367179
sg27
F1.3009999999999999
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'35-raisins.png'
p677
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'left'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F1.4167923004897602
sg27
F0.91700000000000004
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p686
sg26
F3.2999999999999994
sg28
F4
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'right'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F3.7334399985393247
sg27
F1.1180000000000001
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p695
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'right'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.0666180477073794
sg27
F0.71699999999999997
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p704
sg26
F5.2999999999999998
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'right'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F0.68338679898261034
sg27
F3.1840000000000002
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'31-hobnobs.png'
p713
sg26
F3.2999999999999994
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'right'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F3.1668293634174915
sg27
F1.2509999999999999
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'22-daim.png'
p722
sg26
F5.9999999999999982
sg28
F3
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'left'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F1.0833664999026951
sg27
F3.4340000000000002
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p731
sg26
F5.1000000000000014
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'left'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F0.76673476742143976
sg27
F3.5339999999999998
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F341.02602615844626
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F1.2502833888502209
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'53-cheestrings.png'
p743
sg82
S'53-cheestrings.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'47-picnic.png'
p748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\n\x13\x0c).\x0c\xae\x18'
tRp753
sa(dp754
g63
g64
sg81
S'32-hovis_crackers.png'
p755
sg82
S'32-hovis_crackers.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\n\x13\x0c*\x00\x04\xf5\x88'
tRp764
sa(dp765
g63
g64
sg81
S'12-topic.png'
p766
sg82
S'39-mackerel.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'39-mackerel.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\n\x13\x0c*\n\x04x\x88'
tRp775
sa(dp776
g63
g64
sg81
g743
sg82
S'47-picnic.png'
p777
sg56
Vr
sS'practice_loop.thisN'
p778
I3
sS'practice_loop.thisTrialN'
p779
I3
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p780
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p781
sS'practice_loop.thisIndex'
p782
g59
(g98
S'\x03\x00\x00\x00'
tRp783
sg34
g752
(S'\x07\xdf\n\x13\x0c*\x11\x00}\x00'
tRp784
sa(dp785
g63
g64
sg81
S'11-snickers.png'
p786
sg82
S'11-snickers.png'
p787
sg56
Vr
sS'practice_loop.thisN'
p788
I4
sS'practice_loop.thisTrialN'
p789
I4
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p790
I0
sg83
S'54-frubes_yogurt.png'
p791
sg33
g786
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p792
sS'practice_loop.thisIndex'
p793
g59
(g98
S'\x04\x00\x00\x00'
tRp794
sg34
g752
(S'\x07\xdf\n\x13\x0c*\x17\x04\x9f\x98'
tRp795
sa(dp796
g63
g64
sg81
g755
sg82
S'24-food_doctor_apple_walnut_bar.png'
p797
sg56
Vr
sS'practice_loop.thisN'
p798
I5
sS'practice_loop.thisTrialN'
p799
I5
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p800
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p801
sS'practice_loop.thisIndex'
p802
g59
(g98
S'\x05\x00\x00\x00'
tRp803
sg34
g752
(S'\x07\xdf\n\x13\x0c*\x1e\x01\x9a('
tRp804
sa(dp805
g63
g64
sg81
S'52-aero_mousse.png'
p806
sg82
S'14-discos_salt_vinegar.png'
p807
sg56
Vr
sS'practice_loop.thisN'
p808
I6
sS'practice_loop.thisTrialN'
p809
I6
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p810
I0
sg83
S'14-discos_salt_vinegar.png'
p811
sg33
g811
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p812
sS'practice_loop.thisIndex'
p813
g59
(g98
S'\x06\x00\x00\x00'
tRp814
sg34
g752
(S'\x07\xdf\n\x13\x0c*$\x0cg\xc8'
tRp815
sa(dp816
g63
g64
sg81
S'15-walnut_whip.png'
p817
sg82
S'28-maple_pecan.png'
p818
sg56
Vr
sS'practice_loop.thisN'
p819
I7
sS'practice_loop.thisTrialN'
p820
I7
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p821
I0
sg83
S'28-maple_pecan.png'
p822
sg33
g817
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p823
sS'practice_loop.thisIndex'
p824
g59
(g98
S'\x07\x00\x00\x00'
tRp825
sg34
g752
(S'\x07\xdf\n\x13\x0c*+\n\x16\x08'
tRp826
sa(dp827
g63
g64
sg81
g766
sg82
S'12-topic.png'
p828
sg56
Vr
sS'practice_loop.thisN'
p829
I8
sS'practice_loop.thisTrialN'
p830
I8
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p831
I0
sg83
g771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p832
sS'practice_loop.thisIndex'
p833
g59
(g98
S'\x08\x00\x00\x00'
tRp834
sg34
g752
(S'\x07\xdf\n\x13\x0c*2\x04p\xb8'
tRp835
sa(dp836
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p837
sg82
S'37-nakd_cashew_cookie.png'
p838
sg56
Vr
sS'practice_loop.thisN'
p839
I9
sS'practice_loop.thisTrialN'
p840
I9
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p841
I0
sg83
S'9-yu_mango_pieces.png'
p842
sg33
g837
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S'\x07\xdf\n\x13\x0c*8\x03[`'
tRp846
sa(dp847
g63
g64
sg81
g806
sg82
S'52-aero_mousse.png'
p848
sg56
Vr
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g811
sg33
g806
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\n\x13\x0c+\x04\x0b>\xe8'
tRp855
sa(dp856
g63
g64
sg81
g817
sg82
S'15-walnut_whip.png'
p857
sg56
Vr
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g822
sg33
g817
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\n\x13\x0c+\x0b\x06\x8f\xb0'
tRp864
sa(dp865
g63
g64
sg81
g837
sg82
S'9-yu_mango_pieces.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g842
sg33
g842
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\n\x13\x0c+\x11\x06\xa7 '
tRp873
sa(dp874
g63
g64
sg81
g786
sg82
S'54-frubes_yogurt.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g791
sg33
g786
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\n\x13\x0c+\x17\x077\xa8'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F52.49902210889195
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'17-jacobs_mini_cheddars_redo.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'left'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'17-jacobs_mini_cheddars_redo.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'8-liquorice_catherine_wheels.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p907
I0
sS'img_wrong'
p908
S'8-liquorice_catherine_wheels.png'
p909
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F1.4167620799489669
sg34
g752
(S'\x07\xdf\n\x13\x0c,\x1d\x0e\xa6\x00'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'49-yorkie.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'left'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'49-yorkie.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'35-raisins.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
S'35-raisins.png'
p925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p926
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F1.1667615097485395
sg34
g752
(S'\x07\xdf\n\x13\x0c,$\x06&8'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'18-mms.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'left'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'18-mms.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p942
I0
sg908
S'43-mrporky_pork_crackles_redo.png'
p943
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vn
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.366793269828122
sg34
g752
(S'\x07\xdf\n\x13\x0c,*\tV\xa0'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'38-maltesers.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'left'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
S'38-maltesers.png'
p953
sg63
g64
sS'trial_loop.thisIndex'
p954
g59
(g98
S'\x03\x00\x00\x00'
tRp955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p956
I0
sg903
S'6-sour_patch_kids.png'
p957
sS'block_loop.thisRepN'
p958
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p959
I0
sg908
S'6-sour_patch_kids.png'
p960
sg55
g11
sS'block_loop.thisTrial'
p961
Nsg69
Vn
sS'block_loop.thisTrialN'
p962
I0
sg39
F1.0664894678557175
sg34
g752
(S'\x07\xdf\n\x13\x0c,1\x00\x1f@'
tRp963
sa(dp964
S'trial_loop.thisTrialN'
p965
I4
sg894
S'10-bounty_redo.png'
p966
sS'block_loop.thisIndex'
p967
g888
sg38
S'left'
p968
sg58
g62
sS'trial_loop.thisN'
p969
I4
sg33
S'4-corn.png'
p970
sg63
g64
sS'trial_loop.thisIndex'
p971
g59
(g98
S'\x04\x00\x00\x00'
tRp972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p973
I0
sg903
S'4-corn.png'
p974
sS'block_loop.thisRepN'
p975
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p976
I0
sg908
S'10-bounty_redo.png'
p977
sg55
g11
sS'block_loop.thisTrial'
p978
Nsg69
Vn
sS'block_loop.thisTrialN'
p979
I0
sg39
F0.95027894129998458
sg34
g752
(S'\x07\xdf\n\x13\x0c,7\x01\xa1\xf8'
tRp980
sa(dp981
S'trial_loop.thisTrialN'
p982
I5
sg894
S'33-ambrosia_rice.png'
p983
sS'block_loop.thisIndex'
p984
g888
sg38
S'right'
p985
sg58
g62
sS'trial_loop.thisN'
p986
I5
sg33
S'33-ambrosia_rice.png'
p987
sg63
g64
sS'trial_loop.thisIndex'
p988
g59
(g98
S'\x05\x00\x00\x00'
tRp989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p990
I0
sg903
S'23-crunchie_redo.png'
p991
sS'block_loop.thisRepN'
p992
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p993
I0
sg908
S'23-crunchie_redo.png'
p994
sg55
g11
sS'block_loop.thisTrial'
p995
Nsg69
Vn
sS'block_loop.thisTrialN'
p996
I0
sg39
F0.78353681831322319
sg34
g752
(S'\x07\xdf\n\x13\x0c-\x01\x01@P'
tRp997
sa(dp998
S'trial_loop.thisTrialN'
p999
I6
sg894
S'29-beans.png'
p1000
sS'block_loop.thisIndex'
p1001
g888
sg38
S'right'
p1002
sg58
g62
sS'trial_loop.thisN'
p1003
I6
sg33
S'46-pistachios.png'
p1004
sg63
g64
sS'trial_loop.thisIndex'
p1005
g59
(g98
S'\x06\x00\x00\x00'
tRp1006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1007
I0
sg903
S'46-pistachios.png'
p1008
sS'block_loop.thisRepN'
p1009
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1010
I0
sg908
S'29-beans.png'
p1011
sg55
g11
sS'block_loop.thisTrial'
p1012
Nsg69
Vn
sS'block_loop.thisTrialN'
p1013
I0
sg39
F0.98343629224837059
sg34
g752
(S'\x07\xdf\n\x13\x0c-\x06\r\xbf\x88'
tRp1014
sa(dp1015
S'trial_loop.thisTrialN'
p1016
I7
sg894
S'48-twix.png'
p1017
sS'block_loop.thisIndex'
p1018
g888
sg38
S'left'
p1019
sg58
g62
sS'trial_loop.thisN'
p1020
I7
sg33
S'48-twix.png'
p1021
sg63
g64
sS'trial_loop.thisIndex'
p1022
g59
(g98
S'\x07\x00\x00\x00'
tRp1023
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1024
I0
sg903
S'50-polo.png'
p1025
sS'block_loop.thisRepN'
p1026
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1027
I0
sg908
S'50-polo.png'
p1028
sg55
g11
sS'block_loop.thisTrial'
p1029
Nsg69
Vn
sS'block_loop.thisTrialN'
p1030
I0
sg39
F0.85021074551150377
sg34
g752
(S'\x07\xdf\n\x13\x0c-\x0c\x0e\x15x'
tRp1031
sa(dp1032
S'trial_loop.thisTrialN'
p1033
I8
sg894
S'27-hartleys_raspberries_jelly.png'
p1034
sS'block_loop.thisIndex'
p1035
g888
sg38
S'right'
p1036
sg58
g62
sS'trial_loop.thisN'
p1037
I8
sg33
S'27-hartleys_raspberries_jelly.png'
p1038
sg63
g64
sS'trial_loop.thisIndex'
p1039
g59
(g98
S'\x08\x00\x00\x00'
tRp1040
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1041
I0
sg903
S'51-mars.png'
p1042
sS'block_loop.thisRepN'
p1043
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1044
I0
sg908
S'51-mars.png'
p1045
sg55
g11
sS'block_loop.thisTrial'
p1046
Nsg69
Vn
sS'block_loop.thisTrialN'
p1047
I0
sg39
F0.85019107365042146
sg34
g752
(S'\x07\xdf\n\x13\x0c-\x12\x0cD\xa0'
tRp1048
sa(dp1049
S'trial_loop.thisTrialN'
p1050
I9
sg894
S'20-fruit_pastilles.png'
p1051
sS'block_loop.thisIndex'
p1052
g888
sg38
S'right'
p1053
sg58
g62
sS'trial_loop.thisN'
p1054
I9
sg33
S'20-fruit_pastilles.png'
p1055
sg63
g64
sS'trial_loop.thisIndex'
p1056
g59
(g98
S'\t\x00\x00\x00'
tRp1057
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1058
I0
sg903
S'2-steamed_puddings.png'
p1059
sS'block_loop.thisRepN'
p1060
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1061
I0
sg908
S'2-steamed_puddings.png'
p1062
sg55
g11
sS'block_loop.thisTrial'
p1063
Nsg69
Vn
sS'block_loop.thisTrialN'
p1064
I0
sg39
F1.5835566612349794
sg34
g752
(S'\x07\xdf\n\x13\x0c-\x18\ns\xc8'
tRp1065
sa(dp1066
S'trial_loop.thisTrialN'
p1067
I10
sg894
g895
sS'block_loop.thisIndex'
p1068
g888
sg38
S'left'
p1069
sg58
g62
sS'trial_loop.thisN'
p1070
I10
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1071
g59
(g98
S'\n\x00\x00\x00'
tRp1072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1073
I0
sg903
g904
sS'block_loop.thisRepN'
p1074
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1075
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1076
Nsg69
Vn
sS'block_loop.thisTrialN'
p1077
I0
sg39
F1.0835444019576244
sg34
g752
(S'\x07\xdf\n\x13\x0c-\x1f\x04\x8f\xf8'
tRp1078
sa(dp1079
S'trial_loop.thisTrialN'
p1080
I11
sg894
S'22-daim.png'
p1081
sS'block_loop.thisIndex'
p1082
g888
sg38
S'left'
p1083
sg58
g62
sS'trial_loop.thisN'
p1084
I11
sg33
S'7-olives.png'
p1085
sg63
g64
sS'trial_loop.thisIndex'
p1086
g59
(g98
S'\x0b\x00\x00\x00'
tRp1087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1088
I0
sg903
S'7-olives.png'
p1089
sS'block_loop.thisRepN'
p1090
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1091
I0
sg908
S'22-daim.png'
p1092
sg55
g11
sS'block_loop.thisTrial'
p1093
Nsg69
Vn
sS'block_loop.thisTrialN'
p1094
I0
sg39
F1.0501033770597132
sg34
g752
(S'\x07\xdf\n\x13\x0c-%\x06U\x18'
tRp1095
sa(dp1096
S'trial_loop.thisTrialN'
p1097
I12
sg894
S'25-kitkat.png'
p1098
sS'block_loop.thisIndex'
p1099
g888
sg38
S'right'
p1100
sg58
g62
sS'trial_loop.thisN'
p1101
I12
sg33
S'25-kitkat.png'
p1102
sg63
g64
sS'trial_loop.thisIndex'
p1103
g59
(g98
S'\x0c\x00\x00\x00'
tRp1104
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1105
I0
sg903
S'31-hobnobs.png'
p1106
sS'block_loop.thisRepN'
p1107
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1108
I0
sg908
S'31-hobnobs.png'
p1109
sg55
g11
sS'block_loop.thisTrial'
p1110
Nsg69
Vn
sS'block_loop.thisTrialN'
p1111
I0
sg39
F1.0168599260796327
sg34
g752
(S'\x07\xdf\n\x13\x0c-+\x07\x9d8'
tRp1112
sa(dp1113
S'trial_loop.thisTrialN'
p1114
I13
sg894
g932
sS'block_loop.thisIndex'
p1115
g888
sg38
S'left'
p1116
sg58
g62
sS'trial_loop.thisN'
p1117
I13
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1118
g59
(g98
S'\r\x00\x00\x00'
tRp1119
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1120
I0
sg903
g940
sS'block_loop.thisRepN'
p1121
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1122
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1123
Nsg69
Vn
sS'block_loop.thisTrialN'
p1124
I0
sg39
F0.80023110161346267
sg34
g752
(S'\x07\xdf\n\x13\x0c-1\x08hX'
tRp1125
sa(dp1126
S'trial_loop.thisTrialN'
p1127
I14
sg894
S'7-olives.png'
p1128
sS'block_loop.thisIndex'
p1129
g888
sg38
S'left'
p1130
sg58
g62
sS'trial_loop.thisN'
p1131
I14
sg33
g1085
sg63
g64
sS'trial_loop.thisIndex'
p1132
g59
(g98
S'\x0e\x00\x00\x00'
tRp1133
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1134
I0
sg903
S'22-daim.png'
p1135
sS'block_loop.thisRepN'
p1136
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1137
I0
sg908
g1092
sg55
g11
sS'block_loop.thisTrial'
p1138
Nsg69
Vn
sS'block_loop.thisTrialN'
p1139
I0
sg39
F1.3668708168788726
sg34
g752
(S'\x07\xdf\n\x13\x0c-7\x05\xe3\xd0'
tRp1140
sa(dp1141
S'trial_loop.thisTrialN'
p1142
I15
sg894
S'45-chewy_nougat_redo.png'
p1143
sS'block_loop.thisIndex'
p1144
g888
sg38
S'right'
p1145
sg58
g62
sS'trial_loop.thisN'
p1146
I15
sg33
S'41-peanuts_redo.png'
p1147
sg63
g64
sS'trial_loop.thisIndex'
p1148
g59
(g98
S'\x0f\x00\x00\x00'
tRp1149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1150
I0
sg903
S'41-peanuts_redo.png'
p1151
sS'block_loop.thisRepN'
p1152
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1153
I0
sg908
S'45-chewy_nougat_redo.png'
p1154
sg55
g11
sS'block_loop.thisTrial'
p1155
Nsg69
Vn
sS'block_loop.thisTrialN'
p1156
I0
sg39
F1.1835595692482457
sg34
g752
(S'\x07\xdf\n\x13\x0c.\x01\x0b\xee\xb0'
tRp1157
sa(dp1158
S'trial_loop.thisTrialN'
p1159
I16
sg894
S'44-crunch.png'
p1160
sS'block_loop.thisIndex'
p1161
g888
sg38
S'left'
p1162
sg58
g62
sS'trial_loop.thisN'
p1163
I16
sg33
S'44-crunch.png'
p1164
sg63
g64
sS'trial_loop.thisIndex'
p1165
g59
(g98
S'\x10\x00\x00\x00'
tRp1166
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1167
I0
sg903
S'26-walkers_smoky_bacon.png'
p1168
sS'block_loop.thisRepN'
p1169
I0
sg906
g1164
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1170
I0
sg908
S'26-walkers_smoky_bacon.png'
p1171
sg55
g11
sS'block_loop.thisTrial'
p1172
Nsg69
Vn
sS'block_loop.thisTrialN'
p1173
I0
sg39
F1.3168338679897715
sg34
g752
(S'\x07\xdf\n\x13\x0c.\x08\x00\x17p'
tRp1174
sa(dp1175
S'trial_loop.thisTrialN'
p1176
I17
sg894
g1017
sS'block_loop.thisIndex'
p1177
g888
sg38
S'left'
p1178
sg58
g62
sS'trial_loop.thisN'
p1179
I17
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p1180
g59
(g98
S'\x11\x00\x00\x00'
tRp1181
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1182
I0
sg903
g1025
sS'block_loop.thisRepN'
p1183
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1184
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p1185
Nsg69
Vn
sS'block_loop.thisTrialN'
p1186
I0
sg39
F0.86685656190638838
sg34
g752
(S'\x07\xdf\n\x13\x0c.\x0e\x05j\xb8'
tRp1187
sa(dp1188
S'trial_loop.thisTrialN'
p1189
I18
sg894
S'30-spaghetti_hoops.png'
p1190
sS'block_loop.thisIndex'
p1191
g888
sg38
S'right'
p1192
sg58
g62
sS'trial_loop.thisN'
p1193
I18
sg33
S'19-caramello_redo.png'
p1194
sg63
g64
sS'trial_loop.thisIndex'
p1195
g59
(g98
S'\x12\x00\x00\x00'
tRp1196
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1197
I0
sg903
S'19-caramello_redo.png'
p1198
sS'block_loop.thisRepN'
p1199
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1200
I0
sg908
S'30-spaghetti_hoops.png'
p1201
sg55
g11
sS'block_loop.thisTrial'
p1202
Nsg69
Vn
sS'block_loop.thisTrialN'
p1203
I0
sg39
F1.2668091783780255
sg34
g752
(S'\x07\xdf\n\x13\x0c.\x14\x03\xd8`'
tRp1204
sa(dp1205
S'trial_loop.thisTrialN'
p1206
I19
sg894
g983
sS'block_loop.thisIndex'
p1207
g888
sg38
S'left'
p1208
sg58
g62
sS'trial_loop.thisN'
p1209
I19
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p1210
g59
(g98
S'\x13\x00\x00\x00'
tRp1211
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1212
I0
sg903
g991
sS'block_loop.thisRepN'
p1213
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1214
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1215
Nsg69
Vn
sS'block_loop.thisTrialN'
p1216
I0
sg39
F1.3838852668595791
sg34
g752
(S'\x07\xdf\n\x13\x0c.\x1a\x08w\xf8'
tRp1217
sa(dp1218
S'trial_loop.thisTrialN'
p1219
I20
sg894
g1190
sS'block_loop.thisIndex'
p1220
g888
sg38
S'right'
p1221
sg58
g62
sS'trial_loop.thisN'
p1222
I20
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p1223
g59
(g98
S'\x14\x00\x00\x00'
tRp1224
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1225
I0
sg903
g1198
sS'block_loop.thisRepN'
p1226
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1227
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p1228
Nsg69
Vn
sS'block_loop.thisTrialN'
p1229
I0
sg39
F1.1834232917135523
sg34
g752
(S'\x07\xdf\n\x13\x0c. \x0e\xbdp'
tRp1230
sa(dp1231
S'trial_loop.thisTrialN'
p1232
I21
sg894
S'26-walkers_smoky_bacon.png'
p1233
sS'block_loop.thisIndex'
p1234
g888
sg38
S'right'
p1235
sg58
g62
sS'trial_loop.thisN'
p1236
I21
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p1237
g59
(g98
S'\x15\x00\x00\x00'
tRp1238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1239
I0
sg903
S'44-crunch.png'
p1240
sS'block_loop.thisRepN'
p1241
I0
sg906
g1164
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1242
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p1243
Nsg69
Vn
sS'block_loop.thisTrialN'
p1244
I0
sg39
F1.4667668126003264
sg34
g752
(S"\x07\xdf\n\x13\x0c.'\x02\xea\x18"
tRp1245
sa(dp1246
S'trial_loop.thisTrialN'
p1247
I22
sg894
S'40-sardines.png'
p1248
sS'block_loop.thisIndex'
p1249
g888
sg38
S'right'
p1250
sg58
g62
sS'trial_loop.thisN'
p1251
I22
sg33
S'5-pineapple.png'
p1252
sg63
g64
sS'trial_loop.thisIndex'
p1253
g59
(g98
S'\x16\x00\x00\x00'
tRp1254
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1255
I0
sg903
S'5-pineapple.png'
p1256
sS'block_loop.thisRepN'
p1257
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1258
I0
sg908
S'40-sardines.png'
p1259
sg55
g11
sS'block_loop.thisTrial'
p1260
Nsg69
Vn
sS'block_loop.thisTrialN'
p1261
I0
sg39
F1.5167530137860012
sg34
g752
(S'\x07\xdf\n\x13\x0c.-\n`@'
tRp1262
sa(dp1263
S'trial_loop.thisTrialN'
p1264
I23
sg894
S'4-corn.png'
p1265
sS'block_loop.thisIndex'
p1266
g888
sg38
S'right'
p1267
sg58
g62
sS'trial_loop.thisN'
p1268
I23
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1269
g59
(g98
S'\x17\x00\x00\x00'
tRp1270
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1271
I0
sg903
S'10-bounty_redo.png'
p1272
sS'block_loop.thisRepN'
p1273
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1274
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1275
Nsg69
Vn
sS'block_loop.thisTrialN'
p1276
I0
sg39
F1.0502134254475095
sg34
g752
(S'\x07\xdf\n\x13\x0c.4\x03\x8a@'
tRp1277
sa(dp1278
S'trial_loop.thisTrialN'
p1279
I24
sg894
g949
sS'block_loop.thisIndex'
p1280
g888
sg38
S'left'
p1281
sg58
g62
sS'trial_loop.thisN'
p1282
I24
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1283
g59
(g98
S'\x18\x00\x00\x00'
tRp1284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1285
I0
sg903
g957
sS'block_loop.thisRepN'
p1286
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1287
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1288
Nsg69
Vn
sS'block_loop.thisTrialN'
p1289
I0
sg39
F1.0336240587439534
sg34
g752
(S'\x07\xdf\n\x13\x0c.:\x04\xd2`'
tRp1290
sa(dp1291
S'trial_loop.thisTrialN'
p1292
I25
sg894
S'41-peanuts_redo.png'
p1293
sS'block_loop.thisIndex'
p1294
g888
sg38
S'left'
p1295
sg58
g62
sS'trial_loop.thisN'
p1296
I25
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p1297
g59
(g98
S'\x19\x00\x00\x00'
tRp1298
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1299
I0
sg903
S'45-chewy_nougat_redo.png'
p1300
sS'block_loop.thisRepN'
p1301
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1302
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p1303
Nsg69
Vn
sS'block_loop.thisTrialN'
p1304
I0
sg39
F1.4667497066329815
sg34
g752
(S'\x07\xdf\n\x13\x0c/\x04\x05\xdf\xe8'
tRp1305
sa(dp1306
S'trial_loop.thisTrialN'
p1307
I26
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1308
sS'block_loop.thisIndex'
p1309
g888
sg38
S'left'
p1310
sg58
g62
sS'trial_loop.thisN'
p1311
I26
sg33
S'36-fig_rolls.png'
p1312
sg63
g64
sS'trial_loop.thisIndex'
p1313
g59
(g98
S'\x1a\x00\x00\x00'
tRp1314
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1315
I0
sg903
S'36-fig_rolls.png'
p1316
sS'block_loop.thisRepN'
p1317
I0
sg906
g1312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1318
I0
sg908
S'34-hula_hoops_bbq_beef_redo.png'
p1319
sg55
g11
sS'block_loop.thisTrial'
p1320
Nsg69
Vn
sS'block_loop.thisTrialN'
p1321
I0
sg39
F1.2501855997415987
sg34
g752
(S'\x07\xdf\n\x13\x0c/\n\r\x94\x90'
tRp1322
sa(dp1323
S'trial_loop.thisTrialN'
p1324
I27
sg894
S'13-mccoys_steak_crisps.png'
p1325
sS'block_loop.thisIndex'
p1326
g888
sg38
S'left'
p1327
sg58
g62
sS'trial_loop.thisN'
p1328
I27
sg33
S'3-ellas_strawberries_apples.png'
p1329
sg63
g64
sS'trial_loop.thisIndex'
p1330
g59
(g98
S'\x1b\x00\x00\x00'
tRp1331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1332
I0
sg903
S'3-ellas_strawberries_apples.png'
p1333
sS'block_loop.thisRepN'
p1334
I0
sg906
g1329
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1335
I0
sg908
S'13-mccoys_steak_crisps.png'
p1336
sg55
g11
sS'block_loop.thisTrial'
p1337
Nsg69
Vn
sS'block_loop.thisTrialN'
p1338
I0
sg39
F1.1500980171913397
sg34
g752
(S'\x07\xdf\n\x13\x0c/\x11\x02\xb3h'
tRp1339
sa(dp1340
S'trial_loop.thisTrialN'
p1341
I28
sg894
S'6-sour_patch_kids.png'
p1342
sS'block_loop.thisIndex'
p1343
g888
sg38
S'right'
p1344
sg58
g62
sS'trial_loop.thisN'
p1345
I28
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p1346
g59
(g98
S'\x1c\x00\x00\x00'
tRp1347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1348
I0
sg903
S'38-maltesers.png'
p1349
sS'block_loop.thisRepN'
p1350
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1351
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1352
Nsg69
Vn
sS'block_loop.thisTrialN'
p1353
I0
sg39
F1.3331885978459468
sg34
g752
(S'\x07\xdf\n\x13\x0c/\x17\x05f\xd0'
tRp1354
sa(dp1355
S'trial_loop.thisTrialN'
p1356
I29
sg894
S'1-treacle_cookies.png'
p1357
sS'block_loop.thisIndex'
p1358
g888
sg38
S'right'
p1359
sg58
g62
sS'trial_loop.thisN'
p1360
I29
sg33
S'21-nakd_banana_crunch.png'
p1361
sg63
g64
sS'trial_loop.thisIndex'
p1362
g59
(g98
S'\x1d\x00\x00\x00'
tRp1363
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1364
I0
sg903
S'21-nakd_banana_crunch.png'
p1365
sS'block_loop.thisRepN'
p1366
I0
sg906
g1361
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1367
I0
sg908
S'1-treacle_cookies.png'
p1368
sg55
g11
sS'block_loop.thisTrial'
p1369
Nsg69
Vn
sS'block_loop.thisTrialN'
p1370
I0
sg39
F1.583877683213359
sg34
g752
(S'\x07\xdf\n\x13\x0c/\x1d\n\xf8\x98'
tRp1371
sa(dp1372
S'trial_loop.thisTrialN'
p1373
I30
sg894
S'16-skips_prawn.png'
p1374
sS'block_loop.thisIndex'
p1375
g888
sg38
S'left'
p1376
sg58
g62
sS'trial_loop.thisN'
p1377
I30
sg33
S'42-mrkipling_lemon_slices.png'
p1378
sg63
g64
sS'trial_loop.thisIndex'
p1379
g59
(g98
S'\x1e\x00\x00\x00'
tRp1380
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1381
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1382
sS'block_loop.thisRepN'
p1383
I0
sg906
g1378
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1384
I0
sg908
S'16-skips_prawn.png'
p1385
sg55
g11
sS'block_loop.thisTrial'
p1386
Nsg69
Vn
sS'block_loop.thisTrialN'
p1387
I0
sg39
F1.2499934427123662
sg34
g752
(S'\x07\xdf\n\x13\x0c/$\x05\x18\xb0'
tRp1388
sa(dp1389
S'trial_loop.thisTrialN'
p1390
I31
sg894
g932
sS'block_loop.thisIndex'
p1391
g888
sg38
S'left'
p1392
sg58
g62
sS'trial_loop.thisN'
p1393
I31
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p1394
g59
(g98
S'\x1f\x00\x00\x00'
tRp1395
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1396
I0
sg903
g940
sS'block_loop.thisRepN'
p1397
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1398
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1399
Nsg69
Vn
sS'block_loop.thisTrialN'
p1400
I0
sg39
F0.93344125297699065
sg34
g752
(S'\x07\xdf\n\x13\x0c/*\tu\xe0'
tRp1401
sa(dp1402
S'trial_loop.thisTrialN'
p1403
I32
sg894
g1143
sS'block_loop.thisIndex'
p1404
g888
sg38
S'right'
p1405
sg58
g62
sS'trial_loop.thisN'
p1406
I32
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p1407
g59
(g98
S' \x00\x00\x00'
tRp1408
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1409
I0
sg903
g1151
sS'block_loop.thisRepN'
p1410
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1411
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p1412
Nsg69
Vn
sS'block_loop.thisTrialN'
p1413
I0
sg39
F1.2167591149154759
sg34
g752
(S'\x07\xdf\n\x13\x0c/0\x08\xd9\xa0'
tRp1414
sa(dp1415
S'trial_loop.thisTrialN'
p1416
I33
sg894
g1128
sS'block_loop.thisIndex'
p1417
g888
sg38
S'left'
p1418
sg58
g62
sS'trial_loop.thisN'
p1419
I33
sg33
g1085
sg63
g64
sS'trial_loop.thisIndex'
p1420
g59
(g98
S'!\x00\x00\x00'
tRp1421
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1422
I0
sg903
g1135
sS'block_loop.thisRepN'
p1423
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1424
I0
sg908
g1092
sg55
g11
sS'block_loop.thisTrial'
p1425
Nsg69
Vn
sS'block_loop.thisTrialN'
p1426
I0
sg39
F1.550200310874061
sg34
g752
(S'\x07\xdf\n\x13\x0c/6\x0c\xbd\xb8'
tRp1427
sa(dp1428
S'trial_loop.thisTrialN'
p1429
I34
sg894
g1160
sS'block_loop.thisIndex'
p1430
g888
sg38
S'left'
p1431
sg58
g62
sS'trial_loop.thisN'
p1432
I34
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p1433
g59
(g98
S'"\x00\x00\x00'
tRp1434
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1435
I0
sg903
g1168
sS'block_loop.thisRepN'
p1436
I0
sg906
g1164
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1437
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p1438
Nsg69
Vn
sS'block_loop.thisTrialN'
p1439
I0
sg39
F1.1170689609953115
sg34
g752
(S'\x07\xdf\n\x13\x0c0\x01\x06`\xd0'
tRp1440
sa(dp1441
S'trial_loop.thisTrialN'
p1442
I35
sg894
g1190
sS'block_loop.thisIndex'
p1443
g888
sg38
S'right'
p1444
sg58
g62
sS'trial_loop.thisN'
p1445
I35
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p1446
g59
(g98
S'#\x00\x00\x00'
tRp1447
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1448
I0
sg903
g1198
sS'block_loop.thisRepN'
p1449
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1450
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p1451
Nsg69
Vn
sS'block_loop.thisTrialN'
p1452
I0
sg39
F1.2667666985598771
sg34
g752
(S'\x07\xdf\n\x13\x0c0\x07\x08\x9f\x08'
tRp1453
sa(dp1454
S'trial_loop.thisTrialN'
p1455
I36
sg894
S'23-crunchie_redo.png'
p1456
sS'block_loop.thisIndex'
p1457
g888
sg38
S'right'
p1458
sg58
g62
sS'trial_loop.thisN'
p1459
I36
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1460
g59
(g98
S'$\x00\x00\x00'
tRp1461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1462
I0
sg903
S'33-ambrosia_rice.png'
p1463
sS'block_loop.thisRepN'
p1464
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1465
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1466
Nsg69
Vn
sS'block_loop.thisTrialN'
p1467
I0
sg39
F2.6500432780958363
sg34
g752
(S'\x07\xdf\n\x13\x0c0\r\r:\xb8'
tRp1468
sa(dp1469
S'trial_loop.thisTrialN'
p1470
I37
sg894
g1265
sS'block_loop.thisIndex'
p1471
g888
sg38
S'left'
p1472
sg58
g62
sS'trial_loop.thisN'
p1473
I37
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1474
g59
(g98
S'%\x00\x00\x00'
tRp1475
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1476
I0
sg903
g1272
sS'block_loop.thisRepN'
p1477
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1478
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1479
Nsg69
Vn
sS'block_loop.thisTrialN'
p1480
I0
sg39
F1.4500782312879892
sg34
g752
(S'\x07\xdf\n\x13\x0c0\x15\x08\x83\xb0'
tRp1481
sa(dp1482
S'trial_loop.thisTrialN'
p1483
I38
sg894
g1357
sS'block_loop.thisIndex'
p1484
g888
sg38
S'right'
p1485
sg58
g62
sS'trial_loop.thisN'
p1486
I38
sg33
g1361
sg63
g64
sS'trial_loop.thisIndex'
p1487
g59
(g98
S'&\x00\x00\x00'
tRp1488
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1489
I0
sg903
g1365
sS'block_loop.thisRepN'
p1490
I0
sg906
g1361
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1491
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p1492
Nsg69
Vn
sS'block_loop.thisTrialN'
p1493
I0
sg39
F1.6835182298291329
sg34
g752
(S'\x07\xdf\n\x13\x0c0\x1c\x00}\x00'
tRp1494
sa(dp1495
S'trial_loop.thisTrialN'
p1496
I39
sg894
S'35-raisins.png'
p1497
sS'block_loop.thisIndex'
p1498
g888
sg38
S'right'
p1499
sg58
g62
sS'trial_loop.thisN'
p1500
I39
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1501
g59
(g98
S"'\x00\x00\x00"
tRp1502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1503
I0
sg903
S'49-yorkie.png'
p1504
sS'block_loop.thisRepN'
p1505
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1506
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p1507
Nsg69
Vn
sS'block_loop.thisTrialN'
p1508
I0
sg39
F2.6168699615791411
sg34
g752
(S'\x07\xdf\n\x13\x0c0"\x0b\x89 '
tRp1509
sa(dp1510
S'trial_loop.thisTrialN'
p1511
I40
sg894
S'42-mrkipling_lemon_slices.png'
p1512
sS'block_loop.thisIndex'
p1513
g888
sg38
S'left'
p1514
sg58
g62
sS'trial_loop.thisN'
p1515
I40
sg33
g1385
sg63
g64
sS'trial_loop.thisIndex'
p1516
g59
(g98
S'(\x00\x00\x00'
tRp1517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1518
I0
sg903
S'16-skips_prawn.png'
p1519
sS'block_loop.thisRepN'
p1520
I0
sg906
g1378
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1521
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p1522
Nsg69
Vn
sS'block_loop.thisTrialN'
p1523
I0
sg39
F1.2832970496765483
sg34
g752
(S'\x07\xdf\n\x13\x0c0*\x06\x1a\x80'
tRp1524
sa(dp1525
S'trial_loop.thisTrialN'
p1526
I41
sg894
S'43-mrporky_pork_crackles_redo.png'
p1527
sS'block_loop.thisIndex'
p1528
g888
sg38
S'right'
p1529
sg58
g62
sS'trial_loop.thisN'
p1530
I41
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p1531
g59
(g98
S')\x00\x00\x00'
tRp1532
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1533
I0
sg903
S'18-mms.png'
p1534
sS'block_loop.thisRepN'
p1535
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1536
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1537
Nsg69
Vn
sS'block_loop.thisTrialN'
p1538
I0
sg39
F0.83349450955574866
sg34
g752
(S'\x07\xdf\n\x13\x0c00\n\xf4\xb0'
tRp1539
sa(dp1540
S'trial_loop.thisTrialN'
p1541
I42
sg894
g1308
sS'block_loop.thisIndex'
p1542
g888
sg38
S'right'
p1543
sg58
g62
sS'trial_loop.thisN'
p1544
I42
sg33
g1312
sg63
g64
sS'trial_loop.thisIndex'
p1545
g59
(g98
S'*\x00\x00\x00'
tRp1546
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1547
I0
sg903
g1316
sS'block_loop.thisRepN'
p1548
I0
sg906
g1312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1549
I0
sg908
g1319
sg55
g11
sS'block_loop.thisTrial'
p1550
Nsg69
Vn
sS'block_loop.thisTrialN'
p1551
I0
sg39
F0.85021986869469401
sg34
g752
(S'\x07\xdf\n\x13\x0c06\x08\xe5X'
tRp1552
sa(dp1553
S'trial_loop.thisTrialN'
p1554
I43
sg894
S'5-pineapple.png'
p1555
sS'block_loop.thisIndex'
p1556
g888
sg38
S'left'
p1557
sg58
g62
sS'trial_loop.thisN'
p1558
I43
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p1559
g59
(g98
S'+\x00\x00\x00'
tRp1560
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1561
I0
sg903
S'40-sardines.png'
p1562
sS'block_loop.thisRepN'
p1563
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1564
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p1565
Nsg69
Vn
sS'block_loop.thisTrialN'
p1566
I0
sg39
F1.2667524435873929
sg34
g752
(S'\x07\xdf\n\x13\x0c1\x00\x07\x18h'
tRp1567
sa(dp1568
S'trial_loop.thisTrialN'
p1569
I44
sg894
g1265
sS'block_loop.thisIndex'
p1570
g888
sg38
S'left'
p1571
sg58
g62
sS'trial_loop.thisN'
p1572
I44
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p1573
g59
(g98
S',\x00\x00\x00'
tRp1574
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1575
I0
sg903
g1272
sS'block_loop.thisRepN'
p1576
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1577
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1578
Nsg69
Vn
sS'block_loop.thisTrialN'
p1579
I0
sg39
F1.4839166848178138
sg34
g752
(S'\x07\xdf\n\x13\x0c1\x06\x0b\xb4\x18'
tRp1580
sa(dp1581
S'trial_loop.thisTrialN'
p1582
I45
sg894
g1143
sS'block_loop.thisIndex'
p1583
g888
sg38
S'right'
p1584
sg58
g62
sS'trial_loop.thisN'
p1585
I45
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p1586
g59
(g98
S'-\x00\x00\x00'
tRp1587
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1588
I0
sg903
g1151
sS'block_loop.thisRepN'
p1589
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1590
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p1591
Nsg69
Vn
sS'block_loop.thisTrialN'
p1592
I0
sg39
F1.5501241893198312
sg34
g752
(S'\x07\xdf\n\x13\x0c1\r\x04e\x00'
tRp1593
sa(dp1594
S'trial_loop.thisTrialN'
p1595
I46
sg894
g1342
sS'block_loop.thisIndex'
p1596
g888
sg38
S'right'
p1597
sg58
g62
sS'trial_loop.thisN'
p1598
I46
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1599
g59
(g98
S'.\x00\x00\x00'
tRp1600
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1601
I0
sg903
g1349
sS'block_loop.thisRepN'
p1602
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1603
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1604
Nsg69
Vn
sS'block_loop.thisTrialN'
p1605
I0
sg39
F1.0831689259848645
sg34
g752
(S'\x07\xdf\n\x13\x0c1\x13\rJX'
tRp1606
sa(dp1607
S'trial_loop.thisTrialN'
p1608
I47
sg894
g1233
sS'block_loop.thisIndex'
p1609
g888
sg38
S'right'
p1610
sg58
g62
sS'trial_loop.thisN'
p1611
I47
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p1612
g59
(g98
S'/\x00\x00\x00'
tRp1613
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1614
I0
sg903
g1240
sS'block_loop.thisRepN'
p1615
I0
sg906
g1164
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1616
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p1617
Nsg69
Vn
sS'block_loop.thisTrialN'
p1618
I0
sg39
F1.433521936121906
sg34
g752
(S'\x07\xdf\n\x13\x0c1\x19\x0f\x0b\x90'
tRp1619
sa(dp1620
S'trial_loop.thisTrialN'
p1621
I48
sg894
g1527
sS'block_loop.thisIndex'
p1622
g888
sg38
S'right'
p1623
sg58
g62
sS'trial_loop.thisN'
p1624
I48
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1625
g59
(g98
S'0\x00\x00\x00'
tRp1626
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1627
I0
sg903
g1534
sS'block_loop.thisRepN'
p1628
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1629
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1630
Nsg69
Vn
sS'block_loop.thisTrialN'
p1631
I0
sg39
F0.9167127577438805
sg34
g752
(S'\x07\xdf\n\x13\x0c1 \x07\x04\xe0'
tRp1632
sa(dp1633
S'trial_loop.thisTrialN'
p1634
I49
sg894
g1128
sS'block_loop.thisIndex'
p1635
g888
sg38
S'left'
p1636
sg58
g62
sS'trial_loop.thisN'
p1637
I49
sg33
g1092
sg63
g64
sS'trial_loop.thisIndex'
p1638
g59
(g98
S'1\x00\x00\x00'
tRp1639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1640
I0
sg903
g1135
sS'block_loop.thisRepN'
p1641
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1642
I0
sg908
g1092
sg55
g11
sS'block_loop.thisTrial'
p1643
Nsg69
Vn
sS'block_loop.thisTrialN'
p1644
I0
sg39
F1.2668040465869126
sg34
g752
(S'\x07\xdf\n\x13\x0c1&\x06* '
tRp1645
sa(dp1646
S'trial_loop.thisTrialN'
p1647
I50
sg894
g1034
sS'block_loop.thisIndex'
p1648
g888
sg38
S'right'
p1649
sg58
g62
sS'trial_loop.thisN'
p1650
I50
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p1651
g59
(g98
S'2\x00\x00\x00'
tRp1652
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1653
I0
sg903
g1042
sS'block_loop.thisRepN'
p1654
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1655
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p1656
Nsg69
Vn
sS'block_loop.thisTrialN'
p1657
I0
sg39
F1.4001806960295653
sg34
g752
(S'\x07\xdf\n\x13\x0c1,\n\xc5\xd0'
tRp1658
sa(dp1659
S'trial_loop.thisTrialN'
p1660
I51
sg894
g1051
sS'block_loop.thisIndex'
p1661
g888
sg38
S'left'
p1662
sg58
g62
sS'trial_loop.thisN'
p1663
I51
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p1664
g59
(g98
S'3\x00\x00\x00'
tRp1665
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1666
I0
sg903
g1059
sS'block_loop.thisRepN'
p1667
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1668
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p1669
Nsg69
Vn
sS'block_loop.thisTrialN'
p1670
I0
sg39
F2.3001641032424232
sg34
g752
(S'\x07\xdf\n\x13\x0c13\x02\x07\x88'
tRp1671
sa(dp1672
S'trial_loop.thisTrialN'
p1673
I52
sg894
g1190
sS'block_loop.thisIndex'
p1674
g888
sg38
S'right'
p1675
sg58
g62
sS'trial_loop.thisN'
p1676
I52
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p1677
g59
(g98
S'4\x00\x00\x00'
tRp1678
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1679
I0
sg903
g1198
sS'block_loop.thisRepN'
p1680
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1681
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p1682
Nsg69
Vn
sS'block_loop.thisTrialN'
p1683
I0
sg39
F1.4334814520007058
sg34
g752
(S'\x07\xdf\n\x13\x0c1:\x07\x18h'
tRp1684
sa(dp1685
S'trial_loop.thisTrialN'
p1686
I53
sg894
S'8-liquorice_catherine_wheels.png'
p1687
sS'block_loop.thisIndex'
p1688
g888
sg38
S'right'
p1689
sg58
g62
sS'trial_loop.thisN'
p1690
I53
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1691
g59
(g98
S'5\x00\x00\x00'
tRp1692
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1693
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1694
sS'block_loop.thisRepN'
p1695
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1696
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1697
Nsg69
Vn
sS'block_loop.thisTrialN'
p1698
I0
sg39
F1.1501159784565971
sg34
g752
(S'\x07\xdf\n\x13\x0c2\x04\x0eS\xf8'
tRp1699
sa(dp1700
S'trial_loop.thisTrialN'
p1701
I54
sg894
S'36-fig_rolls.png'
p1702
sS'block_loop.thisIndex'
p1703
g888
sg38
S'left'
p1704
sg58
g62
sS'trial_loop.thisN'
p1705
I54
sg33
g1312
sg63
g64
sS'trial_loop.thisIndex'
p1706
g59
(g98
S'6\x00\x00\x00'
tRp1707
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1708
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1709
sS'block_loop.thisRepN'
p1710
I0
sg906
g1312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1711
I0
sg908
g1319
sg55
g11
sS'block_loop.thisTrial'
p1712
Nsg69
Vn
sS'block_loop.thisTrialN'
p1713
I0
sg39
F1.2335731399816723
sg34
g752
(S'\x07\xdf\n\x13\x0c2\x0b\x01\xc9\x08'
tRp1714
sa(dp1715
S'trial_loop.thisTrialN'
p1716
I55
sg894
g915
sS'block_loop.thisIndex'
p1717
g888
sg38
S'right'
p1718
sg58
g62
sS'trial_loop.thisN'
p1719
I55
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1720
g59
(g98
S'7\x00\x00\x00'
tRp1721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1722
I0
sg903
g923
sS'block_loop.thisRepN'
p1723
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1724
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p1725
Nsg69
Vn
sS'block_loop.thisTrialN'
p1726
I0
sg39
F2.2668354075267416
sg34
g752
(S'\x07\xdf\n\x13\x0c2\x11\x05\xeb\xa0'
tRp1727
sa(dp1728
S'trial_loop.thisTrialN'
p1729
I56
sg894
S'3-ellas_strawberries_apples.png'
p1730
sS'block_loop.thisIndex'
p1731
g888
sg38
S'left'
p1732
sg58
g62
sS'trial_loop.thisN'
p1733
I56
sg33
g1329
sg63
g64
sS'trial_loop.thisIndex'
p1734
g59
(g98
S'8\x00\x00\x00'
tRp1735
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1736
I0
sg903
S'13-mccoys_steak_crisps.png'
p1737
sS'block_loop.thisRepN'
p1738
I0
sg906
g1329
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1739
I0
sg908
g1336
sg55
g11
sS'block_loop.thisTrial'
p1740
Nsg69
Vn
sS'block_loop.thisTrialN'
p1741
I0
sg39
F1.1334470690071612
sg34
g752
(S'\x07\xdf\n\x13\x0c2\x18\n\x83h'
tRp1742
sa(dp1743
S'trial_loop.thisTrialN'
p1744
I57
sg894
g1143
sS'block_loop.thisIndex'
p1745
g888
sg38
S'right'
p1746
sg58
g62
sS'trial_loop.thisN'
p1747
I57
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p1748
g59
(g98
S'9\x00\x00\x00'
tRp1749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1750
I0
sg903
g1151
sS'block_loop.thisRepN'
p1751
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1752
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p1753
Nsg69
Vn
sS'block_loop.thisTrialN'
p1754
I0
sg39
F1.150119399650066
sg34
g752
(S'\x07\xdf\n\x13\x0c2\x1e\x0c\xfc8'
tRp1755
sa(dp1756
S'trial_loop.thisTrialN'
p1757
I58
sg894
S'50-polo.png'
p1758
sS'block_loop.thisIndex'
p1759
g888
sg38
S'right'
p1760
sg58
g62
sS'trial_loop.thisN'
p1761
I58
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p1762
g59
(g98
S':\x00\x00\x00'
tRp1763
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1764
I0
sg903
S'48-twix.png'
p1765
sS'block_loop.thisRepN'
p1766
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1767
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p1768
Nsg69
Vn
sS'block_loop.thisTrialN'
p1769
I0
sg39
F2.0000806831449154
sg34
g752
(S'\x07\xdf\n\x13\x0c2%\x00qH'
tRp1770
sa(dp1771
S'trial_loop.thisTrialN'
p1772
I59
sg894
g983
sS'block_loop.thisIndex'
p1773
g888
sg38
S'right'
p1774
sg58
g62
sS'trial_loop.thisN'
p1775
I59
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1776
g59
(g98
S';\x00\x00\x00'
tRp1777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1778
I0
sg903
g991
sS'block_loop.thisRepN'
p1779
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1780
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1781
Nsg69
Vn
sS'block_loop.thisTrialN'
p1782
I0
sg39
F1.7002350359853153
sg34
g752
(S'\x07\xdf\n\x13\x0c2,\x00\xfa\x00'
tRp1783
sa(dp1784
S'trial_loop.thisTrialN'
p1785
I60
sg894
g932
sS'block_loop.thisIndex'
p1786
g888
sg38
S'left'
p1787
sg58
g62
sS'trial_loop.thisN'
p1788
I60
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1789
g59
(g98
S'<\x00\x00\x00'
tRp1790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1791
I0
sg903
g940
sS'block_loop.thisRepN'
p1792
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1793
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1794
Nsg69
Vn
sS'block_loop.thisTrialN'
p1795
I0
sg39
F1.1335015230015415
sg34
g752
(S'\x07\xdf\n\x13\x0c22\x0cD\xa0'
tRp1796
sa(dp1797
S'trial_loop.thisTrialN'
p1798
I61
sg894
g1017
sS'block_loop.thisIndex'
p1799
g888
sg38
S'left'
p1800
sg58
g62
sS'trial_loop.thisN'
p1801
I61
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p1802
g59
(g98
S'=\x00\x00\x00'
tRp1803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1804
I0
sg903
g1025
sS'block_loop.thisRepN'
p1805
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1806
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p1807
Nsg69
Vn
sS'block_loop.thisTrialN'
p1808
I0
sg39
F1.0501090790476155
sg34
g752
(S'\x07\xdf\n\x13\x0c28\x0e\xbdp'
tRp1809
sa(dp1810
S'trial_loop.thisTrialN'
p1811
I62
sg894
S'51-mars.png'
p1812
sS'block_loop.thisIndex'
p1813
g888
sg38
S'right'
p1814
sg58
g62
sS'trial_loop.thisN'
p1815
I62
sg33
g1045
sg63
g64
sS'trial_loop.thisIndex'
p1816
g59
(g98
S'>\x00\x00\x00'
tRp1817
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1818
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p1819
sS'block_loop.thisRepN'
p1820
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1821
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p1822
Nsg69
Vn
sS'block_loop.thisTrialN'
p1823
I0
sg39
F1.0834936542560172
sg34
g752
(S'\x07\xdf\n\x13\x0c3\x03\x00\xc3P'
tRp1824
sa(dp1825
S'trial_loop.thisTrialN'
p1826
I63
sg894
g1497
sS'block_loop.thisIndex'
p1827
g888
sg38
S'left'
p1828
sg58
g62
sS'trial_loop.thisN'
p1829
I63
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1830
g59
(g98
S'?\x00\x00\x00'
tRp1831
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1832
I0
sg903
g1504
sS'block_loop.thisRepN'
p1833
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1834
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p1835
Nsg69
Vn
sS'block_loop.thisTrialN'
p1836
I0
sg39
F1.0668575312447501
sg34
g752
(S'\x07\xdf\n\x13\x0c3\t\x02\x84\x88'
tRp1837
sa(dp1838
S'trial_loop.thisTrialN'
p1839
I64
sg894
g1051
sS'block_loop.thisIndex'
p1840
g888
sg38
S'left'
p1841
sg58
g62
sS'trial_loop.thisN'
p1842
I64
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p1843
g59
(g98
S'@\x00\x00\x00'
tRp1844
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1845
I0
sg903
g1059
sS'block_loop.thisRepN'
p1846
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1847
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p1848
Nsg69
Vn
sS'block_loop.thisTrialN'
p1849
I0
sg39
F1.2172289588052081
sg34
g752
(S'\x07\xdf\n\x13\x0c3\x0f\x04\x07@'
tRp1850
sa(dp1851
S'trial_loop.thisTrialN'
p1852
I65
sg894
S'21-nakd_banana_crunch.png'
p1853
sS'block_loop.thisIndex'
p1854
g888
sg38
S'left'
p1855
sg58
g62
sS'trial_loop.thisN'
p1856
I65
sg33
g1361
sg63
g64
sS'trial_loop.thisIndex'
p1857
g59
(g98
S'A\x00\x00\x00'
tRp1858
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1859
I0
sg903
S'1-treacle_cookies.png'
p1860
sS'block_loop.thisRepN'
p1861
I0
sg906
g1361
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1862
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p1863
Nsg69
Vn
sS'block_loop.thisTrialN'
p1864
I0
sg39
F1.5502607519556477
sg34
g752
(S'\x07\xdf\n\x13\x0c3\x15\x07\xef@'
tRp1865
sa(dp1866
S'trial_loop.thisTrialN'
p1867
I66
sg894
g1308
sS'block_loop.thisIndex'
p1868
g888
sg38
S'right'
p1869
sg58
g62
sS'trial_loop.thisN'
p1870
I66
sg33
g1312
sg63
g64
sS'trial_loop.thisIndex'
p1871
g59
(g98
S'B\x00\x00\x00'
tRp1872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1873
I0
sg903
g1316
sS'block_loop.thisRepN'
p1874
I0
sg906
g1312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1875
I0
sg908
g1319
sg55
g11
sS'block_loop.thisTrial'
p1876
Nsg69
Vn
sS'block_loop.thisTrialN'
p1877
I0
sg39
F1.6334741534537898
sg34
g752
(S'\x07\xdf\n\x13\x0c3\x1c\x01\x92X'
tRp1878
sa(dp1879
S'trial_loop.thisTrialN'
p1880
I67
sg894
g1248
sS'block_loop.thisIndex'
p1881
g888
sg38
S'right'
p1882
sg58
g62
sS'trial_loop.thisN'
p1883
I67
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p1884
g59
(g98
S'C\x00\x00\x00'
tRp1885
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1886
I0
sg903
g1256
sS'block_loop.thisRepN'
p1887
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1888
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p1889
Nsg69
Vn
sS'block_loop.thisTrialN'
p1890
I0
sg39
F0.91677747531866771
sg34
g752
(S'\x07\xdf\n\x13\x0c3"\x0b\xa8`'
tRp1891
sa(dp1892
S'trial_loop.thisTrialN'
p1893
I68
sg894
g1034
sS'block_loop.thisIndex'
p1894
g888
sg38
S'left'
p1895
sg58
g62
sS'trial_loop.thisN'
p1896
I68
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p1897
g59
(g98
S'D\x00\x00\x00'
tRp1898
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1899
I0
sg903
g1042
sS'block_loop.thisRepN'
p1900
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1901
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p1902
Nsg69
Vn
sS'block_loop.thisTrialN'
p1903
I0
sg39
F1.150145343699478
sg34
g752
(S'\x07\xdf\n\x13\x0c3(\x0b\x0c '
tRp1904
sa(dp1905
S'trial_loop.thisTrialN'
p1906
I69
sg894
g1000
sS'block_loop.thisIndex'
p1907
g888
sg38
S'right'
p1908
sg58
g62
sS'trial_loop.thisN'
p1909
I69
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1910
g59
(g98
S'E\x00\x00\x00'
tRp1911
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1912
I0
sg903
g1008
sS'block_loop.thisRepN'
p1913
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1914
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p1915
Nsg69
Vn
sS'block_loop.thisTrialN'
p1916
I0
sg39
F0.91728210134351684
sg34
g752
(S'\x07\xdf\n\x13\x0c3.\r\xbf\x88'
tRp1917
sa(dp1918
S'trial_loop.thisTrialN'
p1919
I70
sg894
g1758
sS'block_loop.thisIndex'
p1920
g888
sg38
S'right'
p1921
sg58
g62
sS'trial_loop.thisN'
p1922
I70
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p1923
g59
(g98
S'F\x00\x00\x00'
tRp1924
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1925
I0
sg903
g1765
sS'block_loop.thisRepN'
p1926
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1927
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p1928
Nsg69
Vn
sS'block_loop.thisTrialN'
p1929
I0
sg39
F1.4001017234822939
sg34
g752
(S'\x07\xdf\n\x13\x0c34\x0c\xe4\xc8'
tRp1930
sa(dp1931
S'trial_loop.thisTrialN'
p1932
I71
sg894
g915
sS'block_loop.thisIndex'
p1933
g888
sg38
S'right'
p1934
sg58
g62
sS'trial_loop.thisN'
p1935
I71
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1936
g59
(g98
S'G\x00\x00\x00'
tRp1937
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1938
I0
sg903
g923
sS'block_loop.thisRepN'
p1939
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1940
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p1941
Nsg69
Vn
sS'block_loop.thisTrialN'
p1942
I0
sg39
F1.0501809241104638
sg34
g752
(S'\x07\xdf\n\x13\x0c3;\x04e\x00'
tRp1943
sa(dp1944
S'trial_loop.thisTrialN'
p1945
I72
sg894
g1853
sS'block_loop.thisIndex'
p1946
g888
sg38
S'left'
p1947
sg58
g62
sS'trial_loop.thisN'
p1948
I72
sg33
g1361
sg63
g64
sS'trial_loop.thisIndex'
p1949
g59
(g98
S'H\x00\x00\x00'
tRp1950
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1951
I0
sg903
g1860
sS'block_loop.thisRepN'
p1952
I0
sg906
g1361
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1953
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p1954
Nsg69
Vn
sS'block_loop.thisTrialN'
p1955
I0
sg39
F1.833514181416831
sg34
g752
(S'\x07\xdf\n\x13\x0c4\x05\x05\xad '
tRp1956
sa(dp1957
S'trial_loop.thisTrialN'
p1958
I73
sg894
g1456
sS'block_loop.thisIndex'
p1959
g888
sg38
S'right'
p1960
sg58
g62
sS'trial_loop.thisN'
p1961
I73
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p1962
g59
(g98
S'I\x00\x00\x00'
tRp1963
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1964
I0
sg903
g1463
sS'block_loop.thisRepN'
p1965
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1966
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1967
Nsg69
Vn
sS'block_loop.thisTrialN'
p1968
I0
sg39
F1.2168466404455103
sg34
g752
(S'\x07\xdf\n\x13\x0c4\x0c\x03\x99\xe0'
tRp1969
sa(dp1970
S'trial_loop.thisTrialN'
p1971
I74
sg894
S'2-steamed_puddings.png'
p1972
sS'block_loop.thisIndex'
p1973
g888
sg38
S'right'
p1974
sg58
g62
sS'trial_loop.thisN'
p1975
I74
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p1976
g59
(g98
S'J\x00\x00\x00'
tRp1977
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1978
I0
sg903
S'20-fruit_pastilles.png'
p1979
sS'block_loop.thisRepN'
p1980
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1981
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p1982
Nsg69
Vn
sS'block_loop.thisTrialN'
p1983
I0
sg39
F1.4839041404411546
sg34
g752
(S'\x07\xdf\n\x13\x0c4\x12\x07}\xf8'
tRp1984
sa(dp1985
S'trial_loop.thisTrialN'
p1986
I75
sg894
g1248
sS'block_loop.thisIndex'
p1987
g888
sg38
S'right'
p1988
sg58
g62
sS'trial_loop.thisN'
p1989
I75
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p1990
g59
(g98
S'K\x00\x00\x00'
tRp1991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1992
I0
sg903
g1256
sS'block_loop.thisRepN'
p1993
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1994
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p1995
Nsg69
Vn
sS'block_loop.thisTrialN'
p1996
I0
sg39
F0.91678146671074501
sg34
g752
(S'\x07\xdf\n\x13\x0c4\x18\x0f6\x88'
tRp1997
sa(dp1998
S'trial_loop.thisTrialN'
p1999
I76
sg894
g1000
sS'block_loop.thisIndex'
p2000
g888
sg38
S'right'
p2001
sg58
g62
sS'trial_loop.thisN'
p2002
I76
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2003
g59
(g98
S'L\x00\x00\x00'
tRp2004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2005
I0
sg903
g1008
sS'block_loop.thisRepN'
p2006
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2007
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2008
Nsg69
Vn
sS'block_loop.thisTrialN'
p2009
I0
sg39
F0.80013160190537747
sg34
g752
(S'\x07\xdf\n\x13\x0c4\x1e\x0e\x96`'
tRp2010
sa(dp2011
S'trial_loop.thisTrialN'
p2012
I77
sg894
S'19-caramello_redo.png'
p2013
sS'block_loop.thisIndex'
p2014
g888
sg38
S'left'
p2015
sg58
g62
sS'trial_loop.thisN'
p2016
I77
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p2017
g59
(g98
S'M\x00\x00\x00'
tRp2018
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2019
I0
sg903
S'30-spaghetti_hoops.png'
p2020
sS'block_loop.thisRepN'
p2021
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2022
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p2023
Nsg69
Vn
sS'block_loop.thisTrialN'
p2024
I0
sg39
F1.0667605974322214
sg34
g752
(S'\x07\xdf\n\x13\x0c4$\x0c\r\xf0'
tRp2025
sa(dp2026
S'trial_loop.thisTrialN'
p2027
I78
sg894
g1758
sS'block_loop.thisIndex'
p2028
g888
sg38
S'right'
p2029
sg58
g62
sS'trial_loop.thisN'
p2030
I78
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p2031
g59
(g98
S'N\x00\x00\x00'
tRp2032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2033
I0
sg903
g1765
sS'block_loop.thisRepN'
p2034
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2035
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p2036
Nsg69
Vn
sS'block_loop.thisTrialN'
p2037
I0
sg39
F1.4001721430468024
sg34
g752
(S'\x07\xdf\n\x13\x0c4*\r\x94\x90'
tRp2038
sa(dp2039
S'trial_loop.thisTrialN'
p2040
I79
sg894
g915
sS'block_loop.thisIndex'
p2041
g888
sg38
S'right'
p2042
sg58
g62
sS'trial_loop.thisN'
p2043
I79
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2044
g59
(g98
S'O\x00\x00\x00'
tRp2045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2046
I0
sg903
g923
sS'block_loop.thisRepN'
p2047
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2048
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p2049
Nsg69
Vn
sS'block_loop.thisTrialN'
p2050
I0
sg39
F0.83353470857764478
sg34
g752
(S'\x07\xdf\n\x13\x0c41\x04\xd6H'
tRp2051
sa(dp2052
S'trial_loop.thisTrialN'
p2053
I80
sg894
g1555
sS'block_loop.thisIndex'
p2054
g888
sg38
S'left'
p2055
sg58
g62
sS'trial_loop.thisN'
p2056
I80
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p2057
g59
(g98
S'P\x00\x00\x00'
tRp2058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2059
I0
sg903
g1562
sS'block_loop.thisRepN'
p2060
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2061
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p2062
Nsg69
Vn
sS'block_loop.thisTrialN'
p2063
I0
sg39
F1.0001807530497899
sg34
g752
(S'\x07\xdf\n\x13\x0c47\x02\xca\xd8'
tRp2064
sa(dp2065
S'trial_loop.thisTrialN'
p2066
I81
sg894
g2013
sS'block_loop.thisIndex'
p2067
g888
sg38
S'left'
p2068
sg58
g62
sS'trial_loop.thisN'
p2069
I81
sg33
g1201
sg63
g64
sS'trial_loop.thisIndex'
p2070
g59
(g98
S'Q\x00\x00\x00'
tRp2071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2072
I0
sg903
g2020
sS'block_loop.thisRepN'
p2073
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2074
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p2075
Nsg69
Vn
sS'block_loop.thisTrialN'
p2076
I0
sg39
F0.83350135194086761
sg34
g752
(S'\x07\xdf\n\x13\x0c5\x01\x03[`'
tRp2077
sa(dp2078
S'trial_loop.thisTrialN'
p2079
I82
sg894
g1325
sS'block_loop.thisIndex'
p2080
g888
sg38
S'right'
p2081
sg58
g62
sS'trial_loop.thisN'
p2082
I82
sg33
g1329
sg63
g64
sS'trial_loop.thisIndex'
p2083
g59
(g98
S'R\x00\x00\x00'
tRp2084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2085
I0
sg903
g1333
sS'block_loop.thisRepN'
p2086
I0
sg906
g1329
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2087
I0
sg908
g1336
sg55
g11
sS'block_loop.thisTrial'
p2088
Nsg69
Vn
sS'block_loop.thisTrialN'
p2089
I0
sg39
F0.9334258576072898
sg34
g752
(S'\x07\xdf\n\x13\x0c5\x07\x01L\x08'
tRp2090
sa(dp2091
S'trial_loop.thisTrialN'
p2092
I83
sg894
g1374
sS'block_loop.thisIndex'
p2093
g888
sg38
S'right'
p2094
sg58
g62
sS'trial_loop.thisN'
p2095
I83
sg33
g1378
sg63
g64
sS'trial_loop.thisIndex'
p2096
g59
(g98
S'S\x00\x00\x00'
tRp2097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2098
I0
sg903
g1382
sS'block_loop.thisRepN'
p2099
I0
sg906
g1378
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2100
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p2101
Nsg69
Vn
sS'block_loop.thisTrialN'
p2102
I0
sg39
F1.7832742417213012
sg34
g752
(S'\x07\xdf\n\x13\x0c5\r\x00\xaf\xc8'
tRp2103
sa(dp2104
S'trial_loop.thisTrialN'
p2105
I84
sg894
g1730
sS'block_loop.thisIndex'
p2106
g888
sg38
S'left'
p2107
sg58
g62
sS'trial_loop.thisN'
p2108
I84
sg33
g1329
sg63
g64
sS'trial_loop.thisIndex'
p2109
g59
(g98
S'T\x00\x00\x00'
tRp2110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2111
I0
sg903
g1737
sS'block_loop.thisRepN'
p2112
I0
sg906
g1329
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2113
I0
sg908
g1336
sg55
g11
sS'block_loop.thisTrial'
p2114
Nsg69
Vn
sS'block_loop.thisTrialN'
p2115
I0
sg39
F1.1002135965063644
sg34
g752
(S"\x07\xdf\n\x13\x0c5\x13\r'0"
tRp2116
sa(dp2117
S'trial_loop.thisTrialN'
p2118
I85
sg894
g1972
sS'block_loop.thisIndex'
p2119
g888
sg38
S'right'
p2120
sg58
g62
sS'trial_loop.thisN'
p2121
I85
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p2122
g59
(g98
S'U\x00\x00\x00'
tRp2123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2124
I0
sg903
g1979
sS'block_loop.thisRepN'
p2125
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2126
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p2127
Nsg69
Vn
sS'block_loop.thisTrialN'
p2128
I0
sg39
F1.5834622933180071
sg34
g752
(S'\x07\xdf\n\x13\x0c5\x19\x0f&\xe8'
tRp2129
sa(dp2130
S'trial_loop.thisTrialN'
p2131
I86
sg894
g1812
sS'block_loop.thisIndex'
p2132
g888
sg38
S'right'
p2133
sg58
g62
sS'trial_loop.thisN'
p2134
I86
sg33
g1045
sg63
g64
sS'trial_loop.thisIndex'
p2135
g59
(g98
S'V\x00\x00\x00'
tRp2136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2137
I0
sg903
g1819
sS'block_loop.thisRepN'
p2138
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2139
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p2140
Nsg69
Vn
sS'block_loop.thisTrialN'
p2141
I0
sg39
F0.88340744018205442
sg34
g752
(S'\x07\xdf\n\x13\x0c5 \t\x81\x98'
tRp2142
sa(dp2143
S'trial_loop.thisTrialN'
p2144
I87
sg894
g1853
sS'block_loop.thisIndex'
p2145
g888
sg38
S'left'
p2146
sg58
g62
sS'trial_loop.thisN'
p2147
I87
sg33
g1368
sg63
g64
sS'trial_loop.thisIndex'
p2148
g59
(g98
S'W\x00\x00\x00'
tRp2149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2150
I0
sg903
g1860
sS'block_loop.thisRepN'
p2151
I0
sg906
g1361
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2152
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p2153
Nsg69
Vn
sS'block_loop.thisTrialN'
p2154
I0
sg39
F0.71688883516435453
sg34
g752
(S'\x07\xdf\n\x13\x0c5&\x08)\xd8'
tRp2155
sa(dp2156
S'trial_loop.thisTrialN'
p2157
I88
sg894
g1160
sS'block_loop.thisIndex'
p2158
g888
sg38
S'left'
p2159
sg58
g62
sS'trial_loop.thisN'
p2160
I88
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p2161
g59
(g98
S'X\x00\x00\x00'
tRp2162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2163
I0
sg903
g1168
sS'block_loop.thisRepN'
p2164
I0
sg906
g1164
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2165
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p2166
Nsg69
Vn
sS'block_loop.thisTrialN'
p2167
I0
sg39
F1.0167763919416757
sg34
g752
(S'\x07\xdf\n\x13\x0c5,\x046 '
tRp2168
sa(dp2169
S'trial_loop.thisTrialN'
p2170
I89
sg894
g1972
sS'block_loop.thisIndex'
p2171
g888
sg38
S'right'
p2172
sg58
g62
sS'trial_loop.thisN'
p2173
I89
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p2174
g59
(g98
S'Y\x00\x00\x00'
tRp2175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2176
I0
sg903
g1979
sS'block_loop.thisRepN'
p2177
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2178
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p2179
Nsg69
Vn
sS'block_loop.thisTrialN'
p2180
I0
sg39
F1.416868422042171
sg34
g752
(S'\x07\xdf\n\x13\x0c52\x05\x05('
tRp2181
sa(dp2182
S'trial_loop.thisTrialN'
p2183
I90
sg894
g949
sS'block_loop.thisIndex'
p2184
g888
sg38
S'left'
p2185
sg58
g62
sS'trial_loop.thisN'
p2186
I90
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2187
g59
(g98
S'Z\x00\x00\x00'
tRp2188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2189
I0
sg903
g957
sS'block_loop.thisRepN'
p2190
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2191
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2192
Nsg69
Vn
sS'block_loop.thisTrialN'
p2193
I0
sg39
F0.86660624459000246
sg34
g752
(S'\x07\xdf\n\x13\x0c58\x0c\x028'
tRp2194
sa(dp2195
S'trial_loop.thisTrialN'
p2196
I91
sg894
g1972
sS'block_loop.thisIndex'
p2197
g888
sg38
S'right'
p2198
sg58
g62
sS'trial_loop.thisN'
p2199
I91
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p2200
g59
(g98
S'[\x00\x00\x00'
tRp2201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2202
I0
sg903
g1979
sS'block_loop.thisRepN'
p2203
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2204
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p2205
Nsg69
Vn
sS'block_loop.thisTrialN'
p2206
I0
sg39
F1.0167302058307541
sg34
g752
(S'\x07\xdf\n\x13\x0c6\x02\no\xe0'
tRp2207
sa(dp2208
S'trial_loop.thisTrialN'
p2209
I92
sg894
g2013
sS'block_loop.thisIndex'
p2210
g888
sg38
S'left'
p2211
sg58
g62
sS'trial_loop.thisN'
p2212
I92
sg33
g1201
sg63
g64
sS'trial_loop.thisIndex'
p2213
g59
(g98
S'\\\x00\x00\x00'
tRp2214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2215
I0
sg903
g2020
sS'block_loop.thisRepN'
p2216
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2217
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p2218
Nsg69
Vn
sS'block_loop.thisTrialN'
p2219
I0
sg39
F0.96685348283244821
sg34
g752
(S'\x07\xdf\n\x13\x0c6\x08\x0b>\xe8'
tRp2220
sa(dp2221
S'trial_loop.thisTrialN'
p2222
I93
sg894
g1497
sS'block_loop.thisIndex'
p2223
g888
sg38
S'left'
p2224
sg58
g62
sS'trial_loop.thisN'
p2225
I93
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p2226
g59
(g98
S']\x00\x00\x00'
tRp2227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2228
I0
sg903
g1504
sS'block_loop.thisRepN'
p2229
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2230
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p2231
Nsg69
Vn
sS'block_loop.thisTrialN'
p2232
I0
sg39
F0.95021621942032652
sg34
g752
(S'\x07\xdf\n\x13\x0c6\x0e\x0b\x17\xd8'
tRp2233
sa(dp2234
S'trial_loop.thisTrialN'
p2235
I94
sg894
g1233
sS'block_loop.thisIndex'
p2236
g888
sg38
S'right'
p2237
sg58
g62
sS'trial_loop.thisN'
p2238
I94
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p2239
g59
(g98
S'^\x00\x00\x00'
tRp2240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2241
I0
sg903
g1240
sS'block_loop.thisRepN'
p2242
I0
sg906
g1164
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2243
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p2244
Nsg69
Vn
sS'block_loop.thisTrialN'
p2245
I0
sg39
F1.366875093370254
sg34
g752
(S'\x07\xdf\n\x13\x0c6\x14\n\xf4\xb0'
tRp2246
sa(dp2247
S'trial_loop.thisTrialN'
p2248
I95
sg894
g1308
sS'block_loop.thisIndex'
p2249
g888
sg38
S'right'
p2250
sg58
g62
sS'trial_loop.thisN'
p2251
I95
sg33
g1312
sg63
g64
sS'trial_loop.thisIndex'
p2252
g59
(g98
S'_\x00\x00\x00'
tRp2253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2254
I0
sg903
g1316
sS'block_loop.thisRepN'
p2255
I0
sg906
g1312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2256
I0
sg908
g1319
sg55
g11
sS'block_loop.thisTrial'
p2257
Nsg69
Vn
sS'block_loop.thisTrialN'
p2258
I0
sg39
F1.1501804109320801
sg34
g752
(S'\x07\xdf\n\x13\x0c6\x1b\x01\xbdP'
tRp2259
sa(dp2260
S'trial_loop.thisTrialN'
p2261
I96
sg894
g1812
sS'block_loop.thisIndex'
p2262
g888
sg38
S'right'
p2263
sg58
g62
sS'trial_loop.thisN'
p2264
I96
sg33
g1045
sg63
g64
sS'trial_loop.thisIndex'
p2265
g59
(g98
S'`\x00\x00\x00'
tRp2266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2267
I0
sg903
g1819
sS'block_loop.thisRepN'
p2268
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2269
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p2270
Nsg69
Vn
sS'block_loop.thisTrialN'
p2271
I0
sg39
F1.1335280372495617
sg34
g752
(S'\x07\xdf\n\x13\x0c6!\x04\xaf8'
tRp2272
sa(dp2273
S'trial_loop.thisTrialN'
p2274
I97
sg894
g1687
sS'block_loop.thisIndex'
p2275
g888
sg38
S'right'
p2276
sg58
g62
sS'trial_loop.thisN'
p2277
I97
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2278
g59
(g98
S'a\x00\x00\x00'
tRp2279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2280
I0
sg903
g1694
sS'block_loop.thisRepN'
p2281
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2282
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2283
Nsg69
Vn
sS'block_loop.thisTrialN'
p2284
I0
sg39
F0.95018457338301232
sg34
g752
(S"\x07\xdf\n\x13\x0c6'\x07(\x08"
tRp2285
sa(dp2286
S'trial_loop.thisTrialN'
p2287
I98
sg894
g1512
sS'block_loop.thisIndex'
p2288
g888
sg38
S'left'
p2289
sg58
g62
sS'trial_loop.thisN'
p2290
I98
sg33
g1378
sg63
g64
sS'trial_loop.thisIndex'
p2291
g59
(g98
S'b\x00\x00\x00'
tRp2292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2293
I0
sg903
g1519
sS'block_loop.thisRepN'
p2294
I0
sg906
g1378
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2295
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p2296
Nsg69
Vn
sS'block_loop.thisTrialN'
p2297
I0
sg39
F0.98340208031368093
sg34
g752
(S'\x07\xdf\n\x13\x0c6-\x06\xc6`'
tRp2298
sa(dp2299
S'trial_loop.thisTrialN'
p2300
I99
sg894
S'31-hobnobs.png'
p2301
sS'block_loop.thisIndex'
p2302
g888
sg38
S'right'
p2303
sg58
g62
sS'trial_loop.thisN'
p2304
I99
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p2305
g59
(g98
S'c\x00\x00\x00'
tRp2306
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2307
I0
sg903
S'25-kitkat.png'
p2308
sS'block_loop.thisRepN'
p2309
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2310
I0
sg908
g1109
sg55
g11
sS'block_loop.thisTrial'
p2311
Nsg69
Vn
sS'block_loop.thisTrialN'
p2312
I0
sg39
F2.6001839461641794
sg34
g752
(S'\x07\xdf\n\x13\x0c63\x07\x18h'
tRp2313
sa(dp2314
S'trial_loop.thisTrialN'
p2315
I100
sg894
g1687
sS'block_loop.thisIndex'
p2316
g888
sg38
S'right'
p2317
sg58
g62
sS'trial_loop.thisN'
p2318
I100
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2319
g59
(g98
S'd\x00\x00\x00'
tRp2320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2321
I0
sg903
g1694
sS'block_loop.thisRepN'
p2322
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2323
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2324
Nsg69
Vn
sS'block_loop.thisTrialN'
p2325
I0
sg39
F0.85018793755625666
sg34
g752
(S'\x07\xdf\n\x13\x0c6;\x01o0'
tRp2326
sa(dp2327
S'trial_loop.thisTrialN'
p2328
I101
sg894
g1325
sS'block_loop.thisIndex'
p2329
g888
sg38
S'right'
p2330
sg58
g62
sS'trial_loop.thisN'
p2331
I101
sg33
g1336
sg63
g64
sS'trial_loop.thisIndex'
p2332
g59
(g98
S'e\x00\x00\x00'
tRp2333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2334
I0
sg903
g1333
sS'block_loop.thisRepN'
p2335
I0
sg906
g1329
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2336
I0
sg908
g1336
sg55
g11
sS'block_loop.thisTrial'
p2337
Nsg69
Vn
sS'block_loop.thisTrialN'
p2338
I0
sg39
F0.86681550758476078
sg34
g752
(S'\x07\xdf\n\x13\x0c7\x04\x0f\x1b0'
tRp2339
sa(dp2340
S'trial_loop.thisTrialN'
p2341
I102
sg894
g1357
sS'block_loop.thisIndex'
p2342
g888
sg38
S'right'
p2343
sg58
g62
sS'trial_loop.thisN'
p2344
I102
sg33
g1361
sg63
g64
sS'trial_loop.thisIndex'
p2345
g59
(g98
S'f\x00\x00\x00'
tRp2346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2347
I0
sg903
g1365
sS'block_loop.thisRepN'
p2348
I0
sg906
g1361
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2349
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p2350
Nsg69
Vn
sS'block_loop.thisTrialN'
p2351
I0
sg39
F0.73354405983809556
sg34
g752
(S'\x07\xdf\n\x13\x0c7\n\r\x88\xd8'
tRp2352
sa(dp2353
S'trial_loop.thisTrialN'
p2354
I103
sg894
g1248
sS'block_loop.thisIndex'
p2355
g888
sg38
S'right'
p2356
sg58
g62
sS'trial_loop.thisN'
p2357
I103
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p2358
g59
(g98
S'g\x00\x00\x00'
tRp2359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2360
I0
sg903
g1256
sS'block_loop.thisRepN'
p2361
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2362
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p2363
Nsg69
Vn
sS'block_loop.thisTrialN'
p2364
I0
sg39
F0.91686157965705206
sg34
g752
(S'\x07\xdf\n\x13\x0c7\x10\t\xd3\xa0'
tRp2365
sa(dp2366
S'trial_loop.thisTrialN'
p2367
I104
sg894
g932
sS'block_loop.thisIndex'
p2368
g888
sg38
S'left'
p2369
sg58
g62
sS'trial_loop.thisN'
p2370
I104
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2371
g59
(g98
S'h\x00\x00\x00'
tRp2372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2373
I0
sg903
g940
sS'block_loop.thisRepN'
p2374
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2375
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2376
Nsg69
Vn
sS'block_loop.thisTrialN'
p2377
I0
sg39
F0.86684601322485832
sg34
g752
(S'\x07\xdf\n\x13\x0c7\x16\t3x'
tRp2378
sa(dp2379
S'trial_loop.thisTrialN'
p2380
I105
sg894
g1265
sS'block_loop.thisIndex'
p2381
g888
sg38
S'right'
p2382
sg58
g62
sS'trial_loop.thisN'
p2383
I105
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2384
g59
(g98
S'i\x00\x00\x00'
tRp2385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2386
I0
sg903
g1272
sS'block_loop.thisRepN'
p2387
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2388
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2389
Nsg69
Vn
sS'block_loop.thisTrialN'
p2390
I0
sg39
F0.96721641443036788
sg34
g752
(S'\x07\xdf\n\x13\x0c7\x1c\x07\xa1 '
tRp2391
sa(dp2392
S'trial_loop.thisTrialN'
p2393
I106
sg894
g1233
sS'block_loop.thisIndex'
p2394
g888
sg38
S'right'
p2395
sg58
g62
sS'trial_loop.thisN'
p2396
I106
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p2397
g59
(g98
S'j\x00\x00\x00'
tRp2398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2399
I0
sg903
g1240
sS'block_loop.thisRepN'
p2400
I0
sg906
g1164
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2401
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p2402
Nsg69
Vn
sS'block_loop.thisTrialN'
p2403
I0
sg39
F0.76686933436212712
sg34
g752
(S'\x07\xdf\n\x13\x0c7"\x07\xb8\x90'
tRp2404
sa(dp2405
S'trial_loop.thisTrialN'
p2406
I107
sg894
S'46-pistachios.png'
p2407
sS'block_loop.thisIndex'
p2408
g888
sg38
S'left'
p2409
sg58
g62
sS'trial_loop.thisN'
p2410
I107
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2411
g59
(g98
S'k\x00\x00\x00'
tRp2412
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2413
I0
sg903
S'29-beans.png'
p2414
sS'block_loop.thisRepN'
p2415
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2416
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2417
Nsg69
Vn
sS'block_loop.thisTrialN'
p2418
I0
sg39
F0.78354537129598612
sg34
g752
(S'\x07\xdf\n\x13\x0c7(\x04x\x88'
tRp2419
sa(dp2420
S'trial_loop.thisTrialN'
p2421
I108
sg894
g1128
sS'block_loop.thisIndex'
p2422
g888
sg38
S'left'
p2423
sg58
g62
sS'trial_loop.thisN'
p2424
I108
sg33
g1085
sg63
g64
sS'trial_loop.thisIndex'
p2425
g59
(g98
S'l\x00\x00\x00'
tRp2426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2427
I0
sg903
g1135
sS'block_loop.thisRepN'
p2428
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2429
I0
sg908
g1092
sg55
g11
sS'block_loop.thisTrial'
p2430
Nsg69
Vn
sS'block_loop.thisTrialN'
p2431
I0
sg39
F2.050193468485304
sg34
g752
(S'\x07\xdf\n\x13\x0c7.\x01\xb5\x80'
tRp2432
sa(dp2433
S'trial_loop.thisTrialN'
p2434
I109
sg894
g1730
sS'block_loop.thisIndex'
p2435
g888
sg38
S'left'
p2436
sg58
g62
sS'trial_loop.thisN'
p2437
I109
sg33
g1329
sg63
g64
sS'trial_loop.thisIndex'
p2438
g59
(g98
S'm\x00\x00\x00'
tRp2439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2440
I0
sg903
g1737
sS'block_loop.thisRepN'
p2441
I0
sg906
g1329
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2442
I0
sg908
g1336
sg55
g11
sS'block_loop.thisTrial'
p2443
Nsg69
Vn
sS'block_loop.thisTrialN'
p2444
I0
sg39
F0.8168546802498895
sg34
g752
(S'\x07\xdf\n\x13\x0c75\x02\xf5\xd0'
tRp2445
sa(dp2446
S'trial_loop.thisTrialN'
p2447
I110
sg894
g1702
sS'block_loop.thisIndex'
p2448
g888
sg38
S'left'
p2449
sg58
g62
sS'trial_loop.thisN'
p2450
I110
sg33
g1319
sg63
g64
sS'trial_loop.thisIndex'
p2451
g59
(g98
S'n\x00\x00\x00'
tRp2452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2453
I0
sg903
g1709
sS'block_loop.thisRepN'
p2454
I0
sg906
g1312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2455
I0
sg908
g1319
sg55
g11
sS'block_loop.thisTrial'
p2456
Nsg69
Vn
sS'block_loop.thisTrialN'
p2457
I0
sg39
F0.88393544436075899
sg34
g752
(S'\x07\xdf\n\x13\x0c7;\x00\xab\xe0'
tRp2458
sa(dp2459
S'trial_loop.thisTrialN'
p2460
I111
sg894
g2407
sS'block_loop.thisIndex'
p2461
g888
sg38
S'left'
p2462
sg58
g62
sS'trial_loop.thisN'
p2463
I111
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2464
g59
(g98
S'o\x00\x00\x00'
tRp2465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2466
I0
sg903
g2414
sS'block_loop.thisRepN'
p2467
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2468
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2469
Nsg69
Vn
sS'block_loop.thisTrialN'
p2470
I0
sg39
F0.81677713319913892
sg34
g752
(S'\x07\xdf\n\x13\x0c8\x04\x0e\xd4\xe0'
tRp2471
sa(dp2472
S'trial_loop.thisTrialN'
p2473
I112
sg894
g1527
sS'block_loop.thisIndex'
p2474
g888
sg38
S'right'
p2475
sg58
g62
sS'trial_loop.thisN'
p2476
I112
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2477
g59
(g98
S'p\x00\x00\x00'
tRp2478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2479
I0
sg903
g1534
sS'block_loop.thisRepN'
p2480
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2481
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2482
Nsg69
Vn
sS'block_loop.thisTrialN'
p2483
I0
sg39
F0.70021735981936217
sg34
g752
(S'\x07\xdf\n\x13\x0c8\n\x0c\x8e\xd8'
tRp2484
sa(dp2485
S'trial_loop.thisTrialN'
p2486
I113
sg894
g2013
sS'block_loop.thisIndex'
p2487
g888
sg38
S'left'
p2488
sg58
g62
sS'trial_loop.thisN'
p2489
I113
sg33
g1201
sg63
g64
sS'trial_loop.thisIndex'
p2490
g59
(g98
S'q\x00\x00\x00'
tRp2491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2492
I0
sg903
g2020
sS'block_loop.thisRepN'
p2493
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2494
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p2495
Nsg69
Vn
sS'block_loop.thisTrialN'
p2496
I0
sg39
F0.75015480900037801
sg34
g752
(S'\x07\xdf\n\x13\x0c8\x10\x08\\\xa0'
tRp2497
sa(dp2498
S'trial_loop.thisTrialN'
p2499
I114
sg894
g1293
sS'block_loop.thisIndex'
p2500
g888
sg38
S'left'
p2501
sg58
g62
sS'trial_loop.thisN'
p2502
I114
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p2503
g59
(g98
S'r\x00\x00\x00'
tRp2504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2505
I0
sg903
g1300
sS'block_loop.thisRepN'
p2506
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2507
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p2508
Nsg69
Vn
sS'block_loop.thisTrialN'
p2509
I0
sg39
F1.2835128699589404
sg34
g752
(S'\x07\xdf\n\x13\x0c8\x16\x05\x1c\x98'
tRp2510
sa(dp2511
S'trial_loop.thisTrialN'
p2512
I115
sg894
g1497
sS'block_loop.thisIndex'
p2513
g888
sg38
S'left'
p2514
sg58
g62
sS'trial_loop.thisN'
p2515
I115
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p2516
g59
(g98
S's\x00\x00\x00'
tRp2517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2518
I0
sg903
g1504
sS'block_loop.thisRepN'
p2519
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2520
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p2521
Nsg69
Vn
sS'block_loop.thisTrialN'
p2522
I0
sg39
F1.166917174048649
sg34
g752
(S'\x07\xdf\n\x13\x0c8\x1c\t\xf6\xc8'
tRp2523
sa(dp2524
S'trial_loop.thisTrialN'
p2525
I116
sg894
g2301
sS'block_loop.thisIndex'
p2526
g888
sg38
S'right'
p2527
sg58
g62
sS'trial_loop.thisN'
p2528
I116
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p2529
g59
(g98
S't\x00\x00\x00'
tRp2530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2531
I0
sg903
g2308
sS'block_loop.thisRepN'
p2532
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2533
I0
sg908
g1109
sg55
g11
sS'block_loop.thisTrial'
p2534
Nsg69
Vn
sS'block_loop.thisTrialN'
p2535
I0
sg39
F1.2835140103561571
sg34
g752
(S'\x07\xdf\n\x13\x0c8"\x0c\xec\x98'
tRp2536
sa(dp2537
S'trial_loop.thisTrialN'
p2538
I117
sg894
g1555
sS'block_loop.thisIndex'
p2539
g888
sg38
S'left'
p2540
sg58
g62
sS'trial_loop.thisN'
p2541
I117
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p2542
g59
(g98
S'u\x00\x00\x00'
tRp2543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2544
I0
sg903
g1562
sS'block_loop.thisRepN'
p2545
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2546
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p2547
Nsg69
Vn
sS'block_loop.thisTrialN'
p2548
I0
sg39
F0.88343823092327511
sg34
g752
(S'\x07\xdf\n\x13\x0c8)\x02\x84\x88'
tRp2549
sa(dp2550
S'trial_loop.thisTrialN'
p2551
I118
sg894
g1325
sS'block_loop.thisIndex'
p2552
g888
sg38
S'right'
p2553
sg58
g62
sS'trial_loop.thisN'
p2554
I118
sg33
g1329
sg63
g64
sS'trial_loop.thisIndex'
p2555
g59
(g98
S'v\x00\x00\x00'
tRp2556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2557
I0
sg903
g1333
sS'block_loop.thisRepN'
p2558
I0
sg906
g1329
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2559
I0
sg908
g1336
sg55
g11
sS'block_loop.thisTrial'
p2560
Nsg69
Vn
sS'block_loop.thisTrialN'
p2561
I0
sg39
F0.91678203690935334
sg34
g752
(S'\x07\xdf\n\x13\x0c8/\x01,\xc8'
tRp2562
sa(dp2563
S'trial_loop.thisTrialN'
p2564
I119
sg894
g1160
sS'block_loop.thisIndex'
p2565
g888
sg38
S'left'
p2566
sg58
g62
sS'trial_loop.thisN'
p2567
I119
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p2568
g59
(g98
S'w\x00\x00\x00'
tRp2569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2570
I0
sg903
g1168
sS'block_loop.thisRepN'
p2571
I0
sg906
g1164
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2572
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p2573
Nsg69
Vn
sS'block_loop.thisTrialN'
p2574
I0
sg39
F0.96686574210980325
sg34
g752
(S'\x07\xdf\n\x13\x0c85\x00\x8c\xa0'
tRp2575
sa(dp2576
S'trial_loop.thisTrialN'
p2577
I120
sg894
g1051
sS'block_loop.thisIndex'
p2578
g888
sg38
S'left'
p2579
sg58
g62
sS'trial_loop.thisN'
p2580
I120
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p2581
g59
(g98
S'x\x00\x00\x00'
tRp2582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2583
I0
sg903
g1059
sS'block_loop.thisRepN'
p2584
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2585
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p2586
Nsg69
Vn
sS'block_loop.thisTrialN'
p2587
I0
sg39
F1.4838576692327479
sg34
g752
(S'\x07\xdf\n\x13\x0c8;\x00ix'
tRp2588
sa(dp2589
S'trial_loop.thisTrialN'
p2590
I121
sg894
g949
sS'block_loop.thisIndex'
p2591
g888
sg38
S'left'
p2592
sg58
g62
sS'trial_loop.thisN'
p2593
I121
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p2594
g59
(g98
S'y\x00\x00\x00'
tRp2595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2596
I0
sg903
g957
sS'block_loop.thisRepN'
p2597
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2598
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2599
Nsg69
Vn
sS'block_loop.thisTrialN'
p2600
I0
sg39
F0.81660721392836422
sg34
g752
(S'\x07\xdf\n\x13\x0c9\x05\x08X\xb8'
tRp2601
sa(dp2602
S'trial_loop.thisTrialN'
p2603
I122
sg894
g1512
sS'block_loop.thisIndex'
p2604
g888
sg38
S'left'
p2605
sg58
g62
sS'trial_loop.thisN'
p2606
I122
sg33
g1385
sg63
g64
sS'trial_loop.thisIndex'
p2607
g59
(g98
S'z\x00\x00\x00'
tRp2608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2609
I0
sg903
g1519
sS'block_loop.thisRepN'
p2610
I0
sg906
g1378
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2611
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p2612
Nsg69
Vn
sS'block_loop.thisTrialN'
p2613
I0
sg39
F1.1834010539550945
sg34
g752
(S'\x07\xdf\n\x13\x0c9\x0b\x06\x0e\xc8'
tRp2614
sa(dp2615
S'trial_loop.thisTrialN'
p2616
I123
sg894
g983
sS'block_loop.thisIndex'
p2617
g888
sg38
S'left'
p2618
sg58
g62
sS'trial_loop.thisN'
p2619
I123
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2620
g59
(g98
S'{\x00\x00\x00'
tRp2621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2622
I0
sg903
g991
sS'block_loop.thisRepN'
p2623
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2624
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2625
Nsg69
Vn
sS'block_loop.thisTrialN'
p2626
I0
sg39
F0.96686032521756715
sg34
g752
(S'\x07\xdf\n\x13\x0c9\x11\t}\xb0'
tRp2627
sa(dp2628
S'trial_loop.thisTrialN'
p2629
I124
sg894
g2407
sS'block_loop.thisIndex'
p2630
g888
sg38
S'left'
p2631
sg58
g62
sS'trial_loop.thisN'
p2632
I124
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2633
g59
(g98
S'|\x00\x00\x00'
tRp2634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2635
I0
sg903
g2414
sS'block_loop.thisRepN'
p2636
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2637
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vn
sS'block_loop.thisTrialN'
p2639
I0
sg39
F0.90014962019085942
sg34
g752
(S'\x07\xdf\n\x13\x0c9\x17\tV\xa0'
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g895
sS'block_loop.thisIndex'
p2643
g888
sg38
S'left'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g904
sS'block_loop.thisRepN'
p2649
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2650
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vn
sS'block_loop.thisTrialN'
p2652
I0
sg39
F0.95015748893638374
sg34
g752
(S'\x07\xdf\n\x13\x0c9\x1d\x08=`'
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g1293
sS'block_loop.thisIndex'
p2656
g888
sg38
S'left'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g1300
sS'block_loop.thisRepN'
p2662
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2663
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vn
sS'block_loop.thisTrialN'
p2665
I0
sg39
F1.2002011091517488
sg34
g752
(S'\x07\xdf\n\x13\x0c9#\x08\x1a8'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g1342
sS'block_loop.thisIndex'
p2669
g888
sg38
S'right'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g1349
sS'block_loop.thisRepN'
p2675
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2676
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vn
sS'block_loop.thisTrialN'
p2678
I0
sg39
F0.78319526917402982
sg34
g752
(S'\x07\xdf\n\x13\x0c9)\x0b\xc3\xb8'
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g1687
sS'block_loop.thisIndex'
p2682
g888
sg38
S'right'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g1694
sS'block_loop.thisRepN'
p2688
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2689
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vn
sS'block_loop.thisTrialN'
p2691
I0
sg39
F0.91680313426877547
sg34
g752
(S'\x07\xdf\n\x13\x0c9/\x08\xc20'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g1098
sS'block_loop.thisIndex'
p2695
g888
sg38
S'left'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g1106
sS'block_loop.thisRepN'
p2701
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2702
I0
sg908
g1109
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vn
sS'block_loop.thisTrialN'
p2704
I0
sg39
F0.90049715641907824
sg34
g752
(S'\x07\xdf\n\x13\x0c95\x08"\x08'
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g1143
sS'block_loop.thisIndex'
p2708
g888
sg38
S'right'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g1154
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g1151
sS'block_loop.thisRepN'
p2714
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2715
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vn
sS'block_loop.thisTrialN'
p2717
I0
sg39
F1.050193468487123
sg34
g752
(S'\x07\xdf\n\x13\x0c9;\x07\x08\xc8'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g895
sS'block_loop.thisIndex'
p2721
g888
sg38
S'right'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g904
sS'block_loop.thisRepN'
p2727
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vn
sS'block_loop.thisTrialN'
p2730
I0
sg39
F0.81680279214924667
sg34
g752
(S'\x07\xdf\n\x13\x0c:\x05\x08P\xe8'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g1812
sS'block_loop.thisIndex'
p2734
g888
sg38
S'right'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g1819
sS'block_loop.thisRepN'
p2740
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vn
sS'block_loop.thisTrialN'
p2743
I0
sg39
F0.88352461605609278
sg34
g752
(S'\x07\xdf\n\x13\x0c:\x0b\x06\x06\xf8'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g949
sS'block_loop.thisIndex'
p2747
g888
sg38
S'left'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g957
sS'block_loop.thisRepN'
p2753
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F0.68324624495471653
sg34
g752
(S'\x07\xdf\n\x13\x0c:\x11\x04\xb3 '
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g1265
sS'block_loop.thisIndex'
p2760
g888
sg38
S'left'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g1272
sS'block_loop.thisRepN'
p2766
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F1.166870132639815
sg34
g752
(S'\x07\xdf\n\x13\x0c:\x17\x00\x80\xe8'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g1098
sS'block_loop.thisIndex'
p2773
g888
sg38
S'left'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g1106
sS'block_loop.thisRepN'
p2779
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg908
g1109
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F3.6001152371973149
sg34
g752
(S'\x07\xdf\n\x13\x0c:\x1d\x03r\xd0'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g1000
sS'block_loop.thisIndex'
p2786
g888
sg38
S'right'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g1008
sS'block_loop.thisRepN'
p2792
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F0.90017698973679217
sg34
g752
(S'\x07\xdf\n\x13\x0c:%\r>\xa0'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g1972
sS'block_loop.thisIndex'
p2799
g888
sg38
S'right'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g1979
sS'block_loop.thisRepN'
p2805
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F0.90011797415172623
sg34
g752
(S'\x07\xdf\n\x13\x0c:+\x0c%`'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g1512
sS'block_loop.thisIndex'
p2812
g888
sg38
S'left'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g1378
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g1519
sS'block_loop.thisRepN'
p2818
I0
sg906
g1378
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F1.0667238196037943
sg34
g752
(S'\x07\xdf\n\x13\x0c:1\x0b\x0c '
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g1128
sS'block_loop.thisIndex'
p2825
g888
sg38
S'left'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g1085
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g1135
sS'block_loop.thisRepN'
p2831
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg908
g1092
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F1.8335019221394759
sg34
g752
(S'\x07\xdf\n\x13\x0c:7\x0c\x92\xc0'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g966
sS'block_loop.thisIndex'
p2838
g888
sg38
S'right'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g974
sS'block_loop.thisRepN'
p2844
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F0.86721920840500388
sg34
g752
(S'\x07\xdf\n\x13\x0c;\x02\n\xbe\x00'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g1853
sS'block_loop.thisIndex'
p2851
g888
sg38
S'left'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g1361
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g1860
sS'block_loop.thisRepN'
p2857
I0
sg906
g1361
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F0.85016684019865352
sg34
g752
(S"\x07\xdf\n\x13\x0c;\x08\t'\xc0"
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1233
sS'block_loop.thisIndex'
p2864
g888
sg38
S'right'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1240
sS'block_loop.thisRepN'
p2870
I0
sg906
g1164
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F1.216771374191012
sg34
g752
(S'\x07\xdf\n\x13\x0c;\x0e\x07Z\xd0'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g1456
sS'block_loop.thisIndex'
p2877
g888
sg38
S'right'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g1463
sS'block_loop.thisRepN'
p2883
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F0.95016860781470314
sg34
g752
(S'\x07\xdf\n\x13\x0c;\x14\x0b>\xe8'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1702
sS'block_loop.thisIndex'
p2890
g888
sg38
S'left'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1312
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1709
sS'block_loop.thisRepN'
p2896
I0
sg906
g1312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg908
g1319
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F2.1834150238282746
sg34
g752
(S'\x07\xdf\n\x13\x0c;\x1a\n\xdd@'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g1527
sS'block_loop.thisIndex'
p2903
g888
sg38
S'right'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g1534
sS'block_loop.thisRepN'
p2909
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F0.76720860270506819
sg34
g752
(S'\x07\xdf\n\x13\x0c;!\x0eDX'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1555
sS'block_loop.thisIndex'
p2916
g888
sg38
S'left'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1562
sS'block_loop.thisRepN'
p2922
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F0.68341473872897041
sg34
g752
(S"\x07\xdf\n\x13\x0c;'\x0b\x04P"
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1098
sS'block_loop.thisIndex'
p2929
g888
sg38
S'left'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1106
sS'block_loop.thisRepN'
p2935
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg908
g1109
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F0.93345379735364986
sg34
g752
(S'\x07\xdf\n\x13\x0c;-\x06\xd6\x00'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g2407
sS'block_loop.thisIndex'
p2942
g888
sg38
S'left'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g2414
sS'block_loop.thisRepN'
p2948
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F0.91687070283842331
sg34
g752
(S'\x07\xdf\n\x13\x0c;3\x065\xd8'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g915
sS'block_loop.thisIndex'
p2955
g888
sg38
S'right'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g923
sS'block_loop.thisRepN'
p2961
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F0.91681054685432173
sg34
g752
(S'\x07\xdf\n\x13\x0c;9\x05\x95\xb0'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g1555
sS'block_loop.thisIndex'
p2968
g888
sg38
S'left'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g1562
sS'block_loop.thisRepN'
p2974
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F0.7001010392432363
sg34
g752
(S'\x07\xdf\n\x13\r\x00\x03\x04\xba\xf0'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g983
sS'block_loop.thisIndex'
p2981
g888
sg38
S'left'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g991
sS'block_loop.thisRepN'
p2987
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F0.90056928657941171
sg34
g752
(S'\x07\xdf\n\x13\r\x00\t\x00\xc78'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1758
sS'block_loop.thisIndex'
p2994
g888
sg38
S'right'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1765
sS'block_loop.thisRepN'
p3000
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.7668123144703713
sg34
g752
(S'\x07\xdf\n\x13\r\x00\x0e\x0e\xf08'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1248
sS'block_loop.thisIndex'
p3007
g888
sg38
S'right'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1256
sS'block_loop.thisRepN'
p3013
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F0.86687309767512488
sg34
g752
(S'\x07\xdf\n\x13\r\x00\x15\x0b\xe6\xe0'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1325
sS'block_loop.thisIndex'
p3020
g888
sg38
S'right'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1336
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1333
sS'block_loop.thisRepN'
p3026
I0
sg906
g1329
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg908
g1336
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F1.633504088897098
sg34
g752
(S'\x07\xdf\n\x13\r\x00\x1b\nT\x88'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g1308
sS'block_loop.thisIndex'
p3033
g888
sg38
S'right'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g1312
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g1316
sS'block_loop.thisRepN'
p3039
I0
sg906
g1312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg908
g1319
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F1.0667523295469437
sg34
g752
(S'\x07\xdf\n\x13\r\x00"\x05f\xd0'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g2301
sS'block_loop.thisIndex'
p3046
g888
sg38
S'right'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g2308
sS'block_loop.thisRepN'
p3052
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg908
g1109
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F1.1505969412246486
sg34
g752
(S'\x07\xdf\n\x13\r\x00(\x06\xe9\x88'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g1357
sS'block_loop.thisIndex'
p3059
g888
sg38
S'right'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1361
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g1365
sS'block_loop.thisRepN'
p3065
I0
sg906
g1361
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F0.81682959149839007
sg34
g752
(S'\x07\xdf\n\x13\r\x00.\t\xa0\xd8'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1374
sS'block_loop.thisIndex'
p3072
g888
sg38
S'right'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1378
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1382
sS'block_loop.thisRepN'
p3078
I0
sg906
g1378
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F0.83331233100761892
sg34
g752
(S'\x07\xdf\n\x13\r\x004\x07V\xe8'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1342
sS'block_loop.thisIndex'
p3085
g888
sg38
S'right'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1349
sS'block_loop.thisRepN'
p3091
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F0.63316196955747728
sg34
g752
(S'\x07\xdf\n\x13\r\x00:\x05Kx'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1497
sS'block_loop.thisIndex'
p3098
g888
sg38
S'left'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1504
sS'block_loop.thisRepN'
p3104
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F0.93343669138630503
sg34
g752
(S'\x07\xdf\n\x13\r\x01\x04\x00#('
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g1190
sS'block_loop.thisIndex'
p3111
g888
sg38
S'right'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g1198
sS'block_loop.thisRepN'
p3117
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F1.0501276105133002
sg34
g752
(S'\x07\xdf\n\x13\r\x01\t\x0f\x03\xc0'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1357
sS'block_loop.thisIndex'
p3124
g888
sg38
S'right'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1361
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1365
sS'block_loop.thisRepN'
p3130
I0
sg906
g1361
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F0.78353539281670237
sg34
g752
(S'\x07\xdf\n\x13\r\x01\x10\x01\t\xa0'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g2013
sS'block_loop.thisIndex'
p3137
g888
sg38
S'left'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g2020
sS'block_loop.thisRepN'
p3143
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F0.85011267130175838
sg34
g752
(S'\x07\xdf\n\x13\r\x01\x15\rJX'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g1730
sS'block_loop.thisIndex'
p3150
g888
sg38
S'left'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g1336
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g1737
sS'block_loop.thisRepN'
p3156
I0
sg906
g1329
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg908
g1336
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F0.98353636215324514
sg34
g752
(S'\x07\xdf\n\x13\r\x01\x1b\x0b\xb8\x00'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g966
sS'block_loop.thisIndex'
p3163
g888
sg38
S'right'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g974
sS'block_loop.thisRepN'
p3169
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F0.9834006548171601
sg34
g752
(S'\x07\xdf\n\x13\r\x01!\x0b\xcfp'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g2301
sS'block_loop.thisIndex'
p3176
g888
sg38
S'right'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g2308
sS'block_loop.thisRepN'
p3182
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg908
g1109
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F0.85020390312638483
sg34
g752
(S"\x07\xdf\n\x13\r\x01'\x0c%`"
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g1293
sS'block_loop.thisIndex'
p3189
g888
sg38
S'left'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g1154
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1300
sS'block_loop.thisRepN'
p3195
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F0.83344490224953915
sg34
g752
(S'\x07\xdf\n\x13\r\x01-\nT\x88'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1702
sS'block_loop.thisIndex'
p3202
g888
sg38
S'left'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1312
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1709
sS'block_loop.thisRepN'
p3208
I0
sg906
g1312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg908
g1319
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F0.80062767494564469
sg34
g752
(S'\x07\xdf\n\x13\r\x013\x08I\x18'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1017
sS'block_loop.thisIndex'
p3215
g888
sg38
S'left'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1025
sS'block_loop.thisRepN'
p3221
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F1.5168040465869126
sg34
g752
(S'\x07\xdf\n\x13\r\x019\x05\xc0\xa8'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g1081
sS'block_loop.thisIndex'
p3228
g888
sg38
S'right'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g1085
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g1089
sS'block_loop.thisRepN'
p3234
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg908
g1092
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F0.96725604325365566
sg34
g752
(S'\x07\xdf\n\x13\r\x02\x03\x0e,\xe8'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g1374
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g1378
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g1382
sS'block_loop.thisRepN'
p3247
I0
sg906
g1378
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F0.76671338496453245
sg34
g752
(S'\x07\xdf\n\x13\r\x02\t\x0eDX'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g1017
sS'block_loop.thisIndex'
p3254
g888
sg38
S'left'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g1028
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g1025
sS'block_loop.thisRepN'
p3260
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F0.81677285670957644
sg34
g752
(S'\x07\xdf\n\x13\r\x02\x0f\x0b\x088'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1034
sS'block_loop.thisIndex'
p3267
g888
sg38
S'left'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1042
sS'block_loop.thisRepN'
p3273
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F0.8836201243702817
sg34
g752
(S'\x07\xdf\n\x13\r\x02\x15\x08\xbeH'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g1758
sS'block_loop.thisIndex'
p3280
g888
sg38
S'right'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1765
sS'block_loop.thisRepN'
p3286
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F0.85009328453816124
sg34
g752
(S'\x07\xdf\n\x13\r\x02\x1b\x07\xa5\x08'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1687
sS'block_loop.thisIndex'
p3293
g888
sg38
S'right'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1694
sS'block_loop.thisRepN'
p3299
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F0.83352644069236703
sg34
g752
(S'\x07\xdf\n\x13\r\x02!\x05\xd40'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g966
sS'block_loop.thisIndex'
p3306
g888
sg38
S'right'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g974
sS'block_loop.thisRepN'
p3312
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F0.90015304138432839
sg34
g752
(S"\x07\xdf\n\x13\r\x02'\x03\xc8\xc0"
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1730
sS'block_loop.thisIndex'
p3319
g888
sg38
S'left'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1329
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1737
sS'block_loop.thisRepN'
p3325
I0
sg906
g1329
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg908
g1336
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F1.0002135394861398
sg34
g752
(S'\x07\xdf\n\x13\r\x02-\x02\xaf\x80'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g2407
sS'block_loop.thisIndex'
p3332
g888
sg38
S'left'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1011
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g2414
sS'block_loop.thisRepN'
p3338
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F0.7667991998969228
sg34
g752
(S'\x07\xdf\n\x13\r\x023\x03@\x08'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1374
sS'block_loop.thisIndex'
p3345
g888
sg38
S'right'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1378
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1382
sS'block_loop.thisRepN'
p3351
I0
sg906
g1378
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F1.2171414332751738
sg34
g752
(S'\x07\xdf\n\x13\r\x029\x00>\x80'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1160
sS'block_loop.thisIndex'
p3358
g888
sg38
S'left'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1168
sS'block_loop.thisRepN'
p3364
I0
sg906
g1164
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F0.88342996303981636
sg34
g752
(S'\x07\xdf\n\x13\r\x03\x03\x03\xe8\x00'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g1456
sS'block_loop.thisIndex'
p3371
g888
sg38
S'right'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g1463
sS'block_loop.thisRepN'
p3377
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F0.86689704602758866
sg34
g752
(S'\x07\xdf\n\x13\r\x03\t\x02\xce\xc0'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g1081
sS'block_loop.thisIndex'
p3384
g888
sg38
S'right'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g1085
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g1089
sS'block_loop.thisRepN'
p3390
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg908
g1092
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F1.0168163058642676
sg34
g752
(S'\x07\xdf\n\x13\r\x03\x0f\x01<h'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1342
sS'block_loop.thisIndex'
p3397
g888
sg38
S'right'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1349
sS'block_loop.thisRepN'
p3403
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F0.66662124081994989
sg34
g752
(S'\x07\xdf\n\x13\r\x03\x15\x02\x0bp'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1000
sS'block_loop.thisIndex'
p3410
g888
sg38
S'right'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1008
sS'block_loop.thisRepN'
p3416
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F1.0501201979277539
sg34
g752
(S'\x07\xdf\n\x13\r\x03\x1a\x0c\xa2`'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g895
sS'block_loop.thisIndex'
p3423
g888
sg38
S'left'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g904
sS'block_loop.thisRepN'
p3429
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F0.76687161515656044
sg34
g752
(S'\x07\xdf\n\x13\r\x03 \r\xea\x80'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g1512
sS'block_loop.thisIndex'
p3436
g888
sg38
S'left'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1385
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g1519
sS'block_loop.thisRepN'
p3442
I0
sg906
g1378
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F0.63338491732611146
sg34
g752
(S'\x07\xdf\n\x13\r\x03&\n\xe8\xf8'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1293
sS'block_loop.thisIndex'
p3449
g888
sg38
S'left'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1300
sS'block_loop.thisRepN'
p3455
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg908
g1154
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F1.0168636323724058
sg34
g752
(S'\x07\xdf\n\x13\r\x03,\x05\xc4\x90'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1853
sS'block_loop.thisIndex'
p3462
g888
sg38
S'left'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g1361
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1860
sS'block_loop.thisRepN'
p3468
I0
sg906
g1361
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F1.033525984534208
sg34
g752
(S'\x07\xdf\n\x13\r\x032\x06\x93\x98'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1527
sS'block_loop.thisIndex'
p3475
g888
sg38
S'right'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1534
sS'block_loop.thisRepN'
p3481
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F0.68343013409867126
sg34
g752
(S'\x07\xdf\n\x13\r\x038\x07\x9d8'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1034
sS'block_loop.thisIndex'
p3488
g888
sg38
S'left'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1045
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1042
sS'block_loop.thisRepN'
p3494
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F0.78348977690438915
sg34
g752
(S'\x07\xdf\n\x13\r\x04\x02\x030h'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1702
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1312
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1709
sS'block_loop.thisRepN'
p3507
I0
sg906
g1312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg908
g1319
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F2.5833439770467521
sg34
g752
(S'\x07\xdf\n\x13\r\x04\x08\x00ix'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g1051
sS'block_loop.thisIndex'
p3514
g888
sg38
S'left'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g1062
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g1059
sS'block_loop.thisRepN'
p3520
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F1.4833804127556505
sg34
g752
(S'\x07\xdf\n\x13\r\x04\x0f\t\xc4\x00'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g2301
sS'block_loop.thisIndex'
p3527
g888
sg38
S'right'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g2308
sS'block_loop.thisRepN'
p3533
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg908
g1109
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F1.2668567899854679
sg34
g752
(S'\x07\xdf\n\x13\r\x04\x16\x02t\xe8'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1081
sS'block_loop.thisIndex'
p3540
g888
sg38
S'right'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g1085
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1089
sS'block_loop.thisRepN'
p3546
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg908
g1092
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F0.73348247835747316
sg34
g752
(S'\x07\xdf\n\x13\r\x04\x1c\x07\x10\x98'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g1098
sS'block_loop.thisIndex'
p3553
g888
sg38
S'left'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g1106
sS'block_loop.thisRepN'
p3559
I0
sg906
g1102
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg908
g1109
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F0.91676550114243582
sg34
g752
(S'\x07\xdf\n\x13\r\x04"\x03[`'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g1456
sS'block_loop.thisIndex'
p3566
g888
sg38
S'right'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g1463
sS'block_loop.thisRepN'
p3572
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F3.0172405338435055
sg34
g752
(S'\x07\xdf\n\x13\r\x04(\x02\xbb8'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g1812
sS'block_loop.thisIndex'
p3579
g888
sg38
S'right'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g1819
sS'block_loop.thisRepN'
p3585
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F0.70019284126647108
sg34
g752
(S'\x07\xdf\n\x13\r\x040\x03~\x88'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g966
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g974
sS'block_loop.thisRepN'
p3598
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F0.88343081833954784
sg34
g752
(S'\x07\xdf\n\x13\r\x045\x0e\x8e\x90'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g1081
sS'block_loop.thisIndex'
p3605
g888
sg38
S'right'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1092
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g1089
sS'block_loop.thisRepN'
p3611
I0
sg906
g1085
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg908
g1092
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F1.1335340243385872
sg34
g752
(S'\x07\xdf\n\x13\r\x04;\ruP'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F128.08075441875553
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'29-beans.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'right'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'29-beans.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'46-pistachios.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
S'46-pistachios.png'
p3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F1.1668632902528771
sg34
g752
(S'\x07\xdf\n\x13\r\x07\x13\x02m\x18'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'6-sour_patch_kids.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'right'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'6-sour_patch_kids.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'38-maltesers.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
S'38-maltesers.png'
p3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
g3657
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F0.64983914689037192
sg34
g752
(S'\x07\xdf\n\x13\r\x07\x19\x05_\x00'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'46-pistachios.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'left'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p3674
g59
(g98
S'\x02\x00\x00\x00'
tRp3675
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3676
I0
sg3641
S'29-beans.png'
p3677
sS'block_loop.thisRepN'
p3678
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3679
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p3680
Nsg69
Vn
sS'block_loop.thisTrialN'
p3681
I0
sg39
F11.649924391625973
sg34
g752
(S'\x07\xdf\n\x13\r\x07\x1f\x00\xb3\xb0'
tRp3682
sa(dp3683
S'trial_loop.thisTrialN'
p3684
I3
sg3632
S'25-kitkat.png'
p3685
sS'block_loop.thisIndex'
p3686
g3626
sg38
S'left'
p3687
sg58
g62
sS'trial_loop.thisN'
p3688
I3
sg33
S'31-hobnobs.png'
p3689
sg63
g64
sS'trial_loop.thisIndex'
p3690
g59
(g98
S'\x03\x00\x00\x00'
tRp3691
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3692
I0
sg3641
S'31-hobnobs.png'
p3693
sS'block_loop.thisRepN'
p3694
I1
sg3644
S'25-kitkat.png'
p3695
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3696
I1
sg3647
g3689
sg55
g11
sS'block_loop.thisTrial'
p3697
Nsg69
Vn
sS'block_loop.thisTrialN'
p3698
I0
sg39
F1.0668894623813685
sg34
g752
(S'\x07\xdf\n\x13\r\x07/\x0b\x088'
tRp3699
sa(dp3700
S'trial_loop.thisTrialN'
p3701
I4
sg3632
S'16-skips_prawn.png'
p3702
sS'block_loop.thisIndex'
p3703
g3626
sg38
S'right'
p3704
sg58
g62
sS'trial_loop.thisN'
p3705
I4
sg33
S'16-skips_prawn.png'
p3706
sg63
g64
sS'trial_loop.thisIndex'
p3707
g59
(g98
S'\x04\x00\x00\x00'
tRp3708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3709
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p3710
sS'block_loop.thisRepN'
p3711
I1
sg3644
S'42-mrkipling_lemon_slices.png'
p3712
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3713
I1
sg3647
g3706
sg55
g11
sS'block_loop.thisTrial'
p3714
Nsg69
Vn
sS'block_loop.thisTrialN'
p3715
I0
sg39
F0.93334061287168879
sg34
g752
(S'\x07\xdf\n\x13\r\x075\x0c\x8a\xf0'
tRp3716
sa(dp3717
S'trial_loop.thisTrialN'
p3718
I5
sg3632
g3653
sS'block_loop.thisIndex'
p3719
g3626
sg38
S'right'
p3720
sg58
g62
sS'trial_loop.thisN'
p3721
I5
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p3722
g59
(g98
S'\x05\x00\x00\x00'
tRp3723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3724
I0
sg3641
g3661
sS'block_loop.thisRepN'
p3725
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3726
I1
sg3647
g3657
sg55
g11
sS'block_loop.thisTrial'
p3727
Nsg69
Vn
sS'block_loop.thisTrialN'
p3728
I0
sg39
F0.76658024352036591
sg34
g752
(S'\x07\xdf\n\x13\r\x07;\x0c)H'
tRp3729
sa(dp3730
S'trial_loop.thisTrialN'
p3731
I6
sg3632
S'23-crunchie_redo.png'
p3732
sS'block_loop.thisIndex'
p3733
g3626
sg38
S'right'
p3734
sg58
g62
sS'trial_loop.thisN'
p3735
I6
sg33
S'23-crunchie_redo.png'
p3736
sg63
g64
sS'trial_loop.thisIndex'
p3737
g59
(g98
S'\x06\x00\x00\x00'
tRp3738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3739
I0
sg3641
S'33-ambrosia_rice.png'
p3740
sS'block_loop.thisRepN'
p3741
I1
sg3644
S'33-ambrosia_rice.png'
p3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3743
I1
sg3647
g3736
sg55
g11
sS'block_loop.thisTrial'
p3744
Nsg69
Vn
sS'block_loop.thisTrialN'
p3745
I0
sg39
F0.95011101772615802
sg34
g752
(S'\x07\xdf\n\x13\r\x08\x05\x08\xed('
tRp3746
sa(dp3747
S'trial_loop.thisTrialN'
p3748
I7
sg3632
S'44-crunch.png'
p3749
sS'block_loop.thisIndex'
p3750
g3626
sg38
S'left'
p3751
sg58
g62
sS'trial_loop.thisN'
p3752
I7
sg33
S'44-crunch.png'
p3753
sg63
g64
sS'trial_loop.thisIndex'
p3754
g59
(g98
S'\x07\x00\x00\x00'
tRp3755
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3756
I0
sg3641
S'26-walkers_smoky_bacon.png'
p3757
sS'block_loop.thisRepN'
p3758
I1
sg3644
g3753
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3759
I1
sg3647
S'26-walkers_smoky_bacon.png'
p3760
sg55
g11
sS'block_loop.thisTrial'
p3761
Nsg69
Vn
sS'block_loop.thisTrialN'
p3762
I0
sg39
F0.73345083232015895
sg34
g752
(S'\x07\xdf\n\x13\r\x08\x0b\x08\xc6\x18'
tRp3763
sa(dp3764
S'trial_loop.thisTrialN'
p3765
I8
sg3632
S'51-mars.png'
p3766
sS'block_loop.thisIndex'
p3767
g3626
sg38
S'right'
p3768
sg58
g62
sS'trial_loop.thisN'
p3769
I8
sg33
S'27-hartleys_raspberries_jelly.png'
p3770
sg63
g64
sS'trial_loop.thisIndex'
p3771
g59
(g98
S'\x08\x00\x00\x00'
tRp3772
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3773
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p3774
sS'block_loop.thisRepN'
p3775
I1
sg3644
g3770
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3776
I1
sg3647
S'51-mars.png'
p3777
sg55
g11
sS'block_loop.thisTrial'
p3778
Nsg69
Vn
sS'block_loop.thisTrialN'
p3779
I0
sg39
F0.83355922712871688
sg34
g752
(S'\x07\xdf\n\x13\r\x08\x11\x05Kx'
tRp3780
sa(dp3781
S'trial_loop.thisTrialN'
p3782
I9
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p3783
sS'block_loop.thisIndex'
p3784
g3626
sg38
S'left'
p3785
sg58
g62
sS'trial_loop.thisN'
p3786
I9
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3787
sg63
g64
sS'trial_loop.thisIndex'
p3788
g59
(g98
S'\t\x00\x00\x00'
tRp3789
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3790
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p3791
sS'block_loop.thisRepN'
p3792
I1
sg3644
g3787
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3793
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p3794
sg55
g11
sS'block_loop.thisTrial'
p3795
Nsg69
Vn
sS'block_loop.thisTrialN'
p3796
I0
sg39
F0.85021901339678152
sg34
g752
(S'\x07\xdf\n\x13\r\x08\x17\x03@\x08'
tRp3797
sa(dp3798
S'trial_loop.thisTrialN'
p3799
I10
sg3632
S'31-hobnobs.png'
p3800
sS'block_loop.thisIndex'
p3801
g3626
sg38
S'right'
p3802
sg58
g62
sS'trial_loop.thisN'
p3803
I10
sg33
g3689
sg63
g64
sS'trial_loop.thisIndex'
p3804
g59
(g98
S'\n\x00\x00\x00'
tRp3805
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3806
I0
sg3641
S'25-kitkat.png'
p3807
sS'block_loop.thisRepN'
p3808
I1
sg3644
g3695
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3809
I1
sg3647
g3689
sg55
g11
sS'block_loop.thisTrial'
p3810
Nsg69
Vn
sS'block_loop.thisTrialN'
p3811
I0
sg39
F1.100155436219211
sg34
g752
(S'\x07\xdf\n\x13\r\x08\x1d\x01o0'
tRp3812
sa(dp3813
S'trial_loop.thisTrialN'
p3814
I11
sg3632
S'3-ellas_strawberries_apples.png'
p3815
sS'block_loop.thisIndex'
p3816
g3626
sg38
S'left'
p3817
sg58
g62
sS'trial_loop.thisN'
p3818
I11
sg33
S'3-ellas_strawberries_apples.png'
p3819
sg63
g64
sS'trial_loop.thisIndex'
p3820
g59
(g98
S'\x0b\x00\x00\x00'
tRp3821
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3822
I0
sg3641
S'13-mccoys_steak_crisps.png'
p3823
sS'block_loop.thisRepN'
p3824
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3825
I1
sg3647
S'13-mccoys_steak_crisps.png'
p3826
sg55
g11
sS'block_loop.thisTrial'
p3827
Nsg69
Vn
sS'block_loop.thisTrialN'
p3828
I0
sg39
F0.95012755349307554
sg34
g752
(S'\x07\xdf\n\x13\r\x08#\x03n\xe8'
tRp3829
sa(dp3830
S'trial_loop.thisTrialN'
p3831
I12
sg3632
g3653
sS'block_loop.thisIndex'
p3832
g3626
sg38
S'right'
p3833
sg58
g62
sS'trial_loop.thisN'
p3834
I12
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p3835
g59
(g98
S'\x0c\x00\x00\x00'
tRp3836
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3837
I0
sg3641
g3661
sS'block_loop.thisRepN'
p3838
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3839
I1
sg3647
g3657
sg55
g11
sS'block_loop.thisTrial'
p3840
Nsg69
Vn
sS'block_loop.thisTrialN'
p3841
I0
sg39
F0.66657191861668252
sg34
g752
(S'\x07\xdf\n\x13\r\x08)\x03G\xd8'
tRp3842
sa(dp3843
S'trial_loop.thisTrialN'
p3844
I13
sg3632
S'4-corn.png'
p3845
sS'block_loop.thisIndex'
p3846
g3626
sg38
S'left'
p3847
sg58
g62
sS'trial_loop.thisN'
p3848
I13
sg33
S'4-corn.png'
p3849
sg63
g64
sS'trial_loop.thisIndex'
p3850
g59
(g98
S'\r\x00\x00\x00'
tRp3851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3852
I0
sg3641
S'10-bounty_redo.png'
p3853
sS'block_loop.thisRepN'
p3854
I1
sg3644
g3849
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3855
I1
sg3647
S'10-bounty_redo.png'
p3856
sg55
g11
sS'block_loop.thisTrial'
p3857
Nsg69
Vn
sS'block_loop.thisTrialN'
p3858
I0
sg39
F1.2835219931421307
sg34
g752
(S'\x07\xdf\n\x13\r\x08.\r\xde\xc8'
tRp3859
sa(dp3860
S'trial_loop.thisTrialN'
p3861
I14
sg3632
S'36-fig_rolls.png'
p3862
sS'block_loop.thisIndex'
p3863
g3626
sg38
S'left'
p3864
sg58
g62
sS'trial_loop.thisN'
p3865
I14
sg33
S'36-fig_rolls.png'
p3866
sg63
g64
sS'trial_loop.thisIndex'
p3867
g59
(g98
S'\x0e\x00\x00\x00'
tRp3868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3869
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p3870
sS'block_loop.thisRepN'
p3871
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3872
I1
sg3647
S'34-hula_hoops_bbq_beef_redo.png'
p3873
sg55
g11
sS'block_loop.thisTrial'
p3874
Nsg69
Vn
sS'block_loop.thisTrialN'
p3875
I0
sg39
F0.73344341973461269
sg34
g752
(S'\x07\xdf\n\x13\r\x085\x03v\xb8'
tRp3876
sa(dp3877
S'trial_loop.thisTrialN'
p3878
I15
sg3632
g3670
sS'block_loop.thisIndex'
p3879
g3626
sg38
S'left'
p3880
sg58
g62
sS'trial_loop.thisN'
p3881
I15
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p3882
g59
(g98
S'\x0f\x00\x00\x00'
tRp3883
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3884
I0
sg3641
g3677
sS'block_loop.thisRepN'
p3885
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3886
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p3887
Nsg69
Vn
sS'block_loop.thisTrialN'
p3888
I0
sg39
F0.66687440913301543
sg34
g752
(S'\x07\xdf\n\x13\r\x08:\x0f>X'
tRp3889
sa(dp3890
S'trial_loop.thisTrialN'
p3891
I16
sg3632
S'22-daim.png'
p3892
sS'block_loop.thisIndex'
p3893
g3626
sg38
S'right'
p3894
sg58
g62
sS'trial_loop.thisN'
p3895
I16
sg33
S'7-olives.png'
p3896
sg63
g64
sS'trial_loop.thisIndex'
p3897
g59
(g98
S'\x10\x00\x00\x00'
tRp3898
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3899
I0
sg3641
S'7-olives.png'
p3900
sS'block_loop.thisRepN'
p3901
I1
sg3644
g3896
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3902
I1
sg3647
S'22-daim.png'
p3903
sg55
g11
sS'block_loop.thisTrial'
p3904
Nsg69
Vn
sS'block_loop.thisTrialN'
p3905
I0
sg39
F0.90014192250419001
sg34
g752
(S'\x07\xdf\n\x13\r\t\x04\n\x93\x08'
tRp3906
sa(dp3907
S'trial_loop.thisTrialN'
p3908
I17
sg3632
S'38-maltesers.png'
p3909
sS'block_loop.thisIndex'
p3910
g3626
sg38
S'left'
p3911
sg58
g62
sS'trial_loop.thisN'
p3912
I17
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p3913
g59
(g98
S'\x11\x00\x00\x00'
tRp3914
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3915
I0
sg3641
S'6-sour_patch_kids.png'
p3916
sS'block_loop.thisRepN'
p3917
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3918
I1
sg3647
g3657
sg55
g11
sS'block_loop.thisTrial'
p3919
Nsg69
Vn
sS'block_loop.thisTrialN'
p3920
I0
sg39
F0.61659427041377057
sg34
g752
(S'\x07\xdf\n\x13\r\t\n\ty\xc8'
tRp3921
sa(dp3922
S'trial_loop.thisTrialN'
p3923
I18
sg3632
S'19-caramello_redo.png'
p3924
sS'block_loop.thisIndex'
p3925
g3626
sg38
S'left'
p3926
sg58
g62
sS'trial_loop.thisN'
p3927
I18
sg33
S'19-caramello_redo.png'
p3928
sg63
g64
sS'trial_loop.thisIndex'
p3929
g59
(g98
S'\x12\x00\x00\x00'
tRp3930
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3931
I0
sg3641
S'30-spaghetti_hoops.png'
p3932
sS'block_loop.thisRepN'
p3933
I1
sg3644
g3928
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3934
I1
sg3647
S'30-spaghetti_hoops.png'
p3935
sg55
g11
sS'block_loop.thisTrial'
p3936
Nsg69
Vn
sS'block_loop.thisTrialN'
p3937
I0
sg39
F1.200130119386813
sg34
g752
(S'\x07\xdf\n\x13\r\t\x10\x04\x16\xe0'
tRp3938
sa(dp3939
S'trial_loop.thisTrialN'
p3940
I19
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p3941
sS'block_loop.thisIndex'
p3942
g3626
sg38
S'right'
p3943
sg58
g62
sS'trial_loop.thisN'
p3944
I19
sg33
g3866
sg63
g64
sS'trial_loop.thisIndex'
p3945
g59
(g98
S'\x13\x00\x00\x00'
tRp3946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3947
I0
sg3641
S'36-fig_rolls.png'
p3948
sS'block_loop.thisRepN'
p3949
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3950
I1
sg3647
g3873
sg55
g11
sS'block_loop.thisTrial'
p3951
Nsg69
Vn
sS'block_loop.thisTrialN'
p3952
I0
sg39
F0.80025961155661207
sg34
g752
(S'\x07\xdf\n\x13\r\t\x16\x07\xc0`'
tRp3953
sa(dp3954
S'trial_loop.thisTrialN'
p3955
I20
sg3632
g3685
sS'block_loop.thisIndex'
p3956
g3626
sg38
S'left'
p3957
sg58
g62
sS'trial_loop.thisN'
p3958
I20
sg33
g3695
sg63
g64
sS'trial_loop.thisIndex'
p3959
g59
(g98
S'\x14\x00\x00\x00'
tRp3960
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3961
I0
sg3641
g3693
sS'block_loop.thisRepN'
p3962
I1
sg3644
g3695
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3963
I1
sg3647
g3689
sg55
g11
sS'block_loop.thisTrial'
p3964
Nsg69
Vn
sS'block_loop.thisTrialN'
p3965
I0
sg39
F1.2002142237251974
sg34
g752
(S'\x07\xdf\n\x13\r\t\x1c\x05;\xd8'
tRp3966
sa(dp3967
S'trial_loop.thisTrialN'
p3968
I21
sg3632
S'43-mrporky_pork_crackles_redo.png'
p3969
sS'block_loop.thisIndex'
p3970
g3626
sg38
S'right'
p3971
sg58
g62
sS'trial_loop.thisN'
p3972
I21
sg33
S'18-mms.png'
p3973
sg63
g64
sS'trial_loop.thisIndex'
p3974
g59
(g98
S'\x15\x00\x00\x00'
tRp3975
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3976
I0
sg3641
S'18-mms.png'
p3977
sS'block_loop.thisRepN'
p3978
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3979
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3980
sg55
g11
sS'block_loop.thisTrial'
p3981
Nsg69
Vn
sS'block_loop.thisTrialN'
p3982
I0
sg39
F0.73344855152390664
sg34
g752
(S'\x07\xdf\n\x13\r\t"\x08\xa6\xd8'
tRp3983
sa(dp3984
S'trial_loop.thisTrialN'
p3985
I22
sg3632
g3845
sS'block_loop.thisIndex'
p3986
g3626
sg38
S'left'
p3987
sg58
g62
sS'trial_loop.thisN'
p3988
I22
sg33
g3856
sg63
g64
sS'trial_loop.thisIndex'
p3989
g59
(g98
S'\x16\x00\x00\x00'
tRp3990
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3991
I0
sg3641
g3853
sS'block_loop.thisRepN'
p3992
I1
sg3644
g3849
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3993
I1
sg3647
g3856
sg55
g11
sS'block_loop.thisTrial'
p3994
Nsg69
Vn
sS'block_loop.thisTrialN'
p3995
I0
sg39
F1.3001441462820367
sg34
g752
(S'\x07\xdf\n\x13\r\t(\x05,8'
tRp3996
sa(dp3997
S'trial_loop.thisTrialN'
p3998
I23
sg3632
g3633
sS'block_loop.thisIndex'
p3999
g3626
sg38
S'right'
p4000
sg58
g62
sS'trial_loop.thisN'
p4001
I23
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p4002
g59
(g98
S'\x17\x00\x00\x00'
tRp4003
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4004
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4005
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4006
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p4007
Nsg69
Vn
sS'block_loop.thisTrialN'
p4008
I0
sg39
F0.75019899941435142
sg34
g752
(S'\x07\xdf\n\x13\r\t.\nD\xe8'
tRp4009
sa(dp4010
S'trial_loop.thisTrialN'
p4011
I24
sg3632
S'20-fruit_pastilles.png'
p4012
sS'block_loop.thisIndex'
p4013
g3626
sg38
S'right'
p4014
sg58
g62
sS'trial_loop.thisN'
p4015
I24
sg33
S'20-fruit_pastilles.png'
p4016
sg63
g64
sS'trial_loop.thisIndex'
p4017
g59
(g98
S'\x18\x00\x00\x00'
tRp4018
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4019
I0
sg3641
S'2-steamed_puddings.png'
p4020
sS'block_loop.thisRepN'
p4021
I1
sg3644
g4016
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4022
I1
sg3647
S'2-steamed_puddings.png'
p4023
sg55
g11
sS'block_loop.thisTrial'
p4024
Nsg69
Vn
sS'block_loop.thisTrialN'
p4025
I0
sg39
F1.1168608383977698
sg34
g752
(S'\x07\xdf\n\x13\r\t4\x07\x04\xe0'
tRp4026
sa(dp4027
S'trial_loop.thisTrialN'
p4028
I25
sg3632
S'5-pineapple.png'
p4029
sS'block_loop.thisIndex'
p4030
g3626
sg38
S'left'
p4031
sg58
g62
sS'trial_loop.thisN'
p4032
I25
sg33
S'5-pineapple.png'
p4033
sg63
g64
sS'trial_loop.thisIndex'
p4034
g59
(g98
S'\x19\x00\x00\x00'
tRp4035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4036
I0
sg3641
S'40-sardines.png'
p4037
sS'block_loop.thisRepN'
p4038
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4039
I1
sg3647
S'40-sardines.png'
p4040
sg55
g11
sS'block_loop.thisTrial'
p4041
Nsg69
Vn
sS'block_loop.thisTrialN'
p4042
I0
sg39
F0.90020264868689992
sg34
g752
(S'\x07\xdf\n\x13\r\t:\tC\x18'
tRp4043
sa(dp4044
S'trial_loop.thisTrialN'
p4045
I26
sg3632
g3800
sS'block_loop.thisIndex'
p4046
g3626
sg38
S'right'
p4047
sg58
g62
sS'trial_loop.thisN'
p4048
I26
sg33
g3695
sg63
g64
sS'trial_loop.thisIndex'
p4049
g59
(g98
S'\x1a\x00\x00\x00'
tRp4050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4051
I0
sg3641
g3807
sS'block_loop.thisRepN'
p4052
I1
sg3644
g3695
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4053
I1
sg3647
g3689
sg55
g11
sS'block_loop.thisTrial'
p4054
Nsg69
Vn
sS'block_loop.thisTrialN'
p4055
I0
sg39
F2.2167542682236672
sg34
g752
(S'\x07\xdf\n\x13\r\n\x04\x08)\xd8'
tRp4056
sa(dp4057
S'trial_loop.thisTrialN'
p4058
I27
sg3632
S'49-yorkie.png'
p4059
sS'block_loop.thisIndex'
p4060
g3626
sg38
S'right'
p4061
sg58
g62
sS'trial_loop.thisN'
p4062
I27
sg33
S'49-yorkie.png'
p4063
sg63
g64
sS'trial_loop.thisIndex'
p4064
g59
(g98
S'\x1b\x00\x00\x00'
tRp4065
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4066
I0
sg3641
S'35-raisins.png'
p4067
sS'block_loop.thisRepN'
p4068
I1
sg3644
S'35-raisins.png'
p4069
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4070
I1
sg3647
g4063
sg55
g11
sS'block_loop.thisTrial'
p4071
Nsg69
Vn
sS'block_loop.thisTrialN'
p4072
I0
sg39
F1.0668743521109718
sg34
g752
(S'\x07\xdf\n\x13\r\n\x0b\x0c\n\x08'
tRp4073
sa(dp4074
S'trial_loop.thisTrialN'
p4075
I28
sg3632
S'10-bounty_redo.png'
p4076
sS'block_loop.thisIndex'
p4077
g3626
sg38
S'right'
p4078
sg58
g62
sS'trial_loop.thisN'
p4079
I28
sg33
g3849
sg63
g64
sS'trial_loop.thisIndex'
p4080
g59
(g98
S'\x1c\x00\x00\x00'
tRp4081
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4082
I0
sg3641
S'4-corn.png'
p4083
sS'block_loop.thisRepN'
p4084
I1
sg3644
g3849
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4085
I1
sg3647
g3856
sg55
g11
sS'block_loop.thisTrial'
p4086
Nsg69
Vn
sS'block_loop.thisTrialN'
p4087
I0
sg39
F0.58353214268208831
sg34
g752
(S'\x07\xdf\n\x13\r\n\x11\r\x8c\xc0'
tRp4088
sa(dp4089
S'trial_loop.thisTrialN'
p4090
I29
sg3632
g3766
sS'block_loop.thisIndex'
p4091
g3626
sg38
S'right'
p4092
sg58
g62
sS'trial_loop.thisN'
p4093
I29
sg33
g3770
sg63
g64
sS'trial_loop.thisIndex'
p4094
g59
(g98
S'\x1d\x00\x00\x00'
tRp4095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4096
I0
sg3641
g3774
sS'block_loop.thisRepN'
p4097
I1
sg3644
g3770
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4098
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p4099
Nsg69
Vn
sS'block_loop.thisTrialN'
p4100
I0
sg39
F0.76677810253750067
sg34
g752
(S'\x07\xdf\n\x13\r\n\x17\x07\xb0\xc0'
tRp4101
sa(dp4102
S'trial_loop.thisTrialN'
p4103
I30
sg3632
S'21-nakd_banana_crunch.png'
p4104
sS'block_loop.thisIndex'
p4105
g3626
sg38
S'left'
p4106
sg58
g62
sS'trial_loop.thisN'
p4107
I30
sg33
S'21-nakd_banana_crunch.png'
p4108
sg63
g64
sS'trial_loop.thisIndex'
p4109
g59
(g98
S'\x1e\x00\x00\x00'
tRp4110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4111
I0
sg3641
S'1-treacle_cookies.png'
p4112
sS'block_loop.thisRepN'
p4113
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4114
I1
sg3647
S'1-treacle_cookies.png'
p4115
sg55
g11
sS'block_loop.thisTrial'
p4116
Nsg69
Vn
sS'block_loop.thisTrialN'
p4117
I0
sg39
F0.93389570149884094
sg34
g752
(S'\x07\xdf\n\x13\r\n\x1d\x04\xb3 '
tRp4118
sa(dp4119
S'trial_loop.thisTrialN'
p4120
I31
sg3632
g3685
sS'block_loop.thisIndex'
p4121
g3626
sg38
S'left'
p4122
sg58
g62
sS'trial_loop.thisN'
p4123
I31
sg33
g3689
sg63
g64
sS'trial_loop.thisIndex'
p4124
g59
(g98
S'\x1f\x00\x00\x00'
tRp4125
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4126
I0
sg3641
g3693
sS'block_loop.thisRepN'
p4127
I1
sg3644
g3695
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4128
I1
sg3647
g3689
sg55
g11
sS'block_loop.thisTrial'
p4129
Nsg69
Vn
sS'block_loop.thisTrialN'
p4130
I0
sg39
F1.016761281671279
sg34
g752
(S'\x07\xdf\n\x13\r\n#\x04\x12\xf8'
tRp4131
sa(dp4132
S'trial_loop.thisTrialN'
p4133
I32
sg3632
g4076
sS'block_loop.thisIndex'
p4134
g3626
sg38
S'right'
p4135
sg58
g62
sS'trial_loop.thisN'
p4136
I32
sg33
g3849
sg63
g64
sS'trial_loop.thisIndex'
p4137
g59
(g98
S' \x00\x00\x00'
tRp4138
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4139
I0
sg3641
g4083
sS'block_loop.thisRepN'
p4140
I1
sg3644
g3849
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4141
I1
sg3647
g3856
sg55
g11
sS'block_loop.thisTrial'
p4142
Nsg69
Vn
sS'block_loop.thisTrialN'
p4143
I0
sg39
F1.2668610664786684
sg34
g752
(S'\x07\xdf\n\x13\r\n)\x04\xe2\x00'
tRp4144
sa(dp4145
S'trial_loop.thisTrialN'
p4146
I33
sg3632
S'33-ambrosia_rice.png'
p4147
sS'block_loop.thisIndex'
p4148
g3626
sg38
S'left'
p4149
sg58
g62
sS'trial_loop.thisN'
p4150
I33
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4151
g59
(g98
S'!\x00\x00\x00'
tRp4152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4153
I0
sg3641
S'23-crunchie_redo.png'
p4154
sS'block_loop.thisRepN'
p4155
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4156
I1
sg3647
g3736
sg55
g11
sS'block_loop.thisTrial'
p4157
Nsg69
Vn
sS'block_loop.thisTrialN'
p4158
I0
sg39
F0.98351497969451884
sg34
g752
(S'\x07\xdf\n\x13\r\n/\t}\xb0'
tRp4159
sa(dp4160
S'trial_loop.thisTrialN'
p4161
I34
sg3632
g3783
sS'block_loop.thisIndex'
p4162
g3626
sg38
S'left'
p4163
sg58
g62
sS'trial_loop.thisN'
p4164
I34
sg33
g3787
sg63
g64
sS'trial_loop.thisIndex'
p4165
g59
(g98
S'"\x00\x00\x00'
tRp4166
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4167
I0
sg3641
g3791
sS'block_loop.thisRepN'
p4168
I1
sg3644
g3787
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4169
I1
sg3647
g3794
sg55
g11
sS'block_loop.thisTrial'
p4170
Nsg69
Vn
sS'block_loop.thisTrialN'
p4171
I0
sg39
F1.0335219931403117
sg34
g752
(S'\x07\xdf\n\x13\r\n5\t\xd3\xa0'
tRp4172
sa(dp4173
S'trial_loop.thisTrialN'
p4174
I35
sg3632
S'50-polo.png'
p4175
sS'block_loop.thisIndex'
p4176
g3626
sg38
S'right'
p4177
sg58
g62
sS'trial_loop.thisN'
p4178
I35
sg33
S'48-twix.png'
p4179
sg63
g64
sS'trial_loop.thisIndex'
p4180
g59
(g98
S'#\x00\x00\x00'
tRp4181
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4182
I0
sg3641
S'48-twix.png'
p4183
sS'block_loop.thisRepN'
p4184
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4185
I1
sg3647
S'50-polo.png'
p4186
sg55
g11
sS'block_loop.thisTrial'
p4187
Nsg69
Vn
sS'block_loop.thisTrialN'
p4188
I0
sg39
F1.2505870197637705
sg34
g752
(S'\x07\xdf\n\x13\r\n;\n\xdd@'
tRp4189
sa(dp4190
S'trial_loop.thisTrialN'
p4191
I36
sg3632
g3941
sS'block_loop.thisIndex'
p4192
g3626
sg38
S'right'
p4193
sg58
g62
sS'trial_loop.thisN'
p4194
I36
sg33
g3866
sg63
g64
sS'trial_loop.thisIndex'
p4195
g59
(g98
S'$\x00\x00\x00'
tRp4196
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4197
I0
sg3641
g3948
sS'block_loop.thisRepN'
p4198
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4199
I1
sg3647
g3873
sg55
g11
sS'block_loop.thisTrial'
p4200
Nsg69
Vn
sS'block_loop.thisTrialN'
p4201
I0
sg39
F1.0501877664955828
sg34
g752
(S'\x07\xdf\n\x13\r\x0b\x05\x0e\xff\xd8'
tRp4202
sa(dp4203
S'trial_loop.thisTrialN'
p4204
I37
sg3632
g3815
sS'block_loop.thisIndex'
p4205
g3626
sg38
S'left'
p4206
sg58
g62
sS'trial_loop.thisN'
p4207
I37
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p4208
g59
(g98
S'%\x00\x00\x00'
tRp4209
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4210
I0
sg3641
g3823
sS'block_loop.thisRepN'
p4211
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4212
I1
sg3647
g3826
sg55
g11
sS'block_loop.thisTrial'
p4213
Nsg69
Vn
sS'block_loop.thisTrialN'
p4214
I0
sg39
F0.91677890081518854
sg34
g752
(S'\x07\xdf\n\x13\r\x0b\x0c\x01\x05\xb8'
tRp4215
sa(dp4216
S'trial_loop.thisTrialN'
p4217
I38
sg3632
S'41-peanuts_redo.png'
p4218
sS'block_loop.thisIndex'
p4219
g3626
sg38
S'left'
p4220
sg58
g62
sS'trial_loop.thisN'
p4221
I38
sg33
S'41-peanuts_redo.png'
p4222
sg63
g64
sS'trial_loop.thisIndex'
p4223
g59
(g98
S'&\x00\x00\x00'
tRp4224
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4225
I0
sg3641
S'45-chewy_nougat_redo.png'
p4226
sS'block_loop.thisRepN'
p4227
I1
sg3644
g4222
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4228
I1
sg3647
S'45-chewy_nougat_redo.png'
p4229
sg55
g11
sS'block_loop.thisTrial'
p4230
Nsg69
Vn
sS'block_loop.thisTrialN'
p4231
I0
sg39
F1.0335388140101713
sg34
g752
(S'\x07\xdf\n\x13\r\x0b\x12\x00e\x90'
tRp4232
sa(dp4233
S'trial_loop.thisTrialN'
p4234
I39
sg3632
g3892
sS'block_loop.thisIndex'
p4235
g3626
sg38
S'right'
p4236
sg58
g62
sS'trial_loop.thisN'
p4237
I39
sg33
g3903
sg63
g64
sS'trial_loop.thisIndex'
p4238
g59
(g98
S"'\x00\x00\x00"
tRp4239
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4240
I0
sg3641
g3900
sS'block_loop.thisRepN'
p4241
I1
sg3644
g3896
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4242
I1
sg3647
g3903
sg55
g11
sS'block_loop.thisTrial'
p4243
Nsg69
Vn
sS'block_loop.thisTrialN'
p4244
I0
sg39
F1.150077490030526
sg34
g752
(S'\x07\xdf\n\x13\r\x0b\x18\x01s\x18'
tRp4245
sa(dp4246
S'trial_loop.thisTrialN'
p4247
I40
sg3632
g4029
sS'block_loop.thisIndex'
p4248
g3626
sg38
S'left'
p4249
sg58
g62
sS'trial_loop.thisN'
p4250
I40
sg33
g4040
sg63
g64
sS'trial_loop.thisIndex'
p4251
g59
(g98
S'(\x00\x00\x00'
tRp4252
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4253
I0
sg3641
g4037
sS'block_loop.thisRepN'
p4254
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4255
I1
sg3647
g4040
sg55
g11
sS'block_loop.thisTrial'
p4256
Nsg69
Vn
sS'block_loop.thisTrialN'
p4257
I0
sg39
F0.81715289427302196
sg34
g752
(S'\x07\xdf\n\x13\r\x0b\x1e\x04*h'
tRp4258
sa(dp4259
S'trial_loop.thisTrialN'
p4260
I41
sg3632
g4147
sS'block_loop.thisIndex'
p4261
g3626
sg38
S'left'
p4262
sg58
g62
sS'trial_loop.thisN'
p4263
I41
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4264
g59
(g98
S')\x00\x00\x00'
tRp4265
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4266
I0
sg3641
g4154
sS'block_loop.thisRepN'
p4267
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4268
I1
sg3647
g3736
sg55
g11
sS'block_loop.thisTrial'
p4269
Nsg69
Vn
sS'block_loop.thisTrialN'
p4270
I0
sg39
F1.1168309029562806
sg34
g752
(S'\x07\xdf\n\x13\r\x0b$\x01\xe0x'
tRp4271
sa(dp4272
S'trial_loop.thisTrialN'
p4273
I42
sg3632
S'40-sardines.png'
p4274
sS'block_loop.thisIndex'
p4275
g3626
sg38
S'right'
p4276
sg58
g62
sS'trial_loop.thisN'
p4277
I42
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p4278
g59
(g98
S'*\x00\x00\x00'
tRp4279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4280
I0
sg3641
S'5-pineapple.png'
p4281
sS'block_loop.thisRepN'
p4282
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4283
I1
sg3647
g4040
sg55
g11
sS'block_loop.thisTrial'
p4284
Nsg69
Vn
sS'block_loop.thisTrialN'
p4285
I0
sg39
F1.0834383449637244
sg34
g752
(S'\x07\xdf\n\x13\r\x0b*\x04\x1a\xc8'
tRp4286
sa(dp4287
S'trial_loop.thisTrialN'
p4288
I43
sg3632
g4104
sS'block_loop.thisIndex'
p4289
g3626
sg38
S'left'
p4290
sg58
g62
sS'trial_loop.thisN'
p4291
I43
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p4292
g59
(g98
S'+\x00\x00\x00'
tRp4293
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4294
I0
sg3641
g4112
sS'block_loop.thisRepN'
p4295
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4296
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p4297
Nsg69
Vn
sS'block_loop.thisTrialN'
p4298
I0
sg39
F1.000121737462905
sg34
g752
(S'\x07\xdf\n\x13\r\x0b0\x05\xdc\x00'
tRp4299
sa(dp4300
S'trial_loop.thisTrialN'
p4301
I44
sg3632
g4218
sS'block_loop.thisIndex'
p4302
g3626
sg38
S'left'
p4303
sg58
g62
sS'trial_loop.thisN'
p4304
I44
sg33
g4222
sg63
g64
sS'trial_loop.thisIndex'
p4305
g59
(g98
S',\x00\x00\x00'
tRp4306
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4307
I0
sg3641
g4226
sS'block_loop.thisRepN'
p4308
I1
sg3644
g4222
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4309
I1
sg3647
g4229
sg55
g11
sS'block_loop.thisTrial'
p4310
Nsg69
Vn
sS'block_loop.thisTrialN'
p4311
I0
sg39
F1.8667399562309583
sg34
g752
(S'\x07\xdf\n\x13\r\x0b6\x06l\x88'
tRp4312
sa(dp4313
S'trial_loop.thisTrialN'
p4314
I45
sg3632
S'8-liquorice_catherine_wheels.png'
p4315
sS'block_loop.thisIndex'
p4316
g3626
sg38
S'right'
p4317
sg58
g62
sS'trial_loop.thisN'
p4318
I45
sg33
g3787
sg63
g64
sS'trial_loop.thisIndex'
p4319
g59
(g98
S'-\x00\x00\x00'
tRp4320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4321
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p4322
sS'block_loop.thisRepN'
p4323
I1
sg3644
g3787
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4324
I1
sg3647
g3794
sg55
g11
sS'block_loop.thisTrial'
p4325
Nsg69
Vn
sS'block_loop.thisTrialN'
p4326
I0
sg39
F0.71728626379444904
sg34
g752
(S'\x07\xdf\n\x13\r\x0c\x01\x04\xd6H'
tRp4327
sa(dp4328
S'trial_loop.thisTrialN'
p4329
I46
sg3632
g4012
sS'block_loop.thisIndex'
p4330
g3626
sg38
S'left'
p4331
sg58
g62
sS'trial_loop.thisN'
p4332
I46
sg33
g4023
sg63
g64
sS'trial_loop.thisIndex'
p4333
g59
(g98
S'.\x00\x00\x00'
tRp4334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4335
I0
sg3641
g4020
sS'block_loop.thisRepN'
p4336
I1
sg3644
g4016
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4337
I1
sg3647
g4023
sg55
g11
sS'block_loop.thisTrial'
p4338
Nsg69
Vn
sS'block_loop.thisTrialN'
p4339
I0
sg39
F0.85008929314790294
sg34
g752
(S'\x07\xdf\n\x13\r\x0c\x07\x01\x1d('
tRp4340
sa(dp4341
S'trial_loop.thisTrialN'
p4342
I47
sg3632
S'35-raisins.png'
p4343
sS'block_loop.thisIndex'
p4344
g3626
sg38
S'left'
p4345
sg58
g62
sS'trial_loop.thisN'
p4346
I47
sg33
g4069
sg63
g64
sS'trial_loop.thisIndex'
p4347
g59
(g98
S'/\x00\x00\x00'
tRp4348
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4349
I0
sg3641
S'49-yorkie.png'
p4350
sS'block_loop.thisRepN'
p4351
I1
sg3644
g4069
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4352
I1
sg3647
g4063
sg55
g11
sS'block_loop.thisTrial'
p4353
Nsg69
Vn
sS'block_loop.thisTrialN'
p4354
I0
sg39
F0.91686214985566039
sg34
g752
(S'\x07\xdf\n\x13\r\x0c\x0c\x0e\x8e\x90'
tRp4355
sa(dp4356
S'trial_loop.thisTrialN'
p4357
I48
sg3632
S'26-walkers_smoky_bacon.png'
p4358
sS'block_loop.thisIndex'
p4359
g3626
sg38
S'right'
p4360
sg58
g62
sS'trial_loop.thisN'
p4361
I48
sg33
g3753
sg63
g64
sS'trial_loop.thisIndex'
p4362
g59
(g98
S'0\x00\x00\x00'
tRp4363
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4364
I0
sg3641
S'44-crunch.png'
p4365
sS'block_loop.thisRepN'
p4366
I1
sg3644
g3753
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4367
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p4368
Nsg69
Vn
sS'block_loop.thisTrialN'
p4369
I0
sg39
F1.2167876248604443
sg34
g752
(S'\x07\xdf\n\x13\r\x0c\x12\r\xeeh'
tRp4370
sa(dp4371
S'trial_loop.thisTrialN'
p4372
I49
sg3632
g4218
sS'block_loop.thisIndex'
p4373
g3626
sg38
S'left'
p4374
sg58
g62
sS'trial_loop.thisN'
p4375
I49
sg33
g4222
sg63
g64
sS'trial_loop.thisIndex'
p4376
g59
(g98
S'1\x00\x00\x00'
tRp4377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4378
I0
sg3641
g4226
sS'block_loop.thisRepN'
p4379
I1
sg3644
g4222
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4380
I1
sg3647
g4229
sg55
g11
sS'block_loop.thisTrial'
p4381
Nsg69
Vn
sS'block_loop.thisTrialN'
p4382
I0
sg39
F1.9500685379080096
sg34
g752
(S'\x07\xdf\n\x13\r\x0c\x19\x02U\xa8'
tRp4383
sa(dp4384
S'trial_loop.thisTrialN'
p4385
I50
sg3632
g3783
sS'block_loop.thisIndex'
p4386
g3626
sg38
S'left'
p4387
sg58
g62
sS'trial_loop.thisN'
p4388
I50
sg33
g3787
sg63
g64
sS'trial_loop.thisIndex'
p4389
g59
(g98
S'2\x00\x00\x00'
tRp4390
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4391
I0
sg3641
g3791
sS'block_loop.thisRepN'
p4392
I1
sg3644
g3787
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4393
I1
sg3647
g3794
sg55
g11
sS'block_loop.thisTrial'
p4394
Nsg69
Vn
sS'block_loop.thisTrialN'
p4395
I0
sg39
F1.0673102691689564
sg34
g752
(S'\x07\xdf\n\x13\r\x0c \x02*\xb0'
tRp4396
sa(dp4397
S'trial_loop.thisTrialN'
p4398
I51
sg3632
S'27-hartleys_raspberries_jelly.png'
p4399
sS'block_loop.thisIndex'
p4400
g3626
sg38
S'left'
p4401
sg58
g62
sS'trial_loop.thisN'
p4402
I51
sg33
g3770
sg63
g64
sS'trial_loop.thisIndex'
p4403
g59
(g98
S'3\x00\x00\x00'
tRp4404
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4405
I0
sg3641
S'51-mars.png'
p4406
sS'block_loop.thisRepN'
p4407
I1
sg3644
g3770
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4408
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p4409
Nsg69
Vn
sS'block_loop.thisTrialN'
p4410
I0
sg39
F1.3001946088843397
sg34
g752
(S'\x07\xdf\n\x13\r\x0c&\x03\xb1P'
tRp4411
sa(dp4412
S'trial_loop.thisTrialN'
p4413
I52
sg3632
g4175
sS'block_loop.thisIndex'
p4414
g3626
sg38
S'right'
p4415
sg58
g62
sS'trial_loop.thisN'
p4416
I52
sg33
g4186
sg63
g64
sS'trial_loop.thisIndex'
p4417
g59
(g98
S'4\x00\x00\x00'
tRp4418
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4419
I0
sg3641
g4183
sS'block_loop.thisRepN'
p4420
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4421
I1
sg3647
g4186
sg55
g11
sS'block_loop.thisTrial'
p4422
Nsg69
Vn
sS'block_loop.thisTrialN'
p4423
I0
sg39
F1.7502280795579281
sg34
g752
(S'\x07\xdf\n\x13\r\x0c,\x08\xc6\x18'
tRp4424
sa(dp4425
S'trial_loop.thisTrialN'
p4426
I53
sg3632
g3969
sS'block_loop.thisIndex'
p4427
g3626
sg38
S'right'
p4428
sg58
g62
sS'trial_loop.thisN'
p4429
I53
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p4430
g59
(g98
S'5\x00\x00\x00'
tRp4431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4432
I0
sg3641
g3977
sS'block_loop.thisRepN'
p4433
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4434
I1
sg3647
g3980
sg55
g11
sS'block_loop.thisTrial'
p4435
Nsg69
Vn
sS'block_loop.thisTrialN'
p4436
I0
sg39
F0.70013525117792597
sg34
g752
(S'\x07\xdf\n\x13\r\x0c3\x05\x82('
tRp4437
sa(dp4438
S'trial_loop.thisTrialN'
p4439
I54
sg3632
g4076
sS'block_loop.thisIndex'
p4440
g3626
sg38
S'right'
p4441
sg58
g62
sS'trial_loop.thisN'
p4442
I54
sg33
g3849
sg63
g64
sS'trial_loop.thisIndex'
p4443
g59
(g98
S'6\x00\x00\x00'
tRp4444
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4445
I0
sg3641
g4083
sS'block_loop.thisRepN'
p4446
I1
sg3644
g3849
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4447
I1
sg3647
g3856
sg55
g11
sS'block_loop.thisTrial'
p4448
Nsg69
Vn
sS'block_loop.thisTrialN'
p4449
I0
sg39
F0.98344627072947333
sg34
g752
(S'\x07\xdf\n\x13\r\x0c9\x01S\xd8'
tRp4450
sa(dp4451
S'trial_loop.thisTrialN'
p4452
I55
sg3632
g4147
sS'block_loop.thisIndex'
p4453
g3626
sg38
S'left'
p4454
sg58
g62
sS'trial_loop.thisN'
p4455
I55
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4456
g59
(g98
S'7\x00\x00\x00'
tRp4457
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4458
I0
sg3641
g4154
sS'block_loop.thisRepN'
p4459
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4460
I1
sg3647
g3736
sg55
g11
sS'block_loop.thisTrial'
p4461
Nsg69
Vn
sS'block_loop.thisTrialN'
p4462
I0
sg39
F0.83394097529162536
sg34
g752
(S'\x07\xdf\n\x13\r\r\x03\x01\xa5\xe0'
tRp4463
sa(dp4464
S'trial_loop.thisTrialN'
p4465
I56
sg3632
g3862
sS'block_loop.thisIndex'
p4466
g3626
sg38
S'left'
p4467
sg58
g62
sS'trial_loop.thisN'
p4468
I56
sg33
g3866
sg63
g64
sS'trial_loop.thisIndex'
p4469
g59
(g98
S'8\x00\x00\x00'
tRp4470
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4471
I0
sg3641
g3870
sS'block_loop.thisRepN'
p4472
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4473
I1
sg3647
g3873
sg55
g11
sS'block_loop.thisTrial'
p4474
Nsg69
Vn
sS'block_loop.thisTrialN'
p4475
I0
sg39
F0.76676213696919149
sg34
g752
(S'\x07\xdf\n\x13\r\r\x08\x0e\xdc\xb0'
tRp4476
sa(dp4477
S'trial_loop.thisTrialN'
p4478
I57
sg3632
g3969
sS'block_loop.thisIndex'
p4479
g3626
sg38
S'right'
p4480
sg58
g62
sS'trial_loop.thisN'
p4481
I57
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p4482
g59
(g98
S'9\x00\x00\x00'
tRp4483
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4484
I0
sg3641
g3977
sS'block_loop.thisRepN'
p4485
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4486
I1
sg3647
g3980
sg55
g11
sS'block_loop.thisTrial'
p4487
Nsg69
Vn
sS'block_loop.thisTrialN'
p4488
I0
sg39
F0.75019016133228433
sg34
g752
(S'\x07\xdf\n\x13\r\r\x0e\x0b\xdb('
tRp4489
sa(dp4490
S'trial_loop.thisTrialN'
p4491
I58
sg3632
g3800
sS'block_loop.thisIndex'
p4492
g3626
sg38
S'right'
p4493
sg58
g62
sS'trial_loop.thisN'
p4494
I58
sg33
g3695
sg63
g64
sS'trial_loop.thisIndex'
p4495
g59
(g98
S':\x00\x00\x00'
tRp4496
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4497
I0
sg3641
g3807
sS'block_loop.thisRepN'
p4498
I1
sg3644
g3695
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4499
I1
sg3647
g3689
sg55
g11
sS'block_loop.thisTrial'
p4500
Nsg69
Vn
sS'block_loop.thisTrialN'
p4501
I0
sg39
F0.88343880112188344
sg34
g752
(S'\x07\xdf\n\x13\r\r\x14\x08`\x88'
tRp4502
sa(dp4503
S'trial_loop.thisTrialN'
p4504
I59
sg3632
g4076
sS'block_loop.thisIndex'
p4505
g3626
sg38
S'right'
p4506
sg58
g62
sS'trial_loop.thisN'
p4507
I59
sg33
g3849
sg63
g64
sS'trial_loop.thisIndex'
p4508
g59
(g98
S';\x00\x00\x00'
tRp4509
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4510
I0
sg3641
g4083
sS'block_loop.thisRepN'
p4511
I1
sg3644
g3849
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4512
I1
sg3647
g3856
sg55
g11
sS'block_loop.thisTrial'
p4513
Nsg69
Vn
sS'block_loop.thisTrialN'
p4514
I0
sg39
F0.61684743872319814
sg34
g752
(S'\x07\xdf\n\x13\r\r\x1a\x07GH'
tRp4515
sa(dp4516
S'trial_loop.thisTrialN'
p4517
I60
sg3632
g4315
sS'block_loop.thisIndex'
p4518
g3626
sg38
S'right'
p4519
sg58
g62
sS'trial_loop.thisN'
p4520
I60
sg33
g3787
sg63
g64
sS'trial_loop.thisIndex'
p4521
g59
(g98
S'<\x00\x00\x00'
tRp4522
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4523
I0
sg3641
g4322
sS'block_loop.thisRepN'
p4524
I1
sg3644
g3787
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4525
I1
sg3647
g3794
sg55
g11
sS'block_loop.thisTrial'
p4526
Nsg69
Vn
sS'block_loop.thisTrialN'
p4527
I0
sg39
F0.86686539998845547
sg34
g752
(S'\x07\xdf\n\x13\r\r \x01\xe4`'
tRp4528
sa(dp4529
S'trial_loop.thisTrialN'
p4530
I61
sg3632
g3941
sS'block_loop.thisIndex'
p4531
g3626
sg38
S'right'
p4532
sg58
g62
sS'trial_loop.thisN'
p4533
I61
sg33
g3866
sg63
g64
sS'trial_loop.thisIndex'
p4534
g59
(g98
S'=\x00\x00\x00'
tRp4535
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4536
I0
sg3641
g3948
sS'block_loop.thisRepN'
p4537
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4538
I1
sg3647
g3873
sg55
g11
sS'block_loop.thisTrial'
p4539
Nsg69
Vn
sS'block_loop.thisTrialN'
p4540
I0
sg39
F1.0505301709345076
sg34
g752
(S'\x07\xdf\n\x13\r\r&\x00R\x08'
tRp4541
sa(dp4542
S'trial_loop.thisTrialN'
p4543
I62
sg3632
S'1-treacle_cookies.png'
p4544
sS'block_loop.thisIndex'
p4545
g3626
sg38
S'right'
p4546
sg58
g62
sS'trial_loop.thisN'
p4547
I62
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p4548
g59
(g98
S'>\x00\x00\x00'
tRp4549
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4550
I0
sg3641
S'21-nakd_banana_crunch.png'
p4551
sS'block_loop.thisRepN'
p4552
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4553
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p4554
Nsg69
Vn
sS'block_loop.thisTrialN'
p4555
I0
sg39
F0.95018400318440399
sg34
g752
(S'\x07\xdf\n\x13\r\r,\x01\x9a('
tRp4556
sa(dp4557
S'trial_loop.thisTrialN'
p4558
I63
sg3632
g3862
sS'block_loop.thisIndex'
p4559
g3626
sg38
S'left'
p4560
sg58
g62
sS'trial_loop.thisN'
p4561
I63
sg33
g3873
sg63
g64
sS'trial_loop.thisIndex'
p4562
g59
(g98
S'?\x00\x00\x00'
tRp4563
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4564
I0
sg3641
g3870
sS'block_loop.thisRepN'
p4565
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4566
I1
sg3647
g3873
sg55
g11
sS'block_loop.thisTrial'
p4567
Nsg69
Vn
sS'block_loop.thisTrialN'
p4568
I0
sg39
F1.466776505980306
sg34
g752
(S'\x07\xdf\n\x13\r\r2\x01w\x00'
tRp4569
sa(dp4570
S'trial_loop.thisTrialN'
p4571
I64
sg3632
S'2-steamed_puddings.png'
p4572
sS'block_loop.thisIndex'
p4573
g3626
sg38
S'right'
p4574
sg58
g62
sS'trial_loop.thisN'
p4575
I64
sg33
g4016
sg63
g64
sS'trial_loop.thisIndex'
p4576
g59
(g98
S'@\x00\x00\x00'
tRp4577
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4578
I0
sg3641
S'20-fruit_pastilles.png'
p4579
sS'block_loop.thisRepN'
p4580
I1
sg3644
g4016
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4581
I1
sg3647
g4023
sg55
g11
sS'block_loop.thisTrial'
p4582
Nsg69
Vn
sS'block_loop.thisTrialN'
p4583
I0
sg39
F1.1668062703629403
sg34
g752
(S'\x07\xdf\n\x13\r\r8\x08\xed('
tRp4584
sa(dp4585
S'trial_loop.thisTrialN'
p4586
I65
sg3632
g3653
sS'block_loop.thisIndex'
p4587
g3626
sg38
S'right'
p4588
sg58
g62
sS'trial_loop.thisN'
p4589
I65
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p4590
g59
(g98
S'A\x00\x00\x00'
tRp4591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4592
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4593
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4594
I1
sg3647
g3657
sg55
g11
sS'block_loop.thisTrial'
p4595
Nsg69
Vn
sS'block_loop.thisTrialN'
p4596
I0
sg39
F0.54987358690414112
sg34
g752
(S'\x07\xdf\n\x13\r\x0e\x02\x0c\x1d\x90'
tRp4597
sa(dp4598
S'trial_loop.thisTrialN'
p4599
I66
sg3632
S'42-mrkipling_lemon_slices.png'
p4600
sS'block_loop.thisIndex'
p4601
g3626
sg38
S'left'
p4602
sg58
g62
sS'trial_loop.thisN'
p4603
I66
sg33
g3712
sg63
g64
sS'trial_loop.thisIndex'
p4604
g59
(g98
S'B\x00\x00\x00'
tRp4605
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4606
I0
sg3641
S'16-skips_prawn.png'
p4607
sS'block_loop.thisRepN'
p4608
I1
sg3644
g3712
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4609
I1
sg3647
g3706
sg55
g11
sS'block_loop.thisTrial'
p4610
Nsg69
Vn
sS'block_loop.thisTrialN'
p4611
I0
sg39
F1.0001040612987708
sg34
g752
(S'\x07\xdf\n\x13\r\x0e\x08\x05\xc8x'
tRp4612
sa(dp4613
S'trial_loop.thisTrialN'
p4614
I67
sg3632
g4315
sS'block_loop.thisIndex'
p4615
g3626
sg38
S'right'
p4616
sg58
g62
sS'trial_loop.thisN'
p4617
I67
sg33
g3787
sg63
g64
sS'trial_loop.thisIndex'
p4618
g59
(g98
S'C\x00\x00\x00'
tRp4619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4620
I0
sg3641
g4322
sS'block_loop.thisRepN'
p4621
I1
sg3644
g3787
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4622
I1
sg3647
g3794
sg55
g11
sS'block_loop.thisTrial'
p4623
Nsg69
Vn
sS'block_loop.thisTrialN'
p4624
I0
sg39
F1.4833835488498153
sg34
g752
(S'\x07\xdf\n\x13\r\x0e\x0e\x06\x1a\x80'
tRp4625
sa(dp4626
S'trial_loop.thisTrialN'
p4627
I68
sg3632
S'30-spaghetti_hoops.png'
p4628
sS'block_loop.thisIndex'
p4629
g3626
sg38
S'right'
p4630
sg58
g62
sS'trial_loop.thisN'
p4631
I68
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p4632
g59
(g98
S'D\x00\x00\x00'
tRp4633
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4634
I0
sg3641
S'19-caramello_redo.png'
p4635
sS'block_loop.thisRepN'
p4636
I1
sg3644
g3928
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4637
I1
sg3647
g3935
sg55
g11
sS'block_loop.thisTrial'
p4638
Nsg69
Vn
sS'block_loop.thisTrialN'
p4639
I0
sg39
F1.883516348172634
sg34
g752
(S'\x07\xdf\n\x13\r\x0e\x14\x0e\r\xa8'
tRp4640
sa(dp4641
S'trial_loop.thisTrialN'
p4642
I69
sg3632
g3892
sS'block_loop.thisIndex'
p4643
g3626
sg38
S'right'
p4644
sg58
g62
sS'trial_loop.thisN'
p4645
I69
sg33
g3896
sg63
g64
sS'trial_loop.thisIndex'
p4646
g59
(g98
S'E\x00\x00\x00'
tRp4647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4648
I0
sg3641
g3900
sS'block_loop.thisRepN'
p4649
I1
sg3644
g3896
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4650
I1
sg3647
g3903
sg55
g11
sS'block_loop.thisTrial'
p4651
Nsg69
Vn
sS'block_loop.thisTrialN'
p4652
I0
sg39
F1.0168502326978341
sg34
g752
(S'\x07\xdf\n\x13\r\x0e\x1b\x0c\xb2\x00'
tRp4653
sa(dp4654
S'trial_loop.thisTrialN'
p4655
I70
sg3632
S'48-twix.png'
p4656
sS'block_loop.thisIndex'
p4657
g3626
sg38
S'left'
p4658
sg58
g62
sS'trial_loop.thisN'
p4659
I70
sg33
g4179
sg63
g64
sS'trial_loop.thisIndex'
p4660
g59
(g98
S'F\x00\x00\x00'
tRp4661
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4662
I0
sg3641
S'50-polo.png'
p4663
sS'block_loop.thisRepN'
p4664
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4665
I1
sg3647
g4186
sg55
g11
sS'block_loop.thisTrial'
p4666
Nsg69
Vn
sS'block_loop.thisTrialN'
p4667
I0
sg39
F0.9000906046039745
sg34
g752
(S'\x07\xdf\n\x13\r\x0e!\r\x81\x08'
tRp4668
sa(dp4669
S'trial_loop.thisTrialN'
p4670
I71
sg3632
g4274
sS'block_loop.thisIndex'
p4671
g3626
sg38
S'right'
p4672
sg58
g62
sS'trial_loop.thisN'
p4673
I71
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p4674
g59
(g98
S'G\x00\x00\x00'
tRp4675
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4676
I0
sg3641
g4281
sS'block_loop.thisRepN'
p4677
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4678
I1
sg3647
g4040
sg55
g11
sS'block_loop.thisTrial'
p4679
Nsg69
Vn
sS'block_loop.thisTrialN'
p4680
I0
sg39
F0.61715363553048519
sg34
g752
(S"\x07\xdf\n\x13\r\x0e'\x0c\xa2`"
tRp4681
sa(dp4682
S'trial_loop.thisTrialN'
p4683
I72
sg3632
g4012
sS'block_loop.thisIndex'
p4684
g3626
sg38
S'right'
p4685
sg58
g62
sS'trial_loop.thisN'
p4686
I72
sg33
g4023
sg63
g64
sS'trial_loop.thisIndex'
p4687
g59
(g98
S'H\x00\x00\x00'
tRp4688
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4689
I0
sg3641
g4020
sS'block_loop.thisRepN'
p4690
I1
sg3644
g4016
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4691
I1
sg3647
g4023
sg55
g11
sS'block_loop.thisTrial'
p4692
Nsg69
Vn
sS'block_loop.thisTrialN'
p4693
I0
sg39
F1.6834187301210477
sg34
g752
(S'\x07\xdf\n\x13\r\x0e-\x07C`'
tRp4694
sa(dp4695
S'trial_loop.thisTrialN'
p4696
I73
sg3632
g4358
sS'block_loop.thisIndex'
p4697
g3626
sg38
S'right'
p4698
sg58
g62
sS'trial_loop.thisN'
p4699
I73
sg33
g3753
sg63
g64
sS'trial_loop.thisIndex'
p4700
g59
(g98
S'I\x00\x00\x00'
tRp4701
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4702
I0
sg3641
g4365
sS'block_loop.thisRepN'
p4703
I1
sg3644
g3753
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4704
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p4705
Nsg69
Vn
sS'block_loop.thisTrialN'
p4706
I0
sg39
F1.5834905181618524
sg34
g752
(S'\x07\xdf\n\x13\r\x0e4\x02\xce\xc0'
tRp4707
sa(dp4708
S'trial_loop.thisTrialN'
p4709
I74
sg3632
S'18-mms.png'
p4710
sS'block_loop.thisIndex'
p4711
g3626
sg38
S'left'
p4712
sg58
g62
sS'trial_loop.thisN'
p4713
I74
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p4714
g59
(g98
S'J\x00\x00\x00'
tRp4715
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4716
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p4717
sS'block_loop.thisRepN'
p4718
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4719
I1
sg3647
g3980
sg55
g11
sS'block_loop.thisTrial'
p4720
Nsg69
Vn
sS'block_loop.thisTrialN'
p4721
I0
sg39
F0.81686323323447141
sg34
g752
(S'\x07\xdf\n\x13\r\x0e:\x0c-0'
tRp4722
sa(dp4723
S'trial_loop.thisTrialN'
p4724
I75
sg3632
g4059
sS'block_loop.thisIndex'
p4725
g3626
sg38
S'right'
p4726
sg58
g62
sS'trial_loop.thisN'
p4727
I75
sg33
g4063
sg63
g64
sS'trial_loop.thisIndex'
p4728
g59
(g98
S'K\x00\x00\x00'
tRp4729
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4730
I0
sg3641
g4067
sS'block_loop.thisRepN'
p4731
I1
sg3644
g4069
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4732
I1
sg3647
g4063
sg55
g11
sS'block_loop.thisTrial'
p4733
Nsg69
Vn
sS'block_loop.thisTrialN'
p4734
I0
sg39
F1.0001063420932041
sg34
g752
(S'\x07\xdf\n\x13\r\x0f\x04\t\xe3@'
tRp4735
sa(dp4736
S'trial_loop.thisTrialN'
p4737
I76
sg3632
g4600
sS'block_loop.thisIndex'
p4738
g3626
sg38
S'left'
p4739
sg58
g62
sS'trial_loop.thisN'
p4740
I76
sg33
g3712
sg63
g64
sS'trial_loop.thisIndex'
p4741
g59
(g98
S'L\x00\x00\x00'
tRp4742
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4743
I0
sg3641
g4607
sS'block_loop.thisRepN'
p4744
I1
sg3644
g3712
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4745
I1
sg3647
g3706
sg55
g11
sS'block_loop.thisTrial'
p4746
Nsg69
Vn
sS'block_loop.thisTrialN'
p4747
I0
sg39
F0.90004926518486172
sg34
g752
(S'\x07\xdf\n\x13\r\x0f\n\ns\xc8'
tRp4748
sa(dp4749
S'trial_loop.thisTrialN'
p4750
I77
sg3632
g3845
sS'block_loop.thisIndex'
p4751
g3626
sg38
S'left'
p4752
sg58
g62
sS'trial_loop.thisN'
p4753
I77
sg33
g3849
sg63
g64
sS'trial_loop.thisIndex'
p4754
g59
(g98
S'M\x00\x00\x00'
tRp4755
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4756
I0
sg3641
g3853
sS'block_loop.thisRepN'
p4757
I1
sg3644
g3849
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4758
I1
sg3647
g3856
sg55
g11
sS'block_loop.thisTrial'
p4759
Nsg69
Vn
sS'block_loop.thisTrialN'
p4760
I0
sg39
F1.483466512789164
sg34
g752
(S'\x07\xdf\n\x13\r\x0f\x10\tZ\x88'
tRp4761
sa(dp4762
S'trial_loop.thisTrialN'
p4763
I78
sg3632
g4544
sS'block_loop.thisIndex'
p4764
g3626
sg38
S'right'
p4765
sg58
g62
sS'trial_loop.thisN'
p4766
I78
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p4767
g59
(g98
S'N\x00\x00\x00'
tRp4768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4769
I0
sg3641
g4551
sS'block_loop.thisRepN'
p4770
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4771
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p4772
Nsg69
Vn
sS'block_loop.thisTrialN'
p4773
I0
sg39
F0.86677160227009153
sg34
g752
(S'\x07\xdf\n\x13\r\x0f\x17\x02\x0bp'
tRp4774
sa(dp4775
S'trial_loop.thisTrialN'
p4776
I79
sg3632
g4572
sS'block_loop.thisIndex'
p4777
g3626
sg38
S'right'
p4778
sg58
g62
sS'trial_loop.thisN'
p4779
I79
sg33
g4023
sg63
g64
sS'trial_loop.thisIndex'
p4780
g59
(g98
S'O\x00\x00\x00'
tRp4781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4782
I0
sg3641
g4579
sS'block_loop.thisRepN'
p4783
I1
sg3644
g4016
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4784
I1
sg3647
g4023
sg55
g11
sS'block_loop.thisTrial'
p4785
Nsg69
Vn
sS'block_loop.thisTrialN'
p4786
I0
sg39
F2.5001012103039102
sg34
g752
(S'\x07\xdf\n\x13\r\x0f\x1d\x00y\x18'
tRp4787
sa(dp4788
S'trial_loop.thisTrialN'
p4789
I80
sg3632
g4274
sS'block_loop.thisIndex'
p4790
g3626
sg38
S'right'
p4791
sg58
g62
sS'trial_loop.thisN'
p4792
I80
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p4793
g59
(g98
S'P\x00\x00\x00'
tRp4794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4795
I0
sg3641
g4281
sS'block_loop.thisRepN'
p4796
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4797
I1
sg3647
g4040
sg55
g11
sS'block_loop.thisTrial'
p4798
Nsg69
Vn
sS'block_loop.thisTrialN'
p4799
I0
sg39
F0.65022745233909518
sg34
g752
(S'\x07\xdf\n\x13\r\x0f$\x08\xa2\xf0'
tRp4800
sa(dp4801
S'trial_loop.thisTrialN'
p4802
I81
sg3632
g3783
sS'block_loop.thisIndex'
p4803
g3626
sg38
S'left'
p4804
sg58
g62
sS'trial_loop.thisN'
p4805
I81
sg33
g3787
sg63
g64
sS'trial_loop.thisIndex'
p4806
g59
(g98
S'Q\x00\x00\x00'
tRp4807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4808
I0
sg3641
g3791
sS'block_loop.thisRepN'
p4809
I1
sg3644
g3787
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4810
I1
sg3647
g3794
sg55
g11
sS'block_loop.thisTrial'
p4811
Nsg69
Vn
sS'block_loop.thisTrialN'
p4812
I0
sg39
F0.78393453204444086
sg34
g752
(S'\x07\xdf\n\x13\r\x0f*\x03\xf7\xa0'
tRp4813
sa(dp4814
S'trial_loop.thisTrialN'
p4815
I82
sg3632
g4059
sS'block_loop.thisIndex'
p4816
g3626
sg38
S'right'
p4817
sg58
g62
sS'trial_loop.thisN'
p4818
I82
sg33
g4069
sg63
g64
sS'trial_loop.thisIndex'
p4819
g59
(g98
S'R\x00\x00\x00'
tRp4820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4821
I0
sg3641
g4067
sS'block_loop.thisRepN'
p4822
I1
sg3644
g4069
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4823
I1
sg3647
g4063
sg55
g11
sS'block_loop.thisTrial'
p4824
Nsg69
Vn
sS'block_loop.thisTrialN'
p4825
I0
sg39
F1.0834317876760906
sg34
g752
(S'\x07\xdf\n\x13\r\x0f0\x00\xf6\x18'
tRp4826
sa(dp4827
S'trial_loop.thisTrialN'
p4828
I83
sg3632
g4572
sS'block_loop.thisIndex'
p4829
g3626
sg38
S'left'
p4830
sg58
g62
sS'trial_loop.thisN'
p4831
I83
sg33
g4016
sg63
g64
sS'trial_loop.thisIndex'
p4832
g59
(g98
S'S\x00\x00\x00'
tRp4833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4834
I0
sg3641
g4579
sS'block_loop.thisRepN'
p4835
I1
sg3644
g4016
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4836
I1
sg3647
g4023
sg55
g11
sS'block_loop.thisTrial'
p4837
Nsg69
Vn
sS'block_loop.thisTrialN'
p4838
I0
sg39
F1.1835441738785448
sg34
g752
(S'\x07\xdf\n\x13\r\x0f6\x02\xf5\xd0'
tRp4839
sa(dp4840
S'trial_loop.thisTrialN'
p4841
I84
sg3632
g4274
sS'block_loop.thisIndex'
p4842
g3626
sg38
S'right'
p4843
sg58
g62
sS'trial_loop.thisN'
p4844
I84
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p4845
g59
(g98
S'T\x00\x00\x00'
tRp4846
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4847
I0
sg3641
g4281
sS'block_loop.thisRepN'
p4848
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4849
I1
sg3647
g4040
sg55
g11
sS'block_loop.thisTrial'
p4850
Nsg69
Vn
sS'block_loop.thisTrialN'
p4851
I0
sg39
F0.93349228577972099
sg34
g752
(S'\x07\xdf\n\x13\r\x10\x00\x06&8'
tRp4852
sa(dp4853
S'trial_loop.thisTrialN'
p4854
I85
sg3632
g4175
sS'block_loop.thisIndex'
p4855
g3626
sg38
S'right'
p4856
sg58
g62
sS'trial_loop.thisN'
p4857
I85
sg33
g4186
sg63
g64
sS'trial_loop.thisIndex'
p4858
g59
(g98
S'U\x00\x00\x00'
tRp4859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4860
I0
sg3641
g4183
sS'block_loop.thisRepN'
p4861
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4862
I1
sg3647
g4186
sg55
g11
sS'block_loop.thisTrial'
p4863
Nsg69
Vn
sS'block_loop.thisTrialN'
p4864
I0
sg39
F1.9001772748360963
sg34
g752
(S'\x07\xdf\n\x13\r\x10\x06\x05\xc0\xa8'
tRp4865
sa(dp4866
S'trial_loop.thisTrialN'
p4867
I86
sg3632
g4628
sS'block_loop.thisIndex'
p4868
g3626
sg38
S'right'
p4869
sg58
g62
sS'trial_loop.thisN'
p4870
I86
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p4871
g59
(g98
S'V\x00\x00\x00'
tRp4872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4873
I0
sg3641
g4635
sS'block_loop.thisRepN'
p4874
I1
sg3644
g3928
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4875
I1
sg3647
g3935
sg55
g11
sS'block_loop.thisTrial'
p4876
Nsg69
Vn
sS'block_loop.thisTrialN'
p4877
I0
sg39
F0.81662631559265719
sg34
g752
(S'\x07\xdf\n\x13\r\x10\r\x04\xa3\x80'
tRp4878
sa(dp4879
S'trial_loop.thisTrialN'
p4880
I87
sg3632
g3732
sS'block_loop.thisIndex'
p4881
g3626
sg38
S'right'
p4882
sg58
g62
sS'trial_loop.thisN'
p4883
I87
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4884
g59
(g98
S'W\x00\x00\x00'
tRp4885
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4886
I0
sg3641
g3740
sS'block_loop.thisRepN'
p4887
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4888
I1
sg3647
g3736
sg55
g11
sS'block_loop.thisTrial'
p4889
Nsg69
Vn
sS'block_loop.thisTrialN'
p4890
I0
sg39
F2.5834089797208435
sg34
g752
(S'\x07\xdf\n\x13\r\x10\x13\x02Y\x90'
tRp4891
sa(dp4892
S'trial_loop.thisTrialN'
p4893
I88
sg3632
g4710
sS'block_loop.thisIndex'
p4894
g3626
sg38
S'left'
p4895
sg58
g62
sS'trial_loop.thisN'
p4896
I88
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p4897
g59
(g98
S'X\x00\x00\x00'
tRp4898
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4899
I0
sg3641
g4717
sS'block_loop.thisRepN'
p4900
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4901
I1
sg3647
g3980
sg55
g11
sS'block_loop.thisTrial'
p4902
Nsg69
Vn
sS'block_loop.thisTrialN'
p4903
I0
sg39
F1.5835193132061249
sg34
g752
(S'\x07\xdf\n\x13\r\x10\x1a\x0b\xb4\x18'
tRp4904
sa(dp4905
S'trial_loop.thisTrialN'
p4906
I89
sg3632
g4218
sS'block_loop.thisIndex'
p4907
g3626
sg38
S'left'
p4908
sg58
g62
sS'trial_loop.thisN'
p4909
I89
sg33
g4222
sg63
g64
sS'trial_loop.thisIndex'
p4910
g59
(g98
S'Y\x00\x00\x00'
tRp4911
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4912
I0
sg3641
g4226
sS'block_loop.thisRepN'
p4913
I1
sg3644
g4222
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4914
I1
sg3647
g4229
sg55
g11
sS'block_loop.thisTrial'
p4915
Nsg69
Vn
sS'block_loop.thisTrialN'
p4916
I0
sg39
F0.83352016850585642
sg34
g752
(S'\x07\xdf\n\x13\r\x10!\x05\xd0H'
tRp4917
sa(dp4918
S'trial_loop.thisTrialN'
p4919
I90
sg3632
g4572
sS'block_loop.thisIndex'
p4920
g3626
sg38
S'right'
p4921
sg58
g62
sS'trial_loop.thisN'
p4922
I90
sg33
g4016
sg63
g64
sS'trial_loop.thisIndex'
p4923
g59
(g98
S'Z\x00\x00\x00'
tRp4924
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4925
I0
sg3641
g4579
sS'block_loop.thisRepN'
p4926
I1
sg3644
g4016
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4927
I1
sg3647
g4023
sg55
g11
sS'block_loop.thisTrial'
p4928
Nsg69
Vn
sS'block_loop.thisTrialN'
p4929
I0
sg39
F1.5501028068611049
sg34
g752
(S"\x07\xdf\n\x13\r\x10'\x03\xc4\xd8"
tRp4930
sa(dp4931
S'trial_loop.thisTrialN'
p4932
I91
sg3632
g3766
sS'block_loop.thisIndex'
p4933
g3626
sg38
S'right'
p4934
sg58
g62
sS'trial_loop.thisN'
p4935
I91
sg33
g3777
sg63
g64
sS'trial_loop.thisIndex'
p4936
g59
(g98
S'[\x00\x00\x00'
tRp4937
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4938
I0
sg3641
g3774
sS'block_loop.thisRepN'
p4939
I1
sg3644
g3770
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4940
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p4941
Nsg69
Vn
sS'block_loop.thisTrialN'
p4942
I0
sg39
F0.78359383820315998
sg34
g752
(S'\x07\xdf\n\x13\r\x10-\x0c\xaa0'
tRp4943
sa(dp4944
S'trial_loop.thisTrialN'
p4945
I92
sg3632
g4147
sS'block_loop.thisIndex'
p4946
g3626
sg38
S'left'
p4947
sg58
g62
sS'trial_loop.thisN'
p4948
I92
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4949
g59
(g98
S'\\\x00\x00\x00'
tRp4950
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4951
I0
sg3641
g4154
sS'block_loop.thisRepN'
p4952
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4953
I1
sg3647
g3736
sg55
g11
sS'block_loop.thisTrial'
p4954
Nsg69
Vn
sS'block_loop.thisTrialN'
p4955
I0
sg39
F0.68352022552608105
sg34
g752
(S'\x07\xdf\n\x13\r\x103\t\xe7('
tRp4956
sa(dp4957
S'trial_loop.thisTrialN'
p4958
I93
sg3632
g3845
sS'block_loop.thisIndex'
p4959
g3626
sg38
S'left'
p4960
sg58
g62
sS'trial_loop.thisN'
p4961
I93
sg33
g3849
sg63
g64
sS'trial_loop.thisIndex'
p4962
g59
(g98
S']\x00\x00\x00'
tRp4963
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4964
I0
sg3641
g3853
sS'block_loop.thisRepN'
p4965
I1
sg3644
g3849
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4966
I1
sg3647
g3856
sg55
g11
sS'block_loop.thisTrial'
p4967
Nsg69
Vn
sS'block_loop.thisTrialN'
p4968
I0
sg39
F1.1335154928747215
sg34
g752
(S'\x07\xdf\n\x13\r\x109\x05\xb4\xf0'
tRp4969
sa(dp4970
S'trial_loop.thisTrialN'
p4971
I94
sg3632
g4399
sS'block_loop.thisIndex'
p4972
g3626
sg38
S'left'
p4973
sg58
g62
sS'trial_loop.thisN'
p4974
I94
sg33
g3770
sg63
g64
sS'trial_loop.thisIndex'
p4975
g59
(g98
S'^\x00\x00\x00'
tRp4976
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4977
I0
sg3641
g4406
sS'block_loop.thisRepN'
p4978
I1
sg3644
g3770
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4979
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p4980
Nsg69
Vn
sS'block_loop.thisTrialN'
p4981
I0
sg39
F0.86679212942908634
sg34
g752
(S'\x07\xdf\n\x13\r\x11\x03\x08-\xc0'
tRp4982
sa(dp4983
S'trial_loop.thisTrialN'
p4984
I95
sg3632
g3909
sS'block_loop.thisIndex'
p4985
g3626
sg38
S'left'
p4986
sg58
g62
sS'trial_loop.thisN'
p4987
I95
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p4988
g59
(g98
S'_\x00\x00\x00'
tRp4989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4990
I0
sg3641
g3916
sS'block_loop.thisRepN'
p4991
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4992
I1
sg3647
g3657
sg55
g11
sS'block_loop.thisTrial'
p4993
Nsg69
Vn
sS'block_loop.thisTrialN'
p4994
I0
sg39
F0.84987546856245899
sg34
g752
(S'\x07\xdf\n\x13\r\x11\t\x06\x9bh'
tRp4995
sa(dp4996
S'trial_loop.thisTrialN'
p4997
I96
sg3632
g3924
sS'block_loop.thisIndex'
p4998
g3626
sg38
S'left'
p4999
sg58
g62
sS'trial_loop.thisN'
p5000
I96
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p5001
g59
(g98
S'`\x00\x00\x00'
tRp5002
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5003
I0
sg3641
g3932
sS'block_loop.thisRepN'
p5004
I1
sg3644
g3928
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5005
I1
sg3647
g3935
sg55
g11
sS'block_loop.thisTrial'
p5006
Nsg69
Vn
sS'block_loop.thisTrialN'
p5007
I0
sg39
F1.0335285504279454
sg34
g752
(S'\x07\xdf\n\x13\r\x11\x0f\x04\xca\x90'
tRp5008
sa(dp5009
S'trial_loop.thisTrialN'
p5010
I97
sg3632
g4315
sS'block_loop.thisIndex'
p5011
g3626
sg38
S'right'
p5012
sg58
g62
sS'trial_loop.thisN'
p5013
I97
sg33
g3787
sg63
g64
sS'trial_loop.thisIndex'
p5014
g59
(g98
S'a\x00\x00\x00'
tRp5015
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5016
I0
sg3641
g4322
sS'block_loop.thisRepN'
p5017
I1
sg3644
g3787
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5018
I1
sg3647
g3794
sg55
g11
sS'block_loop.thisTrial'
p5019
Nsg69
Vn
sS'block_loop.thisTrialN'
p5020
I0
sg39
F1.5672455515923502
sg34
g752
(S'\x07\xdf\n\x13\r\x11\x15\x05\xd40'
tRp5021
sa(dp5022
S'trial_loop.thisTrialN'
p5023
I98
sg3632
g4544
sS'block_loop.thisIndex'
p5024
g3626
sg38
S'right'
p5025
sg58
g62
sS'trial_loop.thisN'
p5026
I98
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p5027
g59
(g98
S'b\x00\x00\x00'
tRp5028
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5029
I0
sg3641
g4551
sS'block_loop.thisRepN'
p5030
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5031
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p5032
Nsg69
Vn
sS'block_loop.thisTrialN'
p5033
I0
sg39
F1.0335336822190584
sg34
g752
(S'\x07\xdf\n\x13\r\x11\x1b\x0e\xf8\x08'
tRp5034
sa(dp5035
S'trial_loop.thisTrialN'
p5036
I99
sg3632
g4029
sS'block_loop.thisIndex'
p5037
g3626
sg38
S'left'
p5038
sg58
g62
sS'trial_loop.thisN'
p5039
I99
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p5040
g59
(g98
S'c\x00\x00\x00'
tRp5041
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5042
I0
sg3641
g4037
sS'block_loop.thisRepN'
p5043
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5044
I1
sg3647
g4040
sg55
g11
sS'block_loop.thisTrial'
p5045
Nsg69
Vn
sS'block_loop.thisTrialN'
p5046
I0
sg39
F0.85011210110315005
sg34
g752
(S'\x07\xdf\n\x13\r\x11"\x00\xc3P'
tRp5047
sa(dp5048
S'trial_loop.thisTrialN'
p5049
I100
sg3632
g4104
sS'block_loop.thisIndex'
p5050
g3626
sg38
S'left'
p5051
sg58
g62
sS'trial_loop.thisN'
p5052
I100
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p5053
g59
(g98
S'd\x00\x00\x00'
tRp5054
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5055
I0
sg3641
g4112
sS'block_loop.thisRepN'
p5056
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5057
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p5058
Nsg69
Vn
sS'block_loop.thisTrialN'
p5059
I0
sg39
F0.81675575074041262
sg34
g752
(S"\x07\xdf\n\x13\r\x11'\x0e4\xb8"
tRp5060
sa(dp5061
S'trial_loop.thisTrialN'
p5062
I101
sg3632
g4059
sS'block_loop.thisIndex'
p5063
g3626
sg38
S'right'
p5064
sg58
g62
sS'trial_loop.thisN'
p5065
I101
sg33
g4069
sg63
g64
sS'trial_loop.thisIndex'
p5066
g59
(g98
S'e\x00\x00\x00'
tRp5067
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5068
I0
sg3641
g4067
sS'block_loop.thisRepN'
p5069
I1
sg3644
g4069
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5070
I1
sg3647
g4063
sg55
g11
sS'block_loop.thisTrial'
p5071
Nsg69
Vn
sS'block_loop.thisTrialN'
p5072
I0
sg39
F1.233501294922462
sg34
g752
(S'\x07\xdf\n\x13\r\x11-\x0b\xea\xc8'
tRp5073
sa(dp5074
S'trial_loop.thisTrialN'
p5075
I102
sg3632
S'45-chewy_nougat_redo.png'
p5076
sS'block_loop.thisIndex'
p5077
g3626
sg38
S'right'
p5078
sg58
g62
sS'trial_loop.thisN'
p5079
I102
sg33
g4222
sg63
g64
sS'trial_loop.thisIndex'
p5080
g59
(g98
S'f\x00\x00\x00'
tRp5081
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5082
I0
sg3641
S'41-peanuts_redo.png'
p5083
sS'block_loop.thisRepN'
p5084
I1
sg3644
g4222
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5085
I1
sg3647
g4229
sg55
g11
sS'block_loop.thisTrial'
p5086
Nsg69
Vn
sS'block_loop.thisTrialN'
p5087
I0
sg39
F1.1672102562806685
sg34
g752
(S'\x07\xdf\n\x13\r\x114\x00\xcb '
tRp5088
sa(dp5089
S'trial_loop.thisTrialN'
p5090
I103
sg3632
g4029
sS'block_loop.thisIndex'
p5091
g3626
sg38
S'left'
p5092
sg58
g62
sS'trial_loop.thisN'
p5093
I103
sg33
g4040
sg63
g64
sS'trial_loop.thisIndex'
p5094
g59
(g98
S'g\x00\x00\x00'
tRp5095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5096
I0
sg3641
g4037
sS'block_loop.thisRepN'
p5097
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5098
I1
sg3647
g4040
sg55
g11
sS'block_loop.thisTrial'
p5099
Nsg69
Vn
sS'block_loop.thisTrialN'
p5100
I0
sg39
F0.61688934834273823
sg34
g752
(S'\x07\xdf\n\x13\r\x11:\x03\xbd\x08'
tRp5101
sa(dp5102
S'trial_loop.thisTrialN'
p5103
I104
sg3632
g3941
sS'block_loop.thisIndex'
p5104
g3626
sg38
S'right'
p5105
sg58
g62
sS'trial_loop.thisN'
p5106
I104
sg33
g3866
sg63
g64
sS'trial_loop.thisIndex'
p5107
g59
(g98
S'h\x00\x00\x00'
tRp5108
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5109
I0
sg3641
g3948
sS'block_loop.thisRepN'
p5110
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5111
I1
sg3647
g3873
sg55
g11
sS'block_loop.thisTrial'
p5112
Nsg69
Vn
sS'block_loop.thisTrialN'
p5113
I0
sg39
F0.83389421898209548
sg34
g752
(S'\x07\xdf\n\x13\r\x12\x03\r\xda\xe0'
tRp5114
sa(dp5115
S'trial_loop.thisTrialN'
p5116
I105
sg3632
g4147
sS'block_loop.thisIndex'
p5117
g3626
sg38
S'left'
p5118
sg58
g62
sS'trial_loop.thisN'
p5119
I105
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5120
g59
(g98
S'i\x00\x00\x00'
tRp5121
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5122
I0
sg3641
g4154
sS'block_loop.thisRepN'
p5123
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5124
I1
sg3647
g3736
sg55
g11
sS'block_loop.thisTrial'
p5125
Nsg69
Vn
sS'block_loop.thisTrialN'
p5126
I0
sg39
F0.76685793038450356
sg34
g752
(S'\x07\xdf\n\x13\r\x12\t\x0b\xcfp'
tRp5127
sa(dp5128
S'trial_loop.thisTrialN'
p5129
I106
sg3632
g5076
sS'block_loop.thisIndex'
p5130
g3626
sg38
S'right'
p5131
sg58
g62
sS'trial_loop.thisN'
p5132
I106
sg33
g4229
sg63
g64
sS'trial_loop.thisIndex'
p5133
g59
(g98
S'j\x00\x00\x00'
tRp5134
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5135
I0
sg3641
g5083
sS'block_loop.thisRepN'
p5136
I1
sg3644
g4222
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5137
I1
sg3647
g4229
sg55
g11
sS'block_loop.thisTrial'
p5138
Nsg69
Vn
sS'block_loop.thisTrialN'
p5139
I0
sg39
F0.60010867990968109
sg34
g752
(S'\x07\xdf\n\x13\r\x12\x0f\x08\xcd\xe8'
tRp5140
sa(dp5141
S'trial_loop.thisTrialN'
p5142
I107
sg3632
g4343
sS'block_loop.thisIndex'
p5143
g3626
sg38
S'left'
p5144
sg58
g62
sS'trial_loop.thisN'
p5145
I107
sg33
g4063
sg63
g64
sS'trial_loop.thisIndex'
p5146
g59
(g98
S'k\x00\x00\x00'
tRp5147
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5148
I0
sg3641
g4350
sS'block_loop.thisRepN'
p5149
I1
sg3644
g4069
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5150
I1
sg3647
g4063
sg55
g11
sS'block_loop.thisTrial'
p5151
Nsg69
Vn
sS'block_loop.thisTrialN'
p5152
I0
sg39
F0.96680701162222249
sg34
g752
(S'\x07\xdf\n\x13\r\x12\x15\x03,\x80'
tRp5153
sa(dp5154
S'trial_loop.thisTrialN'
p5155
I108
sg3632
g3862
sS'block_loop.thisIndex'
p5156
g3626
sg38
S'left'
p5157
sg58
g62
sS'trial_loop.thisN'
p5158
I108
sg33
g3873
sg63
g64
sS'trial_loop.thisIndex'
p5159
g59
(g98
S'l\x00\x00\x00'
tRp5160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5161
I0
sg3641
g3870
sS'block_loop.thisRepN'
p5162
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5163
I1
sg3647
g3873
sg55
g11
sS'block_loop.thisTrial'
p5164
Nsg69
Vn
sS'block_loop.thisTrialN'
p5165
I0
sg39
F0.74993870361868176
sg34
g752
(S'\x07\xdf\n\x13\r\x12\x1b\x03\tX'
tRp5166
sa(dp5167
S'trial_loop.thisTrialN'
p5168
I109
sg3632
g3653
sS'block_loop.thisIndex'
p5169
g3626
sg38
S'right'
p5170
sg58
g62
sS'trial_loop.thisN'
p5171
I109
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p5172
g59
(g98
S'm\x00\x00\x00'
tRp5173
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5174
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5175
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5176
I1
sg3647
g3657
sg55
g11
sS'block_loop.thisTrial'
p5177
Nsg69
Vn
sS'block_loop.thisTrialN'
p5178
I0
sg39
F0.76650184117170284
sg34
g752
(S'\x07\xdf\n\x13\r\x12 \x0f\x0b\x90'
tRp5179
sa(dp5180
S'trial_loop.thisTrialN'
p5181
I110
sg3632
g3670
sS'block_loop.thisIndex'
p5182
g3626
sg38
S'left'
p5183
sg58
g62
sS'trial_loop.thisN'
p5184
I110
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5185
g59
(g98
S'n\x00\x00\x00'
tRp5186
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5187
I0
sg3641
g3677
sS'block_loop.thisRepN'
p5188
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5189
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p5190
Nsg69
Vn
sS'block_loop.thisTrialN'
p5191
I0
sg39
F0.75020926299475832
sg34
g752
(S'\x07\xdf\n\x13\r\x12&\x0c\r\xf0'
tRp5192
sa(dp5193
S'trial_loop.thisTrialN'
p5194
I111
sg3632
g3766
sS'block_loop.thisIndex'
p5195
g3626
sg38
S'right'
p5196
sg58
g62
sS'trial_loop.thisN'
p5197
I111
sg33
g3770
sg63
g64
sS'trial_loop.thisIndex'
p5198
g59
(g98
S'o\x00\x00\x00'
tRp5199
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5200
I0
sg3641
g3774
sS'block_loop.thisRepN'
p5201
I1
sg3644
g3770
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5202
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p5203
Nsg69
Vn
sS'block_loop.thisTrialN'
p5204
I0
sg39
F0.71686745270380925
sg34
g752
(S'\x07\xdf\n\x13\r\x12,\x08\x93P'
tRp5205
sa(dp5206
S'trial_loop.thisTrialN'
p5207
I112
sg3632
g3670
sS'block_loop.thisIndex'
p5208
g3626
sg38
S'left'
p5209
sg58
g62
sS'trial_loop.thisN'
p5210
I112
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p5211
g59
(g98
S'p\x00\x00\x00'
tRp5212
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5213
I0
sg3641
g3677
sS'block_loop.thisRepN'
p5214
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5215
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p5216
Nsg69
Vn
sS'block_loop.thisTrialN'
p5217
I0
sg39
F1.7334191862792068
sg34
g752
(S'\x07\xdf\n\x13\r\x122\x04\xda0'
tRp5218
sa(dp5219
S'trial_loop.thisTrialN'
p5220
I113
sg3632
g3815
sS'block_loop.thisIndex'
p5221
g3626
sg38
S'left'
p5222
sg58
g62
sS'trial_loop.thisN'
p5223
I113
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p5224
g59
(g98
S'q\x00\x00\x00'
tRp5225
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5226
I0
sg3641
g3823
sS'block_loop.thisRepN'
p5227
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5228
I1
sg3647
g3826
sg55
g11
sS'block_loop.thisTrial'
p5229
Nsg69
Vn
sS'block_loop.thisTrialN'
p5230
I0
sg39
F3.0172396785437741
sg34
g752
(S'\x07\xdf\n\x13\r\x129\x01[\xa8'
tRp5231
sa(dp5232
S'trial_loop.thisTrialN'
p5233
I114
sg3632
g3702
sS'block_loop.thisIndex'
p5234
g3626
sg38
S'right'
p5235
sg58
g62
sS'trial_loop.thisN'
p5236
I114
sg33
g3706
sg63
g64
sS'trial_loop.thisIndex'
p5237
g59
(g98
S'r\x00\x00\x00'
tRp5238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5239
I0
sg3641
g3710
sS'block_loop.thisRepN'
p5240
I1
sg3644
g3712
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5241
I1
sg3647
g3706
sg55
g11
sS'block_loop.thisTrial'
p5242
Nsg69
Vn
sS'block_loop.thisTrialN'
p5243
I0
sg39
F1.0833365644612059
sg34
g752
(S'\x07\xdf\n\x13\r\x13\x05\x02\x1b\x10'
tRp5244
sa(dp5245
S'trial_loop.thisTrialN'
p5246
I115
sg3632
g3749
sS'block_loop.thisIndex'
p5247
g3626
sg38
S'left'
p5248
sg58
g62
sS'trial_loop.thisN'
p5249
I115
sg33
g3753
sg63
g64
sS'trial_loop.thisIndex'
p5250
g59
(g98
S's\x00\x00\x00'
tRp5251
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5252
I0
sg3641
g3757
sS'block_loop.thisRepN'
p5253
I1
sg3644
g3753
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5254
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p5255
Nsg69
Vn
sS'block_loop.thisTrialN'
p5256
I0
sg39
F0.98353721745115763
sg34
g752
(S'\x07\xdf\n\x13\r\x13\x0b\x03\xdcH'
tRp5257
sa(dp5258
S'trial_loop.thisTrialN'
p5259
I116
sg3632
S'7-olives.png'
p5260
sS'block_loop.thisIndex'
p5261
g3626
sg38
S'left'
p5262
sg58
g62
sS'trial_loop.thisN'
p5263
I116
sg33
g3903
sg63
g64
sS'trial_loop.thisIndex'
p5264
g59
(g98
S't\x00\x00\x00'
tRp5265
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5266
I0
sg3641
S'22-daim.png'
p5267
sS'block_loop.thisRepN'
p5268
I1
sg3644
g3896
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5269
I1
sg3647
g3903
sg55
g11
sS'block_loop.thisTrial'
p5270
Nsg69
Vn
sS'block_loop.thisTrialN'
p5271
I0
sg39
F0.88350180810084566
sg34
g752
(S'\x07\xdf\n\x13\r\x13\x11\x0428'
tRp5272
sa(dp5273
S'trial_loop.thisTrialN'
p5274
I117
sg3632
g4059
sS'block_loop.thisIndex'
p5275
g3626
sg38
S'right'
p5276
sg58
g62
sS'trial_loop.thisN'
p5277
I117
sg33
g4069
sg63
g64
sS'trial_loop.thisIndex'
p5278
g59
(g98
S'u\x00\x00\x00'
tRp5279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5280
I0
sg3641
g4067
sS'block_loop.thisRepN'
p5281
I1
sg3644
g4069
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5282
I1
sg3647
g4063
sg55
g11
sS'block_loop.thisTrial'
p5283
Nsg69
Vn
sS'block_loop.thisTrialN'
p5284
I0
sg39
F0.96680872221804748
sg34
g752
(S'\x07\xdf\n\x13\r\x13\x17\x02\xdax'
tRp5285
sa(dp5286
S'trial_loop.thisTrialN'
p5287
I118
sg3632
g4628
sS'block_loop.thisIndex'
p5288
g3626
sg38
S'right'
p5289
sg58
g62
sS'trial_loop.thisN'
p5290
I118
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p5291
g59
(g98
S'v\x00\x00\x00'
tRp5292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5293
I0
sg3641
g4635
sS'block_loop.thisRepN'
p5294
I1
sg3644
g3928
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5295
I1
sg3647
g3935
sg55
g11
sS'block_loop.thisTrial'
p5296
Nsg69
Vn
sS'block_loop.thisTrialN'
p5297
I0
sg39
F1.08386029214671
sg34
g752
(S'\x07\xdf\n\x13\r\x13\x1d\x02\xb7P'
tRp5298
sa(dp5299
S'trial_loop.thisTrialN'
p5300
I119
sg3632
g4656
sS'block_loop.thisIndex'
p5301
g3626
sg38
S'left'
p5302
sg58
g62
sS'trial_loop.thisN'
p5303
I119
sg33
g4179
sg63
g64
sS'trial_loop.thisIndex'
p5304
g59
(g98
S'w\x00\x00\x00'
tRp5305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5306
I0
sg3641
g4663
sS'block_loop.thisRepN'
p5307
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5308
I1
sg3647
g4186
sg55
g11
sS'block_loop.thisTrial'
p5309
Nsg69
Vn
sS'block_loop.thisTrialN'
p5310
I0
sg39
F1.1167590578934323
sg34
g752
(S'\x07\xdf\n\x13\r\x13#\x04\xb7\x08'
tRp5311
sa(dp5312
S'trial_loop.thisTrialN'
p5313
I120
sg3632
g4710
sS'block_loop.thisIndex'
p5314
g3626
sg38
S'left'
p5315
sg58
g62
sS'trial_loop.thisN'
p5316
I120
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p5317
g59
(g98
S'x\x00\x00\x00'
tRp5318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5319
I0
sg3641
g4717
sS'block_loop.thisRepN'
p5320
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5321
I1
sg3647
g3980
sg55
g11
sS'block_loop.thisTrial'
p5322
Nsg69
Vn
sS'block_loop.thisTrialN'
p5323
I0
sg39
F1.5501073684517905
sg34
g752
(S'\x07\xdf\n\x13\r\x13)\x06\xf1X'
tRp5324
sa(dp5325
S'trial_loop.thisTrialN'
p5326
I121
sg3632
g3909
sS'block_loop.thisIndex'
p5327
g3626
sg38
S'left'
p5328
sg58
g62
sS'trial_loop.thisN'
p5329
I121
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p5330
g59
(g98
S'y\x00\x00\x00'
tRp5331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5332
I0
sg3641
g3916
sS'block_loop.thisRepN'
p5333
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5334
I1
sg3647
g3657
sg55
g11
sS'block_loop.thisTrial'
p5335
Nsg69
Vn
sS'block_loop.thisTrialN'
p5336
I0
sg39
F0.84991395698671113
sg34
g752
(S'\x07\xdf\n\x13\r\x130\x00\x94p'
tRp5337
sa(dp5338
S'trial_loop.thisTrialN'
p5339
I122
sg3632
g3941
sS'block_loop.thisIndex'
p5340
g3626
sg38
S'right'
p5341
sg58
g62
sS'trial_loop.thisN'
p5342
I122
sg33
g3873
sg63
g64
sS'trial_loop.thisIndex'
p5343
g59
(g98
S'z\x00\x00\x00'
tRp5344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5345
I0
sg3641
g3948
sS'block_loop.thisRepN'
p5346
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5347
I1
sg3647
g3873
sg55
g11
sS'block_loop.thisTrial'
p5348
Nsg69
Vn
sS'block_loop.thisTrialN'
p5349
I0
sg39
F1.0334242040316894
sg34
g752
(S'\x07\xdf\n\x13\r\x135\x0e\x05\xd8'
tRp5350
sa(dp5351
S'trial_loop.thisTrialN'
p5352
I123
sg3632
g4358
sS'block_loop.thisIndex'
p5353
g3626
sg38
S'right'
p5354
sg58
g62
sS'trial_loop.thisN'
p5355
I123
sg33
g3753
sg63
g64
sS'trial_loop.thisIndex'
p5356
g59
(g98
S'{\x00\x00\x00'
tRp5357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5358
I0
sg3641
g4365
sS'block_loop.thisRepN'
p5359
I1
sg3644
g3753
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5360
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p5361
Nsg69
Vn
sS'block_loop.thisTrialN'
p5362
I0
sg39
F0.88356139388633892
sg34
g752
(S'\x07\xdf\n\x13\r\x13;\x0f\x13`'
tRp5363
sa(dp5364
S'trial_loop.thisTrialN'
p5365
I124
sg3632
g4343
sS'block_loop.thisIndex'
p5366
g3626
sg38
S'left'
p5367
sg58
g62
sS'trial_loop.thisN'
p5368
I124
sg33
g4069
sg63
g64
sS'trial_loop.thisIndex'
p5369
g59
(g98
S'|\x00\x00\x00'
tRp5370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5371
I0
sg3641
g4350
sS'block_loop.thisRepN'
p5372
I1
sg3644
g4069
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5373
I1
sg3647
g4063
sg55
g11
sS'block_loop.thisTrial'
p5374
Nsg69
Vn
sS'block_loop.thisTrialN'
p5375
I0
sg39
F1.2168147093070729
sg34
g752
(S'\x07\xdf\n\x13\r\x14\x05\r\xbb\xa0'
tRp5376
sa(dp5377
S'trial_loop.thisTrialN'
p5378
I125
sg3632
g4274
sS'block_loop.thisIndex'
p5379
g3626
sg38
S'right'
p5380
sg58
g62
sS'trial_loop.thisN'
p5381
I125
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p5382
g59
(g98
S'}\x00\x00\x00'
tRp5383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5384
I0
sg3641
g4281
sS'block_loop.thisRepN'
p5385
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5386
I1
sg3647
g4040
sg55
g11
sS'block_loop.thisTrial'
p5387
Nsg69
Vn
sS'block_loop.thisTrialN'
p5388
I0
sg39
F0.78344159509651945
sg34
g752
(S'\x07\xdf\n\x13\r\x14\x0c\x02a`'
tRp5389
sa(dp5390
S'trial_loop.thisTrialN'
p5391
I126
sg3632
g3924
sS'block_loop.thisIndex'
p5392
g3626
sg38
S'left'
p5393
sg58
g62
sS'trial_loop.thisN'
p5394
I126
sg33
g3935
sg63
g64
sS'trial_loop.thisIndex'
p5395
g59
(g98
S'~\x00\x00\x00'
tRp5396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5397
I0
sg3641
g3932
sS'block_loop.thisRepN'
p5398
I1
sg3644
g3928
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5399
I1
sg3647
g3935
sg55
g11
sS'block_loop.thisTrial'
p5400
Nsg69
Vn
sS'block_loop.thisTrialN'
p5401
I0
sg39
F1.6001808100700146
sg34
g752
(S'\x07\xdf\n\x13\r\x14\x11\x0e\xe0\x98'
tRp5402
sa(dp5403
S'trial_loop.thisTrialN'
p5404
I127
sg3632
g4600
sS'block_loop.thisIndex'
p5405
g3626
sg38
S'left'
p5406
sg58
g62
sS'trial_loop.thisN'
p5407
I127
sg33
g3712
sg63
g64
sS'trial_loop.thisIndex'
p5408
g59
(g98
S'\x7f\x00\x00\x00'
tRp5409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5410
I0
sg3641
g4607
sS'block_loop.thisRepN'
p5411
I1
sg3644
g3712
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5412
I1
sg3647
g3706
sg55
g11
sS'block_loop.thisTrial'
p5413
Nsg69
Vn
sS'block_loop.thisTrialN'
p5414
I0
sg39
F1.5831857468529051
sg34
g752
(S'\x07\xdf\n\x13\r\x14\x18\t;H'
tRp5415
sa(dp5416
S'trial_loop.thisTrialN'
p5417
I128
sg3632
g4544
sS'block_loop.thisIndex'
p5418
g3626
sg38
S'right'
p5419
sg58
g62
sS'trial_loop.thisN'
p5420
I128
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p5421
g59
(g98
S'\x80\x00\x00\x00'
tRp5422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5423
I0
sg3641
g4551
sS'block_loop.thisRepN'
p5424
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5425
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p5426
Nsg69
Vn
sS'block_loop.thisTrialN'
p5427
I0
sg39
F0.7339269483982207
sg34
g752
(S'\x07\xdf\n\x13\r\x14\x1f\x03Wx'
tRp5428
sa(dp5429
S'trial_loop.thisTrialN'
p5430
I129
sg3632
g4315
sS'block_loop.thisIndex'
p5431
g3626
sg38
S'right'
p5432
sg58
g62
sS'trial_loop.thisN'
p5433
I129
sg33
g3787
sg63
g64
sS'trial_loop.thisIndex'
p5434
g59
(g98
S'\x81\x00\x00\x00'
tRp5435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5436
I0
sg3641
g4322
sS'block_loop.thisRepN'
p5437
I1
sg3644
g3787
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5438
I1
sg3647
g3794
sg55
g11
sS'block_loop.thisTrial'
p5439
Nsg69
Vn
sS'block_loop.thisTrialN'
p5440
I0
sg39
F0.78347210073843598
sg34
g752
(S'\x07\xdf\n\x13\r\x14$\x0f\x1f\x18'
tRp5441
sa(dp5442
S'trial_loop.thisTrialN'
p5443
I130
sg3632
g4399
sS'block_loop.thisIndex'
p5444
g3626
sg38
S'left'
p5445
sg58
g62
sS'trial_loop.thisN'
p5446
I130
sg33
g3770
sg63
g64
sS'trial_loop.thisIndex'
p5447
g59
(g98
S'\x82\x00\x00\x00'
tRp5448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5449
I0
sg3641
g4406
sS'block_loop.thisRepN'
p5450
I1
sg3644
g3770
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5451
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p5452
Nsg69
Vn
sS'block_loop.thisTrialN'
p5453
I0
sg39
F1.0334358931086172
sg34
g752
(S'\x07\xdf\n\x13\r\x14*\x0c\x1d\x90'
tRp5454
sa(dp5455
S'trial_loop.thisTrialN'
p5456
I131
sg3632
g3845
sS'block_loop.thisIndex'
p5457
g3626
sg38
S'left'
p5458
sg58
g62
sS'trial_loop.thisN'
p5459
I131
sg33
g3849
sg63
g64
sS'trial_loop.thisIndex'
p5460
g59
(g98
S'\x83\x00\x00\x00'
tRp5461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5462
I0
sg3641
g3853
sS'block_loop.thisRepN'
p5463
I1
sg3644
g3849
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5464
I1
sg3647
g3856
sg55
g11
sS'block_loop.thisTrial'
p5465
Nsg69
Vn
sS'block_loop.thisTrialN'
p5466
I0
sg39
F0.93352108082399354
sg34
g752
(S'\x07\xdf\n\x13\r\x140\r+\x18'
tRp5467
sa(dp5468
S'trial_loop.thisTrialN'
p5469
I132
sg3632
g3633
sS'block_loop.thisIndex'
p5470
g3626
sg38
S'right'
p5471
sg58
g62
sS'trial_loop.thisN'
p5472
I132
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p5473
g59
(g98
S'\x84\x00\x00\x00'
tRp5474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5475
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5476
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5477
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p5478
Nsg69
Vn
sS'block_loop.thisTrialN'
p5479
I0
sg39
F1.0335222782414348
sg34
g752
(S'\x07\xdf\n\x13\r\x146\x0c\xc9p'
tRp5480
sa(dp5481
S'trial_loop.thisTrialN'
p5482
I133
sg3632
g4544
sS'block_loop.thisIndex'
p5483
g3626
sg38
S'right'
p5484
sg58
g62
sS'trial_loop.thisN'
p5485
I133
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p5486
g59
(g98
S'\x85\x00\x00\x00'
tRp5487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5488
I0
sg3641
g4551
sS'block_loop.thisRepN'
p5489
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5490
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p5491
Nsg69
Vn
sS'block_loop.thisTrialN'
p5492
I0
sg39
F0.86689020364065072
sg34
g752
(S'\x07\xdf\n\x13\r\x15\x00\r\xd3\x10'
tRp5493
sa(dp5494
S'trial_loop.thisTrialN'
p5495
I134
sg3632
g4656
sS'block_loop.thisIndex'
p5496
g3626
sg38
S'left'
p5497
sg58
g62
sS'trial_loop.thisN'
p5498
I134
sg33
g4186
sg63
g64
sS'trial_loop.thisIndex'
p5499
g59
(g98
S'\x86\x00\x00\x00'
tRp5500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5501
I0
sg3641
g4663
sS'block_loop.thisRepN'
p5502
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5503
I1
sg3647
g4186
sg55
g11
sS'block_loop.thisTrial'
p5504
Nsg69
Vn
sS'block_loop.thisTrialN'
p5505
I0
sg39
F0.91687355383328395
sg34
g752
(S'\x07\xdf\n\x13\r\x15\x06\x0c@\xb8'
tRp5506
sa(dp5507
S'trial_loop.thisTrialN'
p5508
I135
sg3632
g4600
sS'block_loop.thisIndex'
p5509
g3626
sg38
S'left'
p5510
sg58
g62
sS'trial_loop.thisN'
p5511
I135
sg33
g3712
sg63
g64
sS'trial_loop.thisIndex'
p5512
g59
(g98
S'\x87\x00\x00\x00'
tRp5513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5514
I0
sg3641
g4607
sS'block_loop.thisRepN'
p5515
I1
sg3644
g3712
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5516
I1
sg3647
g3706
sg55
g11
sS'block_loop.thisTrial'
p5517
Nsg69
Vn
sS'block_loop.thisTrialN'
p5518
I0
sg39
F0.83343292807330727
sg34
g752
(S'\x07\xdf\n\x13\r\x15\x0c\x0bb\x10'
tRp5519
sa(dp5520
S'trial_loop.thisTrialN'
p5521
I136
sg3632
g3800
sS'block_loop.thisIndex'
p5522
g3626
sg38
S'right'
p5523
sg58
g62
sS'trial_loop.thisN'
p5524
I136
sg33
g3689
sg63
g64
sS'trial_loop.thisIndex'
p5525
g59
(g98
S'\x88\x00\x00\x00'
tRp5526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5527
I0
sg3641
g3807
sS'block_loop.thisRepN'
p5528
I1
sg3644
g3695
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5529
I1
sg3647
g3689
sg55
g11
sS'block_loop.thisTrial'
p5530
Nsg69
Vn
sS'block_loop.thisTrialN'
p5531
I0
sg39
F0.76686819396491046
sg34
g752
(S'\x07\xdf\n\x13\r\x15\x12\tV\xa0'
tRp5532
sa(dp5533
S'trial_loop.thisTrialN'
p5534
I137
sg3632
S'13-mccoys_steak_crisps.png'
p5535
sS'block_loop.thisIndex'
p5536
g3626
sg38
S'right'
p5537
sg58
g62
sS'trial_loop.thisN'
p5538
I137
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p5539
g59
(g98
S'\x89\x00\x00\x00'
tRp5540
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5541
I0
sg3641
S'3-ellas_strawberries_apples.png'
p5542
sS'block_loop.thisRepN'
p5543
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3647
g3826
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F0.68354845036992629
sg34
g752
(S'\x07\xdf\n\x13\r\x15\x18\x06U\x18'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g5260
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'left'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g3896
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g5267
sS'block_loop.thisRepN'
p5556
I1
sg3644
g3896
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3647
g3903
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F1.0001103334871004
sg34
g752
(S'\x07\xdf\n\x13\r\x15\x1e\x02"\xe0'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g4029
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'left'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g4037
sS'block_loop.thisRepN'
p5569
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3647
g4040
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F0.68352250632051437
sg34
g752
(S'\x07\xdf\n\x13\r\x15$\x02x\xd0'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g3732
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'right'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g3736
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g3740
sS'block_loop.thisRepN'
p5582
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3647
g3736
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F0.71680986261526414
sg34
g752
(S'\x07\xdf\n\x13\r\x15)\r\x88\xd8'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g5535
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'right'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g5542
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3647
g3826
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F0.96662768406895339
sg34
g752
(S'\x07\xdf\n\x13\r\x15/\t\x95 '
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g3633
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'right'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5608
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.61686226389429066
sg34
g752
(S'\x07\xdf\n\x13\r\x155\t\xac\x90'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4399
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'left'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3770
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g4406
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3770
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F1.0502117148516845
sg34
g752
(S'\x07\xdf\n\x13\r\x15;\x04I\xa8'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g3749
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'left'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3753
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g3757
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3753
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F0.66681596374473884
sg34
g752
(S'\x07\xdf\n\x13\r\x16\x05\x05\x91\xc8'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g3670
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'left'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g3677
sS'block_loop.thisRepN'
p5647
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F0.60021359650636441
sg34
g752
(S'\x07\xdf\n\x13\r\x16\x0b\x00\xe6x'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g3749
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'left'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3760
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g3757
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3753
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F0.5834460426485748
sg34
g752
(S'\x07\xdf\n\x13\r\x16\x10\n\xc5\xd0'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g3702
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'right'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g3706
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g3710
sS'block_loop.thisRepN'
p5673
I1
sg3644
g3712
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3647
g3706
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F1.3500405411414249
sg34
g752
(S'\x07\xdf\n\x13\r\x16\x16\x04\xe9\xd0'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g5260
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'left'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3896
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g5267
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3896
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3647
g3903
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F0.78340966395808209
sg34
g752
(S'\x07\xdf\n\x13\r\x16\x1c\n\xba\x18'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g4572
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g4016
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g4579
sS'block_loop.thisRepN'
p5699
I1
sg3644
g4016
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3647
g4023
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.75026371699095762
sg34
g752
(S'\x07\xdf\n\x13\r\x16"\x07\xf7\x10'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g4358
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'right'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3753
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g4365
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3753
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F0.70021764491866634
sg34
g752
(S'\x07\xdf\n\x13\r\x16(\x04|p'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g3862
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'left'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3866
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g3870
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3647
g3873
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.71726203034086211
sg34
g752
(S'\x07\xdf\n\x13\r\x16.\x00\x88\xb8'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g4628
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'right'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g4635
sS'block_loop.thisRepN'
p5738
I1
sg3644
g3928
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3647
g3935
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F1.2834510033790139
sg34
g752
(S'\x07\xdf\n\x13\r\x163\x0c\x11\xd8'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g4076
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'left'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g3849
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g4083
sS'block_loop.thisRepN'
p5751
I1
sg3644
g3849
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3647
g3856
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F0.81681562162521004
sg34
g752
(S'\x07\xdf\n\x13\r\x16:\x01kH'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g4343
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'left'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g4069
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g4350
sS'block_loop.thisRepN'
p5764
I1
sg3644
g4069
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3647
g4063
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F1.0334128000540659
sg34
g752
(S'\x07\xdf\n\x13\r\x17\x03\x0ec\x98'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g3909
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'left'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g3916
sS'block_loop.thisRepN'
p5777
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3647
g3657
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F0.94993254546898243
sg34
g752
(S'\x07\xdf\n\x13\r\x17\n\x00.\xe0'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g4218
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'left'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g4229
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g4226
sS'block_loop.thisRepN'
p5790
I1
sg3644
g4222
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3647
g4229
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F0.88397621358308243
sg34
g752
(S'\x07\xdf\n\x13\r\x17\x10\x00\x07\xd0'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g3969
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'right'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g3977
sS'block_loop.thisRepN'
p5803
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3647
g3980
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F0.86688649734787759
sg34
g752
(S'\x07\xdf\n\x13\r\x17\x15\r\xf68'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g3702
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'right'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g3706
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g3710
sS'block_loop.thisRepN'
p5816
I1
sg3644
g3712
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3647
g3706
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F1.4833633067883056
sg34
g752
(S'\x07\xdf\n\x13\r\x17\x1b\x0c_\xf8'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g4710
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'left'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g4717
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3647
g3980
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F1.3001096492480428
sg34
g752
(S'\x07\xdf\n\x13\r\x17"\x05\x10\xe0'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g5535
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'right'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g5542
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3647
g3826
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F0.85014916403088137
sg34
g752
(S'\x07\xdf\n\x13\r\x17(\n)\x90'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g4600
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'left'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3712
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g4607
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3712
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3647
g3706
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F0.96707700079969072
sg34
g752
(S'\x07\xdf\n\x13\r\x17.\x08X\xb8'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g4343
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'left'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g4069
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g4350
sS'block_loop.thisRepN'
p5868
I1
sg3644
g4069
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3647
g4063
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F0.96685490832896903
sg34
g752
(S'\x07\xdf\n\x13\r\x174\x08p('
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g3685
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'left'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g3695
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g3693
sS'block_loop.thisRepN'
p5881
I1
sg3644
g3695
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3647
g3689
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F1.2668570750847721
sg34
g752
(S'\x07\xdf\n\x13\r\x17:\x08I\x18'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g3892
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'right'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g3896
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g3900
sS'block_loop.thisRepN'
p5894
I1
sg3644
g3896
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3647
g3903
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F0.90014648409669462
sg34
g752
(S'\x07\xdf\n\x13\r\x18\x04\x0c\xe8\xb0'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g4628
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'right'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g4635
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3928
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3647
g3935
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F0.86675620690039068
sg34
g752
(S'\x07\xdf\n\x13\r\x18\n\x0c\n\x08'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g4012
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'left'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g4016
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g4020
sS'block_loop.thisRepN'
p5920
I1
sg3644
g4016
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3647
g4023
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F3.3501511597278295
sg34
g752
(S'\x07\xdf\n\x13\r\x18\x10\nw\xb0'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g4175
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'right'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g4179
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g4183
sS'block_loop.thisRepN'
p5933
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3647
g4186
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F1.21682354738914
sg34
g752
(S'\x07\xdf\n\x13\r\x18\x19\x00\xf6\x18'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g3924
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g3932
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3928
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3647
g3935
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F0.66680741076197592
sg34
g752
(S'\x07\xdf\n\x13\r\x18\x1f\x04\xde\x18'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g4104
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'left'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g4112
sS'block_loop.thisRepN'
p5959
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.91687697502675292
sg34
g752
(S'\x07\xdf\n\x13\r\x18%\x002\xc8'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g3969
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'right'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g3977
sS'block_loop.thisRepN'
p5972
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3647
g3980
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F0.86678072545146279
sg34
g752
(S'\x07\xdf\n\x13\r\x18*\x0e\xd4\xe0'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g5260
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'left'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g3896
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g5267
sS'block_loop.thisRepN'
p5985
I1
sg3644
g3896
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3647
g3903
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F1.3667992569153284
sg34
g752
(S'\x07\xdf\n\x13\r\x180\rB\x88'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g4358
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'right'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g3753
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g4365
sS'block_loop.thisRepN'
p5998
I1
sg3644
g3753
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F1.0501866261001851
sg34
g752
(S'\x07\xdf\n\x13\r\x187\x04\x0b('
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g3815
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'left'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g3823
sS'block_loop.thisRepN'
p6011
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3647
g3826
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F0.68355443745895172
sg34
g752
(S'\x07\xdf\n\x13\r\x19\x01\x05SH'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g3892
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'right'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g3896
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g3900
sS'block_loop.thisRepN'
p6024
I1
sg3644
g3896
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3647
g3903
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F0.75012173746472399
sg34
g752
(S'\x07\xdf\n\x13\r\x19\x07\x00\xe6x'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g3749
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'left'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3753
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g3757
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3753
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F0.80025761586148292
sg34
g752
(S'\x07\xdf\n\x13\r\x19\x0c\x0c\xe8\xb0'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g3766
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'right'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g3770
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g3774
sS'block_loop.thisRepN'
p6050
I1
sg3644
g3770
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F1.0335342524176667
sg34
g752
(S'\x07\xdf\n\x13\r\x19\x12\nd('
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g5535
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'right'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g5542
sS'block_loop.thisRepN'
p6063
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3647
g3826
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F0.66722137516080693
sg34
g752
(S'\x07\xdf\n\x13\r\x19\x18\x0bm\xc8'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g3732
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g3740
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3647
g3736
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F0.85009898652788252
sg34
g752
(S'\x07\xdf\n\x13\r\x19\x1e\x06\xc2x'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g3633
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'right'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g3642
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F0.7172477753701969
sg34
g752
(S'\x07\xdf\n\x13\r\x19$\x04\xf1\xa0'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g3924
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'left'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g3932
sS'block_loop.thisRepN'
p6102
I1
sg3644
g3928
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3647
g3935
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.88344079681883159
sg34
g752
(S'\x07\xdf\n\x13\r\x19*\x01<h'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g5076
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'right'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g4229
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g5083
sS'block_loop.thisRepN'
p6115
I1
sg3644
g4222
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3647
g4229
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F0.75023178585252026
sg34
g752
(S'\x07\xdf\n\x13\r\x19/\x0f&\xe8'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g4710
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'left'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g3973
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g4717
sS'block_loop.thisRepN'
p6128
I1
sg3644
g3973
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3647
g3980
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F0.68331181782741623
sg34
g752
(S'\x07\xdf\n\x13\r\x195\x0b\xea\xc8'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g3800
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'right'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g3695
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g3807
sS'block_loop.thisRepN'
p6141
I1
sg3644
g3695
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3647
g3689
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.65065339091415808
sg34
g752
(S'\x07\xdf\n\x13\r\x19;\x07z\x10'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g5076
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'right'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g4222
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g5083
sS'block_loop.thisRepN'
p6154
I1
sg3644
g4222
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3647
g4229
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F0.75012772455193044
sg34
g752
(S'\x07\xdf\n\x13\r\x1a\x05\x02\xce\xc0'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g3702
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'right'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g3712
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g3710
sS'block_loop.thisRepN'
p6167
I1
sg3644
g3712
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3647
g3706
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F1.0167270697365893
sg34
g752
(S'\x07\xdf\n\x13\r\x1a\n\x0e\xd4\xe0'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g5535
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'right'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g5542
sS'block_loop.thisRepN'
p6180
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3647
g3826
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F1.016862206875885
sg34
g752
(S'\x07\xdf\n\x13\r\x1a\x11\x00#('
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g3732
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'right'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g3736
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g3740
sS'block_loop.thisRepN'
p6193
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3647
g3736
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F0.85019535014180292
sg34
g752
(S'\x07\xdf\n\x13\r\x1a\x17\x00\xf20'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g4104
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'left'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g4112
sS'block_loop.thisRepN'
p6206
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F0.88353887103039597
sg34
g752
(S'\x07\xdf\n\x13\r\x1a\x1c\x0ec\x98'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g4175
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'right'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g4179
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g4183
sS'block_loop.thisRepN'
p6219
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3647
g4186
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F0.98354434493921872
sg34
g752
(S'\x07\xdf\n\x13\r\x1a"\rJX'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g4399
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'left'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g3770
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g4406
sS'block_loop.thisRepN'
p6232
I1
sg3644
g3770
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F1.100171116688216
sg34
g752
(S'\x07\xdf\n\x13\r\x1a(\ra\xc8'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g4656
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'left'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g4186
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g4663
sS'block_loop.thisRepN'
p6245
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3647
g4186
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F1.400103719179242
sg34
g752
(S'\x07\xdf\n\x13\r\x1a/\x00\x1f@'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g5260
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'left'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3896
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g5267
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3896
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3647
g3903
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F1.0834486085441313
sg34
g752
(S'\x07\xdf\n\x13\r\x1a5\x06\xe1\xb8'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g4656
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'left'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g4186
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g4663
sS'block_loop.thisRepN'
p6271
I1
sg3644
g4179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3647
g4186
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F1.2335075671107916
sg34
g752
(S'\x07\xdf\n\x13\r\x1a;\x08\xa2\xf0'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g3685
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'left'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3695
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g3693
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3695
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3647
g3689
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F0.88352376075818029
sg34
g752
(S'\x07\xdf\n\x13\r\x1b\x05\x0c\xc5\x88'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g3783
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'left'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3787
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g3791
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3787
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3647
g3794
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F0.8668374602420954
sg34
g752
(S'\x07\xdf\n\x13\r\x1b\x0b\x0bq\xb0'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g5076
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'right'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g4222
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g5083
sS'block_loop.thisRepN'
p6310
I1
sg3644
g4222
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3647
g4229
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F0.9335150937349681
sg34
g752
(S'\x07\xdf\n\x13\r\x1b\x11\t\xdfX'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g3815
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'left'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g3823
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3647
g3826
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F2.6835507311661786
sg34
g752
(S'\x07\xdf\n\x13\r\x1b\x17\ty\xc8'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4012
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'left'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g4016
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4020
sS'block_loop.thisRepN'
p6336
I1
sg3644
g4016
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3647
g4023
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F0.95010531573643675
sg34
g752
(S'\x07\xdf\n\x13\r\x1b\x1f\x05\x01@'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g3909
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'left'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g3916
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3647
g3657
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.2336150496012124
sg34
g752
(S'\x07\xdf\n\x13\r\x1b%\x04\xda0'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F77.031898351782729
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'44-crunch.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'left'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'44-crunch.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'26-walkers_smoky_bacon.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'26-walkers_smoky_bacon.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F1.4168393418985943
sg34
g752
(S'\x07\xdf\n\x13\r\x1d\x05\t\x9c\xf0'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'4-corn.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'left'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'10-bounty_redo.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'10-bounty_redo.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
S'4-corn.png'
p6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6402
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F1.1001845163646067
sg34
g752
(S'\x07\xdf\n\x13\r\x1d\x0c\x01\x1d('
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'36-fig_rolls.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'left'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
S'36-fig_rolls.png'
p6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6419
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.88353858592927281
sg34
g752
(S'\x07\xdf\n\x13\r\x1d\x12\x03Wx'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'19-caramello_redo.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'left'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'19-caramello_redo.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'30-spaghetti_hoops.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6435
I2
sg6384
S'30-spaghetti_hoops.png'
p6436
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vn
sS'block_loop.thisTrialN'
p6438
I0
sg39
F0.85018081007001456
sg34
g752
(S'\x07\xdf\n\x13\r\x1d\x18\x02\x03\xa0'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'46-pistachios.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'left'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'46-pistachios.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'29-beans.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6452
I2
sg6384
S'29-beans.png'
p6453
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vn
sS'block_loop.thisTrialN'
p6455
I0
sg39
F0.9668859841694939
sg34
g752
(S'\x07\xdf\n\x13\r\x1d\x1e\x002\xc8'
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
S'31-hobnobs.png'
p6459
sS'block_loop.thisIndex'
p6460
g6364
sg38
S'right'
p6461
sg58
g62
sS'trial_loop.thisN'
p6462
I5
sg33
S'25-kitkat.png'
p6463
sg63
g64
sS'trial_loop.thisIndex'
p6464
g59
(g98
S'\x05\x00\x00\x00'
tRp6465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6466
I0
sg6379
S'25-kitkat.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6469
I2
sg6384
S'31-hobnobs.png'
p6470
sg55
g11
sS'block_loop.thisTrial'
p6471
Nsg69
Vn
sS'block_loop.thisTrialN'
p6472
I0
sg39
F1.3835129269791651
sg34
g752
(S'\x07\xdf\n\x13\r\x1d$\x00J8'
tRp6473
sa(dp6474
S'trial_loop.thisTrialN'
p6475
I6
sg6370
g6391
sS'block_loop.thisIndex'
p6476
g6364
sg38
S'left'
p6477
sg58
g62
sS'trial_loop.thisN'
p6478
I6
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6479
g59
(g98
S'\x06\x00\x00\x00'
tRp6480
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6481
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6482
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6483
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p6484
Nsg69
Vn
sS'block_loop.thisTrialN'
p6485
I0
sg39
F0.96677279968753282
sg34
g752
(S'\x07\xdf\n\x13\r\x1d*\x06\x8f\xb0'
tRp6486
sa(dp6487
S'trial_loop.thisTrialN'
p6488
I7
sg6370
S'51-mars.png'
p6489
sS'block_loop.thisIndex'
p6490
g6364
sg38
S'right'
p6491
sg58
g62
sS'trial_loop.thisN'
p6492
I7
sg33
S'27-hartleys_raspberries_jelly.png'
p6493
sg63
g64
sS'trial_loop.thisIndex'
p6494
g59
(g98
S'\x07\x00\x00\x00'
tRp6495
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6496
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6497
sS'block_loop.thisRepN'
p6498
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6499
I2
sg6384
S'51-mars.png'
p6500
sg55
g11
sS'block_loop.thisTrial'
p6501
Nsg69
Vn
sS'block_loop.thisTrialN'
p6502
I0
sg39
F0.76679777439858299
sg34
g752
(S'\x07\xdf\n\x13\r\x1d0\x06\xa7 '
tRp6503
sa(dp6504
S'trial_loop.thisTrialN'
p6505
I8
sg6370
S'42-mrkipling_lemon_slices.png'
p6506
sS'block_loop.thisIndex'
p6507
g6364
sg38
S'left'
p6508
sg58
g62
sS'trial_loop.thisN'
p6509
I8
sg33
S'42-mrkipling_lemon_slices.png'
p6510
sg63
g64
sS'trial_loop.thisIndex'
p6511
g59
(g98
S'\x08\x00\x00\x00'
tRp6512
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6513
I0
sg6379
S'16-skips_prawn.png'
p6514
sS'block_loop.thisRepN'
p6515
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6516
I2
sg6384
S'16-skips_prawn.png'
p6517
sg55
g11
sS'block_loop.thisTrial'
p6518
Nsg69
Vn
sS'block_loop.thisTrialN'
p6519
I0
sg39
F0.76666833925082756
sg34
g752
(S'\x07\xdf\n\x13\r\x1d6\x03k\x00'
tRp6520
sa(dp6521
S'trial_loop.thisTrialN'
p6522
I9
sg6370
S'2-steamed_puddings.png'
p6523
sS'block_loop.thisIndex'
p6524
g6364
sg38
S'right'
p6525
sg58
g62
sS'trial_loop.thisN'
p6526
I9
sg33
S'2-steamed_puddings.png'
p6527
sg63
g64
sS'trial_loop.thisIndex'
p6528
g59
(g98
S'\t\x00\x00\x00'
tRp6529
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6530
I0
sg6379
S'20-fruit_pastilles.png'
p6531
sS'block_loop.thisRepN'
p6532
I2
sg6382
S'20-fruit_pastilles.png'
p6533
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6534
I2
sg6384
g6527
sg55
g11
sS'block_loop.thisTrial'
p6535
Nsg69
Vn
sS'block_loop.thisTrialN'
p6536
I0
sg39
F1.450533535107752
sg34
g752
(S'\x07\xdf\n\x13\r\x1e\x00\x00ix'
tRp6537
sa(dp6538
S'trial_loop.thisTrialN'
p6539
I10
sg6370
g6408
sS'block_loop.thisIndex'
p6540
g6364
sg38
S'left'
p6541
sg58
g62
sS'trial_loop.thisN'
p6542
I10
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6543
g59
(g98
S'\n\x00\x00\x00'
tRp6544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6545
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6546
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6547
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p6548
Nsg69
Vn
sS'block_loop.thisTrialN'
p6549
I0
sg39
F0.75012230766333232
sg34
g752
(S'\x07\xdf\n\x13\r\x1e\x06\x07\xe3\x88'
tRp6550
sa(dp6551
S'trial_loop.thisTrialN'
p6552
I11
sg6370
S'29-beans.png'
p6553
sS'block_loop.thisIndex'
p6554
g6364
sg38
S'right'
p6555
sg58
g62
sS'trial_loop.thisN'
p6556
I11
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p6557
g59
(g98
S'\x0b\x00\x00\x00'
tRp6558
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6559
I0
sg6379
S'46-pistachios.png'
p6560
sS'block_loop.thisRepN'
p6561
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6562
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6563
Nsg69
Vn
sS'block_loop.thisTrialN'
p6564
I0
sg39
F0.68357895601184282
sg34
g752
(S'\x07\xdf\n\x13\r\x1e\x0c\x04h\xe8'
tRp6565
sa(dp6566
S'trial_loop.thisTrialN'
p6567
I12
sg6370
g6425
sS'block_loop.thisIndex'
p6568
g6364
sg38
S'left'
p6569
sg58
g62
sS'trial_loop.thisN'
p6570
I12
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6571
g59
(g98
S'\x0c\x00\x00\x00'
tRp6572
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6573
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6574
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6575
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p6576
Nsg69
Vn
sS'block_loop.thisTrialN'
p6577
I0
sg39
F1.0168585005812929
sg34
g752
(S'\x07\xdf\n\x13\r\x1e\x12\x006\xb0'
tRp6578
sa(dp6579
S'trial_loop.thisTrialN'
p6580
I13
sg6370
S'50-polo.png'
p6581
sS'block_loop.thisIndex'
p6582
g6364
sg38
S'right'
p6583
sg58
g62
sS'trial_loop.thisN'
p6584
I13
sg33
S'48-twix.png'
p6585
sg63
g64
sS'trial_loop.thisIndex'
p6586
g59
(g98
S'\r\x00\x00\x00'
tRp6587
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6588
I0
sg6379
S'48-twix.png'
p6589
sS'block_loop.thisRepN'
p6590
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6591
I2
sg6384
S'50-polo.png'
p6592
sg55
g11
sS'block_loop.thisTrial'
p6593
Nsg69
Vn
sS'block_loop.thisTrialN'
p6594
I0
sg39
F0.98353066016352386
sg34
g752
(S'\x07\xdf\n\x13\r\x1e\x18\x01\x05\xb8'
tRp6595
sa(dp6596
S'trial_loop.thisTrialN'
p6597
I14
sg6370
g6553
sS'block_loop.thisIndex'
p6598
g6364
sg38
S'right'
p6599
sg58
g62
sS'trial_loop.thisN'
p6600
I14
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p6601
g59
(g98
S'\x0e\x00\x00\x00'
tRp6602
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6603
I0
sg6379
g6560
sS'block_loop.thisRepN'
p6604
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6605
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6606
Nsg69
Vn
sS'block_loop.thisTrialN'
p6607
I0
sg39
F0.63353373923746403
sg34
g752
(S'\x07\xdf\n\x13\r\x1e\x1e\x01\x1d('
tRp6608
sa(dp6609
S'trial_loop.thisTrialN'
p6610
I15
sg6370
S'10-bounty_redo.png'
p6611
sS'block_loop.thisIndex'
p6612
g6364
sg38
S'right'
p6613
sg58
g62
sS'trial_loop.thisN'
p6614
I15
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p6615
g59
(g98
S'\x0f\x00\x00\x00'
tRp6616
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6617
I0
sg6379
S'4-corn.png'
p6618
sS'block_loop.thisRepN'
p6619
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6620
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p6621
Nsg69
Vn
sS'block_loop.thisTrialN'
p6622
I0
sg39
F0.80023366750720015
sg34
g752
(S'\x07\xdf\n\x13\r\x1e#\x0bu\x98'
tRp6623
sa(dp6624
S'trial_loop.thisTrialN'
p6625
I16
sg6370
S'35-raisins.png'
p6626
sS'block_loop.thisIndex'
p6627
g6364
sg38
S'left'
p6628
sg58
g62
sS'trial_loop.thisN'
p6629
I16
sg33
S'35-raisins.png'
p6630
sg63
g64
sS'trial_loop.thisIndex'
p6631
g59
(g98
S'\x10\x00\x00\x00'
tRp6632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6633
I0
sg6379
S'49-yorkie.png'
p6634
sS'block_loop.thisRepN'
p6635
I2
sg6382
g6630
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6636
I2
sg6384
S'49-yorkie.png'
p6637
sg55
g11
sS'block_loop.thisTrial'
p6638
Nsg69
Vn
sS'block_loop.thisTrialN'
p6639
I0
sg39
F2.3668480089236255
sg34
g752
(S'\x07\xdf\n\x13\r\x1e)\x08\xf1\x10'
tRp6640
sa(dp6641
S'trial_loop.thisTrialN'
p6642
I17
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p6643
sS'block_loop.thisIndex'
p6644
g6364
sg38
S'left'
p6645
sg58
g62
sS'trial_loop.thisN'
p6646
I17
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6647
sg63
g64
sS'trial_loop.thisIndex'
p6648
g59
(g98
S'\x11\x00\x00\x00'
tRp6649
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6650
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p6651
sS'block_loop.thisRepN'
p6652
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6653
I2
sg6384
S'8-liquorice_catherine_wheels.png'
p6654
sg55
g11
sS'block_loop.thisTrial'
p6655
Nsg69
Vn
sS'block_loop.thisTrialN'
p6656
I0
sg39
F0.71681699010150624
sg34
g752
(S'\x07\xdf\n\x13\r\x1e0\x0e\xf4 '
tRp6657
sa(dp6658
S'trial_loop.thisTrialN'
p6659
I18
sg6370
S'45-chewy_nougat_redo.png'
p6660
sS'block_loop.thisIndex'
p6661
g6364
sg38
S'right'
p6662
sg58
g62
sS'trial_loop.thisN'
p6663
I18
sg33
S'41-peanuts_redo.png'
p6664
sg63
g64
sS'trial_loop.thisIndex'
p6665
g59
(g98
S'\x12\x00\x00\x00'
tRp6666
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6667
I0
sg6379
S'41-peanuts_redo.png'
p6668
sS'block_loop.thisRepN'
p6669
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6670
I2
sg6384
S'45-chewy_nougat_redo.png'
p6671
sg55
g11
sS'block_loop.thisTrial'
p6672
Nsg69
Vn
sS'block_loop.thisTrialN'
p6673
I0
sg39
F1.0835466827538767
sg34
g752
(S'\x07\xdf\n\x13\r\x1e6\x0b>\xe8'
tRp6674
sa(dp6675
S'trial_loop.thisTrialN'
p6676
I19
sg6370
g6408
sS'block_loop.thisIndex'
p6677
g6364
sg38
S'left'
p6678
sg58
g62
sS'trial_loop.thisN'
p6679
I19
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p6680
g59
(g98
S'\x13\x00\x00\x00'
tRp6681
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6682
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6683
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6684
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p6685
Nsg69
Vn
sS'block_loop.thisTrialN'
p6686
I0
sg39
F0.8334460426485748
sg34
g752
(S'\x07\xdf\n\x13\r\x1f\x00\r\x00 '
tRp6687
sa(dp6688
S'trial_loop.thisTrialN'
p6689
I20
sg6370
S'5-pineapple.png'
p6690
sS'block_loop.thisIndex'
p6691
g6364
sg38
S'left'
p6692
sg58
g62
sS'trial_loop.thisN'
p6693
I20
sg33
S'5-pineapple.png'
p6694
sg63
g64
sS'trial_loop.thisIndex'
p6695
g59
(g98
S'\x14\x00\x00\x00'
tRp6696
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6697
I0
sg6379
S'40-sardines.png'
p6698
sS'block_loop.thisRepN'
p6699
I2
sg6382
g6694
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6700
I2
sg6384
S'40-sardines.png'
p6701
sg55
g11
sS'block_loop.thisTrial'
p6702
Nsg69
Vn
sS'block_loop.thisTrialN'
p6703
I0
sg39
F1.0172861497539998
sg34
g752
(S'\x07\xdf\n\x13\r\x1f\x06\n\xf0\xc8'
tRp6704
sa(dp6705
S'trial_loop.thisTrialN'
p6706
I21
sg6370
g6523
sS'block_loop.thisIndex'
p6707
g6364
sg38
S'right'
p6708
sg58
g62
sS'trial_loop.thisN'
p6709
I21
sg33
g6533
sg63
g64
sS'trial_loop.thisIndex'
p6710
g59
(g98
S'\x15\x00\x00\x00'
tRp6711
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6712
I0
sg6379
g6531
sS'block_loop.thisRepN'
p6713
I2
sg6382
g6533
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6714
I2
sg6384
g6527
sg55
g11
sS'block_loop.thisTrial'
p6715
Nsg69
Vn
sS'block_loop.thisTrialN'
p6716
I0
sg39
F1.3832651755583356
sg34
g752
(S'\x07\xdf\n\x13\r\x1f\x0c\x0b\x858'
tRp6717
sa(dp6718
S'trial_loop.thisTrialN'
p6719
I22
sg6370
S'21-nakd_banana_crunch.png'
p6720
sS'block_loop.thisIndex'
p6721
g6364
sg38
S'left'
p6722
sg58
g62
sS'trial_loop.thisN'
p6723
I22
sg33
S'21-nakd_banana_crunch.png'
p6724
sg63
g64
sS'trial_loop.thisIndex'
p6725
g59
(g98
S'\x16\x00\x00\x00'
tRp6726
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6727
I0
sg6379
S'1-treacle_cookies.png'
p6728
sS'block_loop.thisRepN'
p6729
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6730
I2
sg6384
S'1-treacle_cookies.png'
p6731
sg55
g11
sS'block_loop.thisTrial'
p6732
Nsg69
Vn
sS'block_loop.thisTrialN'
p6733
I0
sg39
F0.73351868598911096
sg34
g752
(S'\x07\xdf\n\x13\r\x1f\x13\x02\xc6\xf0'
tRp6734
sa(dp6735
S'trial_loop.thisTrialN'
p6736
I23
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6737
sS'block_loop.thisIndex'
p6738
g6364
sg38
S'right'
p6739
sg58
g62
sS'trial_loop.thisN'
p6740
I23
sg33
S'18-mms.png'
p6741
sg63
g64
sS'trial_loop.thisIndex'
p6742
g59
(g98
S'\x17\x00\x00\x00'
tRp6743
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6744
I0
sg6379
S'18-mms.png'
p6745
sS'block_loop.thisRepN'
p6746
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6747
I2
sg6384
S'43-mrporky_pork_crackles_redo.png'
p6748
sg55
g11
sS'block_loop.thisTrial'
p6749
Nsg69
Vn
sS'block_loop.thisTrialN'
p6750
I0
sg39
F0.95022249160865613
sg34
g752
(S'\x07\xdf\n\x13\r\x1f\x18\x0eP\x10'
tRp6751
sa(dp6752
S'trial_loop.thisTrialN'
p6753
I24
sg6370
S'49-yorkie.png'
p6754
sS'block_loop.thisIndex'
p6755
g6364
sg38
S'right'
p6756
sg58
g62
sS'trial_loop.thisN'
p6757
I24
sg33
g6630
sg63
g64
sS'trial_loop.thisIndex'
p6758
g59
(g98
S'\x18\x00\x00\x00'
tRp6759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6760
I0
sg6379
S'35-raisins.png'
p6761
sS'block_loop.thisRepN'
p6762
I2
sg6382
g6630
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6763
I2
sg6384
g6637
sg55
g11
sS'block_loop.thisTrial'
p6764
Nsg69
Vn
sS'block_loop.thisTrialN'
p6765
I0
sg39
F0.83345231483508542
sg34
g752
(S'\x07\xdf\n\x13\r\x1f\x1e\x0e,\xe8'
tRp6766
sa(dp6767
S'trial_loop.thisTrialN'
p6768
I25
sg6370
S'13-mccoys_steak_crisps.png'
p6769
sS'block_loop.thisIndex'
p6770
g6364
sg38
S'right'
p6771
sg58
g62
sS'trial_loop.thisN'
p6772
I25
sg33
S'13-mccoys_steak_crisps.png'
p6773
sg63
g64
sS'trial_loop.thisIndex'
p6774
g59
(g98
S'\x19\x00\x00\x00'
tRp6775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6776
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6777
sS'block_loop.thisRepN'
p6778
I2
sg6382
S'3-ellas_strawberries_apples.png'
p6779
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6780
I2
sg6384
g6773
sg55
g11
sS'block_loop.thisTrial'
p6781
Nsg69
Vn
sS'block_loop.thisTrialN'
p6782
I0
sg39
F1.2501482517127442
sg34
g752
(S'\x07\xdf\n\x13\r\x1f$\x0c\x1d\x90'
tRp6783
sa(dp6784
S'trial_loop.thisTrialN'
p6785
I26
sg6370
g6660
sS'block_loop.thisIndex'
p6786
g6364
sg38
S'right'
p6787
sg58
g62
sS'trial_loop.thisN'
p6788
I26
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p6789
g59
(g98
S'\x1a\x00\x00\x00'
tRp6790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6791
I0
sg6379
g6668
sS'block_loop.thisRepN'
p6792
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6793
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p6794
Nsg69
Vn
sS'block_loop.thisTrialN'
p6795
I0
sg39
F0.8835648150779889
sg34
g752
(S'\x07\xdf\n\x13\r\x1f+\x01<h'
tRp6796
sa(dp6797
S'trial_loop.thisTrialN'
p6798
I27
sg6370
g6737
sS'block_loop.thisIndex'
p6799
g6364
sg38
S'right'
p6800
sg58
g62
sS'trial_loop.thisN'
p6801
I27
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p6802
g59
(g98
S'\x1b\x00\x00\x00'
tRp6803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6804
I0
sg6379
g6745
sS'block_loop.thisRepN'
p6805
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6806
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p6807
Nsg69
Vn
sS'block_loop.thisTrialN'
p6808
I0
sg39
F0.70012213660265843
sg34
g752
(S'\x07\xdf\n\x13\r\x1f0\x0f&\xe8'
tRp6809
sa(dp6810
S'trial_loop.thisTrialN'
p6811
I28
sg6370
g6754
sS'block_loop.thisIndex'
p6812
g6364
sg38
S'right'
p6813
sg58
g62
sS'trial_loop.thisN'
p6814
I28
sg33
g6630
sg63
g64
sS'trial_loop.thisIndex'
p6815
g59
(g98
S'\x1c\x00\x00\x00'
tRp6816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6817
I0
sg6379
g6761
sS'block_loop.thisRepN'
p6818
I2
sg6382
g6630
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6819
I2
sg6384
g6637
sg55
g11
sS'block_loop.thisTrial'
p6820
Nsg69
Vn
sS'block_loop.thisTrialN'
p6821
I0
sg39
F1.1668761197288404
sg34
g752
(S'\x07\xdf\n\x13\r\x1f6\x0b30'
tRp6822
sa(dp6823
S'trial_loop.thisTrialN'
p6824
I29
sg6370
g6581
sS'block_loop.thisIndex'
p6825
g6364
sg38
S'right'
p6826
sg58
g62
sS'trial_loop.thisN'
p6827
I29
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p6828
g59
(g98
S'\x1d\x00\x00\x00'
tRp6829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6830
I0
sg6379
g6589
sS'block_loop.thisRepN'
p6831
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6832
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p6833
Nsg69
Vn
sS'block_loop.thisTrialN'
p6834
I0
sg39
F0.81685724614544597
sg34
g752
(S'\x07\xdf\n\x13\r \x00\x0e%\x18'
tRp6835
sa(dp6836
S'trial_loop.thisTrialN'
p6837
I30
sg6370
S'8-liquorice_catherine_wheels.png'
p6838
sS'block_loop.thisIndex'
p6839
g6364
sg38
S'right'
p6840
sg58
g62
sS'trial_loop.thisN'
p6841
I30
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p6842
g59
(g98
S'\x1e\x00\x00\x00'
tRp6843
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6844
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p6845
sS'block_loop.thisRepN'
p6846
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6847
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p6848
Nsg69
Vn
sS'block_loop.thisTrialN'
p6849
I0
sg39
F0.81676743981734035
sg34
g752
(S'\x07\xdf\n\x13\r \x06\x0b\xdb('
tRp6850
sa(dp6851
S'trial_loop.thisTrialN'
p6852
I31
sg6370
g6371
sS'block_loop.thisIndex'
p6853
g6364
sg38
S'left'
p6854
sg58
g62
sS'trial_loop.thisN'
p6855
I31
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6856
g59
(g98
S'\x1f\x00\x00\x00'
tRp6857
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6858
I0
sg6379
g6380
sS'block_loop.thisRepN'
p6859
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6860
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6861
Nsg69
Vn
sS'block_loop.thisTrialN'
p6862
I0
sg39
F0.85021673260052921
sg34
g752
(S'\x07\xdf\n\x13\r \x0c\t\x95 '
tRp6863
sa(dp6864
S'trial_loop.thisTrialN'
p6865
I32
sg6370
S'18-mms.png'
p6866
sS'block_loop.thisIndex'
p6867
g6364
sg38
S'left'
p6868
sg58
g62
sS'trial_loop.thisN'
p6869
I32
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p6870
g59
(g98
S' \x00\x00\x00'
tRp6871
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6872
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p6873
sS'block_loop.thisRepN'
p6874
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6875
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p6876
Nsg69
Vn
sS'block_loop.thisTrialN'
p6877
I0
sg39
F0.9168715581381548
sg34
g752
(S'\x07\xdf\n\x13\r \x12\x07\xc4H'
tRp6878
sa(dp6879
S'trial_loop.thisTrialN'
p6880
I33
sg6370
S'6-sour_patch_kids.png'
p6881
sS'block_loop.thisIndex'
p6882
g6364
sg38
S'right'
p6883
sg58
g62
sS'trial_loop.thisN'
p6884
I33
sg33
S'38-maltesers.png'
p6885
sg63
g64
sS'trial_loop.thisIndex'
p6886
g59
(g98
S'!\x00\x00\x00'
tRp6887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6888
I0
sg6379
S'38-maltesers.png'
p6889
sS'block_loop.thisRepN'
p6890
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6891
I2
sg6384
S'6-sour_patch_kids.png'
p6892
sg55
g11
sS'block_loop.thisTrial'
p6893
Nsg69
Vn
sS'block_loop.thisTrialN'
p6894
I0
sg39
F0.61662278035873896
sg34
g752
(S'\x07\xdf\n\x13\r \x18\x07$ '
tRp6895
sa(dp6896
S'trial_loop.thisTrialN'
p6897
I34
sg6370
S'25-kitkat.png'
p6898
sS'block_loop.thisIndex'
p6899
g6364
sg38
S'left'
p6900
sg58
g62
sS'trial_loop.thisN'
p6901
I34
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p6902
g59
(g98
S'"\x00\x00\x00'
tRp6903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6904
I0
sg6379
S'31-hobnobs.png'
p6905
sS'block_loop.thisRepN'
p6906
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6907
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p6908
Nsg69
Vn
sS'block_loop.thisTrialN'
p6909
I0
sg39
F1.1667706329317298
sg34
g752
(S'\x07\xdf\n\x13\r \x1e\x01\xc18'
tRp6910
sa(dp6911
S'trial_loop.thisTrialN'
p6912
I35
sg6370
g6611
sS'block_loop.thisIndex'
p6913
g6364
sg38
S'right'
p6914
sg58
g62
sS'trial_loop.thisN'
p6915
I35
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p6916
g59
(g98
S'#\x00\x00\x00'
tRp6917
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6918
I0
sg6379
g6618
sS'block_loop.thisRepN'
p6919
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6920
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p6921
Nsg69
Vn
sS'block_loop.thisTrialN'
p6922
I0
sg39
F0.71678363346836704
sg34
g752
(S'\x07\xdf\n\x13\r $\x04\xb3 '
tRp6923
sa(dp6924
S'trial_loop.thisTrialN'
p6925
I36
sg6370
g6643
sS'block_loop.thisIndex'
p6926
g6364
sg38
S'left'
p6927
sg58
g62
sS'trial_loop.thisN'
p6928
I36
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p6929
g59
(g98
S'$\x00\x00\x00'
tRp6930
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6931
I0
sg6379
g6651
sS'block_loop.thisRepN'
p6932
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6933
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p6934
Nsg69
Vn
sS'block_loop.thisTrialN'
p6935
I0
sg39
F1.0500939687772188
sg34
g752
(S'\x07\xdf\n\x13\r *\x00\xfd\xe8'
tRp6936
sa(dp6937
S'trial_loop.thisTrialN'
p6938
I37
sg6370
S'7-olives.png'
p6939
sS'block_loop.thisIndex'
p6940
g6364
sg38
S'right'
p6941
sg58
g62
sS'trial_loop.thisN'
p6942
I37
sg33
S'22-daim.png'
p6943
sg63
g64
sS'trial_loop.thisIndex'
p6944
g59
(g98
S'%\x00\x00\x00'
tRp6945
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6946
I0
sg6379
S'22-daim.png'
p6947
sS'block_loop.thisRepN'
p6948
I2
sg6382
S'7-olives.png'
p6949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6950
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p6951
Nsg69
Vn
sS'block_loop.thisTrialN'
p6952
I0
sg39
F0.68355671825338504
sg34
g752
(S'\x07\xdf\n\x13\r 0\x02F\x08'
tRp6953
sa(dp6954
S'trial_loop.thisTrialN'
p6955
I38
sg6370
g6737
sS'block_loop.thisIndex'
p6956
g6364
sg38
S'right'
p6957
sg58
g62
sS'trial_loop.thisN'
p6958
I38
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p6959
g59
(g98
S'&\x00\x00\x00'
tRp6960
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6961
I0
sg6379
g6745
sS'block_loop.thisRepN'
p6962
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6963
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p6964
Nsg69
Vn
sS'block_loop.thisTrialN'
p6965
I0
sg39
F0.63350437399640214
sg34
g752
(S'\x07\xdf\n\x13\r 5\r\x17\x90'
tRp6966
sa(dp6967
S'trial_loop.thisTrialN'
p6968
I39
sg6370
g6506
sS'block_loop.thisIndex'
p6969
g6364
sg38
S'left'
p6970
sg58
g62
sS'trial_loop.thisN'
p6971
I39
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p6972
g59
(g98
S"'\x00\x00\x00"
tRp6973
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6974
I0
sg6379
g6514
sS'block_loop.thisRepN'
p6975
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6976
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p6977
Nsg69
Vn
sS'block_loop.thisTrialN'
p6978
I0
sg39
F0.91666229514157749
sg34
g752
(S'\x07\xdf\n\x13\r ;\x07\xf3('
tRp6979
sa(dp6980
S'trial_loop.thisTrialN'
p6981
I40
sg6370
g6489
sS'block_loop.thisIndex'
p6982
g6364
sg38
S'right'
p6983
sg58
g62
sS'trial_loop.thisN'
p6984
I40
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p6985
g59
(g98
S'(\x00\x00\x00'
tRp6986
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6987
I0
sg6379
g6497
sS'block_loop.thisRepN'
p6988
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6989
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p6990
Nsg69
Vn
sS'block_loop.thisTrialN'
p6991
I0
sg39
F1.4334845880930516
sg34
g752
(S'\x07\xdf\n\x13\r!\x05\x07S\x00'
tRp6992
sa(dp6993
S'trial_loop.thisTrialN'
p6994
I41
sg6370
S'38-maltesers.png'
p6995
sS'block_loop.thisIndex'
p6996
g6364
sg38
S'left'
p6997
sg58
g62
sS'trial_loop.thisN'
p6998
I41
sg33
g6885
sg63
g64
sS'trial_loop.thisIndex'
p6999
g59
(g98
S')\x00\x00\x00'
tRp7000
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7001
I0
sg6379
S'6-sour_patch_kids.png'
p7002
sS'block_loop.thisRepN'
p7003
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7004
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p7005
Nsg69
Vn
sS'block_loop.thisTrialN'
p7006
I0
sg39
F0.94994394944842497
sg34
g752
(S'\x07\xdf\n\x13\r!\x0b\x0eS\xf8'
tRp7007
sa(dp7008
S'trial_loop.thisTrialN'
p7009
I42
sg6370
S'48-twix.png'
p7010
sS'block_loop.thisIndex'
p7011
g6364
sg38
S'left'
p7012
sg58
g62
sS'trial_loop.thisN'
p7013
I42
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p7014
g59
(g98
S'*\x00\x00\x00'
tRp7015
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7016
I0
sg6379
S'50-polo.png'
p7017
sS'block_loop.thisRepN'
p7018
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7019
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p7020
Nsg69
Vn
sS'block_loop.thisTrialN'
p7021
I0
sg39
F0.85011067560481024
sg34
g752
(S'\x07\xdf\n\x13\r!\x11\x0e,\xe8'
tRp7022
sa(dp7023
S'trial_loop.thisTrialN'
p7024
I43
sg6370
g6898
sS'block_loop.thisIndex'
p7025
g6364
sg38
S'left'
p7026
sg58
g62
sS'trial_loop.thisN'
p7027
I43
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7028
g59
(g98
S'+\x00\x00\x00'
tRp7029
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7030
I0
sg6379
g6905
sS'block_loop.thisRepN'
p7031
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7032
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7033
Nsg69
Vn
sS'block_loop.thisTrialN'
p7034
I0
sg39
F0.80017066053005692
sg34
g752
(S'\x07\xdf\n\x13\r!\x17\x0c\\\x10'
tRp7035
sa(dp7036
S'trial_loop.thisTrialN'
p7037
I44
sg6370
g6838
sS'block_loop.thisIndex'
p7038
g6364
sg38
S'right'
p7039
sg58
g62
sS'trial_loop.thisN'
p7040
I44
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p7041
g59
(g98
S',\x00\x00\x00'
tRp7042
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7043
I0
sg6379
g6845
sS'block_loop.thisRepN'
p7044
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7045
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p7046
Nsg69
Vn
sS'block_loop.thisTrialN'
p7047
I0
sg39
F1.3334226644947194
sg34
g752
(S'\x07\xdf\n\x13\r!\x1d\t\xd7\x88'
tRp7048
sa(dp7049
S'trial_loop.thisTrialN'
p7050
I45
sg6370
g6660
sS'block_loop.thisIndex'
p7051
g6364
sg38
S'left'
p7052
sg58
g62
sS'trial_loop.thisN'
p7053
I45
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p7054
g59
(g98
S'-\x00\x00\x00'
tRp7055
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7056
I0
sg6379
g6668
sS'block_loop.thisRepN'
p7057
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7058
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p7059
Nsg69
Vn
sS'block_loop.thisTrialN'
p7060
I0
sg39
F0.56687777330444078
sg34
g752
(S"\x07\xdf\n\x13\r!$\x00'\x10"
tRp7061
sa(dp7062
S'trial_loop.thisTrialN'
p7063
I46
sg6370
g6506
sS'block_loop.thisIndex'
p7064
g6364
sg38
S'left'
p7065
sg58
g62
sS'trial_loop.thisN'
p7066
I46
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p7067
g59
(g98
S'.\x00\x00\x00'
tRp7068
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7069
I0
sg6379
g6514
sS'block_loop.thisRepN'
p7070
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7071
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p7072
Nsg69
Vn
sS'block_loop.thisTrialN'
p7073
I0
sg39
F0.88342283555357426
sg34
g752
(S'\x07\xdf\n\x13\r!)\tN\xd0'
tRp7074
sa(dp7075
S'trial_loop.thisTrialN'
p7076
I47
sg6370
g6611
sS'block_loop.thisIndex'
p7077
g6364
sg38
S'right'
p7078
sg58
g62
sS'trial_loop.thisN'
p7079
I47
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p7080
g59
(g98
S'/\x00\x00\x00'
tRp7081
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7082
I0
sg6379
g6618
sS'block_loop.thisRepN'
p7083
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7084
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7085
Nsg69
Vn
sS'block_loop.thisTrialN'
p7086
I0
sg39
F0.88352262035914464
sg34
g752
(S'\x07\xdf\n\x13\r!/\x07\xf7\x10'
tRp7087
sa(dp7088
S'trial_loop.thisTrialN'
p7089
I48
sg6370
S'40-sardines.png'
p7090
sS'block_loop.thisIndex'
p7091
g6364
sg38
S'right'
p7092
sg58
g62
sS'trial_loop.thisN'
p7093
I48
sg33
g6701
sg63
g64
sS'trial_loop.thisIndex'
p7094
g59
(g98
S'0\x00\x00\x00'
tRp7095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7096
I0
sg6379
S'5-pineapple.png'
p7097
sS'block_loop.thisRepN'
p7098
I2
sg6382
g6694
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7099
I2
sg6384
g6701
sg55
g11
sS'block_loop.thisTrial'
p7100
Nsg69
Vn
sS'block_loop.thisTrialN'
p7101
I0
sg39
F0.63354827931107138
sg34
g752
(S'\x07\xdf\n\x13\r!5\x06\xdd\xd0'
tRp7102
sa(dp7103
S'trial_loop.thisTrialN'
p7104
I49
sg6370
S'20-fruit_pastilles.png'
p7105
sS'block_loop.thisIndex'
p7106
g6364
sg38
S'left'
p7107
sg58
g62
sS'trial_loop.thisN'
p7108
I49
sg33
g6533
sg63
g64
sS'trial_loop.thisIndex'
p7109
g59
(g98
S'1\x00\x00\x00'
tRp7110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7111
I0
sg6379
S'2-steamed_puddings.png'
p7112
sS'block_loop.thisRepN'
p7113
I2
sg6382
g6533
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7114
I2
sg6384
g6527
sg55
g11
sS'block_loop.thisTrial'
p7115
Nsg69
Vn
sS'block_loop.thisTrialN'
p7116
I0
sg39
F2.4667901907541818
sg34
g752
(S'\x07\xdf\n\x13\r!;\x01\xb9h'
tRp7117
sa(dp7118
S'trial_loop.thisTrialN'
p7119
I50
sg6370
S'1-treacle_cookies.png'
p7120
sS'block_loop.thisIndex'
p7121
g6364
sg38
S'right'
p7122
sg58
g62
sS'trial_loop.thisN'
p7123
I50
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p7124
g59
(g98
S'2\x00\x00\x00'
tRp7125
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7126
I0
sg6379
S'21-nakd_banana_crunch.png'
p7127
sS'block_loop.thisRepN'
p7128
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7129
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p7130
Nsg69
Vn
sS'block_loop.thisTrialN'
p7131
I0
sg39
F1.1335331690406747
sg34
g752
(S'\x07\xdf\n\x13\r"\x06\tj('
tRp7132
sa(dp7133
S'trial_loop.thisTrialN'
p7134
I51
sg6370
g6660
sS'block_loop.thisIndex'
p7135
g6364
sg38
S'right'
p7136
sg58
g62
sS'trial_loop.thisN'
p7137
I51
sg33
g6671
sg63
g64
sS'trial_loop.thisIndex'
p7138
g59
(g98
S'3\x00\x00\x00'
tRp7139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7140
I0
sg6379
g6668
sS'block_loop.thisRepN'
p7141
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7142
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p7143
Nsg69
Vn
sS'block_loop.thisTrialN'
p7144
I0
sg39
F1.4001057148743712
sg34
g752
(S'\x07\xdf\n\x13\r"\x0c\x0b\xe2\xf8'
tRp7145
sa(dp7146
S'trial_loop.thisTrialN'
p7147
I52
sg6370
g6425
sS'block_loop.thisIndex'
p7148
g6364
sg38
S'left'
p7149
sg58
g62
sS'trial_loop.thisN'
p7150
I52
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p7151
g59
(g98
S'4\x00\x00\x00'
tRp7152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7153
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7154
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7155
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7156
Nsg69
Vn
sS'block_loop.thisTrialN'
p7157
I0
sg39
F2.0335137252568529
sg34
g752
(S'\x07\xdf\n\x13\r"\x13\x03$\xb0'
tRp7158
sa(dp7159
S'trial_loop.thisTrialN'
p7160
I53
sg6370
g6408
sS'block_loop.thisIndex'
p7161
g6364
sg38
S'left'
p7162
sg58
g62
sS'trial_loop.thisN'
p7163
I53
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p7164
g59
(g98
S'5\x00\x00\x00'
tRp7165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7166
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7167
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7168
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7169
Nsg69
Vn
sS'block_loop.thisTrialN'
p7170
I0
sg39
F0.93391594356035057
sg34
g752
(S'\x07\xdf\n\x13\r"\x1a\x04*h'
tRp7171
sa(dp7172
S'trial_loop.thisTrialN'
p7173
I54
sg6370
g6425
sS'block_loop.thisIndex'
p7174
g6364
sg38
S'left'
p7175
sg58
g62
sS'trial_loop.thisN'
p7176
I54
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p7177
g59
(g98
S'6\x00\x00\x00'
tRp7178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7179
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7180
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7181
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7182
Nsg69
Vn
sS'block_loop.thisTrialN'
p7183
I0
sg39
F0.85019877133527189
sg34
g752
(S'\x07\xdf\n\x13\r" \x03\xc8\xc0'
tRp7184
sa(dp7185
S'trial_loop.thisTrialN'
p7186
I55
sg6370
g6939
sS'block_loop.thisIndex'
p7187
g6364
sg38
S'left'
p7188
sg58
g62
sS'trial_loop.thisN'
p7189
I55
sg33
g6943
sg63
g64
sS'trial_loop.thisIndex'
p7190
g59
(g98
S'7\x00\x00\x00'
tRp7191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7192
I0
sg6379
g6947
sS'block_loop.thisRepN'
p7193
I2
sg6382
g6949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7194
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p7195
Nsg69
Vn
sS'block_loop.thisTrialN'
p7196
I0
sg39
F1.6667957216850482
sg34
g752
(S'\x07\xdf\n\x13\r"&\x01\xf7\xe8'
tRp7197
sa(dp7198
S'trial_loop.thisTrialN'
p7199
I56
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p7200
sS'block_loop.thisIndex'
p7201
g6364
sg38
S'right'
p7202
sg58
g62
sS'trial_loop.thisN'
p7203
I56
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p7204
g59
(g98
S'8\x00\x00\x00'
tRp7205
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7206
I0
sg6379
S'36-fig_rolls.png'
p7207
sS'block_loop.thisRepN'
p7208
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7209
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7210
Nsg69
Vn
sS'block_loop.thisTrialN'
p7211
I0
sg39
F0.71687600568839116
sg34
g752
(S'\x07\xdf\n\x13\r",\x0c\x87\x08'
tRp7212
sa(dp7213
S'trial_loop.thisTrialN'
p7214
I57
sg6370
g6506
sS'block_loop.thisIndex'
p7215
g6364
sg38
S'left'
p7216
sg58
g62
sS'trial_loop.thisN'
p7217
I57
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p7218
g59
(g98
S'9\x00\x00\x00'
tRp7219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7220
I0
sg6379
g6514
sS'block_loop.thisRepN'
p7221
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7222
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p7223
Nsg69
Vn
sS'block_loop.thisTrialN'
p7224
I0
sg39
F0.81677741830026207
sg34
g752
(S'\x07\xdf\n\x13\r"2\x08\xd1\xd0'
tRp7225
sa(dp7226
S'trial_loop.thisTrialN'
p7227
I58
sg6370
g6690
sS'block_loop.thisIndex'
p7228
g6364
sg38
S'left'
p7229
sg58
g62
sS'trial_loop.thisN'
p7230
I58
sg33
g6694
sg63
g64
sS'trial_loop.thisIndex'
p7231
g59
(g98
S':\x00\x00\x00'
tRp7232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7233
I0
sg6379
g6698
sS'block_loop.thisRepN'
p7234
I2
sg6382
g6694
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7235
I2
sg6384
g6701
sg55
g11
sS'block_loop.thisTrial'
p7236
Nsg69
Vn
sS'block_loop.thisTrialN'
p7237
I0
sg39
F0.80019831517529383
sg34
g752
(S'\x07\xdf\n\x13\r"8\x06\x87\xe0'
tRp7238
sa(dp7239
S'trial_loop.thisTrialN'
p7240
I59
sg6370
g6898
sS'block_loop.thisIndex'
p7241
g6364
sg38
S'left'
p7242
sg58
g62
sS'trial_loop.thisN'
p7243
I59
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7244
g59
(g98
S';\x00\x00\x00'
tRp7245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7246
I0
sg6379
g6905
sS'block_loop.thisRepN'
p7247
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7248
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7249
Nsg69
Vn
sS'block_loop.thisTrialN'
p7250
I0
sg39
F0.88344450311160472
sg34
g752
(S'\x07\xdf\n\x13\r#\x02\x03\xffp'
tRp7251
sa(dp7252
S'trial_loop.thisTrialN'
p7253
I60
sg6370
g7090
sS'block_loop.thisIndex'
p7254
g6364
sg38
S'right'
p7255
sg58
g62
sS'trial_loop.thisN'
p7256
I60
sg33
g6701
sg63
g64
sS'trial_loop.thisIndex'
p7257
g59
(g98
S'<\x00\x00\x00'
tRp7258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7259
I0
sg6379
g7097
sS'block_loop.thisRepN'
p7260
I2
sg6382
g6694
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7261
I2
sg6384
g6701
sg55
g11
sS'block_loop.thisTrial'
p7262
Nsg69
Vn
sS'block_loop.thisTrialN'
p7263
I0
sg39
F0.56683956997767382
sg34
g752
(S'\x07\xdf\n\x13\r#\x08\x02\xab\x98'
tRp7264
sa(dp7265
S'trial_loop.thisTrialN'
p7266
I61
sg6370
S'30-spaghetti_hoops.png'
p7267
sS'block_loop.thisIndex'
p7268
g6364
sg38
S'right'
p7269
sg58
g62
sS'trial_loop.thisN'
p7270
I61
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7271
g59
(g98
S'=\x00\x00\x00'
tRp7272
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7273
I0
sg6379
S'19-caramello_redo.png'
p7274
sS'block_loop.thisRepN'
p7275
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7276
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7277
Nsg69
Vn
sS'block_loop.thisTrialN'
p7278
I0
sg39
F0.81677143121123663
sg34
g752
(S'\x07\xdf\n\x13\r#\r\x0b\xd3X'
tRp7279
sa(dp7280
S'trial_loop.thisTrialN'
p7281
I62
sg6370
g7200
sS'block_loop.thisIndex'
p7282
g6364
sg38
S'right'
p7283
sg58
g62
sS'trial_loop.thisN'
p7284
I62
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7285
g59
(g98
S'>\x00\x00\x00'
tRp7286
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7287
I0
sg6379
g7207
sS'block_loop.thisRepN'
p7288
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7289
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7290
Nsg69
Vn
sS'block_loop.thisTrialN'
p7291
I0
sg39
F0.98331084849087347
sg34
g752
(S'\x07\xdf\n\x13\r#\x13\t\x89h'
tRp7292
sa(dp7293
S'trial_loop.thisTrialN'
p7294
I63
sg6370
S'16-skips_prawn.png'
p7295
sS'block_loop.thisIndex'
p7296
g6364
sg38
S'right'
p7297
sg58
g62
sS'trial_loop.thisN'
p7298
I63
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p7299
g59
(g98
S'?\x00\x00\x00'
tRp7300
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7301
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p7302
sS'block_loop.thisRepN'
p7303
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7304
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p7305
Nsg69
Vn
sS'block_loop.thisTrialN'
p7306
I0
sg39
F0.76650469216656347
sg34
g752
(S'\x07\xdf\n\x13\r#\x19\t\xdfX'
tRp7307
sa(dp7308
S'trial_loop.thisTrialN'
p7309
I64
sg6370
g6866
sS'block_loop.thisIndex'
p7310
g6364
sg38
S'left'
p7311
sg58
g62
sS'trial_loop.thisN'
p7312
I64
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p7313
g59
(g98
S'@\x00\x00\x00'
tRp7314
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7315
I0
sg6379
g6873
sS'block_loop.thisRepN'
p7316
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7317
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p7318
Nsg69
Vn
sS'block_loop.thisTrialN'
p7319
I0
sg39
F0.63356224918425141
sg34
g752
(S'\x07\xdf\n\x13\r#\x1f\x06\xdd\xd0'
tRp7320
sa(dp7321
S'trial_loop.thisTrialN'
p7322
I65
sg6370
S'22-daim.png'
p7323
sS'block_loop.thisIndex'
p7324
g6364
sg38
S'right'
p7325
sg58
g62
sS'trial_loop.thisN'
p7326
I65
sg33
g6949
sg63
g64
sS'trial_loop.thisIndex'
p7327
g59
(g98
S'A\x00\x00\x00'
tRp7328
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7329
I0
sg6379
S'7-olives.png'
p7330
sS'block_loop.thisRepN'
p7331
I2
sg6382
g6949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7332
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p7333
Nsg69
Vn
sS'block_loop.thisTrialN'
p7334
I0
sg39
F0.86677473836425634
sg34
g752
(S'\x07\xdf\n\x13\r#%\x01\xb9h'
tRp7335
sa(dp7336
S'trial_loop.thisTrialN'
p7337
I66
sg6370
g7200
sS'block_loop.thisIndex'
p7338
g6364
sg38
S'right'
p7339
sg58
g62
sS'trial_loop.thisN'
p7340
I66
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p7341
g59
(g98
S'B\x00\x00\x00'
tRp7342
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7343
I0
sg6379
g7207
sS'block_loop.thisRepN'
p7344
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7345
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7346
Nsg69
Vn
sS'block_loop.thisTrialN'
p7347
I0
sg39
F0.98344085383905622
sg34
g752
(S'\x07\xdf\n\x13\r#+\x00#('
tRp7348
sa(dp7349
S'trial_loop.thisTrialN'
p7350
I67
sg6370
g6995
sS'block_loop.thisIndex'
p7351
g6364
sg38
S'left'
p7352
sg58
g62
sS'trial_loop.thisN'
p7353
I67
sg33
g6892
sg63
g64
sS'trial_loop.thisIndex'
p7354
g59
(g98
S'C\x00\x00\x00'
tRp7355
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7356
I0
sg6379
g7002
sS'block_loop.thisRepN'
p7357
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7358
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p7359
Nsg69
Vn
sS'block_loop.thisTrialN'
p7360
I0
sg39
F0.69985072192866937
sg34
g752
(S'\x07\xdf\n\x13\r#1\x00y\x18'
tRp7361
sa(dp7362
S'trial_loop.thisTrialN'
p7363
I68
sg6370
g6442
sS'block_loop.thisIndex'
p7364
g6364
sg38
S'left'
p7365
sg58
g62
sS'trial_loop.thisN'
p7366
I68
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7367
g59
(g98
S'D\x00\x00\x00'
tRp7368
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7369
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7370
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7371
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7372
Nsg69
Vn
sS'block_loop.thisTrialN'
p7373
I0
sg39
F1.0167832343286136
sg34
g752
(S'\x07\xdf\n\x13\r#6\x0b\x89 '
tRp7374
sa(dp7375
S'trial_loop.thisTrialN'
p7376
I69
sg6370
g7295
sS'block_loop.thisIndex'
p7377
g6364
sg38
S'right'
p7378
sg58
g62
sS'trial_loop.thisN'
p7379
I69
sg33
g6517
sg63
g64
sS'trial_loop.thisIndex'
p7380
g59
(g98
S'E\x00\x00\x00'
tRp7381
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7382
I0
sg6379
g7302
sS'block_loop.thisRepN'
p7383
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7384
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p7385
Nsg69
Vn
sS'block_loop.thisTrialN'
p7386
I0
sg39
F1.1833064009388181
sg34
g752
(S'\x07\xdf\n\x13\r$\x00\x0cX('
tRp7387
sa(dp7388
S'trial_loop.thisTrialN'
p7389
I70
sg6370
g6626
sS'block_loop.thisIndex'
p7390
g6364
sg38
S'left'
p7391
sg58
g62
sS'trial_loop.thisN'
p7392
I70
sg33
g6637
sg63
g64
sS'trial_loop.thisIndex'
p7393
g59
(g98
S'F\x00\x00\x00'
tRp7394
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7395
I0
sg6379
g6634
sS'block_loop.thisRepN'
p7396
I2
sg6382
g6630
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7397
I2
sg6384
g6637
sg55
g11
sS'block_loop.thisTrial'
p7398
Nsg69
Vn
sS'block_loop.thisTrialN'
p7399
I0
sg39
F0.85021274120845192
sg34
g752
(S'\x07\xdf\n\x13\r$\x07\x00FP'
tRp7400
sa(dp7401
S'trial_loop.thisTrialN'
p7402
I71
sg6370
g7010
sS'block_loop.thisIndex'
p7403
g6364
sg38
S'left'
p7404
sg58
g62
sS'trial_loop.thisN'
p7405
I71
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p7406
g59
(g98
S'G\x00\x00\x00'
tRp7407
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7408
I0
sg6379
g7017
sS'block_loop.thisRepN'
p7409
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7410
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p7411
Nsg69
Vn
sS'block_loop.thisTrialN'
p7412
I0
sg39
F1.0168798830418382
sg34
g752
(S'\x07\xdf\n\x13\r$\x0c\r\xf68'
tRp7413
sa(dp7414
S'trial_loop.thisTrialN'
p7415
I72
sg6370
S'41-peanuts_redo.png'
p7416
sS'block_loop.thisIndex'
p7417
g6364
sg38
S'right'
p7418
sg58
g62
sS'trial_loop.thisN'
p7419
I72
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p7420
g59
(g98
S'H\x00\x00\x00'
tRp7421
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7422
I0
sg6379
S'45-chewy_nougat_redo.png'
p7423
sS'block_loop.thisRepN'
p7424
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7425
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p7426
Nsg69
Vn
sS'block_loop.thisTrialN'
p7427
I0
sg39
F0.66672986370940635
sg34
g752
(S'\x07\xdf\n\x13\r$\x12\x0e\x86\xc0'
tRp7428
sa(dp7429
S'trial_loop.thisTrialN'
p7430
I73
sg6370
g6459
sS'block_loop.thisIndex'
p7431
g6364
sg38
S'right'
p7432
sg58
g62
sS'trial_loop.thisN'
p7433
I73
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7434
g59
(g98
S'I\x00\x00\x00'
tRp7435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7436
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7437
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7438
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7439
Nsg69
Vn
sS'block_loop.thisTrialN'
p7440
I0
sg39
F5.350080740163321
sg34
g752
(S'\x07\xdf\n\x13\r$\x18\n\x19\xf0'
tRp7441
sa(dp7442
S'trial_loop.thisTrialN'
p7443
I74
sg6370
g6581
sS'block_loop.thisIndex'
p7444
g6364
sg38
S'right'
p7445
sg58
g62
sS'trial_loop.thisN'
p7446
I74
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p7447
g59
(g98
S'J\x00\x00\x00'
tRp7448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7449
I0
sg6379
g6589
sS'block_loop.thisRepN'
p7450
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7451
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p7452
Nsg69
Vn
sS'block_loop.thisTrialN'
p7453
I0
sg39
F1.3671305424759339
sg34
g752
(S'\x07\xdf\n\x13\r$#\x00\x8c\xa0'
tRp7454
sa(dp7455
S'trial_loop.thisTrialN'
p7456
I75
sg6370
g6898
sS'block_loop.thisIndex'
p7457
g6364
sg38
S'right'
p7458
sg58
g62
sS'trial_loop.thisN'
p7459
I75
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7460
g59
(g98
S'K\x00\x00\x00'
tRp7461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7462
I0
sg6379
g6905
sS'block_loop.thisRepN'
p7463
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7464
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7465
Nsg69
Vn
sS'block_loop.thisTrialN'
p7466
I0
sg39
F1.5668515441557247
sg34
g752
(S'\x07\xdf\n\x13\r$)\x06\xd2\x18'
tRp7467
sa(dp7468
S'trial_loop.thisTrialN'
p7469
I76
sg6370
g6939
sS'block_loop.thisIndex'
p7470
g6364
sg38
S'left'
p7471
sg58
g62
sS'trial_loop.thisN'
p7472
I76
sg33
g6949
sg63
g64
sS'trial_loop.thisIndex'
p7473
g59
(g98
S'L\x00\x00\x00'
tRp7474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7475
I0
sg6379
g6947
sS'block_loop.thisRepN'
p7476
I2
sg6382
g6949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7477
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p7478
Nsg69
Vn
sS'block_loop.thisTrialN'
p7479
I0
sg39
F1.0335282653304603
sg34
g752
(S'\x07\xdf\n\x13\r$0\x00\xb3\xb0'
tRp7480
sa(dp7481
S'trial_loop.thisTrialN'
p7482
I77
sg6370
g6769
sS'block_loop.thisIndex'
p7483
g6364
sg38
S'right'
p7484
sg58
g62
sS'trial_loop.thisN'
p7485
I77
sg33
g6779
sg63
g64
sS'trial_loop.thisIndex'
p7486
g59
(g98
S'M\x00\x00\x00'
tRp7487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7488
I0
sg6379
g6777
sS'block_loop.thisRepN'
p7489
I2
sg6382
g6779
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7490
I2
sg6384
g6773
sg55
g11
sS'block_loop.thisTrial'
p7491
Nsg69
Vn
sS'block_loop.thisTrialN'
p7492
I0
sg39
F0.91677091803285293
sg34
g752
(S'\x07\xdf\n\x13\r$6\x01\xbdP'
tRp7493
sa(dp7494
S'trial_loop.thisTrialN'
p7495
I78
sg6370
S'33-ambrosia_rice.png'
p7496
sS'block_loop.thisIndex'
p7497
g6364
sg38
S'left'
p7498
sg58
g62
sS'trial_loop.thisN'
p7499
I78
sg33
S'33-ambrosia_rice.png'
p7500
sg63
g64
sS'trial_loop.thisIndex'
p7501
g59
(g98
S'N\x00\x00\x00'
tRp7502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7503
I0
sg6379
S'23-crunchie_redo.png'
p7504
sS'block_loop.thisRepN'
p7505
I2
sg6382
g7500
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7506
I2
sg6384
S'23-crunchie_redo.png'
p7507
sg55
g11
sS'block_loop.thisTrial'
p7508
Nsg69
Vn
sS'block_loop.thisTrialN'
p7509
I0
sg39
F1.4834385730428039
sg34
g752
(S'\x07\xdf\n\x13\r%\x00\x00\xe2\x90'
tRp7510
sa(dp7511
S'trial_loop.thisTrialN'
p7512
I79
sg6370
g6754
sS'block_loop.thisIndex'
p7513
g6364
sg38
S'right'
p7514
sg58
g62
sS'trial_loop.thisN'
p7515
I79
sg33
g6630
sg63
g64
sS'trial_loop.thisIndex'
p7516
g59
(g98
S'O\x00\x00\x00'
tRp7517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7518
I0
sg6379
g6761
sS'block_loop.thisRepN'
p7519
I2
sg6382
g6630
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7520
I2
sg6384
g6637
sg55
g11
sS'block_loop.thisTrial'
p7521
Nsg69
Vn
sS'block_loop.thisTrialN'
p7522
I0
sg39
F0.71677764637752261
sg34
g752
(S'\x07\xdf\n\x13\r%\x06\x08\xd5\xb8'
tRp7523
sa(dp7524
S'trial_loop.thisTrialN'
p7525
I80
sg6370
g7323
sS'block_loop.thisIndex'
p7526
g6364
sg38
S'right'
p7527
sg58
g62
sS'trial_loop.thisN'
p7528
I80
sg33
g6943
sg63
g64
sS'trial_loop.thisIndex'
p7529
g59
(g98
S'P\x00\x00\x00'
tRp7530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7531
I0
sg6379
g7330
sS'block_loop.thisRepN'
p7532
I2
sg6382
g6949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7533
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p7534
Nsg69
Vn
sS'block_loop.thisTrialN'
p7535
I0
sg39
F0.68343897218255734
sg34
g752
(S'\x07\xdf\n\x13\r%\x0c\x04\xe2\x00'
tRp7536
sa(dp7537
S'trial_loop.thisTrialN'
p7538
I81
sg6370
S'26-walkers_smoky_bacon.png'
p7539
sS'block_loop.thisIndex'
p7540
g6364
sg38
S'right'
p7541
sg58
g62
sS'trial_loop.thisN'
p7542
I81
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p7543
g59
(g98
S'Q\x00\x00\x00'
tRp7544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7545
I0
sg6379
S'44-crunch.png'
p7546
sS'block_loop.thisRepN'
p7547
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7548
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7549
Nsg69
Vn
sS'block_loop.thisTrialN'
p7550
I0
sg39
F1.1167576323969115
sg34
g752
(S'\x07\xdf\n\x13\r%\x12\x00\xaf\xc8'
tRp7551
sa(dp7552
S'trial_loop.thisTrialN'
p7553
I82
sg6370
g6838
sS'block_loop.thisIndex'
p7554
g6364
sg38
S'right'
p7555
sg58
g62
sS'trial_loop.thisN'
p7556
I82
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p7557
g59
(g98
S'R\x00\x00\x00'
tRp7558
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7559
I0
sg6379
g6845
sS'block_loop.thisRepN'
p7560
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7561
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p7562
Nsg69
Vn
sS'block_loop.thisTrialN'
p7563
I0
sg39
F0.71691706001001876
sg34
g752
(S'\x07\xdf\n\x13\r%\x18\x02\xea\x18'
tRp7564
sa(dp7565
S'trial_loop.thisTrialN'
p7566
I83
sg6370
g7105
sS'block_loop.thisIndex'
p7567
g6364
sg38
S'left'
p7568
sg58
g62
sS'trial_loop.thisN'
p7569
I83
sg33
g6533
sg63
g64
sS'trial_loop.thisIndex'
p7570
g59
(g98
S'S\x00\x00\x00'
tRp7571
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7572
I0
sg6379
g7112
sS'block_loop.thisRepN'
p7573
I2
sg6382
g6533
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7574
I2
sg6384
g6527
sg55
g11
sS'block_loop.thisTrial'
p7575
Nsg69
Vn
sS'block_loop.thisTrialN'
p7576
I0
sg39
F0.86679355492742616
sg34
g752
(S'\x07\xdf\n\x13\r%\x1d\x0ew '
tRp7577
sa(dp7578
S'trial_loop.thisTrialN'
p7579
I84
sg6370
S'3-ellas_strawberries_apples.png'
p7580
sS'block_loop.thisIndex'
p7581
g6364
sg38
S'left'
p7582
sg58
g62
sS'trial_loop.thisN'
p7583
I84
sg33
g6779
sg63
g64
sS'trial_loop.thisIndex'
p7584
g59
(g98
S'T\x00\x00\x00'
tRp7585
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7586
I0
sg6379
S'13-mccoys_steak_crisps.png'
p7587
sS'block_loop.thisRepN'
p7588
I2
sg6382
g6779
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7589
I2
sg6384
g6773
sg55
g11
sS'block_loop.thisTrial'
p7590
Nsg69
Vn
sS'block_loop.thisTrialN'
p7591
I0
sg39
F0.98353607705394097
sg34
g752
(S'\x07\xdf\n\x13\r%#\x0c\xe0\xe0'
tRp7592
sa(dp7593
S'trial_loop.thisTrialN'
p7594
I85
sg6370
g7416
sS'block_loop.thisIndex'
p7595
g6364
sg38
S'left'
p7596
sg58
g62
sS'trial_loop.thisN'
p7597
I85
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p7598
g59
(g98
S'U\x00\x00\x00'
tRp7599
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7600
I0
sg6379
g7423
sS'block_loop.thisRepN'
p7601
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7602
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p7603
Nsg69
Vn
sS'block_loop.thisTrialN'
p7604
I0
sg39
F0.8335432615604077
sg34
g752
(S'\x07\xdf\n\x13\r%)\x0c\xf8P'
tRp7605
sa(dp7606
S'trial_loop.thisTrialN'
p7607
I86
sg6370
g7267
sS'block_loop.thisIndex'
p7608
g6364
sg38
S'right'
p7609
sg58
g62
sS'trial_loop.thisN'
p7610
I86
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7611
g59
(g98
S'V\x00\x00\x00'
tRp7612
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7613
I0
sg6379
g7274
sS'block_loop.thisRepN'
p7614
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7615
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7616
Nsg69
Vn
sS'block_loop.thisTrialN'
p7617
I0
sg39
F0.80019745987738133
sg34
g752
(S'\x07\xdf\n\x13\r%/\x0b+`'
tRp7618
sa(dp7619
S'trial_loop.thisTrialN'
p7620
I87
sg6370
g6690
sS'block_loop.thisIndex'
p7621
g6364
sg38
S'left'
p7622
sg58
g62
sS'trial_loop.thisN'
p7623
I87
sg33
g6701
sg63
g64
sS'trial_loop.thisIndex'
p7624
g59
(g98
S'W\x00\x00\x00'
tRp7625
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7626
I0
sg6379
g6698
sS'block_loop.thisRepN'
p7627
I2
sg6382
g6694
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7628
I2
sg6384
g6701
sg55
g11
sS'block_loop.thisTrial'
p7629
Nsg69
Vn
sS'block_loop.thisTrialN'
p7630
I0
sg39
F0.88328456232193275
sg34
g752
(S'\x07\xdf\n\x13\r%5\x08hX'
tRp7631
sa(dp7632
S'trial_loop.thisTrialN'
p7633
I88
sg6370
g6442
sS'block_loop.thisIndex'
p7634
g6364
sg38
S'left'
p7635
sg58
g62
sS'trial_loop.thisN'
p7636
I88
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7637
g59
(g98
S'X\x00\x00\x00'
tRp7638
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7639
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7640
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7641
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7642
Nsg69
Vn
sS'block_loop.thisTrialN'
p7643
I0
sg39
F0.68342842350284627
sg34
g752
(S'\x07\xdf\n\x13\r%;\x07O\x18'
tRp7644
sa(dp7645
S'trial_loop.thisTrialN'
p7646
I89
sg6370
g7323
sS'block_loop.thisIndex'
p7647
g6364
sg38
S'right'
p7648
sg58
g62
sS'trial_loop.thisN'
p7649
I89
sg33
g6949
sg63
g64
sS'trial_loop.thisIndex'
p7650
g59
(g98
S'Y\x00\x00\x00'
tRp7651
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7652
I0
sg6379
g7330
sS'block_loop.thisRepN'
p7653
I2
sg6382
g6949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7654
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p7655
Nsg69
Vn
sS'block_loop.thisTrialN'
p7656
I0
sg39
F0.76682799494119536
sg34
g752
(S'\x07\xdf\n\x13\r&\x05\x02\xde`'
tRp7657
sa(dp7658
S'trial_loop.thisTrialN'
p7659
I90
sg6370
g6506
sS'block_loop.thisIndex'
p7660
g6364
sg38
S'left'
p7661
sg58
g62
sS'trial_loop.thisN'
p7662
I90
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p7663
g59
(g98
S'Z\x00\x00\x00'
tRp7664
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7665
I0
sg6379
g6514
sS'block_loop.thisRepN'
p7666
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7667
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p7668
Nsg69
Vn
sS'block_loop.thisTrialN'
p7669
I0
sg39
F1.1333136424636905
sg34
g752
(S'\x07\xdf\n\x13\r&\n\x0f\x1f\x18'
tRp7670
sa(dp7671
S'trial_loop.thisTrialN'
p7672
I91
sg6370
g6720
sS'block_loop.thisIndex'
p7673
g6364
sg38
S'left'
p7674
sg58
g62
sS'trial_loop.thisN'
p7675
I91
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p7676
g59
(g98
S'[\x00\x00\x00'
tRp7677
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7678
I0
sg6379
g6728
sS'block_loop.thisRepN'
p7679
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7680
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p7681
Nsg69
Vn
sS'block_loop.thisTrialN'
p7682
I0
sg39
F1.2172580389506038
sg34
g752
(S'\x07\xdf\n\x13\r&\x11\x02U\xa8'
tRp7683
sa(dp7684
S'trial_loop.thisTrialN'
p7685
I92
sg6370
g7323
sS'block_loop.thisIndex'
p7686
g6364
sg38
S'left'
p7687
sg58
g62
sS'trial_loop.thisN'
p7688
I92
sg33
g6943
sg63
g64
sS'trial_loop.thisIndex'
p7689
g59
(g98
S'\\\x00\x00\x00'
tRp7690
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7691
I0
sg6379
g7330
sS'block_loop.thisRepN'
p7692
I2
sg6382
g6949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7693
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p7694
Nsg69
Vn
sS'block_loop.thisTrialN'
p7695
I0
sg39
F0.66679743228087318
sg34
g752
(S'\x07\xdf\n\x13\r&\x17\x06=\xa8'
tRp7696
sa(dp7697
S'trial_loop.thisTrialN'
p7698
I93
sg6370
g7010
sS'block_loop.thisIndex'
p7699
g6364
sg38
S'left'
p7700
sg58
g62
sS'trial_loop.thisN'
p7701
I93
sg33
g6592
sg63
g64
sS'trial_loop.thisIndex'
p7702
g59
(g98
S']\x00\x00\x00'
tRp7703
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7704
I0
sg6379
g7017
sS'block_loop.thisRepN'
p7705
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7706
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p7707
Nsg69
Vn
sS'block_loop.thisTrialN'
p7708
I0
sg39
F1.0001071973929356
sg34
g752
(S'\x07\xdf\n\x13\r&\x1d\x01\x92X'
tRp7709
sa(dp7710
S'trial_loop.thisTrialN'
p7711
I94
sg6370
g7416
sS'block_loop.thisIndex'
p7712
g6364
sg38
S'left'
p7713
sg58
g62
sS'trial_loop.thisN'
p7714
I94
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p7715
g59
(g98
S'^\x00\x00\x00'
tRp7716
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7717
I0
sg6379
g7423
sS'block_loop.thisRepN'
p7718
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7719
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p7720
Nsg69
Vn
sS'block_loop.thisTrialN'
p7721
I0
sg39
F0.88340658488414192
sg34
g752
(S'\x07\xdf\n\x13\r&#\x02"\xe0'
tRp7722
sa(dp7723
S'trial_loop.thisTrialN'
p7724
I95
sg6370
g7539
sS'block_loop.thisIndex'
p7725
g6364
sg38
S'right'
p7726
sg58
g62
sS'trial_loop.thisN'
p7727
I95
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p7728
g59
(g98
S'_\x00\x00\x00'
tRp7729
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7730
I0
sg6379
g7546
sS'block_loop.thisRepN'
p7731
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7732
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7733
Nsg69
Vn
sS'block_loop.thisTrialN'
p7734
I0
sg39
F0.88347586405143375
sg34
g752
(S'\x07\xdf\n\x13\r&)\x00\xcf\x08'
tRp7735
sa(dp7736
S'trial_loop.thisTrialN'
p7737
I96
sg6370
g6553
sS'block_loop.thisIndex'
p7738
g6364
sg38
S'right'
p7739
sg58
g62
sS'trial_loop.thisN'
p7740
I96
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7741
g59
(g98
S'`\x00\x00\x00'
tRp7742
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7743
I0
sg6379
g6560
sS'block_loop.thisRepN'
p7744
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7745
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7746
Nsg69
Vn
sS'block_loop.thisTrialN'
p7747
I0
sg39
F0.95019996875271318
sg34
g752
(S'\x07\xdf\n\x13\r&.\x0e\xf8\x08'
tRp7748
sa(dp7749
S'trial_loop.thisTrialN'
p7750
I97
sg6370
g7323
sS'block_loop.thisIndex'
p7751
g6364
sg38
S'right'
p7752
sg58
g62
sS'trial_loop.thisN'
p7753
I97
sg33
g6949
sg63
g64
sS'trial_loop.thisIndex'
p7754
g59
(g98
S'a\x00\x00\x00'
tRp7755
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7756
I0
sg6379
g7330
sS'block_loop.thisRepN'
p7757
I2
sg6382
g6949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7758
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p7759
Nsg69
Vn
sS'block_loop.thisTrialN'
p7760
I0
sg39
F0.88393744005770714
sg34
g752
(S'\x07\xdf\n\x13\r&4\x0e\x92x'
tRp7761
sa(dp7762
S'trial_loop.thisTrialN'
p7763
I98
sg6370
g6995
sS'block_loop.thisIndex'
p7764
g6364
sg38
S'left'
p7765
sg58
g62
sS'trial_loop.thisN'
p7766
I98
sg33
g6885
sg63
g64
sS'trial_loop.thisIndex'
p7767
g59
(g98
S'b\x00\x00\x00'
tRp7768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7769
I0
sg6379
g7002
sS'block_loop.thisRepN'
p7770
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7771
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p7772
Nsg69
Vn
sS'block_loop.thisTrialN'
p7773
I0
sg39
F0.7999448617665621
sg34
g752
(S'\x07\xdf\n\x13\r&:\r>\xa0'
tRp7774
sa(dp7775
S'trial_loop.thisTrialN'
p7776
I99
sg6370
g6866
sS'block_loop.thisIndex'
p7777
g6364
sg38
S'left'
p7778
sg58
g62
sS'trial_loop.thisN'
p7779
I99
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p7780
g59
(g98
S'c\x00\x00\x00'
tRp7781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7782
I0
sg6379
g6873
sS'block_loop.thisRepN'
p7783
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7784
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p7785
Nsg69
Vn
sS'block_loop.thisTrialN'
p7786
I0
sg39
F0.93343241489492357
sg34
g752
(S"\x07\xdf\n\x13\r'\x04\n\xb60"
tRp7787
sa(dp7788
S'trial_loop.thisTrialN'
p7789
I100
sg6370
g7010
sS'block_loop.thisIndex'
p7790
g6364
sg38
S'left'
p7791
sg58
g62
sS'trial_loop.thisN'
p7792
I100
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p7793
g59
(g98
S'd\x00\x00\x00'
tRp7794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7795
I0
sg6379
g7017
sS'block_loop.thisRepN'
p7796
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7797
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p7798
Nsg69
Vn
sS'block_loop.thisTrialN'
p7799
I0
sg39
F0.75011204408292542
sg34
g752
(S"\x07\xdf\n\x13\r'\n\nT\x88"
tRp7800
sa(dp7801
S'trial_loop.thisTrialN'
p7802
I101
sg6370
g6626
sS'block_loop.thisIndex'
p7803
g6364
sg38
S'right'
p7804
sg58
g62
sS'trial_loop.thisN'
p7805
I101
sg33
g6630
sg63
g64
sS'trial_loop.thisIndex'
p7806
g59
(g98
S'e\x00\x00\x00'
tRp7807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7808
I0
sg6379
g6634
sS'block_loop.thisRepN'
p7809
I2
sg6382
g6630
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7810
I2
sg6384
g6637
sg55
g11
sS'block_loop.thisTrial'
p7811
Nsg69
Vn
sS'block_loop.thisTrialN'
p7812
I0
sg39
F1.8667875678384007
sg34
g752
(S"\x07\xdf\n\x13\r'\x10\x07\x18h"
tRp7813
sa(dp7814
S'trial_loop.thisTrialN'
p7815
I102
sg6370
g7090
sS'block_loop.thisIndex'
p7816
g6364
sg38
S'right'
p7817
sg58
g62
sS'trial_loop.thisN'
p7818
I102
sg33
g6694
sg63
g64
sS'trial_loop.thisIndex'
p7819
g59
(g98
S'f\x00\x00\x00'
tRp7820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7821
I0
sg6379
g7097
sS'block_loop.thisRepN'
p7822
I2
sg6382
g6694
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7823
I2
sg6384
g6701
sg55
g11
sS'block_loop.thisTrial'
p7824
Nsg69
Vn
sS'block_loop.thisTrialN'
p7825
I0
sg39
F0.76725079742391245
sg34
g752
(S"\x07\xdf\n\x13\r'\x17\x05~@"
tRp7826
sa(dp7827
S'trial_loop.thisTrialN'
p7828
I103
sg6370
g6459
sS'block_loop.thisIndex'
p7829
g6364
sg38
S'right'
p7830
sg58
g62
sS'trial_loop.thisN'
p7831
I103
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7832
g59
(g98
S'g\x00\x00\x00'
tRp7833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7834
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7835
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7836
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7837
Nsg69
Vn
sS'block_loop.thisTrialN'
p7838
I0
sg39
F1.2334753508712311
sg34
g752
(S"\x07\xdf\n\x13\r'\x1d\x02|\xb8"
tRp7839
sa(dp7840
S'trial_loop.thisTrialN'
p7841
I104
sg6370
g7496
sS'block_loop.thisIndex'
p7842
g6364
sg38
S'left'
p7843
sg58
g62
sS'trial_loop.thisN'
p7844
I104
sg33
g7500
sg63
g64
sS'trial_loop.thisIndex'
p7845
g59
(g98
S'h\x00\x00\x00'
tRp7846
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7847
I0
sg6379
g7504
sS'block_loop.thisRepN'
p7848
I2
sg6382
g7500
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7849
I2
sg6384
g7507
sg55
g11
sS'block_loop.thisTrial'
p7850
Nsg69
Vn
sS'block_loop.thisTrialN'
p7851
I0
sg39
F1.2499720602536399
sg34
g752
(S"\x07\xdf\n\x13\r'#\x06d\xb8"
tRp7852
sa(dp7853
S'trial_loop.thisTrialN'
p7854
I105
sg6370
g6643
sS'block_loop.thisIndex'
p7855
g6364
sg38
S'left'
p7856
sg58
g62
sS'trial_loop.thisN'
p7857
I105
sg33
g6654
sg63
g64
sS'trial_loop.thisIndex'
p7858
g59
(g98
S'i\x00\x00\x00'
tRp7859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7860
I0
sg6379
g6651
sS'block_loop.thisRepN'
p7861
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7862
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p7863
Nsg69
Vn
sS'block_loop.thisTrialN'
p7864
I0
sg39
F3.8668018228108849
sg34
g752
(S"\x07\xdf\n\x13\r')\n\xc1\xe8"
tRp7865
sa(dp7866
S'trial_loop.thisTrialN'
p7867
I106
sg6370
S'23-crunchie_redo.png'
p7868
sS'block_loop.thisIndex'
p7869
g6364
sg38
S'right'
p7870
sg58
g62
sS'trial_loop.thisN'
p7871
I106
sg33
g7507
sg63
g64
sS'trial_loop.thisIndex'
p7872
g59
(g98
S'j\x00\x00\x00'
tRp7873
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7874
I0
sg6379
S'33-ambrosia_rice.png'
p7875
sS'block_loop.thisRepN'
p7876
I2
sg6382
g7500
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7877
I2
sg6384
g7507
sg55
g11
sS'block_loop.thisTrial'
p7878
Nsg69
Vn
sS'block_loop.thisTrialN'
p7879
I0
sg39
F1.2834070980643446
sg34
g752
(S"\x07\xdf\n\x13\r'2\tZ\x88"
tRp7880
sa(dp7881
S'trial_loop.thisTrialN'
p7882
I107
sg6370
g7105
sS'block_loop.thisIndex'
p7883
g6364
sg38
S'left'
p7884
sg58
g62
sS'trial_loop.thisN'
p7885
I107
sg33
g6533
sg63
g64
sS'trial_loop.thisIndex'
p7886
g59
(g98
S'k\x00\x00\x00'
tRp7887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7888
I0
sg6379
g7112
sS'block_loop.thisRepN'
p7889
I2
sg6382
g6533
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7890
I2
sg6384
g6527
sg55
g11
sS'block_loop.thisTrial'
p7891
Nsg69
Vn
sS'block_loop.thisTrialN'
p7892
I0
sg39
F0.80020002577293781
sg34
g752
(S"\x07\xdf\n\x13\r'8\x0e4\xb8"
tRp7893
sa(dp7894
S'trial_loop.thisTrialN'
p7895
I108
sg6370
g6769
sS'block_loop.thisIndex'
p7896
g6364
sg38
S'right'
p7897
sg58
g62
sS'trial_loop.thisN'
p7898
I108
sg33
g6779
sg63
g64
sS'trial_loop.thisIndex'
p7899
g59
(g98
S'l\x00\x00\x00'
tRp7900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7901
I0
sg6379
g6777
sS'block_loop.thisRepN'
p7902
I2
sg6382
g6779
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7903
I2
sg6384
g6773
sg55
g11
sS'block_loop.thisTrial'
p7904
Nsg69
Vn
sS'block_loop.thisTrialN'
p7905
I0
sg39
F1.1168619787949865
sg34
g752
(S'\x07\xdf\n\x13\r(\x02\x0bq\xb0'
tRp7906
sa(dp7907
S'trial_loop.thisTrialN'
p7908
I109
sg6370
g6408
sS'block_loop.thisIndex'
p7909
g6364
sg38
S'left'
p7910
sg58
g62
sS'trial_loop.thisN'
p7911
I109
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p7912
g59
(g98
S'm\x00\x00\x00'
tRp7913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7914
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7915
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7916
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7917
Nsg69
Vn
sS'block_loop.thisTrialN'
p7918
I0
sg39
F2.8502133114070602
sg34
g752
(S'\x07\xdf\n\x13\r(\x08\r\xea\x80'
tRp7919
sa(dp7920
S'trial_loop.thisTrialN'
p7921
I110
sg6370
g7090
sS'block_loop.thisIndex'
p7922
g6364
sg38
S'right'
p7923
sg58
g62
sS'trial_loop.thisN'
p7924
I110
sg33
g6694
sg63
g64
sS'trial_loop.thisIndex'
p7925
g59
(g98
S'n\x00\x00\x00'
tRp7926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7927
I0
sg6379
g7097
sS'block_loop.thisRepN'
p7928
I2
sg6382
g6694
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7929
I2
sg6384
g6701
sg55
g11
sS'block_loop.thisTrial'
p7930
Nsg69
Vn
sS'block_loop.thisTrialN'
p7931
I0
sg39
F1.41686842204399
sg34
g752
(S'\x07\xdf\n\x13\r(\x10\x0c\r\xf0'
tRp7932
sa(dp7933
S'trial_loop.thisTrialN'
p7934
I111
sg6370
g6626
sS'block_loop.thisIndex'
p7935
g6364
sg38
S'left'
p7936
sg58
g62
sS'trial_loop.thisN'
p7937
I111
sg33
g6630
sg63
g64
sS'trial_loop.thisIndex'
p7938
g59
(g98
S'o\x00\x00\x00'
tRp7939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7940
I0
sg6379
g6634
sS'block_loop.thisRepN'
p7941
I2
sg6382
g6630
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7942
I2
sg6384
g6637
sg55
g11
sS'block_loop.thisTrial'
p7943
Nsg69
Vn
sS'block_loop.thisTrialN'
p7944
I0
sg39
F10.433586938795997
sg34
g752
(S'\x07\xdf\n\x13\r(\x17\x03\x8e('
tRp7945
sa(dp7946
S'trial_loop.thisTrialN'
p7947
I112
sg6370
g7868
sS'block_loop.thisIndex'
p7948
g6364
sg38
S'right'
p7949
sg58
g62
sS'trial_loop.thisN'
p7950
I112
sg33
g7507
sg63
g64
sS'trial_loop.thisIndex'
p7951
g59
(g98
S'p\x00\x00\x00'
tRp7952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7953
I0
sg6379
g7875
sS'block_loop.thisRepN'
p7954
I2
sg6382
g7500
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7955
I2
sg6384
g7507
sg55
g11
sS'block_loop.thisTrial'
p7956
Nsg69
Vn
sS'block_loop.thisTrialN'
p7957
I0
sg39
F1.2834190722405765
sg34
g752
(S'\x07\xdf\n\x13\r(&\n\xcd\xa0'
tRp7958
sa(dp7959
S'trial_loop.thisTrialN'
p7960
I113
sg6370
g6769
sS'block_loop.thisIndex'
p7961
g6364
sg38
S'right'
p7962
sg58
g62
sS'trial_loop.thisN'
p7963
I113
sg33
g6779
sg63
g64
sS'trial_loop.thisIndex'
p7964
g59
(g98
S'q\x00\x00\x00'
tRp7965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7966
I0
sg6379
g6777
sS'block_loop.thisRepN'
p7967
I2
sg6382
g6779
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7968
I2
sg6384
g6773
sg55
g11
sS'block_loop.thisTrial'
p7969
Nsg69
Vn
sS'block_loop.thisTrialN'
p7970
I0
sg39
F0.70020595584173861
sg34
g752
(S'\x07\xdf\n\x13\r(-\x00e\x90'
tRp7971
sa(dp7972
S'trial_loop.thisTrialN'
p7973
I114
sg6370
g6838
sS'block_loop.thisIndex'
p7974
g6364
sg38
S'right'
p7975
sg58
g62
sS'trial_loop.thisN'
p7976
I114
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p7977
g59
(g98
S'r\x00\x00\x00'
tRp7978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7979
I0
sg6379
g6845
sS'block_loop.thisRepN'
p7980
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7981
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p7982
Nsg69
Vn
sS'block_loop.thisTrialN'
p7983
I0
sg39
F0.68348829438764369
sg34
g752
(S'\x07\xdf\n\x13\r(2\x0bu\x98'
tRp7984
sa(dp7985
S'trial_loop.thisTrialN'
p7986
I115
sg6370
g7010
sS'block_loop.thisIndex'
p7987
g6364
sg38
S'left'
p7988
sg58
g62
sS'trial_loop.thisN'
p7989
I115
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p7990
g59
(g98
S's\x00\x00\x00'
tRp7991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7992
I0
sg6379
g7017
sS'block_loop.thisRepN'
p7993
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7994
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p7995
Nsg69
Vn
sS'block_loop.thisTrialN'
p7996
I0
sg39
F1.0334224934340455
sg34
g752
(S'\x07\xdf\n\x13\r(8\x07C`'
tRp7997
sa(dp7998
S'trial_loop.thisTrialN'
p7999
I116
sg6370
g6866
sS'block_loop.thisIndex'
p8000
g6364
sg38
S'left'
p8001
sg58
g62
sS'trial_loop.thisN'
p8002
I116
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p8003
g59
(g98
S't\x00\x00\x00'
tRp8004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8005
I0
sg6379
g6873
sS'block_loop.thisRepN'
p8006
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8007
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p8008
Nsg69
Vn
sS'block_loop.thisTrialN'
p8009
I0
sg39
F0.90010913606784015
sg34
g752
(S'\x07\xdf\n\x13\r)\x02\x08P\xe8'
tRp8010
sa(dp8011
S'trial_loop.thisTrialN'
p8012
I117
sg6370
g6523
sS'block_loop.thisIndex'
p8013
g6364
sg38
S'right'
p8014
sg58
g62
sS'trial_loop.thisN'
p8015
I117
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p8016
g59
(g98
S'u\x00\x00\x00'
tRp8017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8018
I0
sg6379
g6531
sS'block_loop.thisRepN'
p8019
I2
sg6382
g6533
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8020
I2
sg6384
g6527
sg55
g11
sS'block_loop.thisTrial'
p8021
Nsg69
Vn
sS'block_loop.thisTrialN'
p8022
I0
sg39
F1.1339157724996767
sg34
g752
(S'\x07\xdf\n\x13\r)\x08\x077\xa8'
tRp8023
sa(dp8024
S'trial_loop.thisTrialN'
p8025
I118
sg6370
g6737
sS'block_loop.thisIndex'
p8026
g6364
sg38
S'right'
p8027
sg58
g62
sS'trial_loop.thisN'
p8028
I118
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p8029
g59
(g98
S'v\x00\x00\x00'
tRp8030
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8031
I0
sg6379
g6745
sS'block_loop.thisRepN'
p8032
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8033
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p8034
Nsg69
Vn
sS'block_loop.thisTrialN'
p8035
I0
sg39
F0.83347113140007423
sg34
g752
(S'\x07\xdf\n\x13\r)\x0e\t\xb0x'
tRp8036
sa(dp8037
S'trial_loop.thisTrialN'
p8038
I119
sg6370
g6660
sS'block_loop.thisIndex'
p8039
g6364
sg38
S'right'
p8040
sg58
g62
sS'trial_loop.thisN'
p8041
I119
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p8042
g59
(g98
S'w\x00\x00\x00'
tRp8043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8044
I0
sg6379
g6668
sS'block_loop.thisRepN'
p8045
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8046
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p8047
Nsg69
Vn
sS'block_loop.thisTrialN'
p8048
I0
sg39
F0.83342323469332769
sg34
g752
(S'\x07\xdf\n\x13\r)\x14\x07\xa1 '
tRp8049
sa(dp8050
S'trial_loop.thisTrialN'
p8051
I120
sg6370
g7200
sS'block_loop.thisIndex'
p8052
g6364
sg38
S'right'
p8053
sg58
g62
sS'trial_loop.thisN'
p8054
I120
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p8055
g59
(g98
S'x\x00\x00\x00'
tRp8056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8057
I0
sg6379
g7207
sS'block_loop.thisRepN'
p8058
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8059
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p8060
Nsg69
Vn
sS'block_loop.thisTrialN'
p8061
I0
sg39
F0.98351098830244155
sg34
g752
(S'\x07\xdf\n\x13\r)\x1a\x05\x95\xb0'
tRp8062
sa(dp8063
S'trial_loop.thisTrialN'
p8064
I121
sg6370
g6425
sS'block_loop.thisIndex'
p8065
g6364
sg38
S'left'
p8066
sg58
g62
sS'trial_loop.thisN'
p8067
I121
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8068
g59
(g98
S'y\x00\x00\x00'
tRp8069
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8070
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8071
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8072
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8073
Nsg69
Vn
sS'block_loop.thisTrialN'
p8074
I0
sg39
F0.61689818642480532
sg34
g752
(S'\x07\xdf\n\x13\r) \x05\xeb\xa0'
tRp8075
sa(dp8076
S'trial_loop.thisTrialN'
p8077
I122
sg6370
g6371
sS'block_loop.thisIndex'
p8078
g6364
sg38
S'left'
p8079
sg58
g62
sS'trial_loop.thisN'
p8080
I122
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8081
g59
(g98
S'z\x00\x00\x00'
tRp8082
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8083
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8084
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8085
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8086
Nsg69
Vn
sS'block_loop.thisTrialN'
p8087
I0
sg39
F1.6335380157306645
sg34
g752
(S'\x07\xdf\n\x13\r)&\x00\x88\xb8'
tRp8088
sa(dp8089
S'trial_loop.thisTrialN'
p8090
I123
sg6370
g6489
sS'block_loop.thisIndex'
p8091
g6364
sg38
S'right'
p8092
sg58
g62
sS'trial_loop.thisN'
p8093
I123
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p8094
g59
(g98
S'{\x00\x00\x00'
tRp8095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8096
I0
sg6379
g6497
sS'block_loop.thisRepN'
p8097
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8098
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p8099
Nsg69
Vn
sS'block_loop.thisTrialN'
p8100
I0
sg39
F0.83343891516233271
sg34
g752
(S'\x07\xdf\n\x13\r),\n\xdd@'
tRp8101
sa(dp8102
S'trial_loop.thisTrialN'
p8103
I124
sg6370
g6881
sS'block_loop.thisIndex'
p8104
g6364
sg38
S'right'
p8105
sg58
g62
sS'trial_loop.thisN'
p8106
I124
sg33
g6885
sg63
g64
sS'trial_loop.thisIndex'
p8107
g59
(g98
S'|\x00\x00\x00'
tRp8108
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8109
I0
sg6379
g6889
sS'block_loop.thisRepN'
p8110
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8111
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8112
Nsg69
Vn
sS'block_loop.thisTrialN'
p8113
I0
sg39
F0.71660316551606229
sg34
g752
(S'\x07\xdf\n\x13\r)2\x08\xcd\xe8'
tRp8114
sa(dp8115
S'trial_loop.thisTrialN'
p8116
I125
sg6370
g6866
sS'block_loop.thisIndex'
p8117
g6364
sg38
S'left'
p8118
sg58
g62
sS'trial_loop.thisN'
p8119
I125
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p8120
g59
(g98
S'}\x00\x00\x00'
tRp8121
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8122
I0
sg6379
g6873
sS'block_loop.thisRepN'
p8123
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8124
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p8125
Nsg69
Vn
sS'block_loop.thisTrialN'
p8126
I0
sg39
F0.71680330532944936
sg34
g752
(S'\x07\xdf\n\x13\r)8\x04\xda0'
tRp8127
sa(dp8128
S'trial_loop.thisTrialN'
p8129
I126
sg6370
g6523
sS'block_loop.thisIndex'
p8130
g6364
sg38
S'right'
p8131
sg58
g62
sS'trial_loop.thisN'
p8132
I126
sg33
g6533
sg63
g64
sS'trial_loop.thisIndex'
p8133
g59
(g98
S'~\x00\x00\x00'
tRp8134
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8135
I0
sg6379
g6531
sS'block_loop.thisRepN'
p8136
I2
sg6382
g6533
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8137
I2
sg6384
g6527
sg55
g11
sS'block_loop.thisTrial'
p8138
Nsg69
Vn
sS'block_loop.thisTrialN'
p8139
I0
sg39
F0.78351629115240939
sg34
g752
(S'\x07\xdf\n\x13\r*\x02\x01$\xf8'
tRp8140
sa(dp8141
S'trial_loop.thisTrialN'
p8142
I127
sg6370
g6690
sS'block_loop.thisIndex'
p8143
g6364
sg38
S'left'
p8144
sg58
g62
sS'trial_loop.thisN'
p8145
I127
sg33
g6694
sg63
g64
sS'trial_loop.thisIndex'
p8146
g59
(g98
S'\x7f\x00\x00\x00'
tRp8147
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8148
I0
sg6379
g6698
sS'block_loop.thisRepN'
p8149
I2
sg6382
g6694
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8150
I2
sg6384
g6701
sg55
g11
sS'block_loop.thisTrial'
p8151
Nsg69
Vn
sS'block_loop.thisTrialN'
p8152
I0
sg39
F0.76676555816084146
sg34
g752
(S'\x07\xdf\n\x13\r*\x07\r\xa0H'
tRp8153
sa(dp8154
S'trial_loop.thisTrialN'
p8155
I128
sg6370
g7295
sS'block_loop.thisIndex'
p8156
g6364
sg38
S'right'
p8157
sg58
g62
sS'trial_loop.thisN'
p8158
I128
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p8159
g59
(g98
S'\x80\x00\x00\x00'
tRp8160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8161
I0
sg6379
g7302
sS'block_loop.thisRepN'
p8162
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8163
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p8164
Nsg69
Vn
sS'block_loop.thisTrialN'
p8165
I0
sg39
F0.93377111303925631
sg34
g752
(S'\x07\xdf\n\x13\r*\r\n\xa2\xa8'
tRp8166
sa(dp8167
S'trial_loop.thisTrialN'
p8168
I129
sg6370
g6371
sS'block_loop.thisIndex'
p8169
g6364
sg38
S'left'
p8170
sg58
g62
sS'trial_loop.thisN'
p8171
I129
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8172
g59
(g98
S'\x81\x00\x00\x00'
tRp8173
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8174
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8175
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8176
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8177
Nsg69
Vn
sS'block_loop.thisTrialN'
p8178
I0
sg39
F0.91683848660068179
sg34
g752
(S'\x07\xdf\n\x13\r*\x13\n\x02\x80'
tRp8179
sa(dp8180
S'trial_loop.thisTrialN'
p8181
I130
sg6370
g6581
sS'block_loop.thisIndex'
p8182
g6364
sg38
S'left'
p8183
sg58
g62
sS'trial_loop.thisN'
p8184
I130
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p8185
g59
(g98
S'\x82\x00\x00\x00'
tRp8186
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8187
I0
sg6379
g6589
sS'block_loop.thisRepN'
p8188
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8189
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p8190
Nsg69
Vn
sS'block_loop.thisTrialN'
p8191
I0
sg39
F1.4835144094959105
sg34
g752
(S'\x07\xdf\n\x13\r*\x19\t#\xd8'
tRp8192
sa(dp8193
S'trial_loop.thisTrialN'
p8194
I131
sg6370
g6838
sS'block_loop.thisIndex'
p8195
g6364
sg38
S'right'
p8196
sg58
g62
sS'trial_loop.thisN'
p8197
I131
sg33
g6654
sg63
g64
sS'trial_loop.thisIndex'
p8198
g59
(g98
S'\x83\x00\x00\x00'
tRp8199
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8200
I0
sg6379
g6845
sS'block_loop.thisRepN'
p8201
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8202
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8203
Nsg69
Vn
sS'block_loop.thisTrialN'
p8204
I0
sg39
F0.73343572204794327
sg34
g752
(S'\x07\xdf\n\x13\r* \x01\xd4\xc0'
tRp8205
sa(dp8206
S'trial_loop.thisTrialN'
p8207
I132
sg6370
g7416
sS'block_loop.thisIndex'
p8208
g6364
sg38
S'left'
p8209
sg58
g62
sS'trial_loop.thisN'
p8210
I132
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p8211
g59
(g98
S'\x84\x00\x00\x00'
tRp8212
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8213
I0
sg6379
g7423
sS'block_loop.thisRepN'
p8214
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8215
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p8216
Nsg69
Vn
sS'block_loop.thisTrialN'
p8217
I0
sg39
F1.1834264278077171
sg34
g752
(S'\x07\xdf\n\x13\r*%\r\x9c`'
tRp8218
sa(dp8219
S'trial_loop.thisTrialN'
p8220
I133
sg6370
g6995
sS'block_loop.thisIndex'
p8221
g6364
sg38
S'left'
p8222
sg58
g62
sS'trial_loop.thisN'
p8223
I133
sg33
g6885
sg63
g64
sS'trial_loop.thisIndex'
p8224
g59
(g98
S'\x85\x00\x00\x00'
tRp8225
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8226
I0
sg6379
g7002
sS'block_loop.thisRepN'
p8227
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8228
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8229
Nsg69
Vn
sS'block_loop.thisTrialN'
p8230
I0
sg39
F0.83328182536752138
sg34
g752
(S'\x07\xdf\n\x13\r*,\x01\x8a\x88'
tRp8231
sa(dp8232
S'trial_loop.thisTrialN'
p8233
I134
sg6370
g7105
sS'block_loop.thisIndex'
p8234
g6364
sg38
S'left'
p8235
sg58
g62
sS'trial_loop.thisN'
p8236
I134
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p8237
g59
(g98
S'\x86\x00\x00\x00'
tRp8238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8239
I0
sg6379
g7112
sS'block_loop.thisRepN'
p8240
I2
sg6382
g6533
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8241
I2
sg6384
g6527
sg55
g11
sS'block_loop.thisTrial'
p8242
Nsg69
Vn
sS'block_loop.thisTrialN'
p8243
I0
sg39
F1.000210403393794
sg34
g752
(S'\x07\xdf\n\x13\r*1\x0e\xc1X'
tRp8244
sa(dp8245
S'trial_loop.thisTrialN'
p8246
I135
sg6370
g7580
sS'block_loop.thisIndex'
p8247
g6364
sg38
S'left'
p8248
sg58
g62
sS'trial_loop.thisN'
p8249
I135
sg33
g6779
sg63
g64
sS'trial_loop.thisIndex'
p8250
g59
(g98
S'\x87\x00\x00\x00'
tRp8251
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8252
I0
sg6379
g7587
sS'block_loop.thisRepN'
p8253
I2
sg6382
g6779
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8254
I2
sg6384
g6773
sg55
g11
sS'block_loop.thisTrial'
p8255
Nsg69
Vn
sS'block_loop.thisTrialN'
p8256
I0
sg39
F0.85009898652788252
sg34
g752
(S'\x07\xdf\n\x13\r*8\x00\x0f\xa0'
tRp8257
sa(dp8258
S'trial_loop.thisTrialN'
p8259
I136
sg6370
g6898
sS'block_loop.thisIndex'
p8260
g6364
sg38
S'left'
p8261
sg58
g62
sS'trial_loop.thisN'
p8262
I136
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8263
g59
(g98
S'\x88\x00\x00\x00'
tRp8264
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8265
I0
sg6379
g6905
sS'block_loop.thisRepN'
p8266
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8267
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8268
Nsg69
Vn
sS'block_loop.thisTrialN'
p8269
I0
sg39
F0.90011341255922162
sg34
g752
(S'\x07\xdf\n\x13\r+\x01\r\x81\x08'
tRp8270
sa(dp8271
S'trial_loop.thisTrialN'
p8272
I137
sg6370
g6553
sS'block_loop.thisIndex'
p8273
g6364
sg38
S'right'
p8274
sg58
g62
sS'trial_loop.thisN'
p8275
I137
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8276
g59
(g98
S'\x89\x00\x00\x00'
tRp8277
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8278
I0
sg6379
g6560
sS'block_loop.thisRepN'
p8279
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8280
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8281
Nsg69
Vn
sS'block_loop.thisTrialN'
p8282
I0
sg39
F0.98352011148563179
sg34
g752
(S'\x07\xdf\n\x13\r+\x07\x0c\xa6H'
tRp8283
sa(dp8284
S'trial_loop.thisTrialN'
p8285
I138
sg6370
g6371
sS'block_loop.thisIndex'
p8286
g6364
sg38
S'left'
p8287
sg58
g62
sS'trial_loop.thisN'
p8288
I138
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8289
g59
(g98
S'\x8a\x00\x00\x00'
tRp8290
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8291
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8292
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8293
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8294
Nsg69
Vn
sS'block_loop.thisTrialN'
p8295
I0
sg39
F0.70009619255324651
sg34
g752
(S'\x07\xdf\n\x13\r+\r\x0c\xbd\xb8'
tRp8296
sa(dp8297
S'trial_loop.thisTrialN'
p8298
I139
sg6370
g7295
sS'block_loop.thisIndex'
p8299
g6364
sg38
S'right'
p8300
sg58
g62
sS'trial_loop.thisN'
p8301
I139
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p8302
g59
(g98
S'\x8b\x00\x00\x00'
tRp8303
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8304
I0
sg6379
g7302
sS'block_loop.thisRepN'
p8305
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8306
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p8307
Nsg69
Vn
sS'block_loop.thisTrialN'
p8308
I0
sg39
F0.85042770619111252
sg34
g752
(S'\x07\xdf\n\x13\r+\x13\x08\xc6\x18'
tRp8309
sa(dp8310
S'trial_loop.thisTrialN'
p8311
I140
sg6370
g7539
sS'block_loop.thisIndex'
p8312
g6364
sg38
S'right'
p8313
sg58
g62
sS'trial_loop.thisN'
p8314
I140
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p8315
g59
(g98
S'\x8c\x00\x00\x00'
tRp8316
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8317
I0
sg6379
g7546
sS'block_loop.thisRepN'
p8318
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8319
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8320
Nsg69
Vn
sS'block_loop.thisTrialN'
p8321
I0
sg39
F1.3001107896470785
sg34
g752
(S'\x07\xdf\n\x13\r+\x19\x06\xf9('
tRp8322
sa(dp8323
S'trial_loop.thisTrialN'
p8324
I141
sg6370
g6881
sS'block_loop.thisIndex'
p8325
g6364
sg38
S'right'
p8326
sg58
g62
sS'trial_loop.thisN'
p8327
I141
sg33
g6885
sg63
g64
sS'trial_loop.thisIndex'
p8328
g59
(g98
S'\x8d\x00\x00\x00'
tRp8329
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8330
I0
sg6379
g6889
sS'block_loop.thisRepN'
p8331
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8332
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8333
Nsg69
Vn
sS'block_loop.thisTrialN'
p8334
I0
sg39
F3.0664578218184033
sg34
g752
(S'\x07\xdf\n\x13\r+\x1f\x0c\r\xf0'
tRp8335
sa(dp8336
S'trial_loop.thisTrialN'
p8337
I142
sg6370
g7868
sS'block_loop.thisIndex'
p8338
g6364
sg38
S'right'
p8339
sg58
g62
sS'trial_loop.thisN'
p8340
I142
sg33
g7500
sg63
g64
sS'trial_loop.thisIndex'
p8341
g59
(g98
S'\x8e\x00\x00\x00'
tRp8342
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8343
I0
sg6379
g7875
sS'block_loop.thisRepN'
p8344
I2
sg6382
g7500
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8345
I2
sg6384
g7507
sg55
g11
sS'block_loop.thisTrial'
p8346
Nsg69
Vn
sS'block_loop.thisTrialN'
p8347
I0
sg39
F1.0000966487132246
sg34
g752
(S"\x07\xdf\n\x13\r+'\r\x88\xd8"
tRp8348
sa(dp8349
S'trial_loop.thisTrialN'
p8350
I143
sg6370
g7120
sS'block_loop.thisIndex'
p8351
g6364
sg38
S'right'
p8352
sg58
g62
sS'trial_loop.thisN'
p8353
I143
sg33
g6731
sg63
g64
sS'trial_loop.thisIndex'
p8354
g59
(g98
S'\x8f\x00\x00\x00'
tRp8355
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8356
I0
sg6379
g7127
sS'block_loop.thisRepN'
p8357
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8358
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p8359
Nsg69
Vn
sS'block_loop.thisTrialN'
p8360
I0
sg39
F0.88349297001695959
sg34
g752
(S'\x07\xdf\n\x13\r+-\x0e\x19`'
tRp8361
sa(dp8362
S'trial_loop.thisTrialN'
p8363
I144
sg6370
S'27-hartleys_raspberries_jelly.png'
p8364
sS'block_loop.thisIndex'
p8365
g6364
sg38
S'left'
p8366
sg58
g62
sS'trial_loop.thisN'
p8367
I144
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p8368
g59
(g98
S'\x90\x00\x00\x00'
tRp8369
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8370
I0
sg6379
S'51-mars.png'
p8371
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vn
sS'block_loop.thisTrialN'
p8375
I0
sg39
F1.1335280372495617
sg34
g752
(S'\x07\xdf\n\x13\r+3\x0c\xc1\xa0'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g6611
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'right'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g6618
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vn
sS'block_loop.thisTrialN'
p8388
I0
sg39
F0.66676550114061683
sg34
g752
(S'\x07\xdf\n\x13\r+9\x0f:p'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g6720
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'left'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g6728
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vn
sS'block_loop.thisTrialN'
p8401
I0
sg39
F0.73361818569537718
sg34
g752
(S'\x07\xdf\n\x13\r,\x03\n\xcd\xa0'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g6939
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'left'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6949
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g6947
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vn
sS'block_loop.thisTrialN'
p8414
I0
sg39
F0.78346326265454991
sg34
g752
(S'\x07\xdf\n\x13\r,\t\x07\x14\x80'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g7120
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'right'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g7127
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.71678306326793972
sg34
g752
(S'\x07\xdf\n\x13\r,\x0f\x04Qx'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g8364
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'left'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g8371
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F2.0501820645076805
sg34
g752
(S'\x07\xdf\n\x13\r,\x15\x00\x9c@'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6611
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'right'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6618
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F0.83357262680328859
sg34
g752
(S'\x07\xdf\n\x13\r,\x1c\x01\xdc\x90'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g6690
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'left'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6701
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g6698
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6694
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g6701
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.78341878714127233
sg34
g752
(S'\x07\xdf\n\x13\r,!\x0f\x13`'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g7416
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'left'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g7423
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F1.0334683944456629
sg34
g752
(S"\x07\xdf\n\x13\r,'\x0cLp"
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g6626
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'left'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6630
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g6634
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6630
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6637
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F0.85017425278238079
sg34
g752
(S'\x07\xdf\n\x13\r,-\rY\xf8'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6769
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'left'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6779
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6777
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6779
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6773
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F1.2168856990701897
sg34
g752
(S'\x07\xdf\n\x13\r,3\x0b\x89 '
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g6995
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'left'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6885
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g7002
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.66659415637332131
sg34
g752
(S'\x07\xdf\n\x13\r,:\x00.\xe0'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g6754
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'right'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6630
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g6761
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6630
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g6637
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.8499584324999887
sg34
g752
(S'\x07\xdf\n\x13\r-\x03\n\xc5\xd0'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g6489
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'right'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g6497
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.75010377619946667
sg34
g752
(S'\x07\xdf\n\x13\r-\t\x08\xf4\xf8'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g7120
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'right'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g7127
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F1.1000992716271867
sg34
g752
(S'\x07\xdf\n\x13\r-\x0f\x05\xb4\xf0'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g7267
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'right'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g7274
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F0.81689544947221293
sg34
g752
(S'\x07\xdf\n\x13\r-\x15\x07\xb4\xa8'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6459
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'right'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.90054106173374748
sg34
g752
(S'\x07\xdf\n\x13\r-\x1b\x05j\xb8'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g6881
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'right'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6885
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g6889
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.68319321645685704
sg34
g752
(S'\x07\xdf\n\x13\r-!\x04Qx'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g6523
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'right'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6533
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g6531
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6533
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g6527
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F1.1499919601956208
sg34
g752
(S"\x07\xdf\n\x13\r-'\x00#("
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g6391
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'left'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F1.1836037596622191
sg34
g752
(S'\x07\xdf\n\x13\r--\x02\xd6\x90'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g6720
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'left'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g6728
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F1.1668732687321608
sg34
g752
(S'\x07\xdf\n\x13\r-3\x06Ex'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g6459
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.80041869705019053
sg34
g752
(S'\x07\xdf\n\x13\r-9\t7`'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g7120
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'right'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g7127
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F1.3002259698223497
sg34
g752
(S'\x07\xdf\n\x13\r.\x03\x06\xae\xf0'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g6391
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'right'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F2.1667446888823179
sg34
g752
(S'\x07\xdf\n\x13\r.\t\x0b\xc7\xa0'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g7295
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'right'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g7302
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F1.3500764636719396
sg34
g752
(S'\x07\xdf\n\x13\r.\x10\x0e\xb1\xb8'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g6581
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'right'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g6589
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F1.2835114444624196
sg34
g752
(S'\x07\xdf\n\x13\r.\x17\x05zX'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g7539
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'right'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g7546
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.7338645116196858
sg34
g752
(S'\x07\xdf\n\x13\r.\x1d\nT\x88'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g7267
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'right'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g7274
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F0.88352775215025758
sg34
g752
(S'\x07\xdf\n\x13\r.#\x06\x9fP'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g6391
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'left'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F1.1500695072445524
sg34
g752
(S'\x07\xdf\n\x13\r.)\x05G\x90'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g7090
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'right'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6701
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g7097
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6694
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g6701
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.91678317730838899
sg34
g752
(S'\x07\xdf\n\x13\r./\x089x'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g6881
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'right'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6885
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g6889
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.63321813414950157
sg34
g752
(S'\x07\xdf\n\x13\r.5\x07^\xb8'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g7496
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'left'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g7500
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g7504
sS'block_loop.thisRepN'
p8775
I2
sg6382
g7500
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g7507
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F1.1001848014639108
sg34
g752
(S'\x07\xdf\n\x13\r.;\x02:P'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g7580
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'right'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6779
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g7587
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6779
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6773
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.55016980523214443
sg34
g752
(S'\x07\xdf\n\x13\r/\x05\x04t\xa0'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g6489
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g6497
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F0.7501873103374237
sg34
g752
(S'\x07\xdf\n\x13\r/\n\ra\xc8'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g7580
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'left'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6779
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g7587
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6779
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6773
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.80020145126945863
sg34
g752
(S'\x07\xdf\n\x13\r/\x10\t\xe7('
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g7496
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'left'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g7500
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g7504
sS'block_loop.thisRepN'
p8827
I2
sg6382
g7500
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g7507
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.66688495781090751
sg34
g752
(S'\x07\xdf\n\x13\r/\x16\x07b\xa0'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g7580
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'left'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6779
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g7587
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6779
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6773
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.80020002577293781
sg34
g752
(S'\x07\xdf\n\x13\r/\x1c\x02\xf1\xe8'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g6737
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'right'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g6745
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F1.0506054371871869
sg34
g752
(S'\x07\xdf\n\x13\r/"\x00.\xe0'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g6553
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'right'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g6560
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.75020755239893333
sg34
g752
(S'\x07\xdf\n\x13\r/(\x01w\x00'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g7868
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'right'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g7507
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g7875
sS'block_loop.thisRepN'
p8879
I2
sg6382
g7500
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g7507
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F1.2667447459025425
sg34
g752
(S'\x07\xdf\n\x13\r/-\r} '
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g6442
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'left'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F1.6167718873693957
sg34
g752
(S'\x07\xdf\n\x13\r/4\x02\xd6\x90'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g7539
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'right'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g7546
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F0.80021142975238035
sg34
g752
(S'\x07\xdf\n\x13\r/:\x0c\xb2\x00'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6643
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'left'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6651
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F1.633916342698285
sg34
g752
(S'\x07\xdf\n\x13\r0\x04\n)\x90'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g7200
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'right'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g7207
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F1.1668695624393877
sg34
g752
(S'\x07\xdf\n\x13\r0\x0b\x05;\xd8'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g6720
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'left'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g6728
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.98344855152390664
sg34
g752
(S'\x07\xdf\n\x13\r0\x11\x08-\xc0'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g8364
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'left'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g8371
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.96685462322966487
sg34
g752
(S'\x07\xdf\n\x13\r0\x17\x08\x83\xb0'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g6442
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'left'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F0.70016404622219852
sg34
g752
(S'\x07\xdf\n\x13\r0\x1d\x08\\\xa0'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g6939
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'left'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6943
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g6947
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g6943
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F1.9167367060981633
sg34
g752
(S'\x07\xdf\n\x13\r0#\x04h\xe8'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g7105
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'left'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6533
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g7112
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6533
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6527
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F1.0835255853944545
sg34
g752
(S'\x07\xdf\n\x13\r0*\x03\x86X'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g8364
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'left'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g8371
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F2.1000835911581817
sg34
g752
(S'\x07\xdf\n\x13\r00\x05G\x90'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g7868
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'right'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g7500
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g7875
sS'block_loop.thisRepN'
p9022
I2
sg6382
g7500
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g7507
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F1.250168778873558
sg34
g752
(S'\x07\xdf\n\x13\r07\x07}\xf8'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g8364
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'left'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6500
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g8371
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F2.1501755642402713
sg34
g752
(S'\x07\xdf\n\x13\r1\x01\x0b\xa0\x90'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g6754
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'right'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6630
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g6761
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6630
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g6637
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F0.78353966930626484
sg34
g752
(S'\x07\xdf\n\x13\r1\x08\x0e\x8e\x90'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6643
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'left'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6651
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F0.73346223629596352
sg34
g752
(S'\x07\xdf\n\x13\r1\x0e\x0b\xc7\xa0'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g7496
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'left'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g7500
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g7504
sS'block_loop.thisRepN'
p9074
I2
sg6382
g7500
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g7507
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.88350579949292296
sg34
g752
(S'\x07\xdf\n\x13\r1\x14\x08\x12h'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g7267
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'right'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g7274
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F1.5666109202211373
sg34
g752
(S'\x07\xdf\n\x13\r1\x1a\x06\xf9('
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I30
sg56
Vr
sg57
Vn
sg42
I570
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I30
sg55
g11
sg56
Vr
sg45
F0.040000000000000001
sg42
I570
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I01
sg48
I25
sg47
g569
sg51
F30.66
sg46
F0.9599999999999993
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I84554576
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\xa4p\xfd?\xcd\xcc\x8c?=\nW?\\\x8f\x82?\x8f\xc2u?\xd7\xa3\xb0?)\\\x8f?\n\xd7\xa3>\x14\xae\x07@\x9a\x99\x99?\xd7\xa3\xf0?\xcd\xcc\xcc?\xb8\x1e\xc5?\x85\xeb\xd1?\xb8\x1e\xc5?\xcd\xcc\x8c?\xa4p\xfd?\xa4p\xbd?\xb8\x1e\xc5?\x00\x00\xc0?\xaeG\xe1>\\\x8f\x82?\xd7\xa3p?H\xe1\xfa?\\\x8f\x82?q=\x8a?\x14\xae\x87?\xcd\xcc\x8c?33\xf3?\x00\x00\x80?\xcd\xcc\xcc?\x1f\x85k?\x8f\xc2\xf5>\xa4p\xfd?\xaeGa>\xcd\xcc\xcc?H\xe1\xba?\x00\x00\x00\x00\x85\xebQ?\x00\x00\xc0?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'w\xbe\x13A\xdb\xf9N@\x10X\x9d@P\x8d\xd7?/\xddL@\xbaI\xa4@b\x10p@\xfc\xa99@\xaa\xf1\xde@\xbaID@u\x93H@\xee|7@\xc9v\x16@d;\x9b@\xdb\xf9n@\xbaI\xcc@\xc9vF@w\xbe\xb3@\x1dZ\x14@\x1dZ\x04@\xbaI\x84@\xb6\xf3\x1d@\xdb\xf9\xce?\xa8\xc6[@B`5@!\xb0\xaa@\xaa\xf1\x96@T\xe3\x1d@\xee|\x9f@\xdb\xf9\xce?\xdb\xf9~@!\xb0:@\x10X\x95@\xee|G@\xdb\xf9.@B`\x05@\xcd\xcc\x0cA;\xdf\x1dA1\x08\xb0@u\x93\xe8?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xe0A\x00\x00\x98A\x00\x00pA\x00\x00\xf8A\x00\x00\xc0@\x00\x00\x14B\x00\x00`A\x00\x00\x00B\x00\x00\xb8A\x00\x00PA\x00\x00\xd8A\x00\x00\xe8A\x00\x00\xc8A\x00\x00\x80A\x00\x00\x80@\x00\x00\x00A\x00\x00\x04B\x00\x00\x10B\x00\x00\xa0@\x00\x00\xa8A\x00\x00@@\x00\x00\xe0@\x00\x00\x1cB\x00\x00\xf0A\x00\x00\xc0A\x00\x00\x00@\x00\x00 A\x00\x00\x90A\x00\x00\x0cB\x00\x00\xa0A\x00\x00\xd0A\x00\x00\x18B\x00\x000A\x00\x00\x88A\x00\x00@A\x00\x00\x10A\x00\x00\x00\x00\x00\x00\x08B\x00\x00\x80?\x00\x00\xb0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\xcd\xcc\x8c?ff\xa6?\xcd\xcc\x8c?\x9a\x99\x99?ff\xe6?\xcd\xcc\x8c?\xcd\xcc\xcc?ff\xa6?\xcd\xcc\x8c?\xcd\xcc\x8c?\xcd\xcc\xcc?\xcd\xcc\x8c?\x9a\x99\xd9?ff\xa6?\x00\x00\x80?ff\xa6?\x9a\x99\x99?ff\xa6?\x9a\x99\xd9?\x00\x00\xc0?\x00\x00\x00@\x9a\x99\xd9?\xcd\xcc\x8c?33\xb3?\xcd\xcc\xcc?ff\xa6?\x00\x00\xc0?ff\xa6?\x00\x00\xc0?\x00\x00\x80?\xcd\xcc\xcc?33\xf3?\x00\x00\xc0?\xcd\xcc\x8c?\xcd\xcc\x8c?\xcd\xcc\xcc?\x9a\x99\x99?\x9a\x99\x99?\x9a\x99\xd9?\x9a\x99\xd9?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'$\x00\x00\x00&\x00\x00\x00\x19\x00\x00\x00\x14\x00\x00\x00\x0e\x00\x00\x00\x12\x00\x00\x00\x04\x00\x00\x00\x15\x00\x00\x00\x0f\x00\x00\x00#\x00\x00\x00\x1a\x00\x00\x00 \x00\x00\x00"\x00\x00\x00\t\x00\x00\x00\x06\x00\x00\x00\x02\x00\x00\x00\r\x00\x00\x00!\x00\x00\x00\x1b\x00\x00\x00\x01\x00\x00\x00\x1d\x00\x00\x00\x13\x00\x00\x00\'\x00\x00\x00\x08\x00\x00\x00\x18\x00\x00\x00\x0c\x00\x00\x00\x1e\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x17\x00\x00\x00\x03\x00\x00\x00\x07\x00\x00\x00\x10\x00\x00\x00%\x00\x00\x00\x1c\x00\x00\x00\x11\x00\x00\x00\x05\x00\x00\x00\x1f\x00\x00\x00\x16\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g298
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g235
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g207
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g319
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g144
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g361
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g200
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g326
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g263
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g193
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g291
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g305
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g277
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g214
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g130
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g158
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g333
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g354
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g137
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g249
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g123
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g151
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g375
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g312
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g270
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g116
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g172
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g228
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g347
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g242
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g284
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g368
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g179
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g221
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g186
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g165
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g102
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g340
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g109
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g256
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I84554576
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xc0@\xcd\xccl@33\xb3@\x00\x00\xc0@\xcd\xcc\x0c@\x00\x00\xc0@\x9a\x99y@\x9a\x99\xa9@ff\xa6@\x00\x00\xc0@ff\xa6@\xcd\xcc\xbc@\x00\x00\xb0@33\xa3@\xcd\xccL@fff@ff\xa6@\x00\x00\xc0@\x00\x00\xa0@\x00\x00\xc0@\xcd\xcc\x9c@ff\xa6@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@fff@\x00\x00\xc0@\x9a\x99\xb9@33\xa3@ff\xa6@\x00\x00\xc0@fff@\x9a\x99Y@\x00\x00\xc0@33S@\x00\x00\xc0@\x9a\x99\xa9@33S@\x00\x00\xc0@33\xa3@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'I\x9a\xd9?\x11l\x86?\x8b\xcd\x9b?\x97G\x84?\xe1\x1d\x88=\xa2\xac\x8a?*\xcc\x88=h\x0eo?\xd3{w?\x9b\x06\x80?\x89ED?s\x02\x80?vf\x86?\xf3\x89\x88?\x07\xe1]?\xa9\xdf\x9d?bOs?\x91\x00\x00@o\x16s?m\xd1\x8c?:\xb0j?J9\xb3?;ww?O\x16Q?\xbei&?\x7fxG@o{7?\x06\xbf;?]6D?\r\xc0;?O83?\x01\xbf;?:\x11\x01AsY\xb5?\xae\xf0n@\xf1\x86\x88?p\xf2.?U\xadJ@\xc1\xab\x8a?\xbbHD?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'\xcd\xccl@\x00\x00@@33S@33\x83@ffF@ff\x86@33s@\x9a\x99Y@ff\x86@\xcd\xccl@33S@\x00\x00@@ff\x86@\x9a\x999@\x00\x00\x80@\x00\x00@@\x9a\x99\x89@ffF@\x9a\x99y@\xcd\xccl@\x00\x00@@333@\x00\x00`@ff\x86@ff\x86@fff@fff@\x00\x00`@\x9a\x999@\x00\x00@@\xcd\xccl@fff@\x9a\x99\x89@fff@\x00\x00\x80@\x9a\x99y@33s@ff\x86@\x00\x00@@ffF@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\xc0@&\x03@/t\r\xc0\x05v\r\x80\x02v\r\xa0,t\r\xc0\x03v\r\xc0\x06v\r@\xbc\x9e\x04\xc0\xba\x9e\x04 I\x9d\x04\x80\x00v\r\x00C&\x03\xe0\x0b\x9e\x04\x80/t\r\xc0-t\r \x07v\r`,t\r \xbb\x9e\x04`\xbd\x9e\x04`\xb3\x9e\x04\xa0w$\x03\x80\r\x9e\x04\xc0\x0f\x9e\x04\x80\x0c\x9e\x04\x00\x0b\x9e\x04@\x0b\x9e\x04@\x0e\x9e\x04\xc0\x0b\x9e\x04\x00\x0e\x9e\x04\x80\x0b\x9e\x04\xc0\r\x9e\x04\x80\x0e\x9e\x04\xc0\x0e\x9e\x04\x80\x0f\x9e\x04\x00\x0c\x9e\x04@\x0c\x9e\x04\x00\r\x9e\x04\xe0t$\x03\xc0\x0c\x9e\x04\x00\t\x9e\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S"\xc9v&@B`\xf5?\xfc\xa9I@P\x8d\x97?\x10X\xc5@\xee|'@u\x93\x18@\x87\x16\x11@D\x8b\xb0@+\x87\x86?u\x93\x18@w\xbe\xb3@\x96C\x13@\x91\xed\xec?\xe9&\xf1?\xee|\xdf@\x1dZ\xa4?\x83\xc0\xca?!\xb0j@\xe9&\xb1?!\xb0\n@\xc5 \xe0?\xa0\x1ao?\x89A@?P\x8d\xb7?\xf0\xa7f?\x83\xc0\x8a?\xa0\x1a\xaf?\x96Cs@\x91\xed\xcc?\xd3Mb?\x06\x81\xb5?+\x87\xa6?\x83\xc0j?\xa0\x1a\x8f?P\x8d7?\xa8\xc6K@\xc5 \xa0?\xa8\xc6[@\x0e-b@"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I84554576
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'\xc8\xd2\xad\r\x90u\x9f\x04\xf0\xd2\xad\r\xc8\xd2\xad\r\x18\xd3\xad\r\x90u\x9f\x04\x00u\x9f\x04h\xd3\xad\r\xf0\xd2\xad\r`u\x9f\x04@\xd3\xad\rh\xd3\xad\r\xd0t\x9f\x04\x18\xd3\xad\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'\xb8\xa1`\x02\x90\xbe\xc0\x030[\xed\x04\xa0Q\xed\x04\x80V\xed\x04\xb8Z\xed\x04\x10]\xed\x04\xa8R\xed\x04\x90\xf8\xf8\x04`\xf2\xf8\x04\xc8\xf0\xf8\x04\xc0\xf5\xf8\x04\xf0\xfe\xf8\x040\xf8\xf8\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g743
sg82
g777
sg83
g748
sg84
g781
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g786
sg82
g787
sg83
g791
sg84
g792
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g755
sg82
g797
sg83
g760
sg84
g801
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g806
sg82
g807
sg83
g811
sg84
g812
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g817
sg82
g818
sg83
g822
sg84
g823
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g766
sg82
g828
sg83
g771
sg84
g832
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g837
sg82
g838
sg83
g842
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g806
sg82
g848
sg83
g811
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g817
sg82
g857
sg83
g822
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g837
sg82
g866
sg83
g842
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g786
sg82
g875
sg83
g791
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I84554576
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I84554576
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'\x08\xb6\xaf\r \xe5\xaf\r@\x06\x9d\x04\xb8\xe3\xaf\r\xc0\r\x9d\x04\xe0\xf0\xaf\r\xe0\xe3\xaf\r\x80\t\x9d\x04@\xb6\xaf\r\x10\xf1\xaf\r\x08\xb6\xaf\r\x08\xe4\xaf\r0\xe4\xaf\r@\x06\x9d\x04\x08\xe4\xaf\rX\xe4\xaf\r\x80\xe4\xaf\r\x80\t\x9d\x04@\xf1\xaf\r\xd0\xf1\xaf\r@\xf1\xaf\r\x80\xe4\xaf\r\xa8\xe4\xaf\r\xc0\r\x9d\x04\xb8\xe3\xaf\rX\xe4\xaf\r\xd0\xe4\xaf\rx\xb6\xaf\r\xa0\xf1\xaf\rp\xf1\xaf\r\xb0\xb6\xaf\r \xb7\xaf\rX\xe4\xaf\r\x08\xe4\xaf\r\x80\xe4\xaf\r@\xf1\xaf\r\xe0\xf0\xaf\r\xc0\r\x9d\x04p\xf1\xaf\r\x90\xe3\xaf\r\xe8\xe5\xaf\r \xb7\xaf\r\xd0\xe4\xaf\r\xa8\xe4\xaf\rH\xe5\xaf\rX\xe4\xaf\r\xb8\xe3\xaf\r\x80\xe4\xaf\r@\x06\x9d\x04\xe0\t\x9d\x04@\xb6\xaf\r\x10\xf1\xaf\r@\xf1\xaf\r\x08\xb6\xaf\r\xd0\xe4\xaf\r\x90\xe3\xaf\rx\xb6\xaf\rX\xe4\xaf\r\x80\t\x9d\x04\xe0\xf0\xaf\r@\x06\x9d\x04\x80\t\x9d\x04\x80\x02\x9d\x04 \xe5\xaf\r\x10\xf1\xaf\rp\xf1\xaf\r\xd0\xe4\xaf\r\xa8\xe4\xaf\r@\xb6\xaf\r\xe0\xe3\xaf\r\x80\t\x9d\x04\x90\xe3\xaf\rp\xf1\xaf\r\xd0\xf1\xaf\r\x10\xf1\xaf\r\xa8\xe4\xaf\r\xe0\xe3\xaf\r@\xf1\xaf\r\x80\t\x9d\x04 \xe5\xaf\r\xa8\xe4\xaf\r\x90\xf2\xaf\rx\xb6\xaf\r\xb0\xb6\xaf\rx\xb6\xaf\r\x10\xf1\xaf\r\x80\x02\x9d\x04\xf0\xf2\xaf\r\x80\xe4\xaf\r\x10\xf1\xaf\r\xb8\xe3\xaf\r\x10\xf1\xaf\r\x90\xf2\xaf\r\x90\xe3\xaf\r\x80\xe4\xaf\r\xd0\xe4\xaf\r\x80\x02\x9d\x04\x08\xb6\xaf\r\xb0\xb6\xaf\r0\xe4\xaf\r\x08\xb6\xaf\r\xc0\xf2\xaf\rp\xf1\xaf\r\xa8\xe4\xaf\r@\x06\x9d\x04\xc0\r\x9d\x04\x80\xe4\xaf\r\xe0\xe3\xaf\r\x08\xe4\xaf\rx\xb6\xaf\rX\xb7\xaf\r\xe0\xe3\xaf\r@\x06\x9d\x04\x90\xf2\xaf\rX\xe4\xaf\r\x90\xe3\xaf\r0\xe4\xaf\r\xa8\xe4\xaf\rx\xb6\xaf\r\x80\xe4\xaf\r\x10\xf1\xaf\r\xa0\xf1\xaf\r\xe8\xe5\xaf\r\xe0\xf0\xaf\r\xe0\xe3\xaf\r\x08\xb6\xaf\rX\xe4\xaf\r\xb8\xe3\xaf\r\x08\xb6\xaf\r0\xe4\xaf\r0\xf2\xaf\r\x08\xb6\xaf\r@\xb6\xaf\r\xa0\xf1\xaf\r\xc0\r\x9d\x040\xe4\xaf\r\xe0\xe3\xaf\r\x10\xf1\xaf\r\xb0\xb6\xaf\r\x08\xe4\xaf\r\xc0\r\x9d\x04p\xf1\xaf\r\x80\xe4\xaf\r\xe0\xf0\xaf\r\xd0\xe4\xaf\r@\x06\x9d\x04\xa8\xe4\xaf\r0\xe4\xaf\r\xe0\xe3\xaf\r\x90\xe3\xaf\r\xa8\xe4\xaf\r\xe0\xf0\xaf\r\x80\t\x9d\x04\xa8\xe4\xaf\r\xc0\xf2\xaf\r\xd0\xe4\xaf\r\x98\xe5\xaf\rp\xf1\xaf\r\xb0\xb6\xaf\r\xb8\xe3\xaf\r\x90\xe3\xaf\r@\xf1\xaf\rp\xf1\xaf\r@\xf1\xaf\r\xc0\xf2\xaf\r\xc0\r\x9d\x040\xe4\xaf\r0\xf2\xaf\r\xd0\xe4\xaf\r\x80\t\x9d\x04\x08\xe4\xaf\r\xb0\xb6\xaf\r\x80\x05\x9d\x04@\xb6\xaf\r\x80\t\x9d\x04\x08\xb6\xaf\r\xc0\r\x9d\x04x\xb6\xaf\rp\xe5\xaf\r\xb0\xb6\xaf\r\x80\xe4\xaf\r\xe0\xf0\xaf\r\x08\xe4\xaf\r\xb8\xe3\xaf\r\xe0\xe3\xaf\r\xe8\xb6\xaf\r\xe8\xe5\xaf\rX\xe4\xaf\rp\xf1\xaf\r@\x06\x9d\x04\x80\x02\x9d\x04\xd0\xe4\xaf\r\x00\xf2\xaf\r0\xe4\xaf\r\x08\xe4\xaf\r0\xe4\xaf\r\xe0\xf0\xaf\r@\xb6\xaf\r\xc0\r\x9d\x04\xe0\t\x9d\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\xe0Yv\r\x00\xbc\x9e\x04@\xb3\x9e\x04\x00\xba\x9e\x04\x00\xb9\x9e\x04`\xbb\x9e\x04\xa0\xc6v\r@\x0f\x9e\x04\x00\x07\x9d\x04\xc0\xc2v\r`\xc2v\r\xe0\xbc\x9e\x04\xa0\xba\x9e\x04\xa0\xb8\x9e\x04`\xbc\x9e\x04 \xa8%\x03`\xa8%\x03\xe0\xaa%\x03\x00\xa6%\x03`\xad%\x03\x80\xa4%\x03`\xa4%\x03@\xa5%\x03\x00\xa4%\x03\xc0\xab%\x03\x00\xa5%\x03`\xaa%\x03\xa0\xab%\x03\x80\xaa%\x03\x80\xac%\x03\x80\x1a#\x03\x00\x1e#\x03`z$\x03`\x1f#\x03\xe0\x1f#\x03\x80\x1f#\x03\x00\xc2v\r \x1f#\x03@\xc2#\x03\xc0\xc0#\x03`\xc0#\x03 \xc0#\x03\x80\xc1#\x03\x80\xc0#\x03@\xa4%\x03\xe0\x1e#\x03\xc0\xb0s\r\xe0\xb2s\r\xc0\xbas\r\xe0\xb0s\r@\xb1s\r\xa0\xb0s\r\x00\xbbs\r\x00\xb9s\r\xa0\xb2s\r@\xb3s\r \xb0s\r\x80\xb0s\r\x00\xb1s\r\xa0\xc7p\r\x00\xccp\r\x80\xcbp\r@\xc6p\r@\xc7p\r\xc0\xcbp\r`\xccp\r\xa0\xc3p\r\xa0\xccp\r\xe0\xc2p\r \xc0p\r\x00\xc7p\r\x80\xccp\r`\xc6p\r \xcbp\r\x80\xc6p\r\x80\xc3p\r@\xcbp\r`\xcdp\r\x00\xcbp\r\x00\xc3p\r@\xcdp\r`\xc7p\r\xa0\xc6p\r \xc6p\r\x80\xc7p\r \xcdp\r\xa0\xc2p\r\x00\xc6p\r\xe0\xcbp\r\x80\xcdp\r \xc7p\r\xc0\xc2p\r`\xc1#\x03\xe0\xcfp\r@\xc0#\x03\xa0\x92\xac\x04@\x92\xac\x04`\x91\xac\x04\x00\x93\xac\x04\xe0\x92\xac\x04\xa0\x90\xac\x04`\x93\xac\x04\x80\x93\xac\x04 \x91\xac\x04\xe0\x90\xac\x04\xe0\x93\xac\x04\x00\x94\xac\x04\xc0Q\x9f\x04\xa0P\x9f\x04\x80\x94\xac\x04 \x94\xac\x04@\x94\xac\x04 \x93\xac\x04\x80\x92\xac\x04\xa0\x94\xac\x04\xe0\x94\xac\x04\xc0\x94\xac\x04\x00\x91\xac\x04\x00\x95\xac\x04`\x95\xac\x04@\x95\xac\x04\xa0\x91\xac\x04@\x93\xac\x04 \x96\xac\x04\xc0\x93\xac\x04\xc0\x91\xac\x04\x80\x91\xac\x04\x00\x96\xac\x04`\x96\xac\x04\xa0\x96\xac\x04\xc0\x96\xac\x04\xe0\x96\xac\x04 \x95\xac\x04`\x97\xac\x04\xe0\x95\xac\x04\xc0\x97\xac\x04\xa0\x97\xac\x04@\x97\xac\x04@\x91\xac\x04\xc0\x92\xac\x04\x80\x97\xac\x04\xe0\x97\xac\x04@\x98\xac\x04 \x98\xac\x04\x80\x98\xac\x04\xa0\x98\xac\x04\x00\x92\xac\x04 \x92\xac\x04\x00\x99\xac\x04\xe0\x98\xac\x04@\x99\xac\x04 \x99\xac\x04\x80\x99\xac\x04`\x99\xac\x04\xc0\x95\xac\x04\xe0\x99\xac\x04\xc0\x99\xac\x04 \x97\xac\x04\x00\x9a\xac\x04`\x9a\xac\x04@\x9a\xac\x04\x80\x95\xac\x04\xc0\x9a\xac\x04\xa0\x9a\xac\x04\xe0\x91\xac\x04\xe0\x9a\xac\x04\x00\x9b\xac\x04 \x9b\xac\x04\x80\x9b\xac\x04\xa0\x9b\xac\x04\x00\x98\xac\x04`\x98\xac\x04\x00\x9c\xac\x04\xe0\x9b\xac\x04\x80\x96\xac\x04 \x9c\xac\x04\x80\x9c\xac\x04`\x9c\xac\x04\x80\x9a\xac\x04\xa0\x9c\xac\x04\x00\x9d\xac\x04\xe0\x9c\xac\x04@\x9d\xac\x04 \x9d\xac\x04`\x92\xac\x04\xa0\x9d\xac\x04\x80\x9d\xac\x04\xa0\x93\xac\x04\x00\x9e\xac\x04 \x9e\xac\x04@\x9c\xac\x04\xc0\x98\xac\x04\x80\x9e\xac\x04`\x9e\xac\x04`\x94\xac\x04\xa0\x9e\xac\x04\x00\x9f\xac\x04 \x9f\xac\x04@\x96\xac\x04@\x9b\xac\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'vX\xb5?qX\x95?\x15\xf3\xae?\xba\x82\x88?{Es?\xde\x95H?{\xc2{?i\xa7Y?\x1f\xa6Y?\xfc\xb1\xca?\x95\xb1\x8a?\xcai\x86?w(\x82?\xf2\xdbL?\x9f\xf5\xae?\xe1~\x97?\x03\x8e\xa8?P\xea]?\xce&\xa2?\'#\xb1?jz\x97?\x04\xbf\xbb?\xf6$\xc2?em\x86?\xcbM\x84?t\xbe\xbb?\x15\x06\xa0?i6\x93?\xed\xa5\xaa?\x81\xbc\xca?\xc9\xff\x9f?\x02\xf6n?\xc3\xbe\x9b?\xf7l\xc6?\x1e\xfc\x8e?i%\xa2?O\x9a)@*\x9c\xb9?\x86}\xd7?\xccz\'@\x14C\xa4?\xe5_U?\x02\xa8Y?\xf2$\xa2?\xfb\xf0\xbd?xj\xc6?H\xa5\x8a?\xa6}\xb7?\xb0\xadj?\xa3&\xa2?\x1f9\xb3?\xe35\x13@R|\xb7?\x007\x93?\xba\xe5\x9d?\xd5\x13\x11@\xcb\x14\x91?\x1d7\x93?R\x01\x00@M\xa1\xd9?\x94\x16\x91?\xf9i\x86?\xec\xaf\x8a?\xca\x8e\x88?)\xce\x9b?\xf2n\xc6?\xae\x15\xd1?\xee\xb1j?\xf67\x93?\x00\xd3j?\x896\xb3?Tl\x86?\x98\xb0\xea?\xa1\xc1\x9b?\x92\xf0\xbd?1\xb2j?m\xd5L?\x9c\x8b\x88?\xd78\xb3?\x88bU?\xec\x05\x80?X`U?\xff\xf4n?UB\xe4?\xcd\xd3\x8c?\xe4\xae\xca?\xfd&b?\x07\x867?\xbb%\x82?\xf2[\xb5?\xe8\xd9]?7$\x82?\xb6\x83w?_As?\xc3\xf5\xae?\x1d9\x93?r\x17\x91?L?s?=\xc0{?ji&@\xeb\xa5Y?\x9f\xe7]?\x8b\xc9;?q\xb7j?\x9f\xe9]?\x7f\x9bw?\x8cQD?n\x96H?_6\x03@c\x1dQ?\x98Ib?N\x18Q?rA3?%\n@?&J\xa4?\x8b]\x95?0J\xa4?\x02)b?:\xb2j?\x83\x84w?\x0c\xef\xbd?,\rQ?\xb0y\x97?)\x84w?5pf?\x85=s?1\xa0\x99?|\x7fH?\x9c\xb3j?\xfb\x86f?\xbdl\x86?\xfd\x19Q?\xab.b?:\xe9.?\x00\\\x95?Jhf@\x00rf?"nf?h\x8a\x88?1\xb0\xea?\x14\x02^?\x89\xa4Y?*\xbf\x9b?@>s?\x12\xbd\x0b@\xc8gD?E\xf4.?\xd4\xf6n?\n\xb8j?\x19\xb4j?\xd293?\xb5\x8bf?\xe8&\xe2?e\xeb]?\xa9\x16\xd1?W\x8b\x88?\xc3F\x93?\xbe\x1bQ?\xf5SU?\xe7\x16"?\xb5\xf5n?\x95j\x86?\xc7\x95H?\xfc\xa0Y?\n\xc9{?%\xc0{?\xf7\xa6Y?\xa5\\U?\xef\xf5L?\xa3&\xc2?\x18\x9ew?TGD?\x07\x18Q?\xee4b?\xb7\x9fY?\xfdaU?npf?\xff\x06\x80?\xf4LD?J\xcb\x9b?w(b?\xf7\xec]?\t\'\x82?\xb1\xa7*?Wj\x86?\xb3QD?\x84%"?\x96(\x82?\x94J\x84?G\xf5.?\xc9\x92H?\x82U%@i\xdf\xbd?](\xa2?\x82\xc5;?%\xb1j?x\x1aA@\xd7?3?\x86(b?\xa5\x17\x91?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'H\xfe\xf8\x048\xf3\xf8\x04P\x0f\xee\x04\xd8\x08\xee\x04\xb8\x07\xee\x04x\x08\xee\x04p\x01\xee\x04\xd8\x0b\xee\x04\xa8\x08\xee\x04\x18\x0b\xee\x04\x00\x02\xee\x04\x80\x0f\xee\x04\x18\x0e\xee\x048\x0f\xee\x04\x18\x02\xee\x04h\t\xee\x04\xd8\x02\xee\x04x\x0b\xee\x04\xc0\x0b\xee\x04\xf0\x0b\xee\x04\x98\x06\xee\x04\xc0\x05\xee\x04\xe8\n\xee\x04h\x00\xee\x04H\x0e\xee\x04p\n\xee\x04\x00\x0e\xee\x04\xc8\x06\xee\x04\x00\x0b\xee\x04`\x08\xee\x04\xb0\x0c\xee\x04\x80\x06\xee\x04P\x00\xee\x04\xd8\x0e\xee\x04h\x03\xee\x04\xa0\x04\xee\x04H\x08\xee\x04@\x04\xee\x04\xc8\x0c\xee\x04\x90\x0b\xee\x04@\n\xee\x04\x98\t\xee\x04\xf0\x0e\xee\x04\x98\x0f\xee\x04 \x06\xee\x04\xb8\x04\xee\x04\xf0\x08\xee\x04x\x0e\xee\x04\xe0\x06\xee\x04\xc8\x0f\xee\x04\x80\t\xee\x04\x98\x0c\xee\x04\x90\x0e\xee\x04\xd0\n\xee\x04\x08\x0c\xee\x04\x18\x08\xee\x04P\t\xee\x04\xa0\xf4\xf1\x04\x18\xf8\xf1\x04\x08\xf3\xf1\x04\x80\xf9\xf1\x048\xfc\xf1\x04\x88\xf7\xf1\x04\xf8\xf0\xf1\x04\xc8\xf3\xf1\x04\x10\xf4\xf1\x04\xa0\xf1\xf1\x048\xf0\xf1\x04X\xf1\xf1\x04p\xfa\xf1\x04\xc8\xf9\xf1\x04\x88\xf1\xf1\x04\xf0\xf2\xf1\x04(\xf4\xf1\x04p\xf1\xf1\x04P\xf3\xf1\x04p\xf4\xf1\x04\x98\xf0\xf1\x04\xc0\xf8\xf1\x04\xf8\xf9\xf1\x04\xb0\xf6\xf1\x04`\xfb\xf1\x04h\xf6\xf1\x04@\xf7\xf1\x048\xf6\xf1\x048\xf9\xf1\x04\xd8\xf8\xf1\x04X\xfa\xf1\x040\xf2\xf1\x04\x10\xfa\xf1\x04\xe8\xf4\xf1\x04X\xf7\xf1\x04\xd0\xf1\xf1\x04`\xf2\xf1\x04\xd8\xf2\xf1\x04\xd0\xfd\xf1\x04\xb0\xf3\xf1\x04\x80\xfc\xf1\x04\x18\xf5\xf1\x04P\xf6\xf1\x04\xf0\xf8\xf1\x04\xe0\xfc\xf1\x04h\xf3\xf1\x04\x98\xff\xf1\x04\xe8\xfd\xf1\x04\xb0\xf9\xf1\x04@\xfa\xf1\x04P\xfc\xf1\x04\xa0\xf7\xf1\x04P\xf0\xf1\x04\x10\xf1\xf1\x04H\xf5\xf1\x04\x80\xf3\xf1\x040\xf8\xf1\x04\xd8\xfb\xf1\x04\x80\xff\xf1\x04\x00\xf5\xf1\x04\xe0\xf9\xf1\x04\xc0\xfe\xf1\x04\xe8\xf1\xf1\x048\xff\xf1\x040\xfb\xf1\x04\x90\xfb\xf1\x048\xf3\xf1\x04\x10\xfd\xf1\x04\xe8\xfa\xf1\x04\x18\xfe\xf1\x04H\xf2\xf1\x04P\xff\xf1\x04h\xf9\xf1\x04\x80\xf6\xf1\x04\xa8\xf2\xf1\x04p\xf7\xf1\x04\xf8\xf3\xf1\x04\xb0\xff\xf1\x04(\xfd\xf1\x04\x00\xfe\xf1\x04\x00\xfb\xf1\x04x\xf2\xf1\x04\x90\xf8\xf1\x040\xf5\xf1\x04\xb8\xf7\xf1\x04\xf8\xf6\xf1\x04p\xfd\xf1\x04\x08\xfc\xf1\x04\xf8\xfc\xf1\x04(\xfa\xf1\x04@\xf4\xf1\x04\xe0\xf0\xf1\x04P\xf9\xf1\x04 \xf9\xf1\x04\xa8\xfe\xf1\x04\xb0\xfc\xf1\x04\xa0\xfd\xf1\x04h\xf0\xf1\x04\x98\xf9\xf1\x04\xb8\xfd\xf1\x04h\xfc\xf1\x04\x98\xfc\xf1\x04\xe8\xf7\xf1\x04\xd0\xf4\xf1\x04`\xf8\xf1\x04\x18\xfb\xf1\x04\x80\xf0\xf1\x04\xe0\xf6\xf1\x04\xb8\xfa\xf1\x04\x90\xfe\xf1\x04\xc8\xfc\xf1\x04\xa8\xf8\xf1\x04\x10\xf7\xf1\x04`\xfe\xf1\x04\x18\xf2\xf1\x04\xc0\xfb\xf1\x04\xc8\xf6\xf1\x04 \xfc\xf1\x04\xe0\xf3\xf1\x04@\xfd\xf1\x04X\xfd\xf1\x04\x88\xfa\xf1\x04H\xfb\xf1\x04 \xf3\xf1\x04\xe0\xff\xf1\x04\xa8\xfb\xf1\x04 \xff\xf1\x04h\xff\xf1\x04\xf0\xfe\xf1\x04\xb8\xf1\xf1\x04X\xf4\xf1\x04\xd8\xfe\xf1\x04x\xfe\xf1\x04\x00\xf2\xf1\x04\x90\xf2\xf1\x04\x98\xf6\xf1\x04H\xf8\xf1\x04H\xfe\xf1\x04\xb8\xf4\xf1\x04@\xf1\xf1\x04\x00\xf8\xf1\x04\x88\xfd\xf1\x04\xa0\xfa\xf1\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g1055
sg894
g1051
sg908
g1062
sg903
g1059
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g1085
sg894
g1081
sg908
g1092
sg903
g1089
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g1102
sg894
g1098
sg908
g1109
sg903
g1106
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1085
sg894
g1128
sg908
g1092
sg903
g1135
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1147
sg894
g1143
sg908
g1154
sg903
g1151
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g1164
sg894
g1160
sg908
g1171
sg903
g1168
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g1164
sg894
g1233
sg908
g1171
sg903
g1240
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g970
sg894
g1265
sg908
g977
sg903
g1272
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1147
sg894
g1293
sg908
g1154
sg903
g1300
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g1312
sg894
g1308
sg908
g1319
sg903
g1316
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1329
sg894
g1325
sg908
g1336
sg903
g1333
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g953
sg894
g1342
sg908
g960
sg903
g1349
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1361
sg894
g1357
sg908
g1368
sg903
g1365
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1378
sg894
g1374
sg908
g1385
sg903
g1382
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1147
sg894
g1143
sg908
g1154
sg903
g1151
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1085
sg894
g1128
sg908
g1092
sg903
g1135
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1164
sg894
g1160
sg908
g1171
sg903
g1168
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g987
sg894
g1456
sg908
g994
sg903
g1463
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g970
sg894
g1265
sg908
g977
sg903
g1272
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g1361
sg894
g1357
sg908
g1368
sg903
g1365
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g925
sg894
g1497
sg908
g919
sg903
g1504
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1378
sg894
g1512
sg908
g1385
sg903
g1519
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g936
sg894
g1527
sg908
g943
sg903
g1534
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1312
sg894
g1308
sg908
g1319
sg903
g1316
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g1252
sg894
g1555
sg908
g1259
sg903
g1562
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g970
sg894
g1265
sg908
g977
sg903
g1272
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1147
sg894
g1143
sg908
g1154
sg903
g1151
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g953
sg894
g1342
sg908
g960
sg903
g1349
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g1164
sg894
g1233
sg908
g1171
sg903
g1240
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g936
sg894
g1527
sg908
g943
sg903
g1534
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1085
sg894
g1128
sg908
g1092
sg903
g1135
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1055
sg894
g1051
sg908
g1062
sg903
g1059
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g899
sg894
g1687
sg908
g909
sg903
g1694
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1312
sg894
g1702
sg908
g1319
sg903
g1709
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1329
sg894
g1730
sg908
g1336
sg903
g1737
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g1147
sg894
g1143
sg908
g1154
sg903
g1151
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1021
sg894
g1758
sg908
g1028
sg903
g1765
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1038
sg894
g1812
sg908
g1045
sg903
g1819
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g925
sg894
g1497
sg908
g919
sg903
g1504
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g1055
sg894
g1051
sg908
g1062
sg903
g1059
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1361
sg894
g1853
sg908
g1368
sg903
g1860
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1312
sg894
g1308
sg908
g1319
sg903
g1316
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g1021
sg894
g1758
sg908
g1028
sg903
g1765
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1361
sg894
g1853
sg908
g1368
sg903
g1860
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g987
sg894
g1456
sg908
g994
sg903
g1463
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1055
sg894
g1972
sg908
g1062
sg903
g1979
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g1194
sg894
g2013
sg908
g1201
sg903
g2020
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g1021
sg894
g1758
sg908
g1028
sg903
g1765
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g1252
sg894
g1555
sg908
g1259
sg903
g1562
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g1194
sg894
g2013
sg908
g1201
sg903
g2020
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1329
sg894
g1325
sg908
g1336
sg903
g1333
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g1378
sg894
g1374
sg908
g1385
sg903
g1382
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1329
sg894
g1730
sg908
g1336
sg903
g1737
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g1055
sg894
g1972
sg908
g1062
sg903
g1979
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g1038
sg894
g1812
sg908
g1045
sg903
g1819
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1361
sg894
g1853
sg908
g1368
sg903
g1860
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1164
sg894
g1160
sg908
g1171
sg903
g1168
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g1055
sg894
g1972
sg908
g1062
sg903
g1979
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1055
sg894
g1972
sg908
g1062
sg903
g1979
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g1194
sg894
g2013
sg908
g1201
sg903
g2020
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g925
sg894
g1497
sg908
g919
sg903
g1504
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g1164
sg894
g1233
sg908
g1171
sg903
g1240
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1312
sg894
g1308
sg908
g1319
sg903
g1316
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1038
sg894
g1812
sg908
g1045
sg903
g1819
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g899
sg894
g1687
sg908
g909
sg903
g1694
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1378
sg894
g1512
sg908
g1385
sg903
g1519
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g1102
sg894
g2301
sg908
g1109
sg903
g2308
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g899
sg894
g1687
sg908
g909
sg903
g1694
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g1329
sg894
g1325
sg908
g1336
sg903
g1333
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1361
sg894
g1357
sg908
g1368
sg903
g1365
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g970
sg894
g1265
sg908
g977
sg903
g1272
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1164
sg894
g1233
sg908
g1171
sg903
g1240
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1004
sg894
g2407
sg908
g1011
sg903
g2414
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g1085
sg894
g1128
sg908
g1092
sg903
g1135
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1329
sg894
g1730
sg908
g1336
sg903
g1737
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g1312
sg894
g1702
sg908
g1319
sg903
g1709
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g1004
sg894
g2407
sg908
g1011
sg903
g2414
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g936
sg894
g1527
sg908
g943
sg903
g1534
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g1194
sg894
g2013
sg908
g1201
sg903
g2020
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1147
sg894
g1293
sg908
g1154
sg903
g1300
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g925
sg894
g1497
sg908
g919
sg903
g1504
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1102
sg894
g2301
sg908
g1109
sg903
g2308
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1252
sg894
g1555
sg908
g1259
sg903
g1562
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1329
sg894
g1325
sg908
g1336
sg903
g1333
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1164
sg894
g1160
sg908
g1171
sg903
g1168
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1055
sg894
g1051
sg908
g1062
sg903
g1059
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1378
sg894
g1512
sg908
g1385
sg903
g1519
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1004
sg894
g2407
sg908
g1011
sg903
g2414
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1147
sg894
g1293
sg908
g1154
sg903
g1300
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g953
sg894
g1342
sg908
g960
sg903
g1349
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g899
sg894
g1687
sg908
g909
sg903
g1694
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1102
sg894
g1098
sg908
g1109
sg903
g1106
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1147
sg894
g1143
sg908
g1154
sg903
g1151
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g1038
sg894
g1812
sg908
g1045
sg903
g1819
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g970
sg894
g1265
sg908
g977
sg903
g1272
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1102
sg894
g1098
sg908
g1109
sg903
g1106
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1055
sg894
g1972
sg908
g1062
sg903
g1979
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1378
sg894
g1512
sg908
g1385
sg903
g1519
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g1085
sg894
g1128
sg908
g1092
sg903
g1135
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g1361
sg894
g1853
sg908
g1368
sg903
g1860
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1164
sg894
g1233
sg908
g1171
sg903
g1240
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g987
sg894
g1456
sg908
g994
sg903
g1463
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1312
sg894
g1702
sg908
g1319
sg903
g1709
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g936
sg894
g1527
sg908
g943
sg903
g1534
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g1252
sg894
g1555
sg908
g1259
sg903
g1562
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1102
sg894
g1098
sg908
g1109
sg903
g1106
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1004
sg894
g2407
sg908
g1011
sg903
g2414
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g1252
sg894
g1555
sg908
g1259
sg903
g1562
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1021
sg894
g1758
sg908
g1028
sg903
g1765
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1329
sg894
g1325
sg908
g1336
sg903
g1333
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g1312
sg894
g1308
sg908
g1319
sg903
g1316
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g1102
sg894
g2301
sg908
g1109
sg903
g2308
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1361
sg894
g1357
sg908
g1368
sg903
g1365
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1378
sg894
g1374
sg908
g1385
sg903
g1382
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g953
sg894
g1342
sg908
g960
sg903
g1349
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g925
sg894
g1497
sg908
g919
sg903
g1504
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1361
sg894
g1357
sg908
g1368
sg903
g1365
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1194
sg894
g2013
sg908
g1201
sg903
g2020
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g1329
sg894
g1730
sg908
g1336
sg903
g1737
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g1102
sg894
g2301
sg908
g1109
sg903
g2308
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g1147
sg894
g1293
sg908
g1154
sg903
g1300
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1312
sg894
g1702
sg908
g1319
sg903
g1709
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g1085
sg894
g1081
sg908
g1092
sg903
g1089
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g1378
sg894
g1374
sg908
g1385
sg903
g1382
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1021
sg894
g1758
sg908
g1028
sg903
g1765
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g899
sg894
g1687
sg908
g909
sg903
g1694
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1329
sg894
g1730
sg908
g1336
sg903
g1737
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1004
sg894
g2407
sg908
g1011
sg903
g2414
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1378
sg894
g1374
sg908
g1385
sg903
g1382
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1164
sg894
g1160
sg908
g1171
sg903
g1168
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g987
sg894
g1456
sg908
g994
sg903
g1463
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g1085
sg894
g1081
sg908
g1092
sg903
g1089
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g953
sg894
g1342
sg908
g960
sg903
g1349
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1378
sg894
g1512
sg908
g1385
sg903
g1519
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g1147
sg894
g1293
sg908
g1154
sg903
g1300
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g1361
sg894
g1853
sg908
g1368
sg903
g1860
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g936
sg894
g1527
sg908
g943
sg903
g1534
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1312
sg894
g1702
sg908
g1319
sg903
g1709
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g1055
sg894
g1051
sg908
g1062
sg903
g1059
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1102
sg894
g2301
sg908
g1109
sg903
g2308
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g1085
sg894
g1081
sg908
g1092
sg903
g1089
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1102
sg894
g1098
sg908
g1109
sg903
g1106
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g987
sg894
g1456
sg908
g994
sg903
g1463
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g1038
sg894
g1812
sg908
g1045
sg903
g1819
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1085
sg894
g1081
sg908
g1092
sg903
g1089
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I84554576
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'\xe0\xe8\xfa\r0\xb8\xfa\rP\xe7\xfa\r\x08\xe9\xfa\r0\xe9\xfa\rx\xe7\xfa\r`\xb8\xfa\r\xc8\xe7\xfa\r\x10\x8b\xfa\rH\x8b\xfa\r\x08\xe9\xfa\r\x80\x8b\xfa\rx\xe7\xfa\r\xc0\x9c\xac\x04\xf0\xe7\xfa\rP\xe7\xfa\r\x18\xe8\xfa\rx\xe7\xfa\r\xa0\xb7\xfa\r\xf0\xe7\xfa\r\xa0\xe7\xfa\r\xc0\x9f\xac\x04X\xe9\xfa\rP\xe7\xfa\r\xd0\xb7\xfa\r@\xe8\xfa\r\xa0\xe7\xfa\r\xa8\xe9\xfa\r\xc0\x9c\xac\x04\x10\x8b\xfa\r\x00\xb8\xfa\r\x08\xe9\xfa\r\xc0\x9c\xac\x04p\xb7\xfa\rH\x8b\xfa\r\xe0\x9f\xac\x04\xf0\xe7\xfa\r\x80\x8b\xfa\r\x90\xe8\xfa\r \xf0\xfa\r\x80\xe9\xfa\rp\xb7\xfa\r@\xe8\xfa\r\x00\xb8\xfa\r\x90\xe8\xfa\rH\x8b\xfa\r \xb9\xfa\rh\xe8\xfa\r\xc8\xe7\xfa\r\x90\xe8\xfa\rH\x8b\xfa\r\x10\x8b\xfa\r@\xf0\xfa\r\xc0\x9f\xac\x04\xc0\x9c\xac\x04p\xb7\xfa\r\xf0\xe7\xfa\r\xc0\x9f\xac\x04\xa0\xe7\xfa\r\xc0\x9c\xac\x04H\x8b\xfa\r\xf0\xe7\xfa\r\x00\xb8\xfa\r\xf0\x8b\xfa\r\xd0\xb7\xfa\rx\xe7\xfa\r\xd8\x8a\xfa\rH\x8b\xfa\r\xa0\xb7\xfa\r\x18\xe8\xfa\r\xe0\x9f\xac\x04@\xe8\xfa\r \xb9\xfa\r\xc8\xe7\xfa\r\xc0\x9f\xac\x04\xa8\xe9\xfa\r\xd8\x8a\xfa\r\xc0\x9c\xac\x04\x00\xb8\xfa\r \xb9\xfa\r@\xe8\xfa\rH\x8b\xfa\rh\xe8\xfa\r\xd0\xb7\xfa\r@\xe8\xfa\r@\xf0\xfa\r\xa0\xb7\xfa\rp\xb7\xfa\r\xc0\x9f\xac\x04\x90\xe8\xfa\r\xd0\xb7\xfa\r\xa0\x9f\xac\x04p\xb7\xfa\r\xc0\x9c\xac\x04\x10\x8b\xfa\rx\xe7\xfa\r\xa0\xb7\xfa\rH\x8b\xfa\r\x00\xb8\xfa\r@\xe8\xfa\r\x00\xb8\xfa\rh\xe8\xfa\r\x90\xe8\xfa\r\x80\xe9\xfa\r\xf0\xe7\xfa\rp\xb7\xfa\r\x80\xb9\xfa\r\xa8\xe9\xfa\r\xf0\x8b\xfa\rx\xe7\xfa\r\xe0\xe8\xfa\r\x10\x8b\xfa\rP\xe7\xfa\r\x80\x8b\xfa\r0\xe9\xfa\r\xc8\xe7\xfa\r \xf0\xfa\rh\xe8\xfa\r\xa0\xb7\xfa\r\xe0\x9f\xac\x04\xc0\x9f\xac\x04x\xe7\xfa\r\xf0\x8b\xfa\r\xc8\xe7\xfa\rh\xe8\xfa\r@\xe8\xfa\r\xf0\xb8\xfa\r\xd8\x8a\xfa\r\x00\xb8\xfa\rH\x8b\xfa\r\x10\x8b\xfa\r\xc0\x9c\xac\x04P\xe7\xfa\r\x00\xb8\xfa\r@\xf0\xfa\r\xd8\x8a\xfa\r\x08\xe9\xfa\r\x80\x8b\xfa\r\x18\xe8\xfa\r@\xe8\xfa\r`\xb8\xfa\r\x80\x8b\xfa\rP\xe7\xfa\r\x10\x8b\xfa\r\xc8\xe7\xfa\rP\xe7\xfa\r\x90\xb8\xfa\r0\xe9\xfa\r\x18\xe8\xfa\r\xd0\xb7\xfa\r\xc8\xe7\xfa\r\xf0\xe7\xfa\r\xa0\xb7\xfa\r\xc0\x9c\xac\x04h\xe8\xfa\r0\xb8\xfa\r\x80\xb9\xfa\r\xc0\x9f\xac\x040\xe9\xfa\r\xc0\x9f\xac\x04\x80\x8b\xfa\r\xd8\x8a\xfa\rh\xe8\xfa\r\xa0\xe7\xfa\r\x18\xe8\xfa\r\xa0\xb7\xfa\r\xd0\xb7\xfa\r\xe0\x9f\xac\x04\xa0\xb7\xfa\r\x00\xb8\xfa\r\xc0\x9f\xac\x04\x18\xe8\xfa\r\xc8\xe7\xfa\r\x80\x8b\xfa\r\x18\xe8\xfa\r\xc8\xe7\xfa\r\x10\x8b\xfa\r\x80\x8b\xfa\rp\xb7\xfa\rP\xe7\xfa\r\xa0\xb7\xfa\r\x80\xb9\xfa\r\xc0\x9f\xac\x04\xa0\xe7\xfa\r\x90\xe8\xfa\r\xd8\x8a\xfa\r\x80\x8b\xfa\r`\xb8\xfa\r\x00\xb8\xfa\r\xe0\x9f\xac\x04\x10\x8b\xfa\r@\xf0\xfa\r\x18\xe8\xfa\r@\xf0\xfa\r\xa0\xe7\xfa\rH\x8b\xfa\r\x90\xe8\xfa\r\x80\x8b\xfa\r\xd0\xb7\xfa\r0\xb8\xfa\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S' \xf2\xfa\r\xa0\xf2\xfa\r\x00\xf2\xfa\r \xf1\xfa\r A\x9d\x04\xe0\x9d\xac\x04\xe0@\x9d\x04\x80\xf1\xfa\r\xc0\xf1\xfa\r\xe0\xf0\xfa\r\xa0\xf1\xfa\r \xf3\xfa\r`\xf3\xfa\r\x80\xf3\xfa\r\xc0\xf3\xfa\r\xe0\xf3\xfa\r\x80\xf2\xfa\r\xc0\xf0\xfa\r\x00\xf4\xfa\r \xf4\xfa\r@\xf4\xfa\r\xa0\xf4\xfa\r\x80\xf4\xfa\r\xe0\xf4\xfa\r\x00\xf5\xfa\r`\xf0\xfa\r@\xf2\xfa\r \xf5\xfa\r\x80\xf5\xfa\r`\xf5\xfa\r\xe0\xf1\xfa\r\xe0\xf5\xfa\r\xa0\xf5\xfa\r`\xf6\xfa\r\xc0\xf2\xfa\r\x00\xf3\xfa\r\x80\xf0\xfa\r\xc0\xf6\xfa\r\xa0\xf6\xfa\r\xe0\xf6\xfa\r\x80\xf6\xfa\r@\xf5\xfa\r@\xf7\xfa\r \xf7\xfa\r\x80\xf7\xfa\r\xa0\xf7\xfa\r\xc0\xf7\xfa\r\xc0\xf5\xfa\r\xe0\xf2\xfa\r\xe0\xf7\xfa\r@\xf8\xfa\r \xf8\xfa\r`\xf2\xfa\r`\xf8\xfa\r\x80\xf8\xfa\r\xa0\xf8\xfa\r\x00\xf9\xfa\r \xf9\xfa\r\x00\xf1\xfa\r`\xf4\xfa\r@\xf9\xfa\r\xa0\xf9\xfa\r\x80\xf9\xfa\r@\xf3\xfa\r\x00\xfa\xfa\r\xe0\xf9\xfa\r \xf6\xfa\r\xa0Q\x9f\x04\x80Q\x9f\x04\xe0P\x9f\x04\x00Q\x9f\x04@Q\x9f\x04`R\x9f\x04\xa0R\x9f\x04 S\x9f\x04\x80R\x9f\x04\x80P\x9f\x04`Q\x9f\x04@P\x9f\x04`\xba\x9e\x04\xe0\xb8\x9e\x04\xe0\xbb\x9e\x04\x00\xbb\x9e\x04\xc0\xb0\x9e\x04`\xb9\x9e\x04\xa0\xb9\x9e\x04 R\x9f\x04\xe0\xba\x9e\x04 \xbc\x9e\x04@\xb9\x9e\x04 \xb8\x9e\x04\xc0\xb8\x9e\x04\x80\xbe\x9e\x04\x80\xbd\x9e\x04\xa0\xbe\x9e\x04`\xb8\x9e\x04\xc0\xbf\x9e\x04\x80\xbc\x9e\x04@\xb6\x9e\x04\x00\xb5\x9e\x04 \xb9\x9e\x04\xa0\xbc\x9e\x04\xe0\xb3\x9e\x04\x80\xb4\x9e\x04`\xb5\x9e\x04\xc0\xbb\x9e\x04 \xb5\x9e\x04@\xb8\x9e\x04 P\x9f\x04 \xba\x9e\x04`\xb6\x9e\x04\xe0\xb5\x9e\x04\xa0\xbd\x9e\x04\x80\xbb\x9e\x04@\xbf\x9e\x04 \xbe\x9e\x04\xe0\xbd\x9e\x04@\xbd\x9e\x04\xc0\xb9\x9e\x04\x00\xbe\x9e\x04\x80\xb6\x9e\x04\xa0\xb3\x9e\x04\xa0\xbb\x9e\x04 \xbf\x9e\x04\xa0\xbf\x9e\x04@\xba\x9e\x04\xc0\xb4\x9e\x04\xe0R\x9f\x04 \xbd\x9e\x04@\xb4\x9e\x04\xa0\xb5\x9e\x04\x80\xbf\x9e\x04\xc0\xbd\x9e\x04\xe0\xef\xa9\x04\xe0\x0e\x9e\x04\xe0\xbf\x9e\x04 \x0e\x9e\x04 \x0b\x9e\x04\xa0\x0c\x9e\x04\xe0\r\x9e\x04\xa0\x0b\x9e\x04\xe0\xb9\x9e\x04`\xc2p\r \xc2p\r\x00S\x9f\x04 \x0f\x9e\x04\xe0\x0f\x9e\x04`\x0b\x9e\x04`\x0f\x9e\x04`\r\x9e\x04\xa0\r\x9e\x04\xa0\x0f\x9e\x04\x00\x02\x9e\x04@\xc3p\r \x0c\x9e\x04\xe0\x0c\x9e\x04 \r\x9e\x04\x00\xaa%\x03@\xab%\x03\xa0\xa4%\x03\xc0\xa9%\x03\xe0\xa5%\x03\x00\xab%\x03\xc0\xa5%\x03 \xa5%\x03\x00\xa2%\x03\x00B&\x03\xc0G&\x03 A&\x03\xe0K&\x03\xe0O&\x03\xc0D&\x03\xa0A&\x03\xe0D&\x03`N&\x03\x00L&\x03\xe0F&\x03\x80D&\x03\x00A&\x03\xe0A&\x03\xa0K&\x03@r$\x03`C&\x03\x00\xb7s\r \xb3s\r\xc0\xb2s\r`\xb1s\r@\xb0s\r\x00\xb3s\r`\xbf\x9e\x04\x80Xv\r\xc0Vv\r@Pv\r@Wv\r\xa0Pv\r\xa0Yv\r\xc0Pv\r\xc0Yv\r@\x00v\r\x00\x07v\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'\xc7[\x95?\xdc[&?\x17f:A\xd5\x8f\x88?i\xefn?\x9a>D?z:s?o\xc3;?#dU?\xf4\xa7Y?\xe5\xd1\x8c?\x8f;s?u\xa4*?sJ\xa4?\xf3\xc2;?H\xb8*?\xb3of?\x1f\xd9\x1d?\xdd\x9d\x99?\xd0\xddL?\x9f\xa0\x99?I\xc3;? k\xa6?\x0b\r@?L\xf5\x8e?\xaesf?M\xdf\r@W\x8f\x88?]b\x15?\x92KD?\xca\x13o?<%\x82?\x81(\xa2?\xa3\xc7{?sJ\x84?<\x13\xa0?\x8dl\x86?\x06\xb2j?\x00K\x84?\xbd5\x93?\xef0Q?Q\xf4\x8e?\x1c\xae\x8a?\xfd\x03\x80?V\xf1\xee?\x13\xa07?t\x9fY?z\xb7j?\xb2\xbf\x9b?\xd9\x9b\xf9?\x9f\x9d\x88?\xc7l\xa6?y\x07\xe0?\x10<3?#\xc3{?(}U?\x86JD?v\x0c@?\x0c)b?\xb7\xe9\x1d?\xe4\xea]?\xc6w\x86?B?s?U\xbf\xbb?\xe8Y\x95?\x84\xc4\x0c?i\x03\x80?\x83\xdf\xbd?\x10\x17\xf1?&(\x82?Vlf?\xc8\xfd\x1d?Dz\xd7?\xd1\xaf\xca?\xf3\x1dQ?|\x03\x80?\xa1if?;\xe2\xbd?\xbe\xe4]?\xa9\x01 @Nu&?\xef\xafH?\xe5\xad\x8a?`~\x97?Z\xf9n?\x029\xf3?l\x0eQ?\x93V%@\xc3\xb0\xca?\x94aU?\xc5i\xc6?\x9b\x99H?.\xfb.?\t\x17\x91?\x17\xe6]?p\x91Y?\xaaJ\x84?\x81\x9b\xc8?\xd5J\x84?\xf2\xa0Y?\xe8\x16Q?_\xe3\x9d?%g\x95?v\xec\x1d?\x17zU?\xcdPD?\xb9\xa0\x19?\xaa\x80w?\xfc\xfb??w9D?\xb7\r@?\xa0\x847?\xae\xe0\xdd?t\x1aA@\xc6\xaa\x8a?\x18\xc9{?--b?\xc7\x80w?\xef\xbb\x8a?\xf6\xf1\x8e?\xebi\xc6?\xf6\x93Y??G\x84?\x141b?\x96\xc0\x9b?\xa1\x8fH?\xba\xd2\xcc?\xd5\xa5\xca?\xa3\xe2;?\xa1\x91H?\xa1G\x84?=\xfbn?uJ\x84?\x84\xec]?:\xb8j?\xdc[U?yQD?\x08\xfd.?\x9e\x03\x80?U\xfb.?\xda\x807?\xe9tw?\xaf\xea\x1d?Vm\x86?s\xb4*?\x99\xa7\x19?\xb8\\\x15?!\xce\xac?\x89\x8dH?H\x11@?wA3?|\x9e7?\x1fH\xa4?\xd4\x1aQ?\xdfF\x84?\xc8.s?DLb?F\xec]?\xd9\xde\xbd?\xfei\xa6?`\xa3Y?\\\x92w?\xce\x83w?_(\xa2?\x00pf?\xbc\xe3]?\xe0hV@\xe0\xc0\x9b?\xe4\xb3*?s\xb8j?W\xe5]?G\xf3\xae?\x84l\x86?l\xfd.?\xfa\x07@?\xaf\xddL?\xdaJ\x84?\x05\xcf*?\x16\xa0Y?\x8d\x9d7?-)b?1\x0f@?\x86\xed.?8\x91&?_\x08@?\x1d$\x82?\x8a(\x82?g\xa6Y?\x9a/b?\x90\xc9{?h\xd2\x8c?\x996\xb3?r\xae\x8a?\x93\xe3\x9d?\x9d.b?\x0f\xe9]?\xd8\xfan?L\xbf+@\x1a:s?\x19\xe7\x9d?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'\xe0\x03\xee\x04\xb0\x00\xee\x04@t\xee\x04\x90r\xee\x04Pp\xee\x04`x\xee\x04 p\xee\x04\xf0{\xee\x04\xe0|\xee\x04Hu\xee\x04\x80y\xee\x04 s\xee\x04\x18u\xee\x04\xe0p\xee\x04\xc0r\xee\x04Pv\xee\x04\xf8y\xee\x04\xa8r\xee\x04\xc8p\xee\x04\xd0q\xee\x04xx\xee\x04\xd0w\xee\x04pz\xee\x04\x80p\xee\x04\xd8r\xee\x040r\xee\x04\x10z\xee\x04\xd8{\xee\x04Hx\xee\x04Py\xee\x04\xb0p\xee\x04x{\xee\x04\x80s\xee\x04Ps\xee\x04\xc8s\xee\x04\x98s\xee\x04\x08y\xee\x04\xf0x\xee\x04\xa0}\xee\x04Hr\xee\x04\xa0t\xee\x048v\xee\x04\x18r\xee\x04\xf8s\xee\x04\xd8x\xee\x04X}\xee\x04\x88t\xee\x04 v\xee\x04\xa0w\xee\x04\x88w\xee\x04\xa8x\xee\x04@z\xee\x048|\xee\x04xr\xee\x04\xf0u\xee\x04`~\xee\x04\x80|\xee\x04\xe8w\xee\x04\xe0y\xee\x04\xd0t\xee\x04\xb8}\xee\x04hv\xee\x04\x08s\xee\x04Xq\xee\x04\x10t\xee\x04(}\xee\x04P|\xee\x04H~\xee\x04pt\xee\x04\xa0q\xee\x04\xc8|\xee\x04\xe8t\xee\x040x\xee\x04hs\xee\x04\x08v\xee\x04\xf0~\xee\x04\x10q\xee\x04\xa8u\xee\x04\xa0z\xee\x04\x90x\xee\x04\xb0y\xee\x048\x7f\xee\x04\xc0{\xee\x04\xe8z\xee\x048y\xee\x048p\xee\x04\x98|\xee\x04(z\xee\x04\xf8p\xee\x04`{\xee\x04@q\xee\x04\xe0\x7f\xee\x04\x00~\xee\x04\x00u\xee\x04\xe8}\xee\x04`r\xee\x04\xc0u\xee\x04(q\xee\x04\x88}\xee\x04\x18~\xee\x04H{\xee\x04\x00r\xee\x04pq\xee\x04\xf8|\xee\x04hp\xee\x04\x98y\xee\x04\xc0~\xee\x04\x90{\xee\x04 y\xee\x04\x98v\xee\x04@}\xee\x04\xe8q\xee\x04pw\xee\x04\x80v\xee\x04\xf0r\xee\x04\x98\x7f\xee\x04 |\xee\x04\x00{\xee\x04\x00x\xee\x04\x08|\xee\x04\xd0}\xee\x04\x08\x7f\xee\x04h\x7f\xee\x04\x90~\xee\x040u\xee\x048s\xee\x04\xd0z\xee\x04\xb0\x7f\xee\x04h|\xee\x04Xw\xee\x040~\xee\x04x~\xee\x04\x90u\xee\x04P\x7f\xee\x04\x18x\xee\x04Xz\xee\x04\xb8z\xee\x04\xc8v\xee\x04\x18{\xee\x04\xd8~\xee\x04xu\xee\x04\x10}\xee\x040{\xee\x04p}\xee\x04 \x7f\xee\x04\xd8u\xee\x04hy\xee\x04\x98p\xee\x04\xa8{\xee\x04\xb8t\xee\x04\xb0v\xee\x04\x88z\xee\x04\x98\xf0\xf8\x04\x90\xf5\xf8\x04x\xf8\xf8\x04P\xf3\xf8\x040\xfb\xf8\x04\xe0\xff\xf8\x04\x90\xf2\xf8\x04H\xf2\xf8\x04\xa8\xfe\xf8\x04\x80\xf9\xf8\x04\xb8\xf4\xf8\x04(\xf4\xf8\x04\xe0\xf0\xf8\x04\x10\xfd\xf8\x04\x18\xf5\xf8\x04\xc0\xfe\xf8\x04\x90\xfb\xf8\x04\xd8\xfe\xf8\x04\xd0\xfa\xf8\x04\x88\xfa\xf8\x04\xf0\xfb\xf8\x04\xb0\xf0\xf8\x04P\xf0\xf8\x04\x98\xff\xf8\x04\x80\xf6\xf8\x040\xf5\xf8\x048\xf0\xf8\x04 \xf6\xf8\x04@\xfa\xf8\x04\xc8\xf9\xf8\x048\xf9\xf8\x04\x98\xfc\xf8\x04\xe8\xf7\xf8\x04\xe8\xf1\xf8\x04\x18\xfb\xf8\x04\xb0\xff\xf8\x04\x80\xfc\xf8\x04x\xf2\xf8\x048\xfc\xf8\x04x\xfe\xf8\x04`\xf8\xf8\x04\x98\xf6\xf8\x04\xe0\xf9\xf8\x04\x80\x7f\xee\x04Xt\xee\x04\xb0|\xee\x04(t\xee\x04\xc8\x7f\xee\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3645
sg3632
g3633
sg3647
g3637
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3663
sg3632
g3653
sg3647
g3657
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3645
sg3632
g3670
sg3647
g3637
sg3641
g3677
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3695
sg3632
g3685
sg3647
g3689
sg3641
g3693
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3712
sg3632
g3702
sg3647
g3706
sg3641
g3710
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3663
sg3632
g3653
sg3647
g3657
sg3641
g3661
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3742
sg3632
g3732
sg3647
g3736
sg3641
g3740
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3753
sg3632
g3749
sg3647
g3760
sg3641
g3757
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3770
sg3632
g3766
sg3647
g3777
sg3641
g3774
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3787
sg3632
g3783
sg3647
g3794
sg3641
g3791
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3695
sg3632
g3800
sg3647
g3689
sg3641
g3807
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3819
sg3632
g3815
sg3647
g3826
sg3641
g3823
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3663
sg3632
g3653
sg3647
g3657
sg3641
g3661
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3849
sg3632
g3845
sg3647
g3856
sg3641
g3853
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3866
sg3632
g3862
sg3647
g3873
sg3641
g3870
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3645
sg3632
g3670
sg3647
g3637
sg3641
g3677
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3896
sg3632
g3892
sg3647
g3903
sg3641
g3900
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3663
sg3632
g3909
sg3647
g3657
sg3641
g3916
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3928
sg3632
g3924
sg3647
g3935
sg3641
g3932
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3866
sg3632
g3941
sg3647
g3873
sg3641
g3948
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3695
sg3632
g3685
sg3647
g3689
sg3641
g3693
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3973
sg3632
g3969
sg3647
g3980
sg3641
g3977
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3849
sg3632
g3845
sg3647
g3856
sg3641
g3853
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3645
sg3632
g3633
sg3647
g3637
sg3641
g3642
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g4016
sg3632
g4012
sg3647
g4023
sg3641
g4020
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g4033
sg3632
g4029
sg3647
g4040
sg3641
g4037
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g3695
sg3632
g3800
sg3647
g3689
sg3641
g3807
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g4069
sg3632
g4059
sg3647
g4063
sg3641
g4067
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g3849
sg3632
g4076
sg3647
g3856
sg3641
g4083
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3770
sg3632
g3766
sg3647
g3777
sg3641
g3774
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g4108
sg3632
g4104
sg3647
g4115
sg3641
g4112
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3695
sg3632
g3685
sg3647
g3689
sg3641
g3693
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3849
sg3632
g4076
sg3647
g3856
sg3641
g4083
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3742
sg3632
g4147
sg3647
g3736
sg3641
g4154
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3787
sg3632
g3783
sg3647
g3794
sg3641
g3791
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g4179
sg3632
g4175
sg3647
g4186
sg3641
g4183
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3866
sg3632
g3941
sg3647
g3873
sg3641
g3948
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g3819
sg3632
g3815
sg3647
g3826
sg3641
g3823
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g4222
sg3632
g4218
sg3647
g4229
sg3641
g4226
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3896
sg3632
g3892
sg3647
g3903
sg3641
g3900
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g4033
sg3632
g4029
sg3647
g4040
sg3641
g4037
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g3742
sg3632
g4147
sg3647
g3736
sg3641
g4154
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g4033
sg3632
g4274
sg3647
g4040
sg3641
g4281
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g4108
sg3632
g4104
sg3647
g4115
sg3641
g4112
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g4222
sg3632
g4218
sg3647
g4229
sg3641
g4226
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g3787
sg3632
g4315
sg3647
g3794
sg3641
g4322
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g4016
sg3632
g4012
sg3647
g4023
sg3641
g4020
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g4069
sg3632
g4343
sg3647
g4063
sg3641
g4350
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3753
sg3632
g4358
sg3647
g3760
sg3641
g4365
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g4222
sg3632
g4218
sg3647
g4229
sg3641
g4226
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3787
sg3632
g3783
sg3647
g3794
sg3641
g3791
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3770
sg3632
g4399
sg3647
g3777
sg3641
g4406
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g4179
sg3632
g4175
sg3647
g4186
sg3641
g4183
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3973
sg3632
g3969
sg3647
g3980
sg3641
g3977
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g3849
sg3632
g4076
sg3647
g3856
sg3641
g4083
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g3742
sg3632
g4147
sg3647
g3736
sg3641
g4154
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3866
sg3632
g3862
sg3647
g3873
sg3641
g3870
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g3973
sg3632
g3969
sg3647
g3980
sg3641
g3977
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3695
sg3632
g3800
sg3647
g3689
sg3641
g3807
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g3849
sg3632
g4076
sg3647
g3856
sg3641
g4083
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g3787
sg3632
g4315
sg3647
g3794
sg3641
g4322
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g3866
sg3632
g3941
sg3647
g3873
sg3641
g3948
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g4108
sg3632
g4544
sg3647
g4115
sg3641
g4551
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3866
sg3632
g3862
sg3647
g3873
sg3641
g3870
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g4016
sg3632
g4572
sg3647
g4023
sg3641
g4579
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3663
sg3632
g3653
sg3647
g3657
sg3641
g3661
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g3712
sg3632
g4600
sg3647
g3706
sg3641
g4607
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g3787
sg3632
g4315
sg3647
g3794
sg3641
g4322
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3928
sg3632
g4628
sg3647
g3935
sg3641
g4635
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g3896
sg3632
g3892
sg3647
g3903
sg3641
g3900
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g4179
sg3632
g4656
sg3647
g4186
sg3641
g4663
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g4033
sg3632
g4274
sg3647
g4040
sg3641
g4281
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g4016
sg3632
g4012
sg3647
g4023
sg3641
g4020
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3753
sg3632
g4358
sg3647
g3760
sg3641
g4365
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3973
sg3632
g4710
sg3647
g3980
sg3641
g4717
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g4069
sg3632
g4059
sg3647
g4063
sg3641
g4067
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3712
sg3632
g4600
sg3647
g3706
sg3641
g4607
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g3849
sg3632
g3845
sg3647
g3856
sg3641
g3853
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g4108
sg3632
g4544
sg3647
g4115
sg3641
g4551
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g4016
sg3632
g4572
sg3647
g4023
sg3641
g4579
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g4033
sg3632
g4274
sg3647
g4040
sg3641
g4281
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3787
sg3632
g3783
sg3647
g3794
sg3641
g3791
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g4069
sg3632
g4059
sg3647
g4063
sg3641
g4067
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g4016
sg3632
g4572
sg3647
g4023
sg3641
g4579
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g4033
sg3632
g4274
sg3647
g4040
sg3641
g4281
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g4179
sg3632
g4175
sg3647
g4186
sg3641
g4183
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3928
sg3632
g4628
sg3647
g3935
sg3641
g4635
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g3742
sg3632
g3732
sg3647
g3736
sg3641
g3740
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g3973
sg3632
g4710
sg3647
g3980
sg3641
g4717
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g4222
sg3632
g4218
sg3647
g4229
sg3641
g4226
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g4016
sg3632
g4572
sg3647
g4023
sg3641
g4579
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3770
sg3632
g3766
sg3647
g3777
sg3641
g3774
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3742
sg3632
g4147
sg3647
g3736
sg3641
g4154
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g3849
sg3632
g3845
sg3647
g3856
sg3641
g3853
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g3770
sg3632
g4399
sg3647
g3777
sg3641
g4406
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g3663
sg3632
g3909
sg3647
g3657
sg3641
g3916
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3928
sg3632
g3924
sg3647
g3935
sg3641
g3932
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3787
sg3632
g4315
sg3647
g3794
sg3641
g4322
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g4108
sg3632
g4544
sg3647
g4115
sg3641
g4551
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g4033
sg3632
g4029
sg3647
g4040
sg3641
g4037
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g4108
sg3632
g4104
sg3647
g4115
sg3641
g4112
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g4069
sg3632
g4059
sg3647
g4063
sg3641
g4067
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g4222
sg3632
g5076
sg3647
g4229
sg3641
g5083
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g4033
sg3632
g4029
sg3647
g4040
sg3641
g4037
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g3866
sg3632
g3941
sg3647
g3873
sg3641
g3948
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g3742
sg3632
g4147
sg3647
g3736
sg3641
g4154
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g4222
sg3632
g5076
sg3647
g4229
sg3641
g5083
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g4069
sg3632
g4343
sg3647
g4063
sg3641
g4350
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3866
sg3632
g3862
sg3647
g3873
sg3641
g3870
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3663
sg3632
g3653
sg3647
g3657
sg3641
g3661
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3645
sg3632
g3670
sg3647
g3637
sg3641
g3677
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3770
sg3632
g3766
sg3647
g3777
sg3641
g3774
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3645
sg3632
g3670
sg3647
g3637
sg3641
g3677
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g3819
sg3632
g3815
sg3647
g3826
sg3641
g3823
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g3712
sg3632
g3702
sg3647
g3706
sg3641
g3710
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3753
sg3632
g3749
sg3647
g3760
sg3641
g3757
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3896
sg3632
g5260
sg3647
g3903
sg3641
g5267
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g4069
sg3632
g4059
sg3647
g4063
sg3641
g4067
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3928
sg3632
g4628
sg3647
g3935
sg3641
g4635
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g4179
sg3632
g4656
sg3647
g4186
sg3641
g4663
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g3973
sg3632
g4710
sg3647
g3980
sg3641
g4717
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g3663
sg3632
g3909
sg3647
g3657
sg3641
g3916
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g3866
sg3632
g3941
sg3647
g3873
sg3641
g3948
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g3753
sg3632
g4358
sg3647
g3760
sg3641
g4365
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g4069
sg3632
g4343
sg3647
g4063
sg3641
g4350
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g4033
sg3632
g4274
sg3647
g4040
sg3641
g4281
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3928
sg3632
g3924
sg3647
g3935
sg3641
g3932
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3712
sg3632
g4600
sg3647
g3706
sg3641
g4607
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g4108
sg3632
g4544
sg3647
g4115
sg3641
g4551
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g3787
sg3632
g4315
sg3647
g3794
sg3641
g4322
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3770
sg3632
g4399
sg3647
g3777
sg3641
g4406
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g3849
sg3632
g3845
sg3647
g3856
sg3641
g3853
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3645
sg3632
g3633
sg3647
g3637
sg3641
g3642
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g4108
sg3632
g4544
sg3647
g4115
sg3641
g4551
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g4179
sg3632
g4656
sg3647
g4186
sg3641
g4663
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3712
sg3632
g4600
sg3647
g3706
sg3641
g4607
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g3695
sg3632
g3800
sg3647
g3689
sg3641
g3807
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3819
sg3632
g5535
sg3647
g3826
sg3641
g5542
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g3896
sg3632
g5260
sg3647
g3903
sg3641
g5267
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g4033
sg3632
g4029
sg3647
g4040
sg3641
g4037
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g3742
sg3632
g3732
sg3647
g3736
sg3641
g3740
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3819
sg3632
g5535
sg3647
g3826
sg3641
g5542
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g3645
sg3632
g3633
sg3647
g3637
sg3641
g3642
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3770
sg3632
g4399
sg3647
g3777
sg3641
g4406
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3753
sg3632
g3749
sg3647
g3760
sg3641
g3757
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g3645
sg3632
g3670
sg3647
g3637
sg3641
g3677
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3753
sg3632
g3749
sg3647
g3760
sg3641
g3757
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g3712
sg3632
g3702
sg3647
g3706
sg3641
g3710
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3896
sg3632
g5260
sg3647
g3903
sg3641
g5267
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g4016
sg3632
g4572
sg3647
g4023
sg3641
g4579
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3753
sg3632
g4358
sg3647
g3760
sg3641
g4365
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3866
sg3632
g3862
sg3647
g3873
sg3641
g3870
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g3928
sg3632
g4628
sg3647
g3935
sg3641
g4635
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g3849
sg3632
g4076
sg3647
g3856
sg3641
g4083
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g4069
sg3632
g4343
sg3647
g4063
sg3641
g4350
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g3663
sg3632
g3909
sg3647
g3657
sg3641
g3916
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g4222
sg3632
g4218
sg3647
g4229
sg3641
g4226
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g3973
sg3632
g3969
sg3647
g3980
sg3641
g3977
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g3712
sg3632
g3702
sg3647
g3706
sg3641
g3710
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3973
sg3632
g4710
sg3647
g3980
sg3641
g4717
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3819
sg3632
g5535
sg3647
g3826
sg3641
g5542
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3712
sg3632
g4600
sg3647
g3706
sg3641
g4607
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g4069
sg3632
g4343
sg3647
g4063
sg3641
g4350
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g3695
sg3632
g3685
sg3647
g3689
sg3641
g3693
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g3896
sg3632
g3892
sg3647
g3903
sg3641
g3900
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3928
sg3632
g4628
sg3647
g3935
sg3641
g4635
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g4016
sg3632
g4012
sg3647
g4023
sg3641
g4020
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g4179
sg3632
g4175
sg3647
g4186
sg3641
g4183
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3928
sg3632
g3924
sg3647
g3935
sg3641
g3932
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g4108
sg3632
g4104
sg3647
g4115
sg3641
g4112
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g3973
sg3632
g3969
sg3647
g3980
sg3641
g3977
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g3896
sg3632
g5260
sg3647
g3903
sg3641
g5267
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g3753
sg3632
g4358
sg3647
g3760
sg3641
g4365
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g3819
sg3632
g3815
sg3647
g3826
sg3641
g3823
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g3896
sg3632
g3892
sg3647
g3903
sg3641
g3900
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3753
sg3632
g3749
sg3647
g3760
sg3641
g3757
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g3770
sg3632
g3766
sg3647
g3777
sg3641
g3774
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g3819
sg3632
g5535
sg3647
g3826
sg3641
g5542
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3742
sg3632
g3732
sg3647
g3736
sg3641
g3740
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3645
sg3632
g3633
sg3647
g3637
sg3641
g3642
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g3928
sg3632
g3924
sg3647
g3935
sg3641
g3932
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g4222
sg3632
g5076
sg3647
g4229
sg3641
g5083
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g3973
sg3632
g4710
sg3647
g3980
sg3641
g4717
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g3695
sg3632
g3800
sg3647
g3689
sg3641
g3807
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g4222
sg3632
g5076
sg3647
g4229
sg3641
g5083
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g3712
sg3632
g3702
sg3647
g3706
sg3641
g3710
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g3819
sg3632
g5535
sg3647
g3826
sg3641
g5542
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g3742
sg3632
g3732
sg3647
g3736
sg3641
g3740
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g4108
sg3632
g4104
sg3647
g4115
sg3641
g4112
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g4179
sg3632
g4175
sg3647
g4186
sg3641
g4183
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g3770
sg3632
g4399
sg3647
g3777
sg3641
g4406
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g4179
sg3632
g4656
sg3647
g4186
sg3641
g4663
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3896
sg3632
g5260
sg3647
g3903
sg3641
g5267
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g4179
sg3632
g4656
sg3647
g4186
sg3641
g4663
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3695
sg3632
g3685
sg3647
g3689
sg3641
g3693
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3787
sg3632
g3783
sg3647
g3794
sg3641
g3791
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g4222
sg3632
g5076
sg3647
g4229
sg3641
g5083
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3819
sg3632
g3815
sg3647
g3826
sg3641
g3823
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g4016
sg3632
g4012
sg3647
g4023
sg3641
g4020
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3663
sg3632
g3909
sg3647
g3657
sg3641
g3916
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I84554576
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'H`L\x13\xd8aL\x13\x88RL\x13 lK\x13\x98`L\x13\xc0`L\x13\xd8aL\x13\xa8QL\x13\xe0QL\x13@mK\x13\x88RL\x13\x98`L\x13 lK\x13\x00\xc7v\r\x98`L\x13 \xcfv\r\xe8`L\x13\x18RL\x13\x10aL\x13p`L\x138aL\x13PlK\x13\x80lK\x13`\xccv\r\xe8`L\x13\xd0mK\x13\x10aL\x13`\xccv\r\xe8`L\x13\x00\xc7v\r\x18RL\x13H`L\x13`\xccv\r`aL\x13\xc0`L\x13 \xcfv\r\x18RL\x13`\x08\x9d\x04`\xccv\r\xe0QL\x13\xa8QL\x13`aL\x13\x00\xc7v\r\xc0`L\x13\x18RL\x13\x10aL\x13\xe0QL\x13 \xcfv\r\xa0bL\x13PlK\x13\x80lK\x13pmK\x13\x10mK\x13p`L\x13\x10mK\x13`\x08\x9d\x04p`L\x13\xe0QL\x138aL\x13\xc0`L\x13\xa0bL\x13 lK\x13\x88RL\x13\xe0QL\x13`\xccv\r\x88aL\x13p`L\x13\x00nK\x13\x98`L\x13PbL\x13xbL\x13\x00\xc7v\r\x10aL\x13(bL\x13\x00\xc7v\r(bL\x13\x88aL\x13PRL\x13\xb0lK\x13\xe8`L\x13`\x08\x9d\x04\xe0lK\x13\x18RL\x13PlK\x13PRL\x13\x10aL\x13 lK\x13\xa0bL\x13\x98`L\x13\x88aL\x13\xe0QL\x13\x80lK\x13`\x08\x9d\x04@\x08\x9d\x04\x10aL\x13\xe0lK\x13\x98`L\x13\x88aL\x13`aL\x13`\xccv\r\x00\xc7v\r\xe8`L\x138aL\x13(bL\x13\xb0lK\x13\xc0RL\x130nK\x13PlK\x13PRL\x13p`L\x138aL\x13\xe8`L\x130nK\x13PRL\x13\x18RL\x13\x00\xc7v\r`\xccv\r@mK\x13`\xccv\r\x10aL\x13p`L\x13 lK\x13H`L\x13\xa8QL\x13`aL\x13`\xccv\rPlK\x138aL\x13\xe0QL\x13H`L\x13\x00\xc7v\r\xc0RL\x13\x10aL\x13`aL\x13@mK\x13PRL\x13\xc0`L\x13\x98`L\x13H`L\x13\xe0QL\x13\xe0lK\x13`aL\x13\xb0lK\x13\xa0mK\x13\xa8QL\x13\xd8aL\x13\x80lK\x13\x88aL\x13\x80lK\x13\xa8QL\x13 \xcfv\r\xa0bL\x13\x10aL\x13\xe8`L\x13PRL\x13`aL\x13\xe8`L\x13\xa8QL\x13\x80lK\x13 lK\x13\xc0`L\x13`aL\x13PlK\x13 \xcfv\r\x80lK\x13(bL\x13\x80lK\x13 \xcfv\r\xe0QL\x13\x00\xc7v\rH`L\x13 lK\x13 \xcfv\r\xa0bL\x13`aL\x13\xb0lK\x13PRL\x13\xa8QL\x13PRL\x13\xb0lK\x13PRL\x13`\xccv\r\x98`L\x130nK\x13\x98`L\x13\xe0lK\x13\x18RL\x13p`L\x13\x80lK\x13\xa8QL\x13\x98`L\x13`\x08\x9d\x04PlK\x13\xa8QL\x13\xb0lK\x13\xe0\x0f\x9d\x04\xe8`L\x13\x18RL\x13\xb0lK\x13 lK\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x80KM\x13\xa0JM\x13 LM\x13 JM\x13`JM\x13\x80LM\x13@LM\x13\xc0LM\x13\xa0KM\x13 KM\x13\xe0KM\x13 MM\x13\x80MM\x13\xa0MM\x13`KM\x13\xc0MM\x13@JM\x13\xc0JM\x13\xe0MM\x13@NM\x13@MM\x13\x80JM\x13\xa0LM\x13\xc0KM\x13@KM\x13`MM\x13\x00JM\x13\x00MM\x13\xe0JM\x13\xc0OM\x13\xe0OM\x13\xe0NM\x13\x80NM\x13\x00KM\x13 NM\x13`LM\x13\x00OM\x13\xa0OM\x13\x00NM\x13 OM\x13\x80OM\x13@OM\x13\xe0LM\x13\x00LM\x13\xe0IM\x13\xa0NM\x13`\xbas\r`OM\x13\xc0\x91a\x13 \x91a\x13\xa0\x91a\x13@\x92a\x13\x80\x92a\x13`\x92a\x13\xe0\x92a\x13\xc0\x92a\x13 \x92a\x13\x00\x93a\x13 \x93a\x13@\x93a\x13\xa0\x93a\x13\x80\x93a\x13\xa0\x00v\r\x80\x91a\x13\x00\x91a\x13@\x94a\x13`\x94a\x13`\x93a\x13\xe0\x90a\x13\xa0\x92a\x13\xe0\x94a\x13\x00\x95a\x13\x00\x92a\x13\xe0\x93a\x13\xc0\x90a\x13@\x90a\x13`\x95a\x13\xe0\x91a\x13 \x90a\x13\x80\x94a\x13 \x96a\x13@\x96a\x13 \x94a\x13\x80\x96a\x13\xa0\x96a\x13\x00\x96a\x13\xe0\x95a\x13`NM\x13\xe0\x96a\x13\xa0\x90a\x13\x80\x95a\x13 \x95a\x13\x80\x97a\x13\xc0\x96a\x13@\x91a\x13`\x96a\x13\x80\x90a\x13@\x97a\x13\xc0\x94a\x13@\x98a\x13\x00\x94a\x13\xc0\x93a\x13\xe0\x98a\x13@\x95a\x13\xc0\x97a\x13 \x99a\x13\xc0\x95a\x13\xa0\x94a\x13`\x97a\x13\xc0\x98a\x13\xc0\x99a\x13\x00\x9aa\x13\xa0\x98a\x13\xe0\x97a\x13`\x91a\x13 \x97a\x13\x00\x99a\x13@\x9aa\x13\xc0\x9aa\x13\xa0\x9aa\x13\x00\x9ba\x13\xa0\x99a\x13 \x9ba\x13\x00\x97a\x13`\x90a\x13`\x9ba\x13`\x99a\x13\xc0\x9ba\x13`\x98a\x13 \x9ca\x13\x80\x9ba\x13@\x9ba\x13\xa0\x95a\x13`\x9aa\x13\xe0\x9ca\x13\xe0\x9ba\x13@\x9ca\x13\x00\x9da\x13\xa0\x9da\x13 \x98a\x13\x80\x9aa\x13\xa0\x9ca\x13@\x9da\x13\xa0\x97a\x13@\x99a\x13\x00\x9ca\x13\x80\x9da\x13\x80\x99a\x13\x80\x98a\x13@\x9ea\x13\xe0\x9aa\x13\x80\x9ea\x13\xc0\x9ea\x13\xe0\x99a\x13\xc0\x9ca\x13\x00\x9fa\x13`\x9fa\x13`\x9ea\x13@\x9fa\x13\x80\x9fa\x13\xa0\x9ba\x13\xa0\x9ea\x13 \x9da\x13\xe0\x9da\x13\xe0\x9fa\x13\xc0\x9fa\x13`\x9da\x13\x00\x98a\x13`\x9ca\x13 \x9fa\x13 \x9ea\x13\xe0\x9ea\x13\x00\x9ea\x13 \x9aa\x13\x80\x9ca\x13 "\x8c\x13\x80"\x8c\x13@ \x8c\x13\xc0"\x8c\x13`!\x8c\x13 #\x8c\x13\xe0!\x8c\x13\xc0!\x8c\x13\xe0"\x8c\x13@#\x8c\x13@!\x8c\x13 !\x8c\x13`#\x8c\x13\x80#\x8c\x13\xe0#\x8c\x13\xc0#\x8c\x13@"\x8c\x13\xa0!\x8c\x13\xa0$\x8c\x13\xe0 \x8c\x13\x00%\x8c\x13`"\x8c\x13\x80$\x8c\x13\xe0$\x8c\x13\xc0NM\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'\xfeZ\xb5?\xd9\xd2\x8c?\x96/b?s\xa5Y?\xd7\x85w?\xf4\x16\xb1?l~w?\xdcLD?`DD?\x15\xab\xb9?\x04\x08@?\x08\xff.?k(\x82?\xaa\xc8{?D/"?\x1d\xdcL?pz\x17@Q\x817?\xa8\xb1\x8a?\xb8\\U?o6\x82?\xd5\x0e\xb1?\xe1\xc7;?\xc8As?"]U?\xdc\x04\xa0?N1b?4;3?2\\\x95?\x8e\x1dQ?\xac\x17Q?\xce\xa7Y?\x18\xb8j?\xfe\xda\x1d?\xbdX\x95?"\x7f7?{i\x86?\x93\xfd.?X-"?a\xaaj?l|\xb7?\x87/s?\xda\xa0Y?\xfc\xd7L?\x98\xad\xaa?\xe7\x1e\x11?\x00(b?\x8a.b?80"?\xe4\xdf\x1d@\x9d\x17\x91?\xaa6\xb3?\x17%\x02@\x1e\x15o?\xa0\xa6Y?\x90Y\xd5?0\x857?S\x18Q?\xcc\xd9L?k)b?f\x1c\x11?\xef\x17Q?C\xba{?\xa79D?#1"?\xf3\xe4]?\xc8\xc2{?k)3?\xf4%\x82?\x96v\x97?\x8b\xa7Y?\x1f)\x82?\xcf\xae*?\xdd3\xab@"\xfe\xae?\x97\x8e\xc8?\xa7J\x84?\x80\xb1j?Q\xe1\xbd?\xbd~7?\xdb\xf5.?\xea\xf1\x8e?\xe0\x877?/\xe6]?\x05\xc9{?\x17cU?\xbe\xd9L?\xf0\x1eb?*\xf5.?\xd7ND?l\x10\x91?\x1d\xcf\x9b?=\xb3*?\x83\x03\x80?\xef&b?y+b?N@s?\xb9Ib?0\xc9L?m\xf5n?X\x07@?\xe5\xf2\xee?\x8cjD?\x85\xe2\x9d?\x16\xff\x9f?\xaeyw@\xafF\xa4?\xe9\xd9L?U\xf5\x8e?\xe5i6@\xf2[\xb5?\xf9\xef&A\x13G\xa4?\xb3@3?\x17\xf9.?0G\x84?\x8dmf?\'$\x91?]^U?:[U?`\xc7{?\n\xed\x1d?\xc6\x17\xd1?A\\U?Ns7?l\x807?\x86\x94H?\xbfJD?\xa0\x0bo?\xed\xb5j?\xcd\xe3\xbd?r\xc2;?\x84z\x97?\xf5QU?\xe5\x06\x80?\x16\xa0Y?\xd5mf?\xf9\xc7{?\x8193?\xa1\xb5Y?\x08j\xa6?\xd8@D@+\x03\x80?\x98,b?r\x17\x91?%\xb1*?g\xce;?\x0c\x91H?\x18\x7f7?/6\x03@\x04eU?"\x8eH?\xb1H\x84?\x05\xa5Y?\xe9\xc2\x9b?\xea\xa5*?\xe0\x96Y?\xcd\x06@?\x0e\xd0\x8c?\x0f Q?\xdc\x89f?\xc0\xe5.?\xf02\x93?T\x80\x97?\x1a\\\x95?=\xe8L?\xcem\xa6?\xf2\xab\n@N\xcf\xac?\x1aJ\xa4?\x8b\xde;?\xe0.b?z5\x93?M\xb2j?\x95\x1a"?\xdb\xd2\x8c?\xee\xd7\x0c?G\x0c@?\x01\xdaL?\xf9\xb8*?\xe9\xd9L?=z\x86?\x9a\r@?\xb1$\xa2?b\xf2\xce?\xa8\xdaL?,$\xd1?\xfb[\x95?I\xc3{?\xc9\x83w?\xf3=3?\xa1W\xf5?\xf7\xb0\x8a?\xc5g\x06@\x88\x05\xa0?z\x9c\t@\x0e\x96H?.\xc4;?p-b?\xb5\x86\xc8?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S' \xf0\xf8\x04H\xfb\xf8\x04\x18\xdb\xe1\x04 \xd6\xe1\x04@\xd4\xe1\x04\x00\xd5\xe1\x04\x98\xd6\xe1\x04\xb0\xd6\xe1\x04\x80\xd6\xe1\x040\xd8\xe1\x04\x80\xd3\xe1\x04P\xdc\xe1\x048\xd9\xe1\x04h\xd9\xe1\x04\x08\xd9\xe1\x04\xf8\xd6\xe1\x04\x08\xdc\xe1\x04\xf8\xd3\xe1\x04 \xd0\xe1\x04\xf0\xdb\xe1\x04\xc8\xdc\xe1\x04\x90\xd8\xe1\x04\x08\xd6\xe1\x04\xe0\xdc\xe1\x04\x10\xd1\xe1\x04\xe0\xd6\xe1\x04\xf0\xd5\xe1\x04\xd8\xd8\xe1\x04\x00\xdb\xe1\x04\x88\xd1\xe1\x04P\xd9\xe1\x048\xd6\xe1\x04X\xd7\xe1\x04\xe8\xd1\xe1\x04\xd0\xda\xe1\x04x\xdb\xe1\x04\xa8\xd8\xe1\x040\xde\xe1\x04\xe0\xdf\xe1\x04\xd0\xd4\xe1\x04X\xda\xe1\x04\xb8\xd1\xe1\x04@\xd7\xe1\x04\xb8\xd4\xe1\x04\xb8\xda\xe1\x04`\xdb\xe1\x04\xf8\xd9\xe1\x04@\xd1\xe1\x04(\xd1\xe1\x04\x00\xde\xe1\x04`\xde\xe1\x04\xd0\xd7\xe1\x04\xc8\xdf\xe1\x04 \xdc\xe1\x04\xe0\xd3\xe1\x04\xb8\xdd\xe1\x04\x98\xd9\xe1\x04\xa0\xd7\xe1\x04P\xd3\xe1\x04h\xdf\xe1\x04\x18\xd5\xe1\x048\xdc\xe1\x04\x80\xdf\xe1\x04\xe8\xda\xe1\x04 \xdf\xe1\x04\xb0\xd3\xe1\x04\x88\xd7\xe1\x04 \xd9\xe1\x04\x10\xdd\xe1\x04p\xdd\xe1\x04\xb0\xd0\xe1\x04\x18\xde\xe1\x04\xf8\xd0\xe1\x04`\xd2\xe1\x04\x10\xda\xe1\x04h\xd6\xe1\x04`\xd5\xe1\x04\xa8\xde\xe1\x04(\xdd\xe1\x04@\xdd\xe1\x048\xdf\xe1\x04H\xde\xe1\x04\x18\xd2\xe1\x04X\xdd\xe1\x04\xd8\xde\xe1\x040\xd5\xe1\x04\xc8\xd6\xe1\x04\xd0\xdd\xe1\x04\x88\xdd\xe1\x04x\xde\xe1\x04X\xd4\xe1\x04(\xda\xe1\x04\xe8\xd4\xe1\x04\xf8\xdc\xe1\x04\xf0\xd2\xe1\x04h\xdc\xe1\x04\x98\xdc\xe1\x04\x90\xde\xe1\x04\x00\xd8\xe1\x04\xc0\xde\xe1\x04P\xdf\xe1\x04\x10\xd7\xe1\x04@\xda\xe1\x04\xd8\xdb\xe1\x04\x90\xdb\xe1\x04\xa8\xdb\xe1\x04\xb0\xdc\xe1\x04\xa0\xdd\xe1\x04\x00\xd2\xe1\x04\xb0\xdf\xe1\x04\xb0\x0f\xee\x04\xc0\x0e\xee\x04H\x0b\xee\x04\x88\n\xee\x040\x08\xee\x04\x90\x05\xee\x048\t\xee\x04 \x00\xee\x04\xe8\x04\xee\x04\xe8\r\xee\x04\xf8\x00\xee\x04@\r\xee\x04@\x07\xee\x04x\x05\xee\x048\x00\xee\x04\x00\x05\xee\x04p\x04\xee\x04\x98\x00\xee\x04\xf8\x06\xee\x040\x0b\xee\x04P\x03\xee\x04 \x03\xee\x040\x05\xee\x04(\x01\xee\x048\x0c\xee\x04\xc8\x03\xee\x04\xc8\t\xee\x04\xc0\x08\xee\x04\xa0\x01\xee\x04\x88\x04\xee\x04X\r\xee\x04\x08\x03\xee\x04(\x04\xee\x040\x02\xee\x04p\r\xee\x04`\x02\xee\x04`\x0b\xee\x04\xd8\xd2\xe1\x04\xc0\xd8\xe1\x04\xd8\xd5\xe1\x04\x98\xd3\xe1\x04(\xd7\xe1\x04\xa0\xda\xe1\x04 \xd3\xe1\x04h\xd3\xe1\x04\xc0\xd5\xe1\x04\xc8\xd0\xe1\x04`\xd8\xe1\x04\xe8\xd7\xe1\x04\x88\xd4\xe1\x04\xa8\xd5\xe1\x04\xf0\xd8\xe1\x04\x10\xd4\xe1\x04\x80\xdc\xe1\x04\x98\xdf\xe1\x04P\xd6\xe1\x04x\xd5\xe1\x04\xc8\xd3\xe1\x04\x80\xd9\xe1\x04H\xd8\xe1\x04H\xdb\xe1\x04\x98\xd0\xe1\x04(\xd4\xe1\x04P\xd0\xe1\x04p\xd7\xe1\x040\xd2\xe1\x04\xb8\xd7\xe1\x04H\xd2\xe1\x04\xc8\xd9\xe1\x04\x80\xd0\xe1\x04\xe0\xd0\xe1\x04\xa0\xd1\xe1\x04h\xd0\xe1\x04\xe0\xd9\xe1\x04\x08\xd3\xe1\x04\xa0\xd4\xe1\x04x\xd8\xe1\x04\x18\xd8\xe1\x04p\xd1\xe1\x04\x90\xd5\xe1\x04X\xd1\xe1\x04\xa8\xd2\xe1\x04H\xd5\xe1\x04p\xda\xe1\x040\xdb\xe1\x04\xf0\xde\xe1\x048\xd0\xe1\x04\x88\xda\xe1\x048\xd3\xe1\x04p\xd4\xe1\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6533
sg6370
g6523
sg6384
g6527
sg6379
g6531
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6446
sg6370
g6553
sg6384
g6453
sg6379
g6560
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6585
sg6370
g6581
sg6384
g6592
sg6379
g6589
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6446
sg6370
g6553
sg6384
g6453
sg6379
g6560
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6401
sg6370
g6611
sg6384
g6395
sg6379
g6618
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6630
sg6370
g6626
sg6384
g6637
sg6379
g6634
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6664
sg6370
g6660
sg6384
g6671
sg6379
g6668
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6694
sg6370
g6690
sg6384
g6701
sg6379
g6698
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6533
sg6370
g6523
sg6384
g6527
sg6379
g6531
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6724
sg6370
g6720
sg6384
g6731
sg6379
g6728
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6630
sg6370
g6754
sg6384
g6637
sg6379
g6761
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6779
sg6370
g6769
sg6384
g6773
sg6379
g6777
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6664
sg6370
g6660
sg6384
g6671
sg6379
g6668
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6630
sg6370
g6754
sg6384
g6637
sg6379
g6761
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6585
sg6370
g6581
sg6384
g6592
sg6379
g6589
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6647
sg6370
g6838
sg6384
g6654
sg6379
g6845
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6741
sg6370
g6866
sg6384
g6748
sg6379
g6873
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6885
sg6370
g6881
sg6384
g6892
sg6379
g6889
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6463
sg6370
g6898
sg6384
g6470
sg6379
g6905
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6401
sg6370
g6611
sg6384
g6395
sg6379
g6618
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6949
sg6370
g6939
sg6384
g6943
sg6379
g6947
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6885
sg6370
g6995
sg6384
g6892
sg6379
g7002
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6585
sg6370
g7010
sg6384
g6592
sg6379
g7017
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6463
sg6370
g6898
sg6384
g6470
sg6379
g6905
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6647
sg6370
g6838
sg6384
g6654
sg6379
g6845
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6664
sg6370
g6660
sg6384
g6671
sg6379
g6668
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6401
sg6370
g6611
sg6384
g6395
sg6379
g6618
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6694
sg6370
g7090
sg6384
g6701
sg6379
g7097
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6533
sg6370
g7105
sg6384
g6527
sg6379
g7112
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6724
sg6370
g7120
sg6384
g6731
sg6379
g7127
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6664
sg6370
g6660
sg6384
g6671
sg6379
g6668
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6949
sg6370
g6939
sg6384
g6943
sg6379
g6947
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6418
sg6370
g7200
sg6384
g6412
sg6379
g7207
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6694
sg6370
g6690
sg6384
g6701
sg6379
g6698
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6463
sg6370
g6898
sg6384
g6470
sg6379
g6905
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6694
sg6370
g7090
sg6384
g6701
sg6379
g7097
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6429
sg6370
g7267
sg6384
g6436
sg6379
g7274
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6418
sg6370
g7200
sg6384
g6412
sg6379
g7207
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6510
sg6370
g7295
sg6384
g6517
sg6379
g7302
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6741
sg6370
g6866
sg6384
g6748
sg6379
g6873
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6949
sg6370
g7323
sg6384
g6943
sg6379
g7330
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6418
sg6370
g7200
sg6384
g6412
sg6379
g7207
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6885
sg6370
g6995
sg6384
g6892
sg6379
g7002
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6510
sg6370
g7295
sg6384
g6517
sg6379
g7302
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6630
sg6370
g6626
sg6384
g6637
sg6379
g6634
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6585
sg6370
g7010
sg6384
g6592
sg6379
g7017
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6664
sg6370
g7416
sg6384
g6671
sg6379
g7423
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6585
sg6370
g6581
sg6384
g6592
sg6379
g6589
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6463
sg6370
g6898
sg6384
g6470
sg6379
g6905
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6949
sg6370
g6939
sg6384
g6943
sg6379
g6947
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6779
sg6370
g6769
sg6384
g6773
sg6379
g6777
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g7500
sg6370
g7496
sg6384
g7507
sg6379
g7504
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g6630
sg6370
g6754
sg6384
g6637
sg6379
g6761
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6949
sg6370
g7323
sg6384
g6943
sg6379
g7330
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6375
sg6370
g7539
sg6384
g6385
sg6379
g7546
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6647
sg6370
g6838
sg6384
g6654
sg6379
g6845
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6533
sg6370
g7105
sg6384
g6527
sg6379
g7112
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6779
sg6370
g7580
sg6384
g6773
sg6379
g7587
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6664
sg6370
g7416
sg6384
g6671
sg6379
g7423
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6429
sg6370
g7267
sg6384
g6436
sg6379
g7274
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6694
sg6370
g6690
sg6384
g6701
sg6379
g6698
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6949
sg6370
g7323
sg6384
g6943
sg6379
g7330
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6724
sg6370
g6720
sg6384
g6731
sg6379
g6728
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6949
sg6370
g7323
sg6384
g6943
sg6379
g7330
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6585
sg6370
g7010
sg6384
g6592
sg6379
g7017
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6664
sg6370
g7416
sg6384
g6671
sg6379
g7423
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6375
sg6370
g7539
sg6384
g6385
sg6379
g7546
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6446
sg6370
g6553
sg6384
g6453
sg6379
g6560
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6949
sg6370
g7323
sg6384
g6943
sg6379
g7330
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6885
sg6370
g6995
sg6384
g6892
sg6379
g7002
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6741
sg6370
g6866
sg6384
g6748
sg6379
g6873
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6585
sg6370
g7010
sg6384
g6592
sg6379
g7017
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6630
sg6370
g6626
sg6384
g6637
sg6379
g6634
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6694
sg6370
g7090
sg6384
g6701
sg6379
g7097
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g7500
sg6370
g7496
sg6384
g7507
sg6379
g7504
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g7500
sg6370
g7868
sg6384
g7507
sg6379
g7875
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6533
sg6370
g7105
sg6384
g6527
sg6379
g7112
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6779
sg6370
g6769
sg6384
g6773
sg6379
g6777
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6694
sg6370
g7090
sg6384
g6701
sg6379
g7097
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6630
sg6370
g6626
sg6384
g6637
sg6379
g6634
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g7500
sg6370
g7868
sg6384
g7507
sg6379
g7875
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6779
sg6370
g6769
sg6384
g6773
sg6379
g6777
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6647
sg6370
g6838
sg6384
g6654
sg6379
g6845
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6585
sg6370
g7010
sg6384
g6592
sg6379
g7017
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6741
sg6370
g6866
sg6384
g6748
sg6379
g6873
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6533
sg6370
g6523
sg6384
g6527
sg6379
g6531
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6664
sg6370
g6660
sg6384
g6671
sg6379
g6668
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6418
sg6370
g7200
sg6384
g6412
sg6379
g7207
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6885
sg6370
g6881
sg6384
g6892
sg6379
g6889
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6741
sg6370
g6866
sg6384
g6748
sg6379
g6873
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6533
sg6370
g6523
sg6384
g6527
sg6379
g6531
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6694
sg6370
g6690
sg6384
g6701
sg6379
g6698
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6510
sg6370
g7295
sg6384
g6517
sg6379
g7302
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6585
sg6370
g6581
sg6384
g6592
sg6379
g6589
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6647
sg6370
g6838
sg6384
g6654
sg6379
g6845
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6664
sg6370
g7416
sg6384
g6671
sg6379
g7423
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6885
sg6370
g6995
sg6384
g6892
sg6379
g7002
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6533
sg6370
g7105
sg6384
g6527
sg6379
g7112
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6779
sg6370
g7580
sg6384
g6773
sg6379
g7587
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6463
sg6370
g6898
sg6384
g6470
sg6379
g6905
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6446
sg6370
g6553
sg6384
g6453
sg6379
g6560
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6510
sg6370
g7295
sg6384
g6517
sg6379
g7302
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6375
sg6370
g7539
sg6384
g6385
sg6379
g7546
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6885
sg6370
g6881
sg6384
g6892
sg6379
g6889
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g7500
sg6370
g7868
sg6384
g7507
sg6379
g7875
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6724
sg6370
g7120
sg6384
g6731
sg6379
g7127
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6493
sg6370
g8364
sg6384
g6500
sg6379
g8371
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6401
sg6370
g6611
sg6384
g6395
sg6379
g6618
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6724
sg6370
g6720
sg6384
g6731
sg6379
g6728
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6949
sg6370
g6939
sg6384
g6943
sg6379
g6947
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6724
sg6370
g7120
sg6384
g6731
sg6379
g7127
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6493
sg6370
g8364
sg6384
g6500
sg6379
g8371
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6401
sg6370
g6611
sg6384
g6395
sg6379
g6618
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6694
sg6370
g6690
sg6384
g6701
sg6379
g6698
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6664
sg6370
g7416
sg6384
g6671
sg6379
g7423
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6630
sg6370
g6626
sg6384
g6637
sg6379
g6634
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6779
sg6370
g6769
sg6384
g6773
sg6379
g6777
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6885
sg6370
g6995
sg6384
g6892
sg6379
g7002
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6630
sg6370
g6754
sg6384
g6637
sg6379
g6761
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6724
sg6370
g7120
sg6384
g6731
sg6379
g7127
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6429
sg6370
g7267
sg6384
g6436
sg6379
g7274
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6885
sg6370
g6881
sg6384
g6892
sg6379
g6889
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6533
sg6370
g6523
sg6384
g6527
sg6379
g6531
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6724
sg6370
g6720
sg6384
g6731
sg6379
g6728
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6724
sg6370
g7120
sg6384
g6731
sg6379
g7127
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6510
sg6370
g7295
sg6384
g6517
sg6379
g7302
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6585
sg6370
g6581
sg6384
g6592
sg6379
g6589
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6375
sg6370
g7539
sg6384
g6385
sg6379
g7546
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6429
sg6370
g7267
sg6384
g6436
sg6379
g7274
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6694
sg6370
g7090
sg6384
g6701
sg6379
g7097
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6885
sg6370
g6881
sg6384
g6892
sg6379
g6889
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g7500
sg6370
g7496
sg6384
g7507
sg6379
g7504
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6779
sg6370
g7580
sg6384
g6773
sg6379
g7587
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6779
sg6370
g7580
sg6384
g6773
sg6379
g7587
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g7500
sg6370
g7496
sg6384
g7507
sg6379
g7504
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6779
sg6370
g7580
sg6384
g6773
sg6379
g7587
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6446
sg6370
g6553
sg6384
g6453
sg6379
g6560
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g7500
sg6370
g7868
sg6384
g7507
sg6379
g7875
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6375
sg6370
g7539
sg6384
g6385
sg6379
g7546
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6418
sg6370
g7200
sg6384
g6412
sg6379
g7207
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6724
sg6370
g6720
sg6384
g6731
sg6379
g6728
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6493
sg6370
g8364
sg6384
g6500
sg6379
g8371
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6949
sg6370
g6939
sg6384
g6943
sg6379
g6947
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6533
sg6370
g7105
sg6384
g6527
sg6379
g7112
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6493
sg6370
g8364
sg6384
g6500
sg6379
g8371
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g7500
sg6370
g7868
sg6384
g7507
sg6379
g7875
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6493
sg6370
g8364
sg6384
g6500
sg6379
g8371
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6630
sg6370
g6754
sg6384
g6637
sg6379
g6761
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g7500
sg6370
g7496
sg6384
g7507
sg6379
g7504
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6429
sg6370
g7267
sg6384
g6436
sg6379
g7274
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.