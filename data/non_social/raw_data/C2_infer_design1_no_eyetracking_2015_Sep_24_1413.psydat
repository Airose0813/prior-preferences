ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C2_infer_design1_no_eyetracking_2015_Sep_24_1413
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xaf\xa4j\xa99\x02N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Sep_24_1413
p66
sVparticipant
p67
VC2
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F0.70017316940538876
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F13.183187514468955
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P12'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F13.25
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F0.77999999999999914
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x10\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V22-daim.png
p102
sg21
F1.7
sg69
Vn
sa(dp103
g63
g64
sg20
F7.3339999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F1.0599999999999992
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'\x1b\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p109
sg21
F1.8999999999999999
sg69
Vn
sa(dp110
g63
g64
sg20
F5.6840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'!\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V44-crunch.png
p116
sg21
F1.5
sg69
Vn
sa(dp117
g63
g64
sg20
F5.0179999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F0.079999999999998947
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\x02\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p123
sg21
F1.6000000000000001
sg69
Vn
sa(dp124
g63
g64
sg20
F9.2669999999999995
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F1.0999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x0f\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p130
sg21
F1.2
sg69
Vn
sa(dp131
g63
g64
sg20
F4.1340000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0.13999999999999874
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'"\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p137
sg21
F1.7
sg69
Vn
sa(dp138
g63
g64
sg20
F8.6509999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F1.3999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'#\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p144
sg21
F1.3999999999999999
sg69
Vn
sa(dp145
g63
g64
sg20
F2.3340000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x14\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p151
sg21
F1.1000000000000001
sg69
Vn
sa(dp152
g63
g64
sg20
F2.5840000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F0.059999999999999165
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x0b\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p158
sg21
F1.3
sg69
Vn
sa(dp159
g63
g64
sg20
F2.5169999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x18\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p165
sg21
F1.5
sg69
Vn
sa(dp166
g63
g64
sg20
F4.3170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F0.17999999999999916
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\x07\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p172
sg21
F1.3
sg69
Vn
sa(dp173
g63
g64
sg20
F4.9340000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0.17999999999999894
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S"'\x00\x00\x00"
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V51-mars.png
p179
sg21
F1.6000000000000001
sg69
Vn
sa(dp180
g63
g64
sg20
F3.9510000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0.77999999999999936
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x17\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p186
sg21
F1.6000000000000001
sg69
Vn
sa(dp187
g63
g64
sg20
F7.5179999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0.25999999999999912
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\x01\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p193
sg21
F1.3
sg69
Vn
sa(dp194
g63
g64
sg20
F3.4670000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\x08\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p200
sg21
F1.7
sg69
Vn
sa(dp201
g63
g64
sg20
F2.4510000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\x11\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p207
sg21
F1.8999999999999999
sg69
Vn
sa(dp208
g63
g64
sg20
F3.1509999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'%\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p214
sg21
F1.8999999999999999
sg69
Vn
sa(dp215
g63
g64
sg20
F3.1840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F0.27999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x03\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V4-corn.png
p221
sg21
F1.3999999999999999
sg69
Vn
sa(dp222
g63
g64
sg20
F2.0169999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x1d\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V40-sardines.png
p228
sg21
F1.2
sg69
Vn
sa(dp229
g63
g64
sg20
F3.6669999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F1.0199999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\x00\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p235
sg21
F1.2
sg69
Vn
sa(dp236
g63
g64
sg20
F2.7170000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x1c\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p242
sg21
F1.8999999999999999
sg69
Vn
sa(dp243
g63
g64
sg20
F2.5510000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0.17999999999999872
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x19\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p249
sg21
F1.7
sg69
Vn
sa(dp250
g63
g64
sg20
F2.4009999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F0.17999999999999894
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'\t\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p256
sg21
F1.5
sg69
Vn
sa(dp257
g63
g64
sg20
F2.4670000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\x15\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V29-beans.png
p263
sg21
F1.1000000000000001
sg69
Vn
sa(dp264
g63
g64
sg20
F3.984
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0.13999999999999896
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x0c\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V18-mms.png
p270
sg21
F1.3999999999999999
sg69
Vn
sa(dp271
g63
g64
sg20
F2.0840000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x16\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p277
sg21
F1.2
sg69
Vn
sa(dp278
g63
g64
sg20
F1.7010000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'&\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V50-polo.png
p284
sg21
F1
sg69
Vn
sa(dp285
g63
g64
sg20
F2.3839999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F0.25999999999999845
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'$\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V48-twix.png
p291
sg21
F1.8999999999999999
sg69
Vn
sa(dp292
g63
g64
sg20
F2.1339999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\x0e\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p298
sg21
F1.7
sg69
Vn
sa(dp299
g63
g64
sg20
F3.7679999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F1.0199999999999991
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x1e\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p305
sg21
F1.8999999999999999
sg69
Vn
sa(dp306
g63
g64
sg20
F2.4670000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F0.97999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S' \x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p312
sg21
F1.8999999999999999
sg69
Vn
sa(dp313
g63
g64
sg20
F4.0010000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F0.49999999999999889
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'\x1a\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V35-raisins.png
p319
sg21
F1.7
sg69
Vn
sa(dp320
g63
g64
sg20
F4.1509999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F0.1599999999999985
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x13\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p326
sg21
F1.8999999999999999
sg69
Vn
sa(dp327
g63
g64
sg20
F2.3839999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F0.11999999999999851
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x04\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p333
sg21
F2
sg69
Vn
sa(dp334
g63
g64
sg20
F2.117
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F0.47999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\n\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p340
sg21
F1.2
sg69
Vn
sa(dp341
g63
g64
sg20
F3.6669999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F0.19999999999999871
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'\x12\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p347
sg21
F1.7
sg69
Vn
sa(dp348
g63
g64
sg20
F2.3839999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'\r\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p354
sg21
F1.8
sg69
Vn
sa(dp355
g63
g64
sg20
F2.6669999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F1.4600000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'\x06\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V7-olives.png
p361
sg21
F1.2
sg69
Vn
sa(dp362
g63
g64
sg20
F2.7669999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F0.1199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x1f\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p368
sg21
F1
sg69
Vn
sa(dp369
g63
g64
sg20
F2.1509999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F0.27999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x05\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p375
sg21
F1.5
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F6.966667027791118
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p380
sg26
F4.9000000000000021
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'left'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F3.3499678407824831
sg27
F6.7169999999999996
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p389
sg26
F3.7999999999999998
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'right'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F3.2168246877881757
sg27
F2.3839999999999999
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p398
sg26
F2.5999999999999992
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'left'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F5.2000537127387361
sg27
F4.9169999999999998
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'38-maltesers.png'
p407
sg26
F3.5999999999999992
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'right'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F2.5830908087373246
sg27
F1.5840000000000001
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p416
sg26
F3.4999999999999996
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'right'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F2.0499497084601899
sg27
F1.5009999999999999
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p425
sg26
F5.0000000000000018
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'right'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F1.3000643184350338
sg27
F1.5840000000000001
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p434
sg26
F3.4999999999999996
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'left'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F2.1831441793510749
sg27
F4.2009999999999996
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p443
sg26
F5.6999999999999984
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'left'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F1.7000941968581174
sg27
F4.0170000000000003
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p452
sg26
F1.9999999999999991
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'left'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F4.7001372468730551
sg27
F2.851
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'22-daim.png'
p461
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'right'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F1.2167631063057343
sg27
F0.96699999999999997
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p470
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F1.0833120459064958
sg27
F1.117
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p479
sg26
F1.9999999999999982
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'right'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F3.9000595287652686
sg27
F2.8839999999999999
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p488
sg26
F5.9999999999999982
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'right'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.2501471113137086
sg27
F1.0169999999999999
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p497
sg26
F5.9999999999999982
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'left'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F0.96671606489690021
sg27
F1.0509999999999999
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'31-hobnobs.png'
p506
sg26
F5.0000000000000009
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'left'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F1.1333931852095702
sg27
F1.484
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p515
sg26
F4.0000000000000009
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'left'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F1.6832730443020409
sg27
F1.7010000000000001
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'44-crunch.png'
p524
sg26
F2.9999999999999996
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'right'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.6167217098663968
sg27
F1.9670000000000001
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p533
sg26
F3.5999999999999996
sg28
F4
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'right'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F1.750052173196309
sg27
F2.3170000000000002
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p542
sg26
F1.4999999999999989
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'left'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F16.516709108469513
sg27
F5.3840000000000003
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p551
sg26
F1.4999999999999984
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'right'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F10.683342608568637
sg27
F2.0169999999999999
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'46-pistachios.png'
p560
sg26
F5.9999999999999982
sg28
F3
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'left'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F1.7835185719486617
sg27
F1.0509999999999999
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'25-kitkat.png'
p569
sg26
F5.3000000000000007
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'right'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.1167234204658598
sg27
F2.1509999999999998
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'51-mars.png'
p578
sg26
F3.6999999999999993
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'right'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F11.866569181660452
sg27
F1.8009999999999999
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'40-sardines.png'
p587
sg26
F4.4000000000000004
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'right'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F1.6668447587871924
sg27
F1.117
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'29-beans.png'
p596
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'right'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F0.75007241525963764
sg27
F0.88400000000000001
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p605
sg26
F4.0999999999999996
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'right'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F1.4999358526220021
sg27
F3.4169999999999998
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p614
sg26
F5.1000000000000005
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'right'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F2.9167472547778743
sg27
F2.351
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p623
sg26
F1.2999999999999989
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'right'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F2.3668511450159713
sg27
F2.1339999999999999
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'5-pineapple.png'
p632
sg26
F5.1000000000000005
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'left'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.2502189563747379
sg27
F1.0840000000000001
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p641
sg26
F3.7000000000000006
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'left'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F1.0833858866681112
sg27
F0.98399999999999999
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'48-twix.png'
p650
sg26
F2.4999999999999991
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'left'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F1.2500250887496804
sg27
F1.534
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p659
sg26
F3.8000000000000003
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'left'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F2.6500643754552584
sg27
F1.0669999999999999
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'7-olives.png'
p668
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'left'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F0.93341616422549123
sg27
F0.78400000000000003
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p677
sg26
F5.2000000000000011
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'left'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F1.0168525134940865
sg27
F1.0169999999999999
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'35-raisins.png'
p686
sg26
F4.4000000000000004
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'left'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F1.0666987308541138
sg27
F1.1339999999999999
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'50-polo.png'
p695
sg26
F4
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'right'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.7666959938978835
sg27
F1.0840000000000001
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'18-mms.png'
p704
sg26
F5.5999999999999988
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'right'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F1.2500270844466286
sg27
F0.95099999999999996
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'49-yorkie.png'
p713
sg26
F5.3999999999999995
sg28
F4
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'right'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F1.4333907903783256
sg27
F2.0670000000000002
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'4-corn.png'
p722
sg26
F5.1000000000000014
sg28
F3
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'left'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F1.033317291738058
sg27
F1.2170000000000001
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p731
sg26
F3.6999999999999997
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'left'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F5.3166593871283112
sg27
F1.984
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F271.59417975178076
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F6.0167290654353565
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'32-hovis_crackers.png'
p743
sg82
S'24-food_doctor_apple_walnut_bar.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p748
sg33
g748
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\t\x18\x0e\x1b\x1d\x01\x01\xd0'
tRp753
sa(dp754
g63
g64
sg81
S'52-aero_mousse.png'
p755
sg82
S'14-discos_salt_vinegar.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'14-discos_salt_vinegar.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1b*\tC\x18'
tRp764
sa(dp765
g63
g64
sg81
S'11-snickers.png'
p766
sg82
S'54-frubes_yogurt.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'54-frubes_yogurt.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1b2\n\x06h'
tRp775
sa(dp776
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p777
sg82
S'9-yu_mango_pieces.png'
p778
sg56
Vr
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'9-yu_mango_pieces.png'
p782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1b;\x08\x9b '
tRp786
sa(dp787
g63
g64
sg81
g755
sg82
S'52-aero_mousse.png'
p788
sg56
Vr
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p791
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p792
sS'practice_loop.thisIndex'
p793
g59
(g98
S'\x04\x00\x00\x00'
tRp794
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1c\t\x01\xf0\x18'
tRp795
sa(dp796
g63
g64
sg81
g743
sg82
S'32-hovis_crackers.png'
p797
sg56
Vr
sS'practice_loop.thisN'
p798
I5
sS'practice_loop.thisTrialN'
p799
I5
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p800
I0
sg83
g748
sg33
g748
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p801
sS'practice_loop.thisIndex'
p802
g59
(g98
S'\x05\x00\x00\x00'
tRp803
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1c\x12\x0co\x98'
tRp804
sa(dp805
g63
g64
sg81
S'53-cheestrings.png'
p806
sg82
S'47-picnic.png'
p807
sg56
Vr
sS'practice_loop.thisN'
p808
I6
sS'practice_loop.thisTrialN'
p809
I6
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p810
I0
sg83
S'47-picnic.png'
p811
sg33
g806
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p812
sS'practice_loop.thisIndex'
p813
g59
(g98
S'\x06\x00\x00\x00'
tRp814
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1c\x1b\x06A\x90'
tRp815
sa(dp816
g63
g64
sg81
g777
sg82
S'37-nakd_cashew_cookie.png'
p817
sg56
Vr
sS'practice_loop.thisN'
p818
I7
sS'practice_loop.thisTrialN'
p819
I7
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p820
I0
sg83
g782
sg33
g782
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p821
sS'practice_loop.thisIndex'
p822
g59
(g98
S'\x07\x00\x00\x00'
tRp823
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1c"\x07\xfe\xe0'
tRp824
sa(dp825
g63
g64
sg81
g806
sg82
S'53-cheestrings.png'
p826
sg56
Vr
sS'practice_loop.thisN'
p827
I8
sS'practice_loop.thisTrialN'
p828
I8
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p829
I0
sg83
g811
sg33
g806
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p830
sS'practice_loop.thisIndex'
p831
g59
(g98
S'\x08\x00\x00\x00'
tRp832
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1c+\x04\xaf8'
tRp833
sa(dp834
g63
g64
sg81
S'15-walnut_whip.png'
p835
sg82
S'28-maple_pecan.png'
p836
sg56
Vr
sS'practice_loop.thisN'
p837
I9
sS'practice_loop.thisTrialN'
p838
I9
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p839
I0
sg83
S'28-maple_pecan.png'
p840
sg33
g835
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p841
sS'practice_loop.thisIndex'
p842
g59
(g98
S'\t\x00\x00\x00'
tRp843
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1c2\x0c\x9a\x90'
tRp844
sa(dp845
g63
g64
sg81
S'12-topic.png'
p846
sg82
S'12-topic.png'
p847
sg56
Vr
sS'practice_loop.thisN'
p848
I10
sS'practice_loop.thisTrialN'
p849
I10
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p850
I0
sg83
S'39-mackerel.png'
p851
sg33
g851
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1c9\t\xcf\xb8'
tRp855
sa(dp856
g63
g64
sg81
g766
sg82
S'11-snickers.png'
p857
sg56
Vr
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1d\x04\x00]\xc0'
tRp864
sa(dp865
g63
g64
sg81
g835
sg82
S'15-walnut_whip.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g840
sg33
g835
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1d\x0b\x0b#\x90'
tRp873
sa(dp874
g63
g64
sg81
g846
sg82
S'39-mackerel.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g851
sg33
g846
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1d\x13\x08\x8fh'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F37.633063325149124
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'29-beans.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'right'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'46-pistachios.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'46-pistachios.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p907
I0
sS'img_wrong'
p908
S'29-beans.png'
p909
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F1.450197973055765
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1e\x0b\x06\x1a\x80'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'17-jacobs_mini_cheddars_redo.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'left'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'17-jacobs_mini_cheddars_redo.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'8-liquorice_catherine_wheels.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p925
I0
sg908
S'8-liquorice_catherine_wheels.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F1.5334370335076528
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1e\x11\r\x94\x90'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'4-corn.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'left'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'4-corn.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'10-bounty_redo.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
S'10-bounty_redo.png'
p942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p943
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vn
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.4834203266800614
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1e\x18\x06\xf9('
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'31-hobnobs.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'right'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
S'31-hobnobs.png'
p953
sg63
g64
sS'trial_loop.thisIndex'
p954
g59
(g98
S'\x03\x00\x00\x00'
tRp955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p956
I0
sg903
S'25-kitkat.png'
p957
sS'block_loop.thisRepN'
p958
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p959
I0
sg908
S'25-kitkat.png'
p960
sg55
g11
sS'block_loop.thisTrial'
p961
Nsg69
Vn
sS'block_loop.thisTrialN'
p962
I0
sg39
F1.4667785016754351
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1e\x1e\x0e\xb1\xb8'
tRp963
sa(dp964
S'trial_loop.thisTrialN'
p965
I4
sg894
S'41-peanuts_redo.png'
p966
sS'block_loop.thisIndex'
p967
g888
sg38
S'left'
p968
sg58
g62
sS'trial_loop.thisN'
p969
I4
sg33
S'41-peanuts_redo.png'
p970
sg63
g64
sS'trial_loop.thisIndex'
p971
g59
(g98
S'\x04\x00\x00\x00'
tRp972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p973
I0
sg903
S'45-chewy_nougat_redo.png'
p974
sS'block_loop.thisRepN'
p975
I0
sg906
S'45-chewy_nougat_redo.png'
p976
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p977
I0
sg908
g970
sg55
g11
sS'block_loop.thisTrial'
p978
Nsg69
Vn
sS'block_loop.thisTrialN'
p979
I0
sg39
F1.7168799970786495
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1e%\x07$ '
tRp980
sa(dp981
S'trial_loop.thisTrialN'
p982
I5
sg894
S'22-daim.png'
p983
sS'block_loop.thisIndex'
p984
g888
sg38
S'right'
p985
sg58
g62
sS'trial_loop.thisN'
p986
I5
sg33
S'22-daim.png'
p987
sg63
g64
sS'trial_loop.thisIndex'
p988
g59
(g98
S'\x05\x00\x00\x00'
tRp989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p990
I0
sg903
S'7-olives.png'
p991
sS'block_loop.thisRepN'
p992
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p993
I0
sg908
S'7-olives.png'
p994
sg55
g11
sS'block_loop.thisTrial'
p995
Nsg69
Vn
sS'block_loop.thisTrialN'
p996
I0
sg39
F1.2167616808110324
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1e,\x03g\x18'
tRp997
sa(dp998
S'trial_loop.thisTrialN'
p999
I6
sg894
S'50-polo.png'
p1000
sS'block_loop.thisIndex'
p1001
g888
sg38
S'left'
p1002
sg58
g62
sS'trial_loop.thisN'
p1003
I6
sg33
S'48-twix.png'
p1004
sg63
g64
sS'trial_loop.thisIndex'
p1005
g59
(g98
S'\x06\x00\x00\x00'
tRp1006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1007
I0
sg903
S'48-twix.png'
p1008
sS'block_loop.thisRepN'
p1009
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1010
I0
sg908
S'50-polo.png'
p1011
sg55
g11
sS'block_loop.thisTrial'
p1012
Nsg69
Vn
sS'block_loop.thisTrialN'
p1013
I0
sg39
F1.5834363492649572
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1e2\x07\x10\x98'
tRp1014
sa(dp1015
S'trial_loop.thisTrialN'
p1016
I7
sg894
S'8-liquorice_catherine_wheels.png'
p1017
sS'block_loop.thisIndex'
p1018
g888
sg38
S'left'
p1019
sg58
g62
sS'trial_loop.thisN'
p1020
I7
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1021
g59
(g98
S'\x07\x00\x00\x00'
tRp1022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1023
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1024
sS'block_loop.thisRepN'
p1025
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1026
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1027
Nsg69
Vn
sS'block_loop.thisTrialN'
p1028
I0
sg39
F2.0500534846578375
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1e9\x01kH'
tRp1029
sa(dp1030
S'trial_loop.thisTrialN'
p1031
I8
sg894
S'2-steamed_puddings.png'
p1032
sS'block_loop.thisIndex'
p1033
g888
sg38
S'left'
p1034
sg58
g62
sS'trial_loop.thisN'
p1035
I8
sg33
S'2-steamed_puddings.png'
p1036
sg63
g64
sS'trial_loop.thisIndex'
p1037
g59
(g98
S'\x08\x00\x00\x00'
tRp1038
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1039
I0
sg903
S'20-fruit_pastilles.png'
p1040
sS'block_loop.thisRepN'
p1041
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1042
I0
sg908
S'20-fruit_pastilles.png'
p1043
sg55
g11
sS'block_loop.thisTrial'
p1044
Nsg69
Vn
sS'block_loop.thisTrialN'
p1045
I0
sg39
F1.5667671547198552
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1f\x04\x02\xab\x98'
tRp1046
sa(dp1047
S'trial_loop.thisTrialN'
p1048
I9
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1049
sS'block_loop.thisIndex'
p1050
g888
sg38
S'right'
p1051
sg58
g62
sS'trial_loop.thisN'
p1052
I9
sg33
S'36-fig_rolls.png'
p1053
sg63
g64
sS'trial_loop.thisIndex'
p1054
g59
(g98
S'\t\x00\x00\x00'
tRp1055
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1056
I0
sg903
S'36-fig_rolls.png'
p1057
sS'block_loop.thisRepN'
p1058
I0
sg906
g1053
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1059
I0
sg908
S'34-hula_hoops_bbq_beef_redo.png'
p1060
sg55
g11
sS'block_loop.thisTrial'
p1061
Nsg69
Vn
sS'block_loop.thisTrialN'
p1062
I0
sg39
F2.5335202825444867
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1f\n\x0b\xcfp'
tRp1063
sa(dp1064
S'trial_loop.thisTrialN'
p1065
I10
sg894
S'23-crunchie_redo.png'
p1066
sS'block_loop.thisIndex'
p1067
g888
sg38
S'left'
p1068
sg58
g62
sS'trial_loop.thisN'
p1069
I10
sg33
S'23-crunchie_redo.png'
p1070
sg63
g64
sS'trial_loop.thisIndex'
p1071
g59
(g98
S'\n\x00\x00\x00'
tRp1072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1073
I0
sg903
S'33-ambrosia_rice.png'
p1074
sS'block_loop.thisRepN'
p1075
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1076
I0
sg908
S'33-ambrosia_rice.png'
p1077
sg55
g11
sS'block_loop.thisTrial'
p1078
Nsg69
Vn
sS'block_loop.thisTrialN'
p1079
I0
sg39
F1.3832973917960771
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1f\x12\x050 '
tRp1080
sa(dp1081
S'trial_loop.thisTrialN'
p1082
I11
sg894
g1049
sS'block_loop.thisIndex'
p1083
g888
sg38
S'right'
p1084
sg58
g62
sS'trial_loop.thisN'
p1085
I11
sg33
g1060
sg63
g64
sS'trial_loop.thisIndex'
p1086
g59
(g98
S'\x0b\x00\x00\x00'
tRp1087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1088
I0
sg903
g1057
sS'block_loop.thisRepN'
p1089
I0
sg906
g1053
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1090
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p1091
Nsg69
Vn
sS'block_loop.thisTrialN'
p1092
I0
sg39
F1.2168489212381246
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1f\x18\x0bu\x98'
tRp1093
sa(dp1094
S'trial_loop.thisTrialN'
p1095
I12
sg894
S'40-sardines.png'
p1096
sS'block_loop.thisIndex'
p1097
g888
sg38
S'right'
p1098
sg58
g62
sS'trial_loop.thisN'
p1099
I12
sg33
S'5-pineapple.png'
p1100
sg63
g64
sS'trial_loop.thisIndex'
p1101
g59
(g98
S'\x0c\x00\x00\x00'
tRp1102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1103
I0
sg903
S'5-pineapple.png'
p1104
sS'block_loop.thisRepN'
p1105
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1106
I0
sg908
S'40-sardines.png'
p1107
sg55
g11
sS'block_loop.thisTrial'
p1108
Nsg69
Vn
sS'block_loop.thisTrialN'
p1109
I0
sg39
F2.1835464546747971
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1f\x1f\x00\x1bX'
tRp1110
sa(dp1111
S'trial_loop.thisTrialN'
p1112
I13
sg894
g915
sS'block_loop.thisIndex'
p1113
g888
sg38
S'left'
p1114
sg58
g62
sS'trial_loop.thisN'
p1115
I13
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1116
g59
(g98
S'\r\x00\x00\x00'
tRp1117
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1118
I0
sg903
g923
sS'block_loop.thisRepN'
p1119
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1120
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1121
Nsg69
Vn
sS'block_loop.thisTrialN'
p1122
I0
sg39
F1.833408124421112
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1f&\x03C\xf0'
tRp1123
sa(dp1124
S'trial_loop.thisTrialN'
p1125
I14
sg894
S'7-olives.png'
p1126
sS'block_loop.thisIndex'
p1127
g888
sg38
S'right'
p1128
sg58
g62
sS'trial_loop.thisN'
p1129
I14
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1130
g59
(g98
S'\x0e\x00\x00\x00'
tRp1131
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1132
I0
sg903
S'22-daim.png'
p1133
sS'block_loop.thisRepN'
p1134
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1135
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1136
Nsg69
Vn
sS'block_loop.thisTrialN'
p1137
I0
sg39
F1.1172100852236326
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1f-\x010\xb0'
tRp1138
sa(dp1139
S'trial_loop.thisTrialN'
p1140
I15
sg894
g966
sS'block_loop.thisIndex'
p1141
g888
sg38
S'left'
p1142
sg58
g62
sS'trial_loop.thisN'
p1143
I15
sg33
g976
sg63
g64
sS'trial_loop.thisIndex'
p1144
g59
(g98
S'\x0f\x00\x00\x00'
tRp1145
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1146
I0
sg903
g974
sS'block_loop.thisRepN'
p1147
I0
sg906
g976
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1148
I0
sg908
g970
sg55
g11
sS'block_loop.thisTrial'
p1149
Nsg69
Vn
sS'block_loop.thisTrialN'
p1150
I0
sg39
F2.3334500340424711
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1f3\x03\xa9\x80'
tRp1151
sa(dp1152
S'trial_loop.thisTrialN'
p1153
I16
sg894
g1126
sS'block_loop.thisIndex'
p1154
g888
sg38
S'right'
p1155
sg58
g62
sS'trial_loop.thisN'
p1156
I16
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1157
g59
(g98
S'\x10\x00\x00\x00'
tRp1158
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1159
I0
sg903
g1133
sS'block_loop.thisRepN'
p1160
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1161
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1162
Nsg69
Vn
sS'block_loop.thisTrialN'
p1163
I0
sg39
F1.2167958927420841
sg34
g752
(S'\x07\xdf\t\x18\x0e\x1f:\t7`'
tRp1164
sa(dp1165
S'trial_loop.thisTrialN'
p1166
I17
sg894
S'44-crunch.png'
p1167
sS'block_loop.thisIndex'
p1168
g888
sg38
S'left'
p1169
sg58
g62
sS'trial_loop.thisN'
p1170
I17
sg33
S'26-walkers_smoky_bacon.png'
p1171
sg63
g64
sS'trial_loop.thisIndex'
p1172
g59
(g98
S'\x11\x00\x00\x00'
tRp1173
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1174
I0
sg903
S'26-walkers_smoky_bacon.png'
p1175
sS'block_loop.thisRepN'
p1176
I0
sg906
S'44-crunch.png'
p1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1178
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p1179
Nsg69
Vn
sS'block_loop.thisTrialN'
p1180
I0
sg39
F1.8334320727772138
sg34
g752
(S'\x07\xdf\t\x18\x0e \x04\r\x1bx'
tRp1181
sa(dp1182
S'trial_loop.thisTrialN'
p1183
I18
sg894
S'16-skips_prawn.png'
p1184
sS'block_loop.thisIndex'
p1185
g888
sg38
S'left'
p1186
sg58
g62
sS'trial_loop.thisN'
p1187
I18
sg33
S'42-mrkipling_lemon_slices.png'
p1188
sg63
g64
sS'trial_loop.thisIndex'
p1189
g59
(g98
S'\x12\x00\x00\x00'
tRp1190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1191
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1192
sS'block_loop.thisRepN'
p1193
I0
sg906
g1188
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1194
I0
sg908
S'16-skips_prawn.png'
p1195
sg55
g11
sS'block_loop.thisTrial'
p1196
Nsg69
Vn
sS'block_loop.thisTrialN'
p1197
I0
sg39
F1.4833906763378764
sg34
g752
(S'\x07\xdf\t\x18\x0e \x0b\x0b\x088'
tRp1198
sa(dp1199
S'trial_loop.thisTrialN'
p1200
I19
sg894
S'20-fruit_pastilles.png'
p1201
sS'block_loop.thisIndex'
p1202
g888
sg38
S'right'
p1203
sg58
g62
sS'trial_loop.thisN'
p1204
I19
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1205
g59
(g98
S'\x13\x00\x00\x00'
tRp1206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1207
I0
sg903
S'2-steamed_puddings.png'
p1208
sS'block_loop.thisRepN'
p1209
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1210
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1211
Nsg69
Vn
sS'block_loop.thisTrialN'
p1212
I0
sg39
F2.9838451248579076
sg34
g752
(S'\x07\xdf\t\x18\x0e \x12\x03z\xa0'
tRp1213
sa(dp1214
S'trial_loop.thisTrialN'
p1215
I20
sg894
S'43-mrporky_pork_crackles_redo.png'
p1216
sS'block_loop.thisIndex'
p1217
g888
sg38
S'left'
p1218
sg58
g62
sS'trial_loop.thisN'
p1219
I20
sg33
S'18-mms.png'
p1220
sg63
g64
sS'trial_loop.thisIndex'
p1221
g59
(g98
S'\x14\x00\x00\x00'
tRp1222
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1223
I0
sg903
S'18-mms.png'
p1224
sS'block_loop.thisRepN'
p1225
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1226
I0
sg908
S'43-mrporky_pork_crackles_redo.png'
p1227
sg55
g11
sS'block_loop.thisTrial'
p1228
Nsg69
Vn
sS'block_loop.thisTrialN'
p1229
I0
sg39
F2.2001974028607947
sg34
g752
(S'\x07\xdf\t\x18\x0e \x1a\x03\xc4\xd8'
tRp1230
sa(dp1231
S'trial_loop.thisTrialN'
p1232
I21
sg894
S'25-kitkat.png'
p1233
sS'block_loop.thisIndex'
p1234
g888
sg38
S'left'
p1235
sg58
g62
sS'trial_loop.thisN'
p1236
I21
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1237
g59
(g98
S'\x15\x00\x00\x00'
tRp1238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1239
I0
sg903
S'31-hobnobs.png'
p1240
sS'block_loop.thisRepN'
p1241
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1242
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1243
Nsg69
Vn
sS'block_loop.thisTrialN'
p1244
I0
sg39
F1.6834047602496867
sg34
g752
(S'\x07\xdf\t\x18\x0e !\x07f\x88'
tRp1245
sa(dp1246
S'trial_loop.thisTrialN'
p1247
I22
sg894
S'51-mars.png'
p1248
sS'block_loop.thisIndex'
p1249
g888
sg38
S'left'
p1250
sg58
g62
sS'trial_loop.thisN'
p1251
I22
sg33
S'51-mars.png'
p1252
sg63
g64
sS'trial_loop.thisIndex'
p1253
g59
(g98
S'\x16\x00\x00\x00'
tRp1254
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1255
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p1256
sS'block_loop.thisRepN'
p1257
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1258
I0
sg908
S'27-hartleys_raspberries_jelly.png'
p1259
sg55
g11
sS'block_loop.thisTrial'
p1260
Nsg69
Vn
sS'block_loop.thisTrialN'
p1261
I0
sg39
F2.2667361929197796
sg34
g752
(S'\x07\xdf\t\x18\x0e (\x030h'
tRp1262
sa(dp1263
S'trial_loop.thisTrialN'
p1264
I23
sg894
S'38-maltesers.png'
p1265
sS'block_loop.thisIndex'
p1266
g888
sg38
S'left'
p1267
sg58
g62
sS'trial_loop.thisN'
p1268
I23
sg33
S'6-sour_patch_kids.png'
p1269
sg63
g64
sS'trial_loop.thisIndex'
p1270
g59
(g98
S'\x17\x00\x00\x00'
tRp1271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1272
I0
sg903
S'6-sour_patch_kids.png'
p1273
sS'block_loop.thisRepN'
p1274
I0
sg906
S'38-maltesers.png'
p1275
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1276
I0
sg908
g1269
sg55
g11
sS'block_loop.thisTrial'
p1277
Nsg69
Vn
sS'block_loop.thisTrialN'
p1278
I0
sg39
F1.9499026100274932
sg34
g752
(S'\x07\xdf\t\x18\x0e /\x07\x89\xb0'
tRp1279
sa(dp1280
S'trial_loop.thisTrialN'
p1281
I24
sg894
S'49-yorkie.png'
p1282
sS'block_loop.thisIndex'
p1283
g888
sg38
S'left'
p1284
sg58
g62
sS'trial_loop.thisN'
p1285
I24
sg33
S'35-raisins.png'
p1286
sg63
g64
sS'trial_loop.thisIndex'
p1287
g59
(g98
S'\x18\x00\x00\x00'
tRp1288
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1289
I0
sg903
S'35-raisins.png'
p1290
sS'block_loop.thisRepN'
p1291
I0
sg906
S'49-yorkie.png'
p1292
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1293
I0
sg908
g1286
sg55
g11
sS'block_loop.thisTrial'
p1294
Nsg69
Vn
sS'block_loop.thisTrialN'
p1295
I0
sg39
F1.9668349513667636
sg34
g752
(S'\x07\xdf\t\x18\x0e 6\x07^\xb8'
tRp1296
sa(dp1297
S'trial_loop.thisTrialN'
p1298
I25
sg894
S'18-mms.png'
p1299
sS'block_loop.thisIndex'
p1300
g888
sg38
S'left'
p1301
sg58
g62
sS'trial_loop.thisN'
p1302
I25
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p1303
g59
(g98
S'\x19\x00\x00\x00'
tRp1304
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1305
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1306
sS'block_loop.thisRepN'
p1307
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1308
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p1309
Nsg69
Vn
sS'block_loop.thisTrialN'
p1310
I0
sg39
F2.0167507329897489
sg34
g752
(S'\x07\xdf\t\x18\x0e!\x01\x07nX'
tRp1311
sa(dp1312
S'trial_loop.thisTrialN'
p1313
I26
sg894
g1233
sS'block_loop.thisIndex'
p1314
g888
sg38
S'right'
p1315
sg58
g62
sS'trial_loop.thisN'
p1316
I26
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1317
g59
(g98
S'\x1a\x00\x00\x00'
tRp1318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1319
I0
sg903
g1240
sS'block_loop.thisRepN'
p1320
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1321
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1322
Nsg69
Vn
sS'block_loop.thisTrialN'
p1323
I0
sg39
F1.6667823220122955
sg34
g752
(S'\x07\xdf\t\x18\x0e!\x08\x085\x90'
tRp1324
sa(dp1325
S'trial_loop.thisTrialN'
p1326
I27
sg894
S'35-raisins.png'
p1327
sS'block_loop.thisIndex'
p1328
g888
sg38
S'left'
p1329
sg58
g62
sS'trial_loop.thisN'
p1330
I27
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p1331
g59
(g98
S'\x1b\x00\x00\x00'
tRp1332
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1333
I0
sg903
S'49-yorkie.png'
p1334
sS'block_loop.thisRepN'
p1335
I0
sg906
g1292
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1336
I0
sg908
g1286
sg55
g11
sS'block_loop.thisTrial'
p1337
Nsg69
Vn
sS'block_loop.thisTrialN'
p1338
I0
sg39
F3.6501404970076692
sg34
g752
(S'\x07\xdf\t\x18\x0e!\x0f\x03\x86X'
tRp1339
sa(dp1340
S'trial_loop.thisTrialN'
p1341
I28
sg894
g1216
sS'block_loop.thisIndex'
p1342
g888
sg38
S'right'
p1343
sg58
g62
sS'trial_loop.thisN'
p1344
I28
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p1345
g59
(g98
S'\x1c\x00\x00\x00'
tRp1346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1347
I0
sg903
g1224
sS'block_loop.thisRepN'
p1348
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1349
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p1350
Nsg69
Vn
sS'block_loop.thisTrialN'
p1351
I0
sg39
F0.96682924937704229
sg34
g752
(S'\x07\xdf\t\x18\x0e!\x17\x0e\t\xc0'
tRp1352
sa(dp1353
S'trial_loop.thisTrialN'
p1354
I29
sg894
S'1-treacle_cookies.png'
p1355
sS'block_loop.thisIndex'
p1356
g888
sg38
S'left'
p1357
sg58
g62
sS'trial_loop.thisN'
p1358
I29
sg33
S'21-nakd_banana_crunch.png'
p1359
sg63
g64
sS'trial_loop.thisIndex'
p1360
g59
(g98
S'\x1d\x00\x00\x00'
tRp1361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1362
I0
sg903
S'21-nakd_banana_crunch.png'
p1363
sS'block_loop.thisRepN'
p1364
I0
sg906
S'1-treacle_cookies.png'
p1365
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1366
I0
sg908
g1359
sg55
g11
sS'block_loop.thisTrial'
p1367
Nsg69
Vn
sS'block_loop.thisTrialN'
p1368
I0
sg39
F2.0668293063972669
sg34
g752
(S'\x07\xdf\t\x18\x0e!\x1d\r\xe2\xb0'
tRp1369
sa(dp1370
S'trial_loop.thisTrialN'
p1371
I30
sg894
g1248
sS'block_loop.thisIndex'
p1372
g888
sg38
S'left'
p1373
sg58
g62
sS'trial_loop.thisN'
p1374
I30
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p1375
g59
(g98
S'\x1e\x00\x00\x00'
tRp1376
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1377
I0
sg903
g1256
sS'block_loop.thisRepN'
p1378
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1379
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p1380
Nsg69
Vn
sS'block_loop.thisTrialN'
p1381
I0
sg39
F2.3500442474323791
sg34
g752
(S'\x07\xdf\t\x18\x0e!%\x00]\xc0'
tRp1382
sa(dp1383
S'trial_loop.thisTrialN'
p1384
I31
sg894
S'36-fig_rolls.png'
p1385
sS'block_loop.thisIndex'
p1386
g888
sg38
S'right'
p1387
sg58
g62
sS'trial_loop.thisN'
p1388
I31
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p1389
g59
(g98
S'\x1f\x00\x00\x00'
tRp1390
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1391
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1392
sS'block_loop.thisRepN'
p1393
I0
sg906
g1053
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1394
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p1395
Nsg69
Vn
sS'block_loop.thisTrialN'
p1396
I0
sg39
F1.5335199974470015
sg34
g752
(S'\x07\xdf\t\x18\x0e!,\x06&8'
tRp1397
sa(dp1398
S'trial_loop.thisTrialN'
p1399
I32
sg894
S'45-chewy_nougat_redo.png'
p1400
sS'block_loop.thisIndex'
p1401
g888
sg38
S'left'
p1402
sg58
g62
sS'trial_loop.thisN'
p1403
I32
sg33
g976
sg63
g64
sS'trial_loop.thisIndex'
p1404
g59
(g98
S' \x00\x00\x00'
tRp1405
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1406
I0
sg903
S'41-peanuts_redo.png'
p1407
sS'block_loop.thisRepN'
p1408
I0
sg906
g976
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1409
I0
sg908
g970
sg55
g11
sS'block_loop.thisTrial'
p1410
Nsg69
Vn
sS'block_loop.thisTrialN'
p1411
I0
sg39
F2.100190218352509
sg34
g752
(S'\x07\xdf\t\x18\x0e!2\x0e\xcd\x10'
tRp1412
sa(dp1413
S'trial_loop.thisTrialN'
p1414
I33
sg894
g1000
sS'block_loop.thisIndex'
p1415
g888
sg38
S'right'
p1416
sg58
g62
sS'trial_loop.thisN'
p1417
I33
sg33
g1011
sg63
g64
sS'trial_loop.thisIndex'
p1418
g59
(g98
S'!\x00\x00\x00'
tRp1419
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1420
I0
sg903
g1008
sS'block_loop.thisRepN'
p1421
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1422
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p1423
Nsg69
Vn
sS'block_loop.thisTrialN'
p1424
I0
sg39
F3.1333869130212406
sg34
g752
(S'\x07\xdf\t\x18\x0e!:\x01\x86\xa0'
tRp1425
sa(dp1426
S'trial_loop.thisTrialN'
p1427
I34
sg894
g1032
sS'block_loop.thisIndex'
p1428
g888
sg38
S'right'
p1429
sg58
g62
sS'trial_loop.thisN'
p1430
I34
sg33
g1043
sg63
g64
sS'trial_loop.thisIndex'
p1431
g59
(g98
S'"\x00\x00\x00'
tRp1432
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1433
I0
sg903
g1040
sS'block_loop.thisRepN'
p1434
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1435
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1436
Nsg69
Vn
sS'block_loop.thisTrialN'
p1437
I0
sg39
F3.3001444313777029
sg34
g752
(S'\x07\xdf\t\x18\x0e"\x06\x04.P'
tRp1438
sa(dp1439
S'trial_loop.thisTrialN'
p1440
I35
sg894
S'26-walkers_smoky_bacon.png'
p1441
sS'block_loop.thisIndex'
p1442
g888
sg38
S'left'
p1443
sg58
g62
sS'trial_loop.thisN'
p1444
I35
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p1445
g59
(g98
S'#\x00\x00\x00'
tRp1446
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1447
I0
sg903
S'44-crunch.png'
p1448
sS'block_loop.thisRepN'
p1449
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1450
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p1451
Nsg69
Vn
sS'block_loop.thisTrialN'
p1452
I0
sg39
F4.8334466128471831
sg34
g752
(S'\x07\xdf\t\x18\x0e"\x0e\t;H'
tRp1453
sa(dp1454
S'trial_loop.thisTrialN'
p1455
I36
sg894
S'5-pineapple.png'
p1456
sS'block_loop.thisIndex'
p1457
g888
sg38
S'right'
p1458
sg58
g62
sS'trial_loop.thisN'
p1459
I36
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p1460
g59
(g98
S'$\x00\x00\x00'
tRp1461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1462
I0
sg903
S'40-sardines.png'
p1463
sS'block_loop.thisRepN'
p1464
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1465
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p1466
Nsg69
Vn
sS'block_loop.thisTrialN'
p1467
I0
sg39
F2.1168480089218065
sg34
g752
(S'\x07\xdf\t\x18\x0e"\x18\x07\x14\x80'
tRp1468
sa(dp1469
S'trial_loop.thisTrialN'
p1470
I37
sg894
S'3-ellas_strawberries_apples.png'
p1471
sS'block_loop.thisIndex'
p1472
g888
sg38
S'right'
p1473
sg58
g62
sS'trial_loop.thisN'
p1474
I37
sg33
S'3-ellas_strawberries_apples.png'
p1475
sg63
g64
sS'trial_loop.thisIndex'
p1476
g59
(g98
S'%\x00\x00\x00'
tRp1477
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1478
I0
sg903
S'13-mccoys_steak_crisps.png'
p1479
sS'block_loop.thisRepN'
p1480
I0
sg906
g1475
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1481
I0
sg908
S'13-mccoys_steak_crisps.png'
p1482
sg55
g11
sS'block_loop.thisTrial'
p1483
Nsg69
Vn
sS'block_loop.thisTrialN'
p1484
I0
sg39
F1.8168455570666993
sg34
g752
(S'\x07\xdf\t\x18\x0e"\x1f\t\x85\x80'
tRp1485
sa(dp1486
S'trial_loop.thisTrialN'
p1487
I38
sg894
g1017
sS'block_loop.thisIndex'
p1488
g888
sg38
S'right'
p1489
sg58
g62
sS'trial_loop.thisN'
p1490
I38
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1491
g59
(g98
S'&\x00\x00\x00'
tRp1492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1493
I0
sg903
g1024
sS'block_loop.thisRepN'
p1494
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1495
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1496
Nsg69
Vn
sS'block_loop.thisTrialN'
p1497
I0
sg39
F1.0835683503100881
sg34
g752
(S'\x07\xdf\t\x18\x0e"&\x077\xa8'
tRp1498
sa(dp1499
S'trial_loop.thisTrialN'
p1500
I39
sg894
g1096
sS'block_loop.thisIndex'
p1501
g888
sg38
S'left'
p1502
sg58
g62
sS'trial_loop.thisN'
p1503
I39
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p1504
g59
(g98
S"'\x00\x00\x00"
tRp1505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1506
I0
sg903
g1104
sS'block_loop.thisRepN'
p1507
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1508
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p1509
Nsg69
Vn
sS'block_loop.thisTrialN'
p1510
I0
sg39
F1.3834279673465062
sg34
g752
(S'\x07\xdf\t\x18\x0e",\x08\xf8\xe0'
tRp1511
sa(dp1512
S'trial_loop.thisTrialN'
p1513
I40
sg894
S'21-nakd_banana_crunch.png'
p1514
sS'block_loop.thisIndex'
p1515
g888
sg38
S'left'
p1516
sg58
g62
sS'trial_loop.thisN'
p1517
I40
sg33
g1359
sg63
g64
sS'trial_loop.thisIndex'
p1518
g59
(g98
S'(\x00\x00\x00'
tRp1519
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1520
I0
sg903
S'1-treacle_cookies.png'
p1521
sS'block_loop.thisRepN'
p1522
I0
sg906
g1365
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1523
I0
sg908
g1359
sg55
g11
sS'block_loop.thisTrial'
p1524
Nsg69
Vn
sS'block_loop.thisTrialN'
p1525
I0
sg39
F3.6500598138627538
sg34
g752
(S'\x07\xdf\t\x18\x0e"2\x0f>X'
tRp1526
sa(dp1527
S'trial_loop.thisTrialN'
p1528
I41
sg894
g1282
sS'block_loop.thisIndex'
p1529
g888
sg38
S'right'
p1530
sg58
g62
sS'trial_loop.thisN'
p1531
I41
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p1532
g59
(g98
S')\x00\x00\x00'
tRp1533
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1534
I0
sg903
g1290
sS'block_loop.thisRepN'
p1535
I0
sg906
g1292
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1536
I0
sg908
g1286
sg55
g11
sS'block_loop.thisTrial'
p1537
Nsg69
Vn
sS'block_loop.thisTrialN'
p1538
I0
sg39
F1.2834259146256954
sg34
g752
(S'\x07\xdf\t\x18\x0e";\n\x83h'
tRp1539
sa(dp1540
S'trial_loop.thisTrialN'
p1541
I42
sg894
g1471
sS'block_loop.thisIndex'
p1542
g888
sg38
S'left'
p1543
sg58
g62
sS'trial_loop.thisN'
p1544
I42
sg33
g1475
sg63
g64
sS'trial_loop.thisIndex'
p1545
g59
(g98
S'*\x00\x00\x00'
tRp1546
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1547
I0
sg903
g1479
sS'block_loop.thisRepN'
p1548
I0
sg906
g1475
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1549
I0
sg908
g1482
sg55
g11
sS'block_loop.thisTrial'
p1550
Nsg69
Vn
sS'block_loop.thisTrialN'
p1551
I0
sg39
F1.6667620799489669
sg34
g752
(S'\x07\xdf\t\x18\x0e#\x06\x00\x1bX'
tRp1552
sa(dp1553
S'trial_loop.thisTrialN'
p1554
I43
sg894
g949
sS'block_loop.thisIndex'
p1555
g888
sg38
S'left'
p1556
sg58
g62
sS'trial_loop.thisN'
p1557
I43
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1558
g59
(g98
S'+\x00\x00\x00'
tRp1559
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1560
I0
sg903
g957
sS'block_loop.thisRepN'
p1561
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1562
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1563
Nsg69
Vn
sS'block_loop.thisTrialN'
p1564
I0
sg39
F1.9670510567484598
sg34
g752
(S'\x07\xdf\t\x18\x0e#\x0c\n\xaax'
tRp1565
sa(dp1566
S'trial_loop.thisTrialN'
p1567
I44
sg894
S'42-mrkipling_lemon_slices.png'
p1568
sS'block_loop.thisIndex'
p1569
g888
sg38
S'left'
p1570
sg58
g62
sS'trial_loop.thisN'
p1571
I44
sg33
g1188
sg63
g64
sS'trial_loop.thisIndex'
p1572
g59
(g98
S',\x00\x00\x00'
tRp1573
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1574
I0
sg903
S'16-skips_prawn.png'
p1575
sS'block_loop.thisRepN'
p1576
I0
sg906
g1188
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1577
I0
sg908
g1195
sg55
g11
sS'block_loop.thisTrial'
p1578
Nsg69
Vn
sS'block_loop.thisTrialN'
p1579
I0
sg39
F2.7000494362437166
sg34
g752
(S'\x07\xdf\t\x18\x0e#\x13\n\xba\x18'
tRp1580
sa(dp1581
S'trial_loop.thisTrialN'
p1582
I45
sg894
g1471
sS'block_loop.thisIndex'
p1583
g888
sg38
S'left'
p1584
sg58
g62
sS'trial_loop.thisN'
p1585
I45
sg33
g1475
sg63
g64
sS'trial_loop.thisIndex'
p1586
g59
(g98
S'-\x00\x00\x00'
tRp1587
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1588
I0
sg903
g1479
sS'block_loop.thisRepN'
p1589
I0
sg906
g1475
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1590
I0
sg908
g1482
sg55
g11
sS'block_loop.thisTrial'
p1591
Nsg69
Vn
sS'block_loop.thisTrialN'
p1592
I0
sg39
F1.0168217227546847
sg34
g752
(S'\x07\xdf\t\x18\x0e#\x1b\x06|('
tRp1593
sa(dp1594
S'trial_loop.thisTrialN'
p1595
I46
sg894
S'46-pistachios.png'
p1596
sS'block_loop.thisIndex'
p1597
g888
sg38
S'left'
p1598
sg58
g62
sS'trial_loop.thisN'
p1599
I46
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1600
g59
(g98
S'.\x00\x00\x00'
tRp1601
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1602
I0
sg903
S'29-beans.png'
p1603
sS'block_loop.thisRepN'
p1604
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1605
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1606
Nsg69
Vn
sS'block_loop.thisTrialN'
p1607
I0
sg39
F1.116739386034169
sg34
g752
(S'\x07\xdf\t\x18\x0e#!\x07K0'
tRp1608
sa(dp1609
S'trial_loop.thisTrialN'
p1610
I47
sg894
g1471
sS'block_loop.thisIndex'
p1611
g888
sg38
S'left'
p1612
sg58
g62
sS'trial_loop.thisN'
p1613
I47
sg33
g1475
sg63
g64
sS'trial_loop.thisIndex'
p1614
g59
(g98
S'/\x00\x00\x00'
tRp1615
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1616
I0
sg903
g1479
sS'block_loop.thisRepN'
p1617
I0
sg906
g1475
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1618
I0
sg908
g1482
sg55
g11
sS'block_loop.thisTrial'
p1619
Nsg69
Vn
sS'block_loop.thisTrialN'
p1620
I0
sg39
F0.78354594149641343
sg34
g752
(S"\x07\xdf\t\x18\x0e#'\t\xc4\x00"
tRp1621
sa(dp1622
S'trial_loop.thisTrialN'
p1623
I48
sg894
g915
sS'block_loop.thisIndex'
p1624
g888
sg38
S'left'
p1625
sg58
g62
sS'trial_loop.thisN'
p1626
I48
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1627
g59
(g98
S'0\x00\x00\x00'
tRp1628
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1629
I0
sg903
g923
sS'block_loop.thisRepN'
p1630
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1631
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1632
Nsg69
Vn
sS'block_loop.thisTrialN'
p1633
I0
sg39
F0.93363968219273374
sg34
g752
(S'\x07\xdf\t\x18\x0e#-\x06\xc2x'
tRp1634
sa(dp1635
S'trial_loop.thisTrialN'
p1636
I49
sg894
g1167
sS'block_loop.thisIndex'
p1637
g888
sg38
S'left'
p1638
sg58
g62
sS'trial_loop.thisN'
p1639
I49
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p1640
g59
(g98
S'1\x00\x00\x00'
tRp1641
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1642
I0
sg903
g1175
sS'block_loop.thisRepN'
p1643
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1644
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p1645
Nsg69
Vn
sS'block_loop.thisTrialN'
p1646
I0
sg39
F2.5500754373169912
sg34
g752
(S'\x07\xdf\t\x18\x0e#3\x06`\xd0'
tRp1647
sa(dp1648
S'trial_loop.thisTrialN'
p1649
I50
sg894
S'33-ambrosia_rice.png'
p1650
sS'block_loop.thisIndex'
p1651
g888
sg38
S'left'
p1652
sg58
g62
sS'trial_loop.thisN'
p1653
I50
sg33
g1077
sg63
g64
sS'trial_loop.thisIndex'
p1654
g59
(g98
S'2\x00\x00\x00'
tRp1655
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1656
I0
sg903
S'23-crunchie_redo.png'
p1657
sS'block_loop.thisRepN'
p1658
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1659
I0
sg908
g1077
sg55
g11
sS'block_loop.thisTrial'
p1660
Nsg69
Vn
sS'block_loop.thisTrialN'
p1661
I0
sg39
F3.8502138816038496
sg34
g752
(S'\x07\xdf\t\x18\x0e#;\x00\x00\x00'
tRp1662
sa(dp1663
S'trial_loop.thisTrialN'
p1664
I51
sg894
S'13-mccoys_steak_crisps.png'
p1665
sS'block_loop.thisIndex'
p1666
g888
sg38
S'right'
p1667
sg58
g62
sS'trial_loop.thisN'
p1668
I51
sg33
g1475
sg63
g64
sS'trial_loop.thisIndex'
p1669
g59
(g98
S'3\x00\x00\x00'
tRp1670
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1671
I0
sg903
S'3-ellas_strawberries_apples.png'
p1672
sS'block_loop.thisRepN'
p1673
I0
sg906
g1475
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1674
I0
sg908
g1482
sg55
g11
sS'block_loop.thisTrial'
p1675
Nsg69
Vn
sS'block_loop.thisTrialN'
p1676
I0
sg39
F0.83347198669798672
sg34
g752
(S'\x07\xdf\t\x18\x0e$\x07\r]\xe0'
tRp1677
sa(dp1678
S'trial_loop.thisTrialN'
p1679
I52
sg894
g1201
sS'block_loop.thisIndex'
p1680
g888
sg38
S'left'
p1681
sg58
g62
sS'trial_loop.thisN'
p1682
I52
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1683
g59
(g98
S'4\x00\x00\x00'
tRp1684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1685
I0
sg903
g1208
sS'block_loop.thisRepN'
p1686
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1687
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1688
Nsg69
Vn
sS'block_loop.thisTrialN'
p1689
I0
sg39
F3.6671036290863412
sg34
g752
(S'\x07\xdf\t\x18\x0e$\r\x0bRp'
tRp1690
sa(dp1691
S'trial_loop.thisTrialN'
p1692
I53
sg894
g1049
sS'block_loop.thisIndex'
p1693
g888
sg38
S'right'
p1694
sg58
g62
sS'trial_loop.thisN'
p1695
I53
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p1696
g59
(g98
S'5\x00\x00\x00'
tRp1697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1698
I0
sg903
g1057
sS'block_loop.thisRepN'
p1699
I0
sg906
g1053
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1700
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p1701
Nsg69
Vn
sS'block_loop.thisTrialN'
p1702
I0
sg39
F2.9168116872533574
sg34
g752
(S'\x07\xdf\t\x18\x0e$\x16\x06\xd2\x18'
tRp1703
sa(dp1704
S'trial_loop.thisTrialN'
p1705
I54
sg894
g1184
sS'block_loop.thisIndex'
p1706
g888
sg38
S'right'
p1707
sg58
g62
sS'trial_loop.thisN'
p1708
I54
sg33
g1188
sg63
g64
sS'trial_loop.thisIndex'
p1709
g59
(g98
S'6\x00\x00\x00'
tRp1710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1711
I0
sg903
g1192
sS'block_loop.thisRepN'
p1712
I0
sg906
g1188
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1713
I0
sg908
g1195
sg55
g11
sS'block_loop.thisTrial'
p1714
Nsg69
Vn
sS'block_loop.thisTrialN'
p1715
I0
sg39
F1.8000694502261467
sg34
g752
(S'\x07\xdf\t\x18\x0e$\x1e\x06&8'
tRp1716
sa(dp1717
S'trial_loop.thisTrialN'
p1718
I55
sg894
S'19-caramello_redo.png'
p1719
sS'block_loop.thisIndex'
p1720
g888
sg38
S'left'
p1721
sg58
g62
sS'trial_loop.thisN'
p1722
I55
sg33
S'19-caramello_redo.png'
p1723
sg63
g64
sS'trial_loop.thisIndex'
p1724
g59
(g98
S'7\x00\x00\x00'
tRp1725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1726
I0
sg903
S'30-spaghetti_hoops.png'
p1727
sS'block_loop.thisRepN'
p1728
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1729
I0
sg908
S'30-spaghetti_hoops.png'
p1730
sg55
g11
sS'block_loop.thisTrial'
p1731
Nsg69
Vn
sS'block_loop.thisTrialN'
p1732
I0
sg39
F2.333420383700286
sg34
g752
(S'\x07\xdf\t\x18\x0e$%\x03\x99\xe0'
tRp1733
sa(dp1734
S'trial_loop.thisTrialN'
p1735
I56
sg894
g1184
sS'block_loop.thisIndex'
p1736
g888
sg38
S'right'
p1737
sg58
g62
sS'trial_loop.thisN'
p1738
I56
sg33
g1188
sg63
g64
sS'trial_loop.thisIndex'
p1739
g59
(g98
S'8\x00\x00\x00'
tRp1740
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1741
I0
sg903
g1192
sS'block_loop.thisRepN'
p1742
I0
sg906
g1188
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1743
I0
sg908
g1195
sg55
g11
sS'block_loop.thisTrial'
p1744
Nsg69
Vn
sS'block_loop.thisTrialN'
p1745
I0
sg39
F1.2834301911207149
sg34
g752
(S'\x07\xdf\t\x18\x0e$,\t#\xd8'
tRp1746
sa(dp1747
S'trial_loop.thisTrialN'
p1748
I57
sg894
g1719
sS'block_loop.thisIndex'
p1749
g888
sg38
S'left'
p1750
sg58
g62
sS'trial_loop.thisN'
p1751
I57
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p1752
g59
(g98
S'9\x00\x00\x00'
tRp1753
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1754
I0
sg903
g1727
sS'block_loop.thisRepN'
p1755
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1756
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p1757
Nsg69
Vn
sS'block_loop.thisTrialN'
p1758
I0
sg39
F1.2002202108160418
sg34
g752
(S'\x07\xdf\t\x18\x0e$2\r\xfe\x08'
tRp1759
sa(dp1760
S'trial_loop.thisTrialN'
p1761
I58
sg894
g1456
sS'block_loop.thisIndex'
p1762
g888
sg38
S'right'
p1763
sg58
g62
sS'trial_loop.thisN'
p1764
I58
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p1765
g59
(g98
S':\x00\x00\x00'
tRp1766
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1767
I0
sg903
g1463
sS'block_loop.thisRepN'
p1768
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1769
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p1770
Nsg69
Vn
sS'block_loop.thisTrialN'
p1771
I0
sg39
F1.9168376313027693
sg34
g752
(S'\x07\xdf\t\x18\x0e$9\x02eH'
tRp1772
sa(dp1773
S'trial_loop.thisTrialN'
p1774
I59
sg894
g966
sS'block_loop.thisIndex'
p1775
g888
sg38
S'left'
p1776
sg58
g62
sS'trial_loop.thisN'
p1777
I59
sg33
g976
sg63
g64
sS'trial_loop.thisIndex'
p1778
g59
(g98
S';\x00\x00\x00'
tRp1779
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1780
I0
sg903
g974
sS'block_loop.thisRepN'
p1781
I0
sg906
g976
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1782
I0
sg908
g970
sg55
g11
sS'block_loop.thisTrial'
p1783
Nsg69
Vn
sS'block_loop.thisTrialN'
p1784
I0
sg39
F3.6001534405259008
sg34
g752
(S'\x07\xdf\t\x18\x0e%\x04\x01\x82\xb8'
tRp1785
sa(dp1786
S'trial_loop.thisTrialN'
p1787
I60
sg894
g932
sS'block_loop.thisIndex'
p1788
g888
sg38
S'left'
p1789
sg58
g62
sS'trial_loop.thisN'
p1790
I60
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p1791
g59
(g98
S'<\x00\x00\x00'
tRp1792
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1793
I0
sg903
g940
sS'block_loop.thisRepN'
p1794
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1795
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p1796
Nsg69
Vn
sS'block_loop.thisTrialN'
p1797
I0
sg39
F2.3834080103806627
sg34
g752
(S'\x07\xdf\t\x18\x0e%\x0c\x0b\x13\xf0'
tRp1798
sa(dp1799
S'trial_loop.thisTrialN'
p1800
I61
sg894
g1017
sS'block_loop.thisIndex'
p1801
g888
sg38
S'right'
p1802
sg58
g62
sS'trial_loop.thisN'
p1803
I61
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p1804
g59
(g98
S'=\x00\x00\x00'
tRp1805
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1806
I0
sg903
g1024
sS'block_loop.thisRepN'
p1807
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1808
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1809
Nsg69
Vn
sS'block_loop.thisTrialN'
p1810
I0
sg39
F1.9834833336572046
sg34
g752
(S'\x07\xdf\t\x18\x0e%\x14\x02M\xd8'
tRp1811
sa(dp1812
S'trial_loop.thisTrialN'
p1813
I62
sg894
S'48-twix.png'
p1814
sS'block_loop.thisIndex'
p1815
g888
sg38
S'left'
p1816
sg58
g62
sS'trial_loop.thisN'
p1817
I62
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1818
g59
(g98
S'>\x00\x00\x00'
tRp1819
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1820
I0
sg903
S'50-polo.png'
p1821
sS'block_loop.thisRepN'
p1822
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1823
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p1824
Nsg69
Vn
sS'block_loop.thisTrialN'
p1825
I0
sg39
F2.6499346552081988
sg34
g752
(S'\x07\xdf\t\x18\x0e%\x1b\x02\x9b\xf8'
tRp1826
sa(dp1827
S'trial_loop.thisTrialN'
p1828
I63
sg894
g1327
sS'block_loop.thisIndex'
p1829
g888
sg38
S'left'
p1830
sg58
g62
sS'trial_loop.thisN'
p1831
I63
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p1832
g59
(g98
S'?\x00\x00\x00'
tRp1833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1834
I0
sg903
g1334
sS'block_loop.thisRepN'
p1835
I0
sg906
g1292
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1836
I0
sg908
g1286
sg55
g11
sS'block_loop.thisTrial'
p1837
Nsg69
Vn
sS'block_loop.thisTrialN'
p1838
I0
sg39
F1.1334425074164756
sg34
g752
(S'\x07\xdf\t\x18\x0e%"\x0c\xe8\xb0'
tRp1839
sa(dp1840
S'trial_loop.thisTrialN'
p1841
I64
sg894
g1400
sS'block_loop.thisIndex'
p1842
g888
sg38
S'left'
p1843
sg58
g62
sS'trial_loop.thisN'
p1844
I64
sg33
g976
sg63
g64
sS'trial_loop.thisIndex'
p1845
g59
(g98
S'@\x00\x00\x00'
tRp1846
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1847
I0
sg903
g1407
sS'block_loop.thisRepN'
p1848
I0
sg906
g976
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1849
I0
sg908
g970
sg55
g11
sS'block_loop.thisTrial'
p1850
Nsg69
Vn
sS'block_loop.thisTrialN'
p1851
I0
sg39
F1.4168498905783053
sg34
g752
(S'\x07\xdf\t\x18\x0e%)\x00#('
tRp1852
sa(dp1853
S'trial_loop.thisTrialN'
p1854
I65
sg894
g1201
sS'block_loop.thisIndex'
p1855
g888
sg38
S'right'
p1856
sg58
g62
sS'trial_loop.thisN'
p1857
I65
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1858
g59
(g98
S'A\x00\x00\x00'
tRp1859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1860
I0
sg903
g1208
sS'block_loop.thisRepN'
p1861
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1862
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1863
Nsg69
Vn
sS'block_loop.thisTrialN'
p1864
I0
sg39
F1.8168321573939465
sg34
g752
(S'\x07\xdf\t\x18\x0e%/\x07 8'
tRp1865
sa(dp1866
S'trial_loop.thisTrialN'
p1867
I66
sg894
S'30-spaghetti_hoops.png'
p1868
sS'block_loop.thisIndex'
p1869
g888
sg38
S'right'
p1870
sg58
g62
sS'trial_loop.thisN'
p1871
I66
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p1872
g59
(g98
S'B\x00\x00\x00'
tRp1873
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1874
I0
sg903
S'19-caramello_redo.png'
p1875
sS'block_loop.thisRepN'
p1876
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1877
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p1878
Nsg69
Vn
sS'block_loop.thisTrialN'
p1879
I0
sg39
F2.2668354075285606
sg34
g752
(S'\x07\xdf\t\x18\x0e%6\x04\xcex'
tRp1880
sa(dp1881
S'trial_loop.thisTrialN'
p1882
I67
sg894
g1299
sS'block_loop.thisIndex'
p1883
g888
sg38
S'left'
p1884
sg58
g62
sS'trial_loop.thisN'
p1885
I67
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p1886
g59
(g98
S'C\x00\x00\x00'
tRp1887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1888
I0
sg903
g1306
sS'block_loop.thisRepN'
p1889
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1890
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p1891
Nsg69
Vn
sS'block_loop.thisTrialN'
p1892
I0
sg39
F2.100131202765624
sg34
g752
(S'\x07\xdf\t\x18\x0e&\x01\tf@'
tRp1893
sa(dp1894
S'trial_loop.thisTrialN'
p1895
I68
sg894
S'6-sour_patch_kids.png'
p1896
sS'block_loop.thisIndex'
p1897
g888
sg38
S'left'
p1898
sg58
g62
sS'trial_loop.thisN'
p1899
I68
sg33
g1275
sg63
g64
sS'trial_loop.thisIndex'
p1900
g59
(g98
S'D\x00\x00\x00'
tRp1901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1902
I0
sg903
S'38-maltesers.png'
p1903
sS'block_loop.thisRepN'
p1904
I0
sg906
g1275
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1905
I0
sg908
g1269
sg55
g11
sS'block_loop.thisTrial'
p1906
Nsg69
Vn
sS'block_loop.thisTrialN'
p1907
I0
sg39
F2.0997916493251978
sg34
g752
(S'\x07\xdf\t\x18\x0e&\x08\x0b^('
tRp1908
sa(dp1909
S'trial_loop.thisTrialN'
p1910
I69
sg894
g1096
sS'block_loop.thisIndex'
p1911
g888
sg38
S'right'
p1912
sg58
g62
sS'trial_loop.thisN'
p1913
I69
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p1914
g59
(g98
S'E\x00\x00\x00'
tRp1915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1916
I0
sg903
g1104
sS'block_loop.thisRepN'
p1917
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1918
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p1919
Nsg69
Vn
sS'block_loop.thisTrialN'
p1920
I0
sg39
F1.0500979601711151
sg34
g752
(S'\x07\xdf\t\x18\x0e&\x0f\rY\xf8'
tRp1921
sa(dp1922
S'trial_loop.thisTrialN'
p1923
I70
sg894
g895
sS'block_loop.thisIndex'
p1924
g888
sg38
S'right'
p1925
sg58
g62
sS'trial_loop.thisN'
p1926
I70
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1927
g59
(g98
S'F\x00\x00\x00'
tRp1928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1929
I0
sg903
g904
sS'block_loop.thisRepN'
p1930
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1931
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1932
Nsg69
Vn
sS'block_loop.thisTrialN'
p1933
I0
sg39
F1.2835274100325478
sg34
g752
(S'\x07\xdf\t\x18\x0e&\x15\x0e\xa2\x18'
tRp1934
sa(dp1935
S'trial_loop.thisTrialN'
p1936
I71
sg894
g1665
sS'block_loop.thisIndex'
p1937
g888
sg38
S'right'
p1938
sg58
g62
sS'trial_loop.thisN'
p1939
I71
sg33
g1475
sg63
g64
sS'trial_loop.thisIndex'
p1940
g59
(g98
S'G\x00\x00\x00'
tRp1941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1942
I0
sg903
g1672
sS'block_loop.thisRepN'
p1943
I0
sg906
g1475
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1944
I0
sg908
g1482
sg55
g11
sS'block_loop.thisTrial'
p1945
Nsg69
Vn
sS'block_loop.thisTrialN'
p1946
I0
sg39
F1.2838783674524166
sg34
g752
(S'\x07\xdf\t\x18\x0e&\x1c\x04:\x08'
tRp1947
sa(dp1948
S'trial_loop.thisTrialN'
p1949
I72
sg894
g1201
sS'block_loop.thisIndex'
p1950
g888
sg38
S'right'
p1951
sg58
g62
sS'trial_loop.thisN'
p1952
I72
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1953
g59
(g98
S'H\x00\x00\x00'
tRp1954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1955
I0
sg903
g1208
sS'block_loop.thisRepN'
p1956
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1957
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1958
Nsg69
Vn
sS'block_loop.thisTrialN'
p1959
I0
sg39
F2.2335055714138434
sg34
g752
(S'\x07\xdf\t\x18\x0e&"\t\x148'
tRp1960
sa(dp1961
S'trial_loop.thisTrialN'
p1962
I73
sg894
g1017
sS'block_loop.thisIndex'
p1963
g888
sg38
S'right'
p1964
sg58
g62
sS'trial_loop.thisN'
p1965
I73
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1966
g59
(g98
S'I\x00\x00\x00'
tRp1967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1968
I0
sg903
g1024
sS'block_loop.thisRepN'
p1969
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1970
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1971
Nsg69
Vn
sS'block_loop.thisTrialN'
p1972
I0
sg39
F0.93353048910284997
sg34
g752
(S'\x07\xdf\t\x18\x0e&)\r/\x00'
tRp1973
sa(dp1974
S'trial_loop.thisTrialN'
p1975
I74
sg894
g1355
sS'block_loop.thisIndex'
p1976
g888
sg38
S'right'
p1977
sg58
g62
sS'trial_loop.thisN'
p1978
I74
sg33
g1359
sg63
g64
sS'trial_loop.thisIndex'
p1979
g59
(g98
S'J\x00\x00\x00'
tRp1980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1981
I0
sg903
g1363
sS'block_loop.thisRepN'
p1982
I0
sg906
g1365
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1983
I0
sg908
g1359
sg55
g11
sS'block_loop.thisTrial'
p1984
Nsg69
Vn
sS'block_loop.thisTrialN'
p1985
I0
sg39
F2.616876803967898
sg34
g752
(S'\x07\xdf\t\x18\x0e&/\x0c\xcdX'
tRp1986
sa(dp1987
S'trial_loop.thisTrialN'
p1988
I75
sg894
g983
sS'block_loop.thisIndex'
p1989
g888
sg38
S'right'
p1990
sg58
g62
sS'trial_loop.thisN'
p1991
I75
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p1992
g59
(g98
S'K\x00\x00\x00'
tRp1993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1994
I0
sg903
g991
sS'block_loop.thisRepN'
p1995
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1996
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1997
Nsg69
Vn
sS'block_loop.thisTrialN'
p1998
I0
sg39
F1.616755066501355
sg34
g752
(S'\x07\xdf\t\x18\x0e&7\x07^\xb8'
tRp1999
sa(dp2000
S'trial_loop.thisTrialN'
p2001
I76
sg894
S'27-hartleys_raspberries_jelly.png'
p2002
sS'block_loop.thisIndex'
p2003
g888
sg38
S'right'
p2004
sg58
g62
sS'trial_loop.thisN'
p2005
I76
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p2006
g59
(g98
S'L\x00\x00\x00'
tRp2007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2008
I0
sg903
S'51-mars.png'
p2009
sS'block_loop.thisRepN'
p2010
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2011
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p2012
Nsg69
Vn
sS'block_loop.thisTrialN'
p2013
I0
sg39
F2.4838707838061964
sg34
g752
(S"\x07\xdf\t\x18\x0e'\x02\x01\xf7\xe8"
tRp2014
sa(dp2015
S'trial_loop.thisTrialN'
p2016
I77
sg894
g1000
sS'block_loop.thisIndex'
p2017
g888
sg38
S'right'
p2018
sg58
g62
sS'trial_loop.thisN'
p2019
I77
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2020
g59
(g98
S'M\x00\x00\x00'
tRp2021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2022
I0
sg903
g1008
sS'block_loop.thisRepN'
p2023
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2024
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2025
Nsg69
Vn
sS'block_loop.thisTrialN'
p2026
I0
sg39
F2.1334082954817859
sg34
g752
(S"\x07\xdf\t\x18\x0e'\t\t\xe3@"
tRp2027
sa(dp2028
S'trial_loop.thisTrialN'
p2029
I78
sg894
g966
sS'block_loop.thisIndex'
p2030
g888
sg38
S'right'
p2031
sg58
g62
sS'trial_loop.thisN'
p2032
I78
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2033
g59
(g98
S'N\x00\x00\x00'
tRp2034
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2035
I0
sg903
g974
sS'block_loop.thisRepN'
p2036
I0
sg906
g976
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2037
I0
sg908
g970
sg55
g11
sS'block_loop.thisTrial'
p2038
Nsg69
Vn
sS'block_loop.thisTrialN'
p2039
I0
sg39
F0.96677565068239346
sg34
g752
(S"\x07\xdf\t\x18\x0e'\x10\x0cT@"
tRp2040
sa(dp2041
S'trial_loop.thisTrialN'
p2042
I79
sg894
g932
sS'block_loop.thisIndex'
p2043
g888
sg38
S'right'
p2044
sg58
g62
sS'trial_loop.thisN'
p2045
I79
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p2046
g59
(g98
S'O\x00\x00\x00'
tRp2047
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2048
I0
sg903
g940
sS'block_loop.thisRepN'
p2049
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2050
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p2051
Nsg69
Vn
sS'block_loop.thisTrialN'
p2052
I0
sg39
F1.3167611676290107
sg34
g752
(S"\x07\xdf\t\x18\x0e'\x16\x0ck\xb0"
tRp2053
sa(dp2054
S'trial_loop.thisTrialN'
p2055
I80
sg894
g1596
sS'block_loop.thisIndex'
p2056
g888
sg38
S'left'
p2057
sg58
g62
sS'trial_loop.thisN'
p2058
I80
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2059
g59
(g98
S'P\x00\x00\x00'
tRp2060
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2061
I0
sg903
g1603
sS'block_loop.thisRepN'
p2062
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2063
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2064
Nsg69
Vn
sS'block_loop.thisTrialN'
p2065
I0
sg39
F0.9001926702039782
sg34
g752
(S"\x07\xdf\t\x18\x0e'\x1d\x02|\xb8"
tRp2066
sa(dp2067
S'trial_loop.thisTrialN'
p2068
I81
sg894
g1650
sS'block_loop.thisIndex'
p2069
g888
sg38
S'left'
p2070
sg58
g62
sS'trial_loop.thisN'
p2071
I81
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p2072
g59
(g98
S'Q\x00\x00\x00'
tRp2073
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2074
I0
sg903
g1657
sS'block_loop.thisRepN'
p2075
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2076
I0
sg908
g1077
sg55
g11
sS'block_loop.thisTrial'
p2077
Nsg69
Vn
sS'block_loop.thisTrialN'
p2078
I0
sg39
F1.3169014365594194
sg34
g752
(S"\x07\xdf\t\x18\x0e'#\x01g`"
tRp2079
sa(dp2080
S'trial_loop.thisTrialN'
p2081
I82
sg894
g1868
sS'block_loop.thisIndex'
p2082
g888
sg38
S'right'
p2083
sg58
g62
sS'trial_loop.thisN'
p2084
I82
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p2085
g59
(g98
S'R\x00\x00\x00'
tRp2086
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2087
I0
sg903
g1875
sS'block_loop.thisRepN'
p2088
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2089
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p2090
Nsg69
Vn
sS'block_loop.thisTrialN'
p2091
I0
sg39
F1.05007173102058
sg34
g752
(S"\x07\xdf\t\x18\x0e')\x06\xba\xa8"
tRp2092
sa(dp2093
S'trial_loop.thisTrialN'
p2094
I83
sg894
g1596
sS'block_loop.thisIndex'
p2095
g888
sg38
S'left'
p2096
sg58
g62
sS'trial_loop.thisN'
p2097
I83
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2098
g59
(g98
S'S\x00\x00\x00'
tRp2099
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2100
I0
sg903
g1603
sS'block_loop.thisRepN'
p2101
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2102
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2103
Nsg69
Vn
sS'block_loop.thisTrialN'
p2104
I0
sg39
F0.91679914287669817
sg34
g752
(S"\x07\xdf\t\x18\x0e'/\x08\x02\xc8"
tRp2105
sa(dp2106
S'trial_loop.thisTrialN'
p2107
I84
sg894
g1568
sS'block_loop.thisIndex'
p2108
g888
sg38
S'left'
p2109
sg58
g62
sS'trial_loop.thisN'
p2110
I84
sg33
g1188
sg63
g64
sS'trial_loop.thisIndex'
p2111
g59
(g98
S'T\x00\x00\x00'
tRp2112
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2113
I0
sg903
g1575
sS'block_loop.thisRepN'
p2114
I0
sg906
g1188
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2115
I0
sg908
g1195
sg55
g11
sS'block_loop.thisTrial'
p2116
Nsg69
Vn
sS'block_loop.thisTrialN'
p2117
I0
sg39
F0.91667255872380338
sg34
g752
(S"\x07\xdf\t\x18\x0e'5\x07b\xa0"
tRp2118
sa(dp2119
S'trial_loop.thisTrialN'
p2120
I85
sg894
g1265
sS'block_loop.thisIndex'
p2121
g888
sg38
S'right'
p2122
sg58
g62
sS'trial_loop.thisN'
p2123
I85
sg33
g1275
sg63
g64
sS'trial_loop.thisIndex'
p2124
g59
(g98
S'U\x00\x00\x00'
tRp2125
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2126
I0
sg903
g1273
sS'block_loop.thisRepN'
p2127
I0
sg906
g1275
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2128
I0
sg908
g1269
sg55
g11
sS'block_loop.thisTrial'
p2129
Nsg69
Vn
sS'block_loop.thisTrialN'
p2130
I0
sg39
F1.0165528739744332
sg34
g752
(S"\x07\xdf\t\x18\x0e';\x06\x87\xe0"
tRp2131
sa(dp2132
S'trial_loop.thisTrialN'
p2133
I86
sg894
g1385
sS'block_loop.thisIndex'
p2134
g888
sg38
S'left'
p2135
sg58
g62
sS'trial_loop.thisN'
p2136
I86
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p2137
g59
(g98
S'V\x00\x00\x00'
tRp2138
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2139
I0
sg903
g1392
sS'block_loop.thisRepN'
p2140
I0
sg906
g1053
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2141
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p2142
Nsg69
Vn
sS'block_loop.thisTrialN'
p2143
I0
sg39
F0.85010383321787231
sg34
g752
(S'\x07\xdf\t\x18\x0e(\x05\x07S\x00'
tRp2144
sa(dp2145
S'trial_loop.thisTrialN'
p2146
I87
sg894
g1471
sS'block_loop.thisIndex'
p2147
g888
sg38
S'left'
p2148
sg58
g62
sS'trial_loop.thisN'
p2149
I87
sg33
g1475
sg63
g64
sS'trial_loop.thisIndex'
p2150
g59
(g98
S'W\x00\x00\x00'
tRp2151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2152
I0
sg903
g1479
sS'block_loop.thisRepN'
p2153
I0
sg906
g1475
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2154
I0
sg908
g1482
sg55
g11
sS'block_loop.thisTrial'
p2155
Nsg69
Vn
sS'block_loop.thisTrialN'
p2156
I0
sg39
F0.78348863650899148
sg34
g752
(S'\x07\xdf\t\x18\x0e(\x0b\x05\x86\x10'
tRp2157
sa(dp2158
S'trial_loop.thisTrialN'
p2159
I88
sg894
g895
sS'block_loop.thisIndex'
p2160
g888
sg38
S'right'
p2161
sg58
g62
sS'trial_loop.thisN'
p2162
I88
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2163
g59
(g98
S'X\x00\x00\x00'
tRp2164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2165
I0
sg903
g904
sS'block_loop.thisRepN'
p2166
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2167
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2168
Nsg69
Vn
sS'block_loop.thisTrialN'
p2169
I0
sg39
F0.9167609395517502
sg34
g752
(S'\x07\xdf\t\x18\x0e(\x11\x02\xbf '
tRp2170
sa(dp2171
S'trial_loop.thisTrialN'
p2172
I89
sg894
g1233
sS'block_loop.thisIndex'
p2173
g888
sg38
S'right'
p2174
sg58
g62
sS'trial_loop.thisN'
p2175
I89
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2176
g59
(g98
S'Y\x00\x00\x00'
tRp2177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2178
I0
sg903
g1240
sS'block_loop.thisRepN'
p2179
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2180
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2181
Nsg69
Vn
sS'block_loop.thisTrialN'
p2182
I0
sg39
F0.98347421047583339
sg34
g752
(S'\x07\xdf\t\x18\x0e(\x17\x01\xe4`'
tRp2183
sa(dp2184
S'trial_loop.thisTrialN'
p2185
I90
sg894
g1096
sS'block_loop.thisIndex'
p2186
g888
sg38
S'right'
p2187
sg58
g62
sS'trial_loop.thisN'
p2188
I90
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p2189
g59
(g98
S'Z\x00\x00\x00'
tRp2190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2191
I0
sg903
g1104
sS'block_loop.thisRepN'
p2192
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2193
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p2194
Nsg69
Vn
sS'block_loop.thisTrialN'
p2195
I0
sg39
F1.0334404546993028
sg34
g752
(S'\x07\xdf\t\x18\x0e(\x1d\x02:P'
tRp2196
sa(dp2197
S'trial_loop.thisTrialN'
p2198
I91
sg894
g1814
sS'block_loop.thisIndex'
p2199
g888
sg38
S'left'
p2200
sg58
g62
sS'trial_loop.thisN'
p2201
I91
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2202
g59
(g98
S'[\x00\x00\x00'
tRp2203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2204
I0
sg903
g1821
sS'block_loop.thisRepN'
p2205
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2206
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2207
Nsg69
Vn
sS'block_loop.thisTrialN'
p2208
I0
sg39
F0.81681533652590588
sg34
g752
(S'\x07\xdf\t\x18\x0e(#\x03C\xf0'
tRp2209
sa(dp2210
S'trial_loop.thisTrialN'
p2211
I92
sg894
g1596
sS'block_loop.thisIndex'
p2212
g888
sg38
S'left'
p2213
sg58
g62
sS'trial_loop.thisN'
p2214
I92
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2215
g59
(g98
S'\\\x00\x00\x00'
tRp2216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2217
I0
sg903
g1603
sS'block_loop.thisRepN'
p2218
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2219
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2220
Nsg69
Vn
sS'block_loop.thisTrialN'
p2221
I0
sg39
F0.78385356380022131
sg34
g752
(S'\x07\xdf\t\x18\x0e()\x00\xfa\x00'
tRp2222
sa(dp2223
S'trial_loop.thisTrialN'
p2224
I93
sg894
g1000
sS'block_loop.thisIndex'
p2225
g888
sg38
S'right'
p2226
sg58
g62
sS'trial_loop.thisN'
p2227
I93
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2228
g59
(g98
S']\x00\x00\x00'
tRp2229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2230
I0
sg903
g1008
sS'block_loop.thisRepN'
p2231
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2232
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2233
Nsg69
Vn
sS'block_loop.thisTrialN'
p2234
I0
sg39
F1.1501111317666073
sg34
g752
(S'\x07\xdf\t\x18\x0e(.\ry8'
tRp2235
sa(dp2236
S'trial_loop.thisTrialN'
p2237
I94
sg894
g915
sS'block_loop.thisIndex'
p2238
g888
sg38
S'left'
p2239
sg58
g62
sS'trial_loop.thisN'
p2240
I94
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2241
g59
(g98
S'^\x00\x00\x00'
tRp2242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2243
I0
sg903
g923
sS'block_loop.thisRepN'
p2244
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2245
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2246
Nsg69
Vn
sS'block_loop.thisTrialN'
p2247
I0
sg39
F0.93348059670461225
sg34
g752
(S'\x07\xdf\t\x18\x0e(5\x00\xea`'
tRp2248
sa(dp2249
S'trial_loop.thisTrialN'
p2250
I95
sg894
g1299
sS'block_loop.thisIndex'
p2251
g888
sg38
S'right'
p2252
sg58
g62
sS'trial_loop.thisN'
p2253
I95
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p2254
g59
(g98
S'_\x00\x00\x00'
tRp2255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2256
I0
sg903
g1306
sS'block_loop.thisRepN'
p2257
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2258
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p2259
Nsg69
Vn
sS'block_loop.thisTrialN'
p2260
I0
sg39
F0.70012669819698203
sg34
g752
(S'\x07\xdf\t\x18\x0e(;\x00\x88\xb8'
tRp2261
sa(dp2262
S'trial_loop.thisTrialN'
p2263
I96
sg894
g1400
sS'block_loop.thisIndex'
p2264
g888
sg38
S'left'
p2265
sg58
g62
sS'trial_loop.thisN'
p2266
I96
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2267
g59
(g98
S'`\x00\x00\x00'
tRp2268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2269
I0
sg903
g1407
sS'block_loop.thisRepN'
p2270
I0
sg906
g976
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2271
I0
sg908
g970
sg55
g11
sS'block_loop.thisTrial'
p2272
Nsg69
Vn
sS'block_loop.thisTrialN'
p2273
I0
sg39
F1.3501970607394469
sg34
g752
(S'\x07\xdf\t\x18\x0e)\x04\x0b\x98\xc0'
tRp2274
sa(dp2275
S'trial_loop.thisTrialN'
p2276
I97
sg894
g895
sS'block_loop.thisIndex'
p2277
g888
sg38
S'right'
p2278
sg58
g62
sS'trial_loop.thisN'
p2279
I97
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2280
g59
(g98
S'a\x00\x00\x00'
tRp2281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2282
I0
sg903
g904
sS'block_loop.thisRepN'
p2283
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2284
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2285
Nsg69
Vn
sS'block_loop.thisTrialN'
p2286
I0
sg39
F0.85058080459566554
sg34
g752
(S'\x07\xdf\t\x18\x0e)\x0b\x02&\xc8'
tRp2287
sa(dp2288
S'trial_loop.thisTrialN'
p2289
I98
sg894
g1248
sS'block_loop.thisIndex'
p2290
g888
sg38
S'left'
p2291
sg58
g62
sS'trial_loop.thisN'
p2292
I98
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p2293
g59
(g98
S'b\x00\x00\x00'
tRp2294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2295
I0
sg903
g1256
sS'block_loop.thisRepN'
p2296
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2297
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p2298
Nsg69
Vn
sS'block_loop.thisTrialN'
p2299
I0
sg39
F0.90011369765852578
sg34
g752
(S'\x07\xdf\t\x18\x0e)\x11\x00\x94p'
tRp2300
sa(dp2301
S'trial_loop.thisTrialN'
p2302
I99
sg894
g1233
sS'block_loop.thisIndex'
p2303
g888
sg38
S'right'
p2304
sg58
g62
sS'trial_loop.thisN'
p2305
I99
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2306
g59
(g98
S'c\x00\x00\x00'
tRp2307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2308
I0
sg903
g1240
sS'block_loop.thisRepN'
p2309
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2310
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2311
Nsg69
Vn
sS'block_loop.thisTrialN'
p2312
I0
sg39
F0.90013536521655624
sg34
g752
(S'\x07\xdf\t\x18\x0e)\x16\x0e\xbdp'
tRp2313
sa(dp2314
S'trial_loop.thisTrialN'
p2315
I100
sg894
S'10-bounty_redo.png'
p2316
sS'block_loop.thisIndex'
p2317
g888
sg38
S'left'
p2318
sg58
g62
sS'trial_loop.thisN'
p2319
I100
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p2320
g59
(g98
S'd\x00\x00\x00'
tRp2321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2322
I0
sg903
S'4-corn.png'
p2323
sS'block_loop.thisRepN'
p2324
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2325
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p2326
Nsg69
Vn
sS'block_loop.thisTrialN'
p2327
I0
sg39
F1.2835217080391885
sg34
g752
(S'\x07\xdf\t\x18\x0e)\x1c\r\xa40'
tRp2328
sa(dp2329
S'trial_loop.thisTrialN'
p2330
I101
sg894
g1355
sS'block_loop.thisIndex'
p2331
g888
sg38
S'right'
p2332
sg58
g62
sS'trial_loop.thisN'
p2333
I101
sg33
g1365
sg63
g64
sS'trial_loop.thisIndex'
p2334
g59
(g98
S'e\x00\x00\x00'
tRp2335
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2336
I0
sg903
g1363
sS'block_loop.thisRepN'
p2337
I0
sg906
g1365
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2338
I0
sg908
g1359
sg55
g11
sS'block_loop.thisTrial'
p2339
Nsg69
Vn
sS'block_loop.thisTrialN'
p2340
I0
sg39
F1.4667648169015592
sg34
g752
(S'\x07\xdf\t\x18\x0e)#\x03< '
tRp2341
sa(dp2342
S'trial_loop.thisTrialN'
p2343
I102
sg894
g1299
sS'block_loop.thisIndex'
p2344
g888
sg38
S'left'
p2345
sg58
g62
sS'trial_loop.thisN'
p2346
I102
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p2347
g59
(g98
S'f\x00\x00\x00'
tRp2348
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2349
I0
sg903
g1306
sS'block_loop.thisRepN'
p2350
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2351
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p2352
Nsg69
Vn
sS'block_loop.thisTrialN'
p2353
I0
sg39
F1.283539954409207
sg34
g752
(S'\x07\xdf\t\x18\x0e))\n\xf0\xc8'
tRp2354
sa(dp2355
S'trial_loop.thisTrialN'
p2356
I103
sg894
g1814
sS'block_loop.thisIndex'
p2357
g888
sg38
S'left'
p2358
sg58
g62
sS'trial_loop.thisN'
p2359
I103
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2360
g59
(g98
S'g\x00\x00\x00'
tRp2361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2362
I0
sg903
g1821
sS'block_loop.thisRepN'
p2363
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2364
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2365
Nsg69
Vn
sS'block_loop.thisTrialN'
p2366
I0
sg39
F0.9334589291465818
sg34
g752
(S'\x07\xdf\t\x18\x0e)0\x00\x88\xb8'
tRp2367
sa(dp2368
S'trial_loop.thisTrialN'
p2369
I104
sg894
g1385
sS'block_loop.thisIndex'
p2370
g888
sg38
S'left'
p2371
sg58
g62
sS'trial_loop.thisN'
p2372
I104
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p2373
g59
(g98
S'h\x00\x00\x00'
tRp2374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2375
I0
sg903
g1392
sS'block_loop.thisRepN'
p2376
I0
sg906
g1053
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2377
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p2378
Nsg69
Vn
sS'block_loop.thisTrialN'
p2379
I0
sg39
F0.98347763166748337
sg34
g752
(S'\x07\xdf\t\x18\x0e)5\x0f*\xd0'
tRp2380
sa(dp2381
S'trial_loop.thisTrialN'
p2382
I105
sg894
g1514
sS'block_loop.thisIndex'
p2383
g888
sg38
S'left'
p2384
sg58
g62
sS'trial_loop.thisN'
p2385
I105
sg33
g1365
sg63
g64
sS'trial_loop.thisIndex'
p2386
g59
(g98
S'i\x00\x00\x00'
tRp2387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2388
I0
sg903
g1521
sS'block_loop.thisRepN'
p2389
I0
sg906
g1365
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2390
I0
sg908
g1359
sg55
g11
sS'block_loop.thisTrial'
p2391
Nsg69
Vn
sS'block_loop.thisTrialN'
p2392
I0
sg39
F2.1668729836346756
sg34
g752
(S'\x07\xdf\t\x18\x0e*\x00\x00>\x80'
tRp2393
sa(dp2394
S'trial_loop.thisTrialN'
p2395
I106
sg894
g1327
sS'block_loop.thisIndex'
p2396
g888
sg38
S'left'
p2397
sg58
g62
sS'trial_loop.thisN'
p2398
I106
sg33
g1292
sg63
g64
sS'trial_loop.thisIndex'
p2399
g59
(g98
S'j\x00\x00\x00'
tRp2400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2401
I0
sg903
g1334
sS'block_loop.thisRepN'
p2402
I0
sg906
g1292
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2403
I0
sg908
g1286
sg55
g11
sS'block_loop.thisTrial'
p2404
Nsg69
Vn
sS'block_loop.thisTrialN'
p2405
I0
sg39
F0.83345088933856459
sg34
g752
(S'\x07\xdf\t\x18\x0e*\x07\x03(\x98'
tRp2406
sa(dp2407
S'trial_loop.thisTrialN'
p2408
I107
sg894
g1719
sS'block_loop.thisIndex'
p2409
g888
sg38
S'left'
p2410
sg58
g62
sS'trial_loop.thisN'
p2411
I107
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p2412
g59
(g98
S'k\x00\x00\x00'
tRp2413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2414
I0
sg903
g1727
sS'block_loop.thisRepN'
p2415
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2416
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p2417
Nsg69
Vn
sS'block_loop.thisTrialN'
p2418
I0
sg39
F0.90019580630178098
sg34
g752
(S'\x07\xdf\t\x18\x0e*\r\x01\x1d('
tRp2419
sa(dp2420
S'trial_loop.thisTrialN'
p2421
I108
sg894
g1032
sS'block_loop.thisIndex'
p2422
g888
sg38
S'left'
p2423
sg58
g62
sS'trial_loop.thisN'
p2424
I108
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p2425
g59
(g98
S'l\x00\x00\x00'
tRp2426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2427
I0
sg903
g1040
sS'block_loop.thisRepN'
p2428
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2429
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p2430
Nsg69
Vn
sS'block_loop.thisTrialN'
p2431
I0
sg39
F2.4168310740133165
sg34
g752
(S'\x07\xdf\t\x18\x0e*\x13\x00Bh'
tRp2432
sa(dp2433
S'trial_loop.thisTrialN'
p2434
I109
sg894
g1066
sS'block_loop.thisIndex'
p2435
g888
sg38
S'right'
p2436
sg58
g62
sS'trial_loop.thisN'
p2437
I109
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p2438
g59
(g98
S'm\x00\x00\x00'
tRp2439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2440
I0
sg903
g1074
sS'block_loop.thisRepN'
p2441
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2442
I0
sg908
g1077
sg55
g11
sS'block_loop.thisTrial'
p2443
Nsg69
Vn
sS'block_loop.thisTrialN'
p2444
I0
sg39
F1.1334844170341967
sg34
g752
(S'\x07\xdf\t\x18\x0e*\x1a\x06\xfd\x10'
tRp2445
sa(dp2446
S'trial_loop.thisTrialN'
p2447
I110
sg894
g949
sS'block_loop.thisIndex'
p2448
g888
sg38
S'left'
p2449
sg58
g62
sS'trial_loop.thisN'
p2450
I110
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2451
g59
(g98
S'n\x00\x00\x00'
tRp2452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2453
I0
sg903
g957
sS'block_loop.thisRepN'
p2454
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2455
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2456
Nsg69
Vn
sS'block_loop.thisTrialN'
p2457
I0
sg39
F1.0335342524194857
sg34
g752
(S'\x07\xdf\t\x18\x0e* \t\xb0x'
tRp2458
sa(dp2459
S'trial_loop.thisTrialN'
p2460
I111
sg894
g1017
sS'block_loop.thisIndex'
p2461
g888
sg38
S'right'
p2462
sg58
g62
sS'trial_loop.thisN'
p2463
I111
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2464
g59
(g98
S'o\x00\x00\x00'
tRp2465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2466
I0
sg903
g1024
sS'block_loop.thisRepN'
p2467
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2468
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2469
Nsg69
Vn
sS'block_loop.thisTrialN'
p2470
I0
sg39
F0.93345151655739755
sg34
g752
(S'\x07\xdf\t\x18\x0e*&\n\x7f\x80'
tRp2471
sa(dp2472
S'trial_loop.thisTrialN'
p2473
I112
sg894
g1814
sS'block_loop.thisIndex'
p2474
g888
sg38
S'left'
p2475
sg58
g62
sS'trial_loop.thisN'
p2476
I112
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2477
g59
(g98
S'p\x00\x00\x00'
tRp2478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2479
I0
sg903
g1821
sS'block_loop.thisRepN'
p2480
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2481
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2482
Nsg69
Vn
sS'block_loop.thisTrialN'
p2483
I0
sg39
F1.6668604392580164
sg34
g752
(S'\x07\xdf\t\x18\x0e*,\n\x1d\xd8'
tRp2484
sa(dp2485
S'trial_loop.thisTrialN'
p2486
I113
sg894
g1233
sS'block_loop.thisIndex'
p2487
g888
sg38
S'right'
p2488
sg58
g62
sS'trial_loop.thisN'
p2489
I113
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2490
g59
(g98
S'q\x00\x00\x00'
tRp2491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2492
I0
sg903
g1240
sS'block_loop.thisRepN'
p2493
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2494
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2495
Nsg69
Vn
sS'block_loop.thisTrialN'
p2496
I0
sg39
F1.0335476520922384
sg34
g752
(S'\x07\xdf\t\x18\x0e*3\x05j\xb8'
tRp2497
sa(dp2498
S'trial_loop.thisTrialN'
p2499
I114
sg894
g1066
sS'block_loop.thisIndex'
p2500
g888
sg38
S'right'
p2501
sg58
g62
sS'trial_loop.thisN'
p2502
I114
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p2503
g59
(g98
S'r\x00\x00\x00'
tRp2504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2505
I0
sg903
g1074
sS'block_loop.thisRepN'
p2506
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2507
I0
sg908
g1077
sg55
g11
sS'block_loop.thisTrial'
p2508
Nsg69
Vn
sS'block_loop.thisTrialN'
p2509
I0
sg39
F3.266721367748687
sg34
g752
(S'\x07\xdf\t\x18\x0e*9\x06x@'
tRp2510
sa(dp2511
S'trial_loop.thisTrialN'
p2512
I115
sg894
g1514
sS'block_loop.thisIndex'
p2513
g888
sg38
S'right'
p2514
sg58
g62
sS'trial_loop.thisN'
p2515
I115
sg33
g1365
sg63
g64
sS'trial_loop.thisIndex'
p2516
g59
(g98
S's\x00\x00\x00'
tRp2517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2518
I0
sg903
g1521
sS'block_loop.thisRepN'
p2519
I0
sg906
g1365
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2520
I0
sg908
g1359
sg55
g11
sS'block_loop.thisTrial'
p2521
Nsg69
Vn
sS'block_loop.thisTrialN'
p2522
I0
sg39
F0.86687965496093966
sg34
g752
(S'\x07\xdf\t\x18\x0e+\x05\x0b\x088'
tRp2523
sa(dp2524
S'trial_loop.thisTrialN'
p2525
I116
sg894
g1814
sS'block_loop.thisIndex'
p2526
g888
sg38
S'left'
p2527
sg58
g62
sS'trial_loop.thisN'
p2528
I116
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2529
g59
(g98
S't\x00\x00\x00'
tRp2530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2531
I0
sg903
g1821
sS'block_loop.thisRepN'
p2532
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2533
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2534
Nsg69
Vn
sS'block_loop.thisTrialN'
p2535
I0
sg39
F1.3335104751240578
sg34
g752
(S'\x07\xdf\t\x18\x0e+\x0b\t\xb0x'
tRp2536
sa(dp2537
S'trial_loop.thisTrialN'
p2538
I117
sg894
g1126
sS'block_loop.thisIndex'
p2539
g888
sg38
S'left'
p2540
sg58
g62
sS'trial_loop.thisN'
p2541
I117
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p2542
g59
(g98
S'u\x00\x00\x00'
tRp2543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2544
I0
sg903
g1133
sS'block_loop.thisRepN'
p2545
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2546
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2547
Nsg69
Vn
sS'block_loop.thisTrialN'
p2548
I0
sg39
F0.93386377035858459
sg34
g752
(S'\x07\xdf\t\x18\x0e+\x12\x00\x00\x00'
tRp2549
sa(dp2550
S'trial_loop.thisTrialN'
p2551
I118
sg894
g1568
sS'block_loop.thisIndex'
p2552
g888
sg38
S'left'
p2553
sg58
g62
sS'trial_loop.thisN'
p2554
I118
sg33
g1188
sg63
g64
sS'trial_loop.thisIndex'
p2555
g59
(g98
S'v\x00\x00\x00'
tRp2556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2557
I0
sg903
g1575
sS'block_loop.thisRepN'
p2558
I0
sg906
g1188
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2559
I0
sg908
g1195
sg55
g11
sS'block_loop.thisTrial'
p2560
Nsg69
Vn
sS'block_loop.thisTrialN'
p2561
I0
sg39
F0.96665875990947825
sg34
g752
(S'\x07\xdf\t\x18\x0e+\x17\x0e\xa6\x00'
tRp2562
sa(dp2563
S'trial_loop.thisTrialN'
p2564
I119
sg894
g1719
sS'block_loop.thisIndex'
p2565
g888
sg38
S'left'
p2566
sg58
g62
sS'trial_loop.thisN'
p2567
I119
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p2568
g59
(g98
S'w\x00\x00\x00'
tRp2569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2570
I0
sg903
g1727
sS'block_loop.thisRepN'
p2571
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2572
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p2573
Nsg69
Vn
sS'block_loop.thisTrialN'
p2574
I0
sg39
F1.2501157503756986
sg34
g752
(S'\x07\xdf\t\x18\x0e+\x1d\x0e\xbdp'
tRp2575
sa(dp2576
S'trial_loop.thisTrialN'
p2577
I120
sg894
g1514
sS'block_loop.thisIndex'
p2578
g888
sg38
S'right'
p2579
sg58
g62
sS'trial_loop.thisN'
p2580
I120
sg33
g1359
sg63
g64
sS'trial_loop.thisIndex'
p2581
g59
(g98
S'x\x00\x00\x00'
tRp2582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2583
I0
sg903
g1521
sS'block_loop.thisRepN'
p2584
I0
sg906
g1365
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2585
I0
sg908
g1359
sg55
g11
sS'block_loop.thisTrial'
p2586
Nsg69
Vn
sS'block_loop.thisTrialN'
p2587
I0
sg39
F1.0505891865177546
sg34
g752
(S'\x07\xdf\t\x18\x0e+$\x03\xd8`'
tRp2588
sa(dp2589
S'trial_loop.thisTrialN'
p2590
I121
sg894
g1719
sS'block_loop.thisIndex'
p2591
g888
sg38
S'left'
p2592
sg58
g62
sS'trial_loop.thisN'
p2593
I121
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p2594
g59
(g98
S'y\x00\x00\x00'
tRp2595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2596
I0
sg903
g1727
sS'block_loop.thisRepN'
p2597
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2598
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p2599
Nsg69
Vn
sS'block_loop.thisTrialN'
p2600
I0
sg39
F0.83352872148680035
sg34
g752
(S'\x07\xdf\t\x18\x0e+*\x05 \x80'
tRp2601
sa(dp2602
S'trial_loop.thisTrialN'
p2603
I122
sg894
g1216
sS'block_loop.thisIndex'
p2604
g888
sg38
S'right'
p2605
sg58
g62
sS'trial_loop.thisN'
p2606
I122
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p2607
g59
(g98
S'z\x00\x00\x00'
tRp2608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2609
I0
sg903
g1224
sS'block_loop.thisRepN'
p2610
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2611
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p2612
Nsg69
Vn
sS'block_loop.thisTrialN'
p2613
I0
sg39
F0.98391183812782401
sg34
g752
(S'\x07\xdf\t\x18\x0e+0\x03\x15\x10'
tRp2614
sa(dp2615
S'trial_loop.thisTrialN'
p2616
I123
sg894
g2002
sS'block_loop.thisIndex'
p2617
g888
sg38
S'right'
p2618
sg58
g62
sS'trial_loop.thisN'
p2619
I123
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p2620
g59
(g98
S'{\x00\x00\x00'
tRp2621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2622
I0
sg903
g2009
sS'block_loop.thisRepN'
p2623
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2624
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p2625
Nsg69
Vn
sS'block_loop.thisTrialN'
p2626
I0
sg39
F2.0000342119346897
sg34
g752
(S'\x07\xdf\t\x18\x0e+6\x03,\x80'
tRp2627
sa(dp2628
S'trial_loop.thisTrialN'
p2629
I124
sg894
g1167
sS'block_loop.thisIndex'
p2630
g888
sg38
S'left'
p2631
sg58
g62
sS'trial_loop.thisN'
p2632
I124
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p2633
g59
(g98
S'|\x00\x00\x00'
tRp2634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2635
I0
sg903
g1175
sS'block_loop.thisRepN'
p2636
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2637
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vn
sS'block_loop.thisTrialN'
p2639
I0
sg39
F1.6334236908514868
sg34
g752
(S'\x07\xdf\t\x18\x0e,\x01\x03\xb9 '
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g1896
sS'block_loop.thisIndex'
p2643
g888
sg38
S'left'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g1275
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g1903
sS'block_loop.thisRepN'
p2649
I0
sg906
g1275
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2650
I0
sg908
g1269
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vn
sS'block_loop.thisTrialN'
p2652
I0
sg39
F1.4332211562032171
sg34
g752
(S'\x07\xdf\t\x18\x0e,\x07\r\xcf('
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g1568
sS'block_loop.thisIndex'
p2656
g888
sg38
S'left'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g1188
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g1575
sS'block_loop.thisRepN'
p2662
I0
sg906
g1188
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2663
I0
sg908
g1195
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vn
sS'block_loop.thisTrialN'
p2665
I0
sg39
F1.2000280537868093
sg34
g752
(S'\x07\xdf\t\x18\x0e,\x0e\x05\xc8x'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g1000
sS'block_loop.thisIndex'
p2669
g888
sg38
S'right'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g1008
sS'block_loop.thisRepN'
p2675
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2676
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vn
sS'block_loop.thisTrialN'
p2678
I0
sg39
F1.0839036272627709
sg34
g752
(S'\x07\xdf\t\x18\x0e,\x14\tq\xf8'
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g1032
sS'block_loop.thisIndex'
p2682
g888
sg38
S'left'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g1040
sS'block_loop.thisRepN'
p2688
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2689
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vn
sS'block_loop.thisTrialN'
p2691
I0
sg39
F2.8501497342294897
sg34
g752
(S'\x07\xdf\t\x18\x0e,\x1a\x0b30'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g1896
sS'block_loop.thisIndex'
p2695
g888
sg38
S'left'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g1275
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g1903
sS'block_loop.thisRepN'
p2701
I0
sg906
g1275
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2702
I0
sg908
g1269
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vn
sS'block_loop.thisTrialN'
p2704
I0
sg39
F1.1498228962227586
sg34
g752
(S'\x07\xdf\t\x18\x0e,"\tV\xa0'
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g2002
sS'block_loop.thisIndex'
p2708
g888
sg38
S'right'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g2009
sS'block_loop.thisRepN'
p2714
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2715
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vn
sS'block_loop.thisTrialN'
p2717
I0
sg39
F1.0334606967589934
sg34
g752
(S'\x07\xdf\t\x18\x0e,(\x0c\r\xf0'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g1184
sS'block_loop.thisIndex'
p2721
g888
sg38
S'right'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g1188
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g1192
sS'block_loop.thisRepN'
p2727
I0
sg906
g1188
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg908
g1195
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vn
sS'block_loop.thisTrialN'
p2730
I0
sg39
F1.266670905144565
sg34
g752
(S'\x07\xdf\t\x18\x0e,.\r\x17\x90'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g932
sS'block_loop.thisIndex'
p2734
g888
sg38
S'right'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g940
sS'block_loop.thisRepN'
p2740
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vn
sS'block_loop.thisTrialN'
p2743
I0
sg39
F1.4835432045401831
sg34
g752
(S'\x07\xdf\t\x18\x0e,5\x02q\x00'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g1248
sS'block_loop.thisIndex'
p2747
g888
sg38
S'left'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g1256
sS'block_loop.thisRepN'
p2753
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F0.90018240662539029
sg34
g752
(S'\x07\xdf\t\x18\x0e,;\nd('
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g1650
sS'block_loop.thisIndex'
p2760
g888
sg38
S'right'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g1657
sS'block_loop.thisRepN'
p2766
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg908
g1077
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F1.783418216942664
sg34
g752
(S'\x07\xdf\t\x18\x0e-\x05\tJ\xe8'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g1665
sS'block_loop.thisIndex'
p2773
g888
sg38
S'right'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g1475
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g1672
sS'block_loop.thisRepN'
p2779
I0
sg906
g1475
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg908
g1482
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F1.1834823073004372
sg34
g752
(S'\x07\xdf\t\x18\x0e-\x0c\x06\x80\x10'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g2316
sS'block_loop.thisIndex'
p2786
g888
sg38
S'left'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g2323
sS'block_loop.thisRepN'
p2792
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F2.450065686913149
sg34
g752
(S'\x07\xdf\t\x18\x0e-\x12\t\xee\xf8'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g1265
sS'block_loop.thisIndex'
p2799
g888
sg38
S'left'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g1273
sS'block_loop.thisRepN'
p2805
I0
sg906
g1275
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg908
g1269
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F2.1002281365763338
sg34
g752
(S'\x07\xdf\t\x18\x0e-\x1a\x01\xe0x'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g1514
sS'block_loop.thisIndex'
p2812
g888
sg38
S'right'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g1365
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g1521
sS'block_loop.thisRepN'
p2818
I0
sg906
g1365
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg908
g1359
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F1.0001519580073364
sg34
g752
(S'\x07\xdf\t\x18\x0e-!\x04\x16\xe0'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g1441
sS'block_loop.thisIndex'
p2825
g888
sg38
S'right'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g1448
sS'block_loop.thisRepN'
p2831
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F1.233516975389648
sg34
g752
(S"\x07\xdf\t\x18\x0e-'\x04l\xd0"
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g1650
sS'block_loop.thisIndex'
p2838
g888
sg38
S'right'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g1657
sS'block_loop.thisRepN'
p2844
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg908
g1077
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F4.2167431493435288
sg34
g752
(S'\x07\xdf\t\x18\x0e--\x08\x8fh'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g983
sS'block_loop.thisIndex'
p2851
g888
sg38
S'right'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g991
sS'block_loop.thisRepN'
p2857
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F0.98352809427160537
sg34
g752
(S'\x07\xdf\t\x18\x0e-6\x0cc\xe0'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1355
sS'block_loop.thisIndex'
p2864
g888
sg38
S'left'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1365
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1363
sS'block_loop.thisRepN'
p2870
I0
sg906
g1365
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg908
g1359
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F0.88359418032268877
sg34
g752
(S'\x07\xdf\t\x18\x0e.\x00\x0c\xb5\xe8'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g1456
sS'block_loop.thisIndex'
p2877
g888
sg38
S'left'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g1463
sS'block_loop.thisRepN'
p2883
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F1.4167498206734308
sg34
g752
(S'\x07\xdf\t\x18\x0e.\x06\x0bb\x10'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1265
sS'block_loop.thisIndex'
p2890
g888
sg38
S'right'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1275
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1273
sS'block_loop.thisRepN'
p2896
I0
sg906
g1275
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg908
g1269
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F2.716463466786081
sg34
g752
(S'\x07\xdf\t\x18\x0e.\r\x02\xe2H'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g1216
sS'block_loop.thisIndex'
p2903
g888
sg38
S'right'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g1224
sS'block_loop.thisRepN'
p2909
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F1.0167849449244386
sg34
g752
(S'\x07\xdf\t\x18\x0e.\x14\x0e_\xb0'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1400
sS'block_loop.thisIndex'
p2916
g888
sg38
S'left'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1407
sS'block_loop.thisRepN'
p2922
I0
sg906
g976
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg908
g970
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F2.0167991998969228
sg34
g752
(S'\x07\xdf\t\x18\x0e.\x1a\x0f.\xb8'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g915
sS'block_loop.thisIndex'
p2929
g888
sg38
S'left'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g923
sS'block_loop.thisRepN'
p2935
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F1.683507966248726
sg34
g752
(S'\x07\xdf\t\x18\x0e."\x00\xb3\xb0'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g895
sS'block_loop.thisIndex'
p2942
g888
sg38
S'right'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g904
sS'block_loop.thisRepN'
p2948
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F0.8167440616634849
sg34
g752
(S'\x07\xdf\t\x18\x0e.(\x0b\x81P'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g1248
sS'block_loop.thisIndex'
p2955
g888
sg38
S'left'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g1256
sS'block_loop.thisRepN'
p2961
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F0.88352518625470111
sg34
g752
(S'\x07\xdf\t\x18\x0e..\t7`'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g1049
sS'block_loop.thisIndex'
p2968
g888
sg38
S'right'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g1057
sS'block_loop.thisRepN'
p2974
I0
sg906
g1053
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F1.0169859400339192
sg34
g752
(S'\x07\xdf\t\x18\x0e.4\x08\x1e '
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1327
sS'block_loop.thisIndex'
p2981
g888
sg38
S'left'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1334
sS'block_loop.thisRepN'
p2987
I0
sg906
g1292
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg908
g1286
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F1.0167709750530776
sg34
g752
(S'\x07\xdf\t\x18\x0e.:\x08\xae\xa8'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1568
sS'block_loop.thisIndex'
p2994
g888
sg38
S'left'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1188
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1575
sS'block_loop.thisRepN'
p3000
I0
sg906
g1188
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg908
g1195
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.0000789725454524
sg34
g752
(S'\x07\xdf\t\x18\x0e/\x04\t}\xb0'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1665
sS'block_loop.thisIndex'
p3007
g888
sg38
S'right'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1482
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1672
sS'block_loop.thisRepN'
p3013
I0
sg906
g1475
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg908
g1482
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F0.93344068278020131
sg34
g752
(S'\x07\xdf\t\x18\x0e/\n\n\x0e8'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1868
sS'block_loop.thisIndex'
p3020
g888
sg38
S'right'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1875
sS'block_loop.thisRepN'
p3026
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F0.90018953411345137
sg34
g752
(S'\x07\xdf\t\x18\x0e/\x10\t\xac\x90'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g1596
sS'block_loop.thisIndex'
p3033
g888
sg38
S'left'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g1603
sS'block_loop.thisRepN'
p3039
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F0.90020920597453369
sg34
g752
(S'\x07\xdf\t\x18\x0e/\x16\x08\x93P'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1441
sS'block_loop.thisIndex'
p3046
g888
sg38
S'right'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1448
sS'block_loop.thisRepN'
p3052
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F0.9335182298309519
sg34
g752
(S'\x07\xdf\t\x18\x0e/\x1c\x07z\x10'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g1282
sS'block_loop.thisIndex'
p3059
g888
sg38
S'right'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1286
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g1290
sS'block_loop.thisRepN'
p3065
I0
sg906
g1292
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg908
g1286
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F0.91678061141647049
sg34
g752
(S'\x07\xdf\t\x18\x0e/"\x07\x18h'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1167
sS'block_loop.thisIndex'
p3072
g888
sg38
S'left'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1175
sS'block_loop.thisRepN'
p3078
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F0.83349479465323384
sg34
g752
(S'\x07\xdf\t\x18\x0e/(\x069\xc0'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1665
sS'block_loop.thisIndex'
p3085
g888
sg38
S'right'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1482
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1672
sS'block_loop.thisRepN'
p3091
I0
sg906
g1475
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg908
g1482
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F0.76681602076496347
sg34
g752
(S'\x07\xdf\t\x18\x0e/.\x04.P'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1385
sS'block_loop.thisIndex'
p3098
g888
sg38
S'left'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1392
sS'block_loop.thisRepN'
p3104
I0
sg906
g1053
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F1.0501526992666186
sg34
g752
(S'\x07\xdf\t\x18\x0e/4\x01,\xc8'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g1400
sS'block_loop.thisIndex'
p3111
g888
sg38
S'right'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g976
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g1407
sS'block_loop.thisRepN'
p3117
I0
sg906
g976
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg908
g970
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F1.0335071679692192
sg34
g752
(S'\x07\xdf\t\x18\x0e/:\x02t\xe8'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1049
sS'block_loop.thisIndex'
p3124
g888
sg38
S'right'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1057
sS'block_loop.thisRepN'
p3130
I0
sg906
g1053
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F1.1334955359125161
sg34
g752
(S'\x07\xdf\t\x18\x0e0\x04\x03\x82p'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1456
sS'block_loop.thisIndex'
p3137
g888
sg38
S'left'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1463
sS'block_loop.thisRepN'
p3143
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F1.1672242261520296
sg34
g752
(S'\x07\xdf\t\x18\x0e0\n\x05\xfb@'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g1184
sS'block_loop.thisIndex'
p3150
g888
sg38
S'right'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g1188
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g1192
sS'block_loop.thisRepN'
p3156
I0
sg906
g1188
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg908
g1195
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F0.89999566648839391
sg34
g752
(S'\x07\xdf\t\x18\x0e0\x10\x08\xed('
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g1126
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g1133
sS'block_loop.thisRepN'
p3169
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F0.95009818824837566
sg34
g752
(S'\x07\xdf\t\x18\x0e0\x16\x08\x0e\x80'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g1441
sS'block_loop.thisIndex'
p3176
g888
sg38
S'right'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g1448
sS'block_loop.thisRepN'
p3182
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F0.83356521421592333
sg34
g752
(S'\x07\xdf\t\x18\x0e0\x1c\x07\xac\xd8'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g1126
sS'block_loop.thisIndex'
p3189
g888
sg38
S'left'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1133
sS'block_loop.thisRepN'
p3195
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F0.76678608532165526
sg34
g752
(S'\x07\xdf\t\x18\x0e0"\x05\xa1h'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1441
sS'block_loop.thisIndex'
p3202
g888
sg38
S'right'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1448
sS'block_loop.thisRepN'
p3208
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F0.86677245756800403
sg34
g752
(S'\x07\xdf\t\x18\x0e0(\x02\x9f\xe0'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1282
sS'block_loop.thisIndex'
p3215
g888
sg38
S'right'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1292
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1290
sS'block_loop.thisRepN'
p3221
I0
sg906
g1292
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg908
g1286
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F0.93388173162747989
sg34
g752
(S'\x07\xdf\t\x18\x0e0.\x01\r\x88'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g983
sS'block_loop.thisIndex'
p3228
g888
sg38
S'right'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g991
sS'block_loop.thisRepN'
p3234
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F0.78344729708624072
sg34
g752
(S'\x07\xdf\t\x18\x0e04\x00\xab\xe0'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g932
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g940
sS'block_loop.thisRepN'
p3247
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F0.95019797305576503
sg34
g752
(S"\x07\xdf\t\x18\x0e09\r'0"
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g1265
sS'block_loop.thisIndex'
p3254
g888
sg38
S'right'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g1275
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g1273
sS'block_loop.thisRepN'
p3260
I0
sg906
g1275
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg908
g1269
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F4.233083909330162
sg34
g752
(S'\x07\xdf\t\x18\x0e1\x03\x0c\xc5\x88'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1299
sS'block_loop.thisIndex'
p3267
g888
sg38
S'left'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1306
sS'block_loop.thisRepN'
p3273
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F1.1335400114294316
sg34
g752
(S'\x07\xdf\t\x18\x0e1\r\x01\x96@'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g949
sS'block_loop.thisIndex'
p3280
g888
sg38
S'left'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g957
sS'block_loop.thisRepN'
p3286
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F0.95057088313478744
sg34
g752
(S'\x07\xdf\t\x18\x0e1\x13\x04I\xa8'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1096
sS'block_loop.thisIndex'
p3293
g888
sg38
S'right'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1104
sS'block_loop.thisRepN'
p3299
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F1.1000992716253677
sg34
g752
(S'\x07\xdf\t\x18\x0e1\x19\x03\xe8\x00'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g2316
sS'block_loop.thisIndex'
p3306
g888
sg38
S'left'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g2323
sS'block_loop.thisRepN'
p3312
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F1.0502139956479368
sg34
g752
(S'\x07\xdf\t\x18\x0e1\x1f\x05\xe7\xb8'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1216
sS'block_loop.thisIndex'
p3319
g888
sg38
S'right'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1224
sS'block_loop.thisRepN'
p3325
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F0.9168969319871394
sg34
g752
(S'\x07\xdf\t\x18\x0e1%\x07/\xd8'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1385
sS'block_loop.thisIndex'
p3332
g888
sg38
S'left'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1392
sS'block_loop.thisRepN'
p3338
I0
sg906
g1053
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F0.83351446651795413
sg34
g752
(S'\x07\xdf\t\x18\x0e1+\x06\x8f\xb0'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1167
sS'block_loop.thisIndex'
p3345
g888
sg38
S'left'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1175
sS'block_loop.thisRepN'
p3351
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg908
g1171
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F1.0002155351830879
sg34
g752
(S'\x07\xdf\t\x18\x0e11\x04\x84@'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1896
sS'block_loop.thisIndex'
p3358
g888
sg38
S'right'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1903
sS'block_loop.thisRepN'
p3364
I0
sg906
g1275
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg908
g1269
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F1.9665772214648314
sg34
g752
(S'\x07\xdf\t\x18\x0e17\x04\xd6H'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g1066
sS'block_loop.thisIndex'
p3371
g888
sg38
S'left'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g1074
sS'block_loop.thisRepN'
p3377
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg908
g1077
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F4.1000681957884808
sg34
g752
(S'\x07\xdf\t\x18\x0e2\x02\x04\xe9\xd0'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g1282
sS'block_loop.thisIndex'
p3384
g888
sg38
S'right'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g1292
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g1290
sS'block_loop.thisRepN'
p3390
I0
sg906
g1292
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg908
g1286
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F0.80023309730677283
sg34
g752
(S'\x07\xdf\t\x18\x0e2\x0b\x07\x10\x98'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1650
sS'block_loop.thisIndex'
p3397
g888
sg38
S'right'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1657
sS'block_loop.thisRepN'
p3403
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg908
g1077
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F1.0168793128432299
sg34
g752
(S'\x07\xdf\t\x18\x0e2\x11\x04\x8c\x10'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1456
sS'block_loop.thisIndex'
p3410
g888
sg38
S'left'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1463
sS'block_loop.thisRepN'
p3416
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F1.0501820645076805
sg34
g752
(S'\x07\xdf\t\x18\x0e2\x17\x05\x1c\x98'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g1896
sS'block_loop.thisIndex'
p3423
g888
sg38
S'left'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g1275
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g1903
sS'block_loop.thisRepN'
p3429
I0
sg906
g1275
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg908
g1269
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F2.8165710063003644
sg34
g752
(S'\x07\xdf\t\x18\x0e2\x1d\x06d\xb8'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g966
sS'block_loop.thisIndex'
p3436
g888
sg38
S'right'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g976
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g974
sS'block_loop.thisRepN'
p3442
I0
sg906
g976
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg908
g970
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F4.4166862434976792
sg34
g752
(S'\x07\xdf\t\x18\x0e2%\x04I\xa8'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g2316
sS'block_loop.thisIndex'
p3449
g888
sg38
S'left'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g2323
sS'block_loop.thisRepN'
p3455
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F1.0668649438302964
sg34
g752
(S'\x07\xdf\t\x18\x0e2.\n\xf8\x98'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1355
sS'block_loop.thisIndex'
p3462
g888
sg38
S'left'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g1365
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1363
sS'block_loop.thisRepN'
p3468
I0
sg906
g1365
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg908
g1359
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F0.91678146670892602
sg34
g752
(S'\x07\xdf\t\x18\x0e24\x0c\x7f8'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g2002
sS'block_loop.thisIndex'
p3475
g888
sg38
S'right'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g2009
sS'block_loop.thisRepN'
p3481
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F0.95021907041518716
sg34
g752
(S'\x07\xdf\t\x18\x0e2:\x0b\xdf\x10'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1327
sS'block_loop.thisIndex'
p3488
g888
sg38
S'left'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1292
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1334
sS'block_loop.thisRepN'
p3494
I0
sg906
g1292
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg908
g1286
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F0.71691706000638078
sg34
g752
(S'\x07\xdf\t\x18\x0e3\x04\x0b}h'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1032
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1040
sS'block_loop.thisRepN'
p3507
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F1.2334380028441956
sg34
g752
(S'\x07\xdf\t\x18\x0e3\n\x07\xc80'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g2316
sS'block_loop.thisIndex'
p3514
g888
sg38
S'left'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g2323
sS'block_loop.thisRepN'
p3520
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F0.88347130245892913
sg34
g752
(S'\x07\xdf\t\x18\x0e3\x10\x0b\xea\xc8'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g1868
sS'block_loop.thisIndex'
p3527
g888
sg38
S'right'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g1875
sS'block_loop.thisRepN'
p3533
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F0.90011483805938042
sg34
g752
(S'\x07\xdf\t\x18\x0e3\x16\n\x93\x08'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g2002
sS'block_loop.thisIndex'
p3540
g888
sg38
S'right'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g1259
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g2009
sS'block_loop.thisRepN'
p3546
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F0.96688712456671055
sg34
g752
(S'\x07\xdf\t\x18\x0e3\x1c\ty\xc8'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g1066
sS'block_loop.thisIndex'
p3553
g888
sg38
S'left'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g1074
sS'block_loop.thisRepN'
p3559
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg908
g1077
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F1.1835940662822395
sg34
g752
(S'\x07\xdf\t\x18\x0e3"\t\x918'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g1201
sS'block_loop.thisIndex'
p3566
g888
sg38
S'right'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g1208
sS'block_loop.thisRepN'
p3572
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F0.98337699156036251
sg34
g752
(S'\x07\xdf\t\x18\x0e3(\x0c\xc1\xa0'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g1868
sS'block_loop.thisIndex'
p3579
g888
sg38
S'right'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g1875
sS'block_loop.thisRepN'
p3585
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F0.90010029798577307
sg34
g752
(S'\x07\xdf\t\x18\x0e3.\r\x17\x90'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g983
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g991
sS'block_loop.thisRepN'
p3598
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F0.85022842168109491
sg34
g752
(S'\x07\xdf\t\x18\x0e34\x0b\xfeP'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g949
sS'block_loop.thisIndex'
p3605
g888
sg38
S'left'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g957
sS'block_loop.thisRepN'
p3611
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F0.8501505895255832
sg34
g752
(S'\x07\xdf\t\x18\x0e3:\n-x'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F7.8504185830097413
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'8-liquorice_catherine_wheels.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'right'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'17-jacobs_mini_cheddars_redo.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'8-liquorice_catherine_wheels.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F1.2168301046767738
sg34
g752
(S'\x07\xdf\t\x18\x0e4\x11\x06\xd9\xe8'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'3-ellas_strawberries_apples.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'left'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'3-ellas_strawberries_apples.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'13-mccoys_steak_crisps.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3663
I1
sg3646
S'13-mccoys_steak_crisps.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F0.86687053177956841
sg34
g752
(S'\x07\xdf\t\x18\x0e4\x17\n\x83h'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'1-treacle_cookies.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'left'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'1-treacle_cookies.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'21-nakd_banana_crunch.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3680
I1
sg3646
S'21-nakd_banana_crunch.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F1.1834563632510253
sg34
g752
(S'\x07\xdf\t\x18\x0e4\x1d\x08\xf1\x10'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'35-raisins.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'left'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'35-raisins.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'49-yorkie.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
S'49-yorkie.png'
p3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3698
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vn
sS'block_loop.thisTrialN'
p3700
I0
sg39
F0.88345647728783661
sg34
g752
(S'\x07\xdf\t\x18\x0e4#\x0c\\\x10'
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'26-walkers_smoky_bacon.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'right'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'44-crunch.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'44-crunch.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3714
I1
sg3646
S'26-walkers_smoky_bacon.png'
p3715
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vn
sS'block_loop.thisTrialN'
p3717
I0
sg39
F0.81690571305080084
sg34
g752
(S'\x07\xdf\t\x18\x0e4)\x0b\x088'
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'10-bounty_redo.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'left'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
S'10-bounty_redo.png'
p3725
sg63
g64
sS'trial_loop.thisIndex'
p3726
g59
(g98
S'\x05\x00\x00\x00'
tRp3727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3728
I0
sg3641
S'4-corn.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3731
I1
sg3646
S'4-corn.png'
p3732
sg55
g11
sS'block_loop.thisTrial'
p3733
Nsg69
Vn
sS'block_loop.thisTrialN'
p3734
I0
sg39
F0.8168800540988741
sg34
g752
(S'\x07\xdf\t\x18\x0e4/\x08\xbeH'
tRp3735
sa(dp3736
S'trial_loop.thisTrialN'
p3737
I6
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p3738
sS'block_loop.thisIndex'
p3739
g3626
sg38
S'left'
p3740
sg58
g62
sS'trial_loop.thisN'
p3741
I6
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p3742
g59
(g98
S'\x06\x00\x00\x00'
tRp3743
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3744
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p3745
sS'block_loop.thisRepN'
p3746
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3747
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3748
Nsg69
Vn
sS'block_loop.thisTrialN'
p3749
I0
sg39
F1.1335340243385872
sg34
g752
(S'\x07\xdf\t\x18\x0e45\x06tX'
tRp3750
sa(dp3751
S'trial_loop.thisTrialN'
p3752
I7
sg3632
S'2-steamed_puddings.png'
p3753
sS'block_loop.thisIndex'
p3754
g3626
sg38
S'left'
p3755
sg58
g62
sS'trial_loop.thisN'
p3756
I7
sg33
S'2-steamed_puddings.png'
p3757
sg63
g64
sS'trial_loop.thisIndex'
p3758
g59
(g98
S'\x07\x00\x00\x00'
tRp3759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3760
I0
sg3641
S'20-fruit_pastilles.png'
p3761
sS'block_loop.thisRepN'
p3762
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3763
I1
sg3646
S'20-fruit_pastilles.png'
p3764
sg55
g11
sS'block_loop.thisTrial'
p3765
Nsg69
Vn
sS'block_loop.thisTrialN'
p3766
I0
sg39
F0.88346018358060974
sg34
g752
(S'\x07\xdf\t\x18\x0e4;\x08\xed('
tRp3767
sa(dp3768
S'trial_loop.thisTrialN'
p3769
I8
sg3632
S'23-crunchie_redo.png'
p3770
sS'block_loop.thisIndex'
p3771
g3626
sg38
S'left'
p3772
sg58
g62
sS'trial_loop.thisN'
p3773
I8
sg33
S'23-crunchie_redo.png'
p3774
sg63
g64
sS'trial_loop.thisIndex'
p3775
g59
(g98
S'\x08\x00\x00\x00'
tRp3776
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3777
I0
sg3641
S'33-ambrosia_rice.png'
p3778
sS'block_loop.thisRepN'
p3779
I1
sg3644
g3774
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3780
I1
sg3646
S'33-ambrosia_rice.png'
p3781
sg55
g11
sS'block_loop.thisTrial'
p3782
Nsg69
Vn
sS'block_loop.thisTrialN'
p3783
I0
sg39
F0.88352233526165946
sg34
g752
(S'\x07\xdf\t\x18\x0e5\x05\x07\xd3\xe8'
tRp3784
sa(dp3785
S'trial_loop.thisTrialN'
p3786
I9
sg3632
S'43-mrporky_pork_crackles_redo.png'
p3787
sS'block_loop.thisIndex'
p3788
g3626
sg38
S'right'
p3789
sg58
g62
sS'trial_loop.thisN'
p3790
I9
sg33
S'18-mms.png'
p3791
sg63
g64
sS'trial_loop.thisIndex'
p3792
g59
(g98
S'\t\x00\x00\x00'
tRp3793
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3794
I0
sg3641
S'18-mms.png'
p3795
sS'block_loop.thisRepN'
p3796
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3797
I1
sg3646
S'43-mrporky_pork_crackles_redo.png'
p3798
sg55
g11
sS'block_loop.thisTrial'
p3799
Nsg69
Vn
sS'block_loop.thisTrialN'
p3800
I0
sg39
F0.8668896334420424
sg34
g752
(S'\x07\xdf\t\x18\x0e5\x0b\x06|('
tRp3801
sa(dp3802
S'trial_loop.thisTrialN'
p3803
I10
sg3632
S'29-beans.png'
p3804
sS'block_loop.thisIndex'
p3805
g3626
sg38
S'right'
p3806
sg58
g62
sS'trial_loop.thisN'
p3807
I10
sg33
S'46-pistachios.png'
p3808
sg63
g64
sS'trial_loop.thisIndex'
p3809
g59
(g98
S'\n\x00\x00\x00'
tRp3810
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3811
I0
sg3641
S'46-pistachios.png'
p3812
sS'block_loop.thisRepN'
p3813
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3814
I1
sg3646
S'29-beans.png'
p3815
sg55
g11
sS'block_loop.thisTrial'
p3816
Nsg69
Vn
sS'block_loop.thisTrialN'
p3817
I0
sg39
F0.78356390276167076
sg34
g752
(S'\x07\xdf\t\x18\x0e5\x11\x04\xe9\xd0'
tRp3818
sa(dp3819
S'trial_loop.thisTrialN'
p3820
I11
sg3632
S'6-sour_patch_kids.png'
p3821
sS'block_loop.thisIndex'
p3822
g3626
sg38
S'right'
p3823
sg58
g62
sS'trial_loop.thisN'
p3824
I11
sg33
S'38-maltesers.png'
p3825
sg63
g64
sS'trial_loop.thisIndex'
p3826
g59
(g98
S'\x0b\x00\x00\x00'
tRp3827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3828
I0
sg3641
S'38-maltesers.png'
p3829
sS'block_loop.thisRepN'
p3830
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3831
I1
sg3646
S'6-sour_patch_kids.png'
p3832
sg55
g11
sS'block_loop.thisTrial'
p3833
Nsg69
Vn
sS'block_loop.thisTrialN'
p3834
I0
sg39
F1.916571063316951
sg34
g752
(S'\x07\xdf\t\x18\x0e5\x17\x02&\xc8'
tRp3835
sa(dp3836
S'trial_loop.thisTrialN'
p3837
I12
sg3632
g3704
sS'block_loop.thisIndex'
p3838
g3626
sg38
S'right'
p3839
sg58
g62
sS'trial_loop.thisN'
p3840
I12
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p3841
g59
(g98
S'\x0c\x00\x00\x00'
tRp3842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3843
I0
sg3641
g3712
sS'block_loop.thisRepN'
p3844
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3845
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p3846
Nsg69
Vn
sS'block_loop.thisTrialN'
p3847
I0
sg39
F0.83344632774969796
sg34
g752
(S'\x07\xdf\t\x18\x0e5\x1e\x01D8'
tRp3848
sa(dp3849
S'trial_loop.thisTrialN'
p3850
I13
sg3632
g3633
sS'block_loop.thisIndex'
p3851
g3626
sg38
S'right'
p3852
sg58
g62
sS'trial_loop.thisN'
p3853
I13
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p3854
g59
(g98
S'\r\x00\x00\x00'
tRp3855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3856
I0
sg3641
g3642
sS'block_loop.thisRepN'
p3857
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3858
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3859
Nsg69
Vn
sS'block_loop.thisTrialN'
p3860
I0
sg39
F0.78352455903586815
sg34
g752
(S'\x07\xdf\t\x18\x0e5#\x0e{\x08'
tRp3861
sa(dp3862
S'trial_loop.thisTrialN'
p3863
I14
sg3632
g3653
sS'block_loop.thisIndex'
p3864
g3626
sg38
S'left'
p3865
sg58
g62
sS'trial_loop.thisN'
p3866
I14
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p3867
g59
(g98
S'\x0e\x00\x00\x00'
tRp3868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3869
I0
sg3641
g3661
sS'block_loop.thisRepN'
p3870
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3871
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p3872
Nsg69
Vn
sS'block_loop.thisTrialN'
p3873
I0
sg39
F0.9502116578296409
sg34
g752
(S'\x07\xdf\t\x18\x0e5)\x0b\xb4\x18'
tRp3874
sa(dp3875
S'trial_loop.thisTrialN'
p3876
I15
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p3877
sS'block_loop.thisIndex'
p3878
g3626
sg38
S'right'
p3879
sg58
g62
sS'trial_loop.thisN'
p3880
I15
sg33
S'36-fig_rolls.png'
p3881
sg63
g64
sS'trial_loop.thisIndex'
p3882
g59
(g98
S'\x0f\x00\x00\x00'
tRp3883
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3884
I0
sg3641
S'36-fig_rolls.png'
p3885
sS'block_loop.thisRepN'
p3886
I1
sg3644
g3881
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3887
I1
sg3646
S'34-hula_hoops_bbq_beef_redo.png'
p3888
sg55
g11
sS'block_loop.thisTrial'
p3889
Nsg69
Vn
sS'block_loop.thisTrialN'
p3890
I0
sg39
F0.95053467550678761
sg34
g752
(S'\x07\xdf\t\x18\x0e5/\x0b\x90\xf0'
tRp3891
sa(dp3892
S'trial_loop.thisTrialN'
p3893
I16
sg3632
S'41-peanuts_redo.png'
p3894
sS'block_loop.thisIndex'
p3895
g3626
sg38
S'right'
p3896
sg58
g62
sS'trial_loop.thisN'
p3897
I16
sg33
S'45-chewy_nougat_redo.png'
p3898
sg63
g64
sS'trial_loop.thisIndex'
p3899
g59
(g98
S'\x10\x00\x00\x00'
tRp3900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3901
I0
sg3641
S'45-chewy_nougat_redo.png'
p3902
sS'block_loop.thisRepN'
p3903
I1
sg3644
g3898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3904
I1
sg3646
S'41-peanuts_redo.png'
p3905
sg55
g11
sS'block_loop.thisTrial'
p3906
Nsg69
Vn
sS'block_loop.thisTrialN'
p3907
I0
sg39
F1.8834479243050737
sg34
g752
(S'\x07\xdf\t\x18\x0e55\x0b/H'
tRp3908
sa(dp3909
S'trial_loop.thisTrialN'
p3910
I17
sg3632
S'13-mccoys_steak_crisps.png'
p3911
sS'block_loop.thisIndex'
p3912
g3626
sg38
S'right'
p3913
sg58
g62
sS'trial_loop.thisN'
p3914
I17
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p3915
g59
(g98
S'\x11\x00\x00\x00'
tRp3916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3917
I0
sg3641
S'3-ellas_strawberries_apples.png'
p3918
sS'block_loop.thisRepN'
p3919
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3920
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p3921
Nsg69
Vn
sS'block_loop.thisTrialN'
p3922
I0
sg39
F0.75021125869170646
sg34
g752
(S'\x07\xdf\t\x18\x0e6\x00\n\x0e8'
tRp3923
sa(dp3924
S'trial_loop.thisTrialN'
p3925
I18
sg3632
g3770
sS'block_loop.thisIndex'
p3926
g3626
sg38
S'left'
p3927
sg58
g62
sS'trial_loop.thisN'
p3928
I18
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p3929
g59
(g98
S'\x12\x00\x00\x00'
tRp3930
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3931
I0
sg3641
g3778
sS'block_loop.thisRepN'
p3932
I1
sg3644
g3774
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3933
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p3934
Nsg69
Vn
sS'block_loop.thisTrialN'
p3935
I0
sg39
F1.383504088895279
sg34
g752
(S'\x07\xdf\t\x18\x0e6\x06\x06\xd2\x18'
tRp3936
sa(dp3937
S'trial_loop.thisTrialN'
p3938
I19
sg3632
g3753
sS'block_loop.thisIndex'
p3939
g3626
sg38
S'left'
p3940
sg58
g62
sS'trial_loop.thisN'
p3941
I19
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p3942
g59
(g98
S'\x13\x00\x00\x00'
tRp3943
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3944
I0
sg3641
g3761
sS'block_loop.thisRepN'
p3945
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3946
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p3947
Nsg69
Vn
sS'block_loop.thisTrialN'
p3948
I0
sg39
F0.95021080253354739
sg34
g752
(S'\x07\xdf\t\x18\x0e6\x0c\r\x17\x90'
tRp3949
sa(dp3950
S'trial_loop.thisTrialN'
p3951
I20
sg3632
S'33-ambrosia_rice.png'
p3952
sS'block_loop.thisIndex'
p3953
g3626
sg38
S'right'
p3954
sg58
g62
sS'trial_loop.thisN'
p3955
I20
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p3956
g59
(g98
S'\x14\x00\x00\x00'
tRp3957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3958
I0
sg3641
S'23-crunchie_redo.png'
p3959
sS'block_loop.thisRepN'
p3960
I1
sg3644
g3774
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3961
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p3962
Nsg69
Vn
sS'block_loop.thisTrialN'
p3963
I0
sg39
F1.0172459507339227
sg34
g752
(S'\x07\xdf\t\x18\x0e6\x12\x0c\xb5\xe8'
tRp3964
sa(dp3965
S'trial_loop.thisTrialN'
p3966
I21
sg3632
g3821
sS'block_loop.thisIndex'
p3967
g3626
sg38
S'right'
p3968
sg58
g62
sS'trial_loop.thisN'
p3969
I21
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p3970
g59
(g98
S'\x15\x00\x00\x00'
tRp3971
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3972
I0
sg3641
g3829
sS'block_loop.thisRepN'
p3973
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3974
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p3975
Nsg69
Vn
sS'block_loop.thisTrialN'
p3976
I0
sg39
F1.0499391597768408
sg34
g752
(S'\x07\xdf\t\x18\x0e6\x18\r\x84\xf0'
tRp3977
sa(dp3978
S'trial_loop.thisTrialN'
p3979
I22
sg3632
g3738
sS'block_loop.thisIndex'
p3980
g3626
sg38
S'left'
p3981
sg58
g62
sS'trial_loop.thisN'
p3982
I22
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p3983
g59
(g98
S'\x16\x00\x00\x00'
tRp3984
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3985
I0
sg3641
g3745
sS'block_loop.thisRepN'
p3986
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3987
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3988
Nsg69
Vn
sS'block_loop.thisTrialN'
p3989
I0
sg39
F0.93344096787768649
sg34
g752
(S'\x07\xdf\t\x18\x0e6\x1e\x0e\xcd\x10'
tRp3990
sa(dp3991
S'trial_loop.thisTrialN'
p3992
I23
sg3632
S'21-nakd_banana_crunch.png'
p3993
sS'block_loop.thisIndex'
p3994
g3626
sg38
S'right'
p3995
sg58
g62
sS'trial_loop.thisN'
p3996
I23
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p3997
g59
(g98
S'\x17\x00\x00\x00'
tRp3998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3999
I0
sg3641
S'1-treacle_cookies.png'
p4000
sS'block_loop.thisRepN'
p4001
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4002
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4003
Nsg69
Vn
sS'block_loop.thisTrialN'
p4004
I0
sg39
F1.1002093200149829
sg34
g752
(S'\x07\xdf\t\x18\x0e6$\x0ekh'
tRp4005
sa(dp4006
S'trial_loop.thisTrialN'
p4007
I24
sg3632
S'51-mars.png'
p4008
sS'block_loop.thisIndex'
p4009
g3626
sg38
S'left'
p4010
sg58
g62
sS'trial_loop.thisN'
p4011
I24
sg33
S'51-mars.png'
p4012
sg63
g64
sS'trial_loop.thisIndex'
p4013
g59
(g98
S'\x18\x00\x00\x00'
tRp4014
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4015
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p4016
sS'block_loop.thisRepN'
p4017
I1
sg3644
g4012
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4018
I1
sg3646
S'27-hartleys_raspberries_jelly.png'
p4019
sg55
g11
sS'block_loop.thisTrial'
p4020
Nsg69
Vn
sS'block_loop.thisTrialN'
p4021
I0
sg39
F0.70010959222781821
sg34
g752
(S'\x07\xdf\t\x18\x0e6+\x01$\xf8'
tRp4022
sa(dp4023
S'trial_loop.thisTrialN'
p4024
I25
sg3632
S'30-spaghetti_hoops.png'
p4025
sS'block_loop.thisIndex'
p4026
g3626
sg38
S'right'
p4027
sg58
g62
sS'trial_loop.thisN'
p4028
I25
sg33
S'19-caramello_redo.png'
p4029
sg63
g64
sS'trial_loop.thisIndex'
p4030
g59
(g98
S'\x19\x00\x00\x00'
tRp4031
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4032
I0
sg3641
S'19-caramello_redo.png'
p4033
sS'block_loop.thisRepN'
p4034
I1
sg3644
g4029
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4035
I1
sg3646
S'30-spaghetti_hoops.png'
p4036
sg55
g11
sS'block_loop.thisTrial'
p4037
Nsg69
Vn
sS'block_loop.thisTrialN'
p4038
I0
sg39
F0.81672695569795906
sg34
g752
(S'\x07\xdf\t\x18\x0e60\x0c8\xe8'
tRp4039
sa(dp4040
S'trial_loop.thisTrialN'
p4041
I26
sg3632
g3877
sS'block_loop.thisIndex'
p4042
g3626
sg38
S'right'
p4043
sg58
g62
sS'trial_loop.thisN'
p4044
I26
sg33
g3888
sg63
g64
sS'trial_loop.thisIndex'
p4045
g59
(g98
S'\x1a\x00\x00\x00'
tRp4046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4047
I0
sg3641
g3885
sS'block_loop.thisRepN'
p4048
I1
sg3644
g3881
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4049
I1
sg3646
g3888
sg55
g11
sS'block_loop.thisTrial'
p4050
Nsg69
Vn
sS'block_loop.thisTrialN'
p4051
I0
sg39
F1.1005254953051917
sg34
g752
(S'\x07\xdf\t\x18\x0e66\t\xee\xf8'
tRp4052
sa(dp4053
S'trial_loop.thisTrialN'
p4054
I27
sg3632
g3894
sS'block_loop.thisIndex'
p4055
g3626
sg38
S'right'
p4056
sg58
g62
sS'trial_loop.thisN'
p4057
I27
sg33
g3905
sg63
g64
sS'trial_loop.thisIndex'
p4058
g59
(g98
S'\x1b\x00\x00\x00'
tRp4059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4060
I0
sg3641
g3902
sS'block_loop.thisRepN'
p4061
I1
sg3644
g3898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4062
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p4063
Nsg69
Vn
sS'block_loop.thisTrialN'
p4064
I0
sg39
F0.98348105285913334
sg34
g752
(S'\x07\xdf\t\x18\x0e7\x00\x0b\xee\xb0'
tRp4065
sa(dp4066
S'trial_loop.thisTrialN'
p4067
I28
sg3632
S'50-polo.png'
p4068
sS'block_loop.thisIndex'
p4069
g3626
sg38
S'right'
p4070
sg58
g62
sS'trial_loop.thisN'
p4071
I28
sg33
S'48-twix.png'
p4072
sg63
g64
sS'trial_loop.thisIndex'
p4073
g59
(g98
S'\x1c\x00\x00\x00'
tRp4074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4075
I0
sg3641
S'48-twix.png'
p4076
sS'block_loop.thisRepN'
p4077
I1
sg3644
g4072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4078
I1
sg3646
S'50-polo.png'
p4079
sg55
g11
sS'block_loop.thisTrial'
p4080
Nsg69
Vn
sS'block_loop.thisTrialN'
p4081
I0
sg39
F0.85020076703222003
sg34
g752
(S'\x07\xdf\t\x18\x0e7\x06\x0c@\xb8'
tRp4082
sa(dp4083
S'trial_loop.thisTrialN'
p4084
I29
sg3632
g3787
sS'block_loop.thisIndex'
p4085
g3626
sg38
S'right'
p4086
sg58
g62
sS'trial_loop.thisN'
p4087
I29
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p4088
g59
(g98
S'\x1d\x00\x00\x00'
tRp4089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4090
I0
sg3641
g3795
sS'block_loop.thisRepN'
p4091
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4092
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p4093
Nsg69
Vn
sS'block_loop.thisTrialN'
p4094
I0
sg39
F0.90010685527158785
sg34
g752
(S'\x07\xdf\t\x18\x0e7\x0c\no\xe0'
tRp4095
sa(dp4096
S'trial_loop.thisTrialN'
p4097
I30
sg3632
g3753
sS'block_loop.thisIndex'
p4098
g3626
sg38
S'left'
p4099
sg58
g62
sS'trial_loop.thisN'
p4100
I30
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p4101
g59
(g98
S'\x1e\x00\x00\x00'
tRp4102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4103
I0
sg3641
g3761
sS'block_loop.thisRepN'
p4104
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4105
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p4106
Nsg69
Vn
sS'block_loop.thisTrialN'
p4107
I0
sg39
F1.116861123497074
sg34
g752
(S'\x07\xdf\t\x18\x0e7\x12\t\x95 '
tRp4108
sa(dp4109
S'trial_loop.thisTrialN'
p4110
I31
sg3632
g4068
sS'block_loop.thisIndex'
p4111
g3626
sg38
S'right'
p4112
sg58
g62
sS'trial_loop.thisN'
p4113
I31
sg33
g4072
sg63
g64
sS'trial_loop.thisIndex'
p4114
g59
(g98
S'\x1f\x00\x00\x00'
tRp4115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4116
I0
sg3641
g4076
sS'block_loop.thisRepN'
p4117
I1
sg3644
g4072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4118
I1
sg3646
g4079
sg55
g11
sS'block_loop.thisTrial'
p4119
Nsg69
Vn
sS'block_loop.thisTrialN'
p4120
I0
sg39
F0.75019016133228433
sg34
g752
(S'\x07\xdf\t\x18\x0e7\x18\x0b\xcfp'
tRp4121
sa(dp4122
S'trial_loop.thisTrialN'
p4123
I32
sg3632
g3721
sS'block_loop.thisIndex'
p4124
g3626
sg38
S'left'
p4125
sg58
g62
sS'trial_loop.thisN'
p4126
I32
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4127
g59
(g98
S' \x00\x00\x00'
tRp4128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4129
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4130
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4131
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4132
Nsg69
Vn
sS'block_loop.thisTrialN'
p4133
I0
sg39
F1.3171383541994146
sg34
g752
(S'\x07\xdf\t\x18\x0e7\x1e\x08\x93P'
tRp4134
sa(dp4135
S'trial_loop.thisTrialN'
p4136
I33
sg3632
g4008
sS'block_loop.thisIndex'
p4137
g3626
sg38
S'left'
p4138
sg58
g62
sS'trial_loop.thisN'
p4139
I33
sg33
g4012
sg63
g64
sS'trial_loop.thisIndex'
p4140
g59
(g98
S'!\x00\x00\x00'
tRp4141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4142
I0
sg3641
g4016
sS'block_loop.thisRepN'
p4143
I1
sg3644
g4012
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4144
I1
sg3646
g4019
sg55
g11
sS'block_loop.thisTrial'
p4145
Nsg69
Vn
sS'block_loop.thisTrialN'
p4146
I0
sg39
F1.3334728419940802
sg34
g752
(S'\x07\xdf\t\x18\x0e7$\r\xe6\x98'
tRp4147
sa(dp4148
S'trial_loop.thisTrialN'
p4149
I34
sg3632
g3721
sS'block_loop.thisIndex'
p4150
g3626
sg38
S'left'
p4151
sg58
g62
sS'trial_loop.thisN'
p4152
I34
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4153
g59
(g98
S'"\x00\x00\x00'
tRp4154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4155
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4156
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4157
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4158
Nsg69
Vn
sS'block_loop.thisTrialN'
p4159
I0
sg39
F0.81684470177060575
sg34
g752
(S'\x07\xdf\t\x18\x0e7+\x046 '
tRp4160
sa(dp4161
S'trial_loop.thisTrialN'
p4162
I35
sg3632
S'31-hobnobs.png'
p4163
sS'block_loop.thisIndex'
p4164
g3626
sg38
S'left'
p4165
sg58
g62
sS'trial_loop.thisN'
p4166
I35
sg33
S'31-hobnobs.png'
p4167
sg63
g64
sS'trial_loop.thisIndex'
p4168
g59
(g98
S'#\x00\x00\x00'
tRp4169
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4170
I0
sg3641
S'25-kitkat.png'
p4171
sS'block_loop.thisRepN'
p4172
I1
sg3644
g4167
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4173
I1
sg3646
S'25-kitkat.png'
p4174
sg55
g11
sS'block_loop.thisTrial'
p4175
Nsg69
Vn
sS'block_loop.thisTrialN'
p4176
I0
sg39
F0.93344609966879943
sg34
g752
(S'\x07\xdf\t\x18\x0e71\x01\xec0'
tRp4177
sa(dp4178
S'trial_loop.thisTrialN'
p4179
I36
sg3632
g3993
sS'block_loop.thisIndex'
p4180
g3626
sg38
S'right'
p4181
sg58
g62
sS'trial_loop.thisN'
p4182
I36
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4183
g59
(g98
S'$\x00\x00\x00'
tRp4184
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4185
I0
sg3641
g4000
sS'block_loop.thisRepN'
p4186
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4187
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4188
Nsg69
Vn
sS'block_loop.thisTrialN'
p4189
I0
sg39
F1.0002038461061602
sg34
g752
(S'\x07\xdf\t\x18\x0e77\x01L\x08'
tRp4190
sa(dp4191
S'trial_loop.thisTrialN'
p4192
I37
sg3632
g4068
sS'block_loop.thisIndex'
p4193
g3626
sg38
S'right'
p4194
sg58
g62
sS'trial_loop.thisN'
p4195
I37
sg33
g4072
sg63
g64
sS'trial_loop.thisIndex'
p4196
g59
(g98
S'%\x00\x00\x00'
tRp4197
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4198
I0
sg3641
g4076
sS'block_loop.thisRepN'
p4199
I1
sg3644
g4072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4200
I1
sg3646
g4079
sg55
g11
sS'block_loop.thisTrial'
p4201
Nsg69
Vn
sS'block_loop.thisTrialN'
p4202
I0
sg39
F0.81702060813040589
sg34
g752
(S'\x07\xdf\t\x18\x0e8\x01\x01\xdc\x90'
tRp4203
sa(dp4204
S'trial_loop.thisTrialN'
p4205
I38
sg3632
S'49-yorkie.png'
p4206
sS'block_loop.thisIndex'
p4207
g3626
sg38
S'right'
p4208
sg58
g62
sS'trial_loop.thisN'
p4209
I38
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p4210
g59
(g98
S'&\x00\x00\x00'
tRp4211
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4212
I0
sg3641
S'35-raisins.png'
p4213
sS'block_loop.thisRepN'
p4214
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4215
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p4216
Nsg69
Vn
sS'block_loop.thisTrialN'
p4217
I0
sg39
F1.0168565048879827
sg34
g752
(S'\x07\xdf\t\x18\x0e8\x06\x0e\xd4\xe0'
tRp4218
sa(dp4219
S'trial_loop.thisTrialN'
p4220
I39
sg3632
g3911
sS'block_loop.thisIndex'
p4221
g3626
sg38
S'right'
p4222
sg58
g62
sS'trial_loop.thisN'
p4223
I39
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4224
g59
(g98
S"'\x00\x00\x00"
tRp4225
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4226
I0
sg3641
g3918
sS'block_loop.thisRepN'
p4227
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4228
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4229
Nsg69
Vn
sS'block_loop.thisTrialN'
p4230
I0
sg39
F0.73357570587904775
sg34
g752
(S'\x07\xdf\t\x18\x0e8\r\x00a\xa8'
tRp4231
sa(dp4232
S'trial_loop.thisTrialN'
p4233
I40
sg3632
g3787
sS'block_loop.thisIndex'
p4234
g3626
sg38
S'right'
p4235
sg58
g62
sS'trial_loop.thisN'
p4236
I40
sg33
g3798
sg63
g64
sS'trial_loop.thisIndex'
p4237
g59
(g98
S'(\x00\x00\x00'
tRp4238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4239
I0
sg3641
g3795
sS'block_loop.thisRepN'
p4240
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4241
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p4242
Nsg69
Vn
sS'block_loop.thisTrialN'
p4243
I0
sg39
F0.8168680799244612
sg34
g752
(S'\x07\xdf\t\x18\x0e8\x12\x0b\xee\xb0'
tRp4244
sa(dp4245
S'trial_loop.thisTrialN'
p4246
I41
sg3632
g3704
sS'block_loop.thisIndex'
p4247
g3626
sg38
S'right'
p4248
sg58
g62
sS'trial_loop.thisN'
p4249
I41
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4250
g59
(g98
S')\x00\x00\x00'
tRp4251
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4252
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4253
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4254
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4255
Nsg69
Vn
sS'block_loop.thisTrialN'
p4256
I0
sg39
F1.0168026210885728
sg34
g752
(S'\x07\xdf\t\x18\x0e8\x18\t\xa4\xc0'
tRp4257
sa(dp4258
S'trial_loop.thisTrialN'
p4259
I42
sg3632
g4206
sS'block_loop.thisIndex'
p4260
g3626
sg38
S'right'
p4261
sg58
g62
sS'trial_loop.thisN'
p4262
I42
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p4263
g59
(g98
S'*\x00\x00\x00'
tRp4264
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4265
I0
sg3641
g4213
sS'block_loop.thisRepN'
p4266
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4267
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p4268
Nsg69
Vn
sS'block_loop.thisTrialN'
p4269
I0
sg39
F0.98357741647487273
sg34
g752
(S'\x07\xdf\t\x18\x0e8\x1e\no\xe0'
tRp4270
sa(dp4271
S'trial_loop.thisTrialN'
p4272
I43
sg3632
S'46-pistachios.png'
p4273
sS'block_loop.thisIndex'
p4274
g3626
sg38
S'left'
p4275
sg58
g62
sS'trial_loop.thisN'
p4276
I43
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p4277
g59
(g98
S'+\x00\x00\x00'
tRp4278
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4279
I0
sg3641
S'29-beans.png'
p4280
sS'block_loop.thisRepN'
p4281
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4282
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p4283
Nsg69
Vn
sS'block_loop.thisTrialN'
p4284
I0
sg39
F0.85018337596193305
sg34
g752
(S'\x07\xdf\t\x18\x0e8$\n\xc5\xd0'
tRp4285
sa(dp4286
S'trial_loop.thisTrialN'
p4287
I44
sg3632
S'22-daim.png'
p4288
sS'block_loop.thisIndex'
p4289
g3626
sg38
S'right'
p4290
sg58
g62
sS'trial_loop.thisN'
p4291
I44
sg33
S'7-olives.png'
p4292
sg63
g64
sS'trial_loop.thisIndex'
p4293
g59
(g98
S',\x00\x00\x00'
tRp4294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4295
I0
sg3641
S'7-olives.png'
p4296
sS'block_loop.thisRepN'
p4297
I1
sg3644
S'22-daim.png'
p4298
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4299
I1
sg3646
g4292
sg55
g11
sS'block_loop.thisTrial'
p4300
Nsg69
Vn
sS'block_loop.thisTrialN'
p4301
I0
sg39
F1.1165834366329364
sg34
g752
(S'\x07\xdf\t\x18\x0e8*\x08\xf4\xf8'
tRp4302
sa(dp4303
S'trial_loop.thisTrialN'
p4304
I45
sg3632
S'18-mms.png'
p4305
sS'block_loop.thisIndex'
p4306
g3626
sg38
S'left'
p4307
sg58
g62
sS'trial_loop.thisN'
p4308
I45
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p4309
g59
(g98
S'-\x00\x00\x00'
tRp4310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4311
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p4312
sS'block_loop.thisRepN'
p4313
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4314
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p4315
Nsg69
Vn
sS'block_loop.thisTrialN'
p4316
I0
sg39
F1.0501983151734748
sg34
g752
(S'\x07\xdf\t\x18\x0e80\x0b30'
tRp4317
sa(dp4318
S'trial_loop.thisTrialN'
p4319
I46
sg3632
S'4-corn.png'
p4320
sS'block_loop.thisIndex'
p4321
g3626
sg38
S'right'
p4322
sg58
g62
sS'trial_loop.thisN'
p4323
I46
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4324
g59
(g98
S'.\x00\x00\x00'
tRp4325
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4326
I0
sg3641
S'10-bounty_redo.png'
p4327
sS'block_loop.thisRepN'
p4328
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4329
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4330
Nsg69
Vn
sS'block_loop.thisTrialN'
p4331
I0
sg39
F1.1168006824154872
sg34
g752
(S'\x07\xdf\t\x18\x0e86\x0c{P'
tRp4332
sa(dp4333
S'trial_loop.thisTrialN'
p4334
I47
sg3632
g3804
sS'block_loop.thisIndex'
p4335
g3626
sg38
S'right'
p4336
sg58
g62
sS'trial_loop.thisN'
p4337
I47
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p4338
g59
(g98
S'/\x00\x00\x00'
tRp4339
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4340
I0
sg3641
g3812
sS'block_loop.thisRepN'
p4341
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4342
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p4343
Nsg69
Vn
sS'block_loop.thisTrialN'
p4344
I0
sg39
F0.78344016959817964
sg34
g752
(S'\x07\xdf\t\x18\x0e9\x00\x0e\xb5\xa0'
tRp4345
sa(dp4346
S'trial_loop.thisTrialN'
p4347
I48
sg3632
g3738
sS'block_loop.thisIndex'
p4348
g3626
sg38
S'left'
p4349
sg58
g62
sS'trial_loop.thisN'
p4350
I48
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4351
g59
(g98
S'0\x00\x00\x00'
tRp4352
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4353
I0
sg3641
g3745
sS'block_loop.thisRepN'
p4354
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4355
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4356
Nsg69
Vn
sS'block_loop.thisTrialN'
p4357
I0
sg39
F1.2834931980978581
sg34
g752
(S'\x07\xdf\t\x18\x0e9\x06\x0b\xf2\x98'
tRp4358
sa(dp4359
S'trial_loop.thisTrialN'
p4360
I49
sg3632
g4206
sS'block_loop.thisIndex'
p4361
g3626
sg38
S'right'
p4362
sg58
g62
sS'trial_loop.thisN'
p4363
I49
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p4364
g59
(g98
S'1\x00\x00\x00'
tRp4365
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4366
I0
sg3641
g4213
sS'block_loop.thisRepN'
p4367
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4368
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p4369
Nsg69
Vn
sS'block_loop.thisTrialN'
p4370
I0
sg39
F0.95011415382032283
sg34
g752
(S'\x07\xdf\t\x18\x0e9\r\x01\x8a\x88'
tRp4371
sa(dp4372
S'trial_loop.thisTrialN'
p4373
I50
sg3632
g3721
sS'block_loop.thisIndex'
p4374
g3626
sg38
S'left'
p4375
sg58
g62
sS'trial_loop.thisN'
p4376
I50
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4377
g59
(g98
S'2\x00\x00\x00'
tRp4378
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4379
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4380
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4381
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4382
Nsg69
Vn
sS'block_loop.thisTrialN'
p4383
I0
sg39
F1.2334705041830603
sg34
g752
(S'\x07\xdf\t\x18\x0e9\x13\x01cx'
tRp4384
sa(dp4385
S'trial_loop.thisTrialN'
p4386
I51
sg3632
g3952
sS'block_loop.thisIndex'
p4387
g3626
sg38
S'right'
p4388
sg58
g62
sS'trial_loop.thisN'
p4389
I51
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4390
g59
(g98
S'3\x00\x00\x00'
tRp4391
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4392
I0
sg3641
g3959
sS'block_loop.thisRepN'
p4393
I1
sg3644
g3774
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4394
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4395
Nsg69
Vn
sS'block_loop.thisTrialN'
p4396
I0
sg39
F0.91678317730838899
sg34
g752
(S'\x07\xdf\t\x18\x0e9\x19\x05Kx'
tRp4397
sa(dp4398
S'trial_loop.thisTrialN'
p4399
I52
sg3632
g3821
sS'block_loop.thisIndex'
p4400
g3626
sg38
S'right'
p4401
sg58
g62
sS'trial_loop.thisN'
p4402
I52
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4403
g59
(g98
S'4\x00\x00\x00'
tRp4404
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4405
I0
sg3641
g3829
sS'block_loop.thisRepN'
p4406
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4407
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p4408
Nsg69
Vn
sS'block_loop.thisTrialN'
p4409
I0
sg39
F1.049915211424377
sg34
g752
(S'\x07\xdf\t\x18\x0e9\x1f\x04\xabP'
tRp4410
sa(dp4411
S'trial_loop.thisTrialN'
p4412
I53
sg3632
g4068
sS'block_loop.thisIndex'
p4413
g3626
sg38
S'right'
p4414
sg58
g62
sS'trial_loop.thisN'
p4415
I53
sg33
g4072
sg63
g64
sS'trial_loop.thisIndex'
p4416
g59
(g98
S'5\x00\x00\x00'
tRp4417
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4418
I0
sg3641
g4076
sS'block_loop.thisRepN'
p4419
I1
sg3644
g4072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4420
I1
sg3646
g4079
sg55
g11
sS'block_loop.thisTrial'
p4421
Nsg69
Vn
sS'block_loop.thisTrialN'
p4422
I0
sg39
F0.71689054575836053
sg34
g752
(S'\x07\xdf\t\x18\x0e9%\x05\xf3p'
tRp4423
sa(dp4424
S'trial_loop.thisTrialN'
p4425
I54
sg3632
S'19-caramello_redo.png'
p4426
sS'block_loop.thisIndex'
p4427
g3626
sg38
S'left'
p4428
sg58
g62
sS'trial_loop.thisN'
p4429
I54
sg33
g4029
sg63
g64
sS'trial_loop.thisIndex'
p4430
g59
(g98
S'6\x00\x00\x00'
tRp4431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4432
I0
sg3641
S'30-spaghetti_hoops.png'
p4433
sS'block_loop.thisRepN'
p4434
I1
sg3644
g4029
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4435
I1
sg3646
g4036
sg55
g11
sS'block_loop.thisTrial'
p4436
Nsg69
Vn
sS'block_loop.thisTrialN'
p4437
I0
sg39
F1.450117860113096
sg34
g752
(S'\x07\xdf\t\x18\x0e9+\x01\xff\xb8'
tRp4438
sa(dp4439
S'trial_loop.thisTrialN'
p4440
I55
sg3632
g3770
sS'block_loop.thisIndex'
p4441
g3626
sg38
S'left'
p4442
sg58
g62
sS'trial_loop.thisN'
p4443
I55
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4444
g59
(g98
S'7\x00\x00\x00'
tRp4445
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4446
I0
sg3641
g3778
sS'block_loop.thisRepN'
p4447
I1
sg3644
g3774
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4448
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4449
Nsg69
Vn
sS'block_loop.thisTrialN'
p4450
I0
sg39
F0.73354520023713121
sg34
g752
(S'\x07\xdf\t\x18\x0e91\ty\xc8'
tRp4451
sa(dp4452
S'trial_loop.thisTrialN'
p4453
I56
sg3632
g4273
sS'block_loop.thisIndex'
p4454
g3626
sg38
S'left'
p4455
sg58
g62
sS'trial_loop.thisN'
p4456
I56
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p4457
g59
(g98
S'8\x00\x00\x00'
tRp4458
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4459
I0
sg3641
g4280
sS'block_loop.thisRepN'
p4460
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4461
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p4462
Nsg69
Vn
sS'block_loop.thisTrialN'
p4463
I0
sg39
F0.78346839444566285
sg34
g752
(S'\x07\xdf\t\x18\x0e97\x05\xff('
tRp4464
sa(dp4465
S'trial_loop.thisTrialN'
p4466
I57
sg3632
S'44-crunch.png'
p4467
sS'block_loop.thisIndex'
p4468
g3626
sg38
S'left'
p4469
sg58
g62
sS'trial_loop.thisN'
p4470
I57
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p4471
g59
(g98
S'9\x00\x00\x00'
tRp4472
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4473
I0
sg3641
S'26-walkers_smoky_bacon.png'
p4474
sS'block_loop.thisRepN'
p4475
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4476
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4477
Nsg69
Vn
sS'block_loop.thisTrialN'
p4478
I0
sg39
F0.73349559293274069
sg34
g752
(S'\x07\xdf\t\x18\x0e:\x01\x0388'
tRp4479
sa(dp4480
S'trial_loop.thisTrialN'
p4481
I58
sg3632
g3787
sS'block_loop.thisIndex'
p4482
g3626
sg38
S'right'
p4483
sg58
g62
sS'trial_loop.thisN'
p4484
I58
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p4485
g59
(g98
S':\x00\x00\x00'
tRp4486
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4487
I0
sg3641
g3795
sS'block_loop.thisRepN'
p4488
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4489
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p4490
Nsg69
Vn
sS'block_loop.thisTrialN'
p4491
I0
sg39
F0.83345659132828587
sg34
g752
(S'\x07\xdf\t\x18\x0e:\x06\x0e\xc5@'
tRp4492
sa(dp4493
S'trial_loop.thisTrialN'
p4494
I59
sg3632
g3804
sS'block_loop.thisIndex'
p4495
g3626
sg38
S'right'
p4496
sg58
g62
sS'trial_loop.thisN'
p4497
I59
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p4498
g59
(g98
S';\x00\x00\x00'
tRp4499
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4500
I0
sg3641
g3812
sS'block_loop.thisRepN'
p4501
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4502
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p4503
Nsg69
Vn
sS'block_loop.thisTrialN'
p4504
I0
sg39
F0.73355204262406914
sg34
g752
(S'\x07\xdf\t\x18\x0e:\x0c\x0c\xb5\xe8'
tRp4505
sa(dp4506
S'trial_loop.thisTrialN'
p4507
I60
sg3632
g4206
sS'block_loop.thisIndex'
p4508
g3626
sg38
S'left'
p4509
sg58
g62
sS'trial_loop.thisN'
p4510
I60
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p4511
g59
(g98
S'<\x00\x00\x00'
tRp4512
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4513
I0
sg3641
g4213
sS'block_loop.thisRepN'
p4514
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4515
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p4516
Nsg69
Vn
sS'block_loop.thisTrialN'
p4517
I0
sg39
F1.7167579745146213
sg34
g752
(S'\x07\xdf\t\x18\x0e:\x12\t;H'
tRp4518
sa(dp4519
S'trial_loop.thisTrialN'
p4520
I61
sg3632
g3738
sS'block_loop.thisIndex'
p4521
g3626
sg38
S'left'
p4522
sg58
g62
sS'trial_loop.thisN'
p4523
I61
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4524
g59
(g98
S'=\x00\x00\x00'
tRp4525
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4526
I0
sg3641
g3745
sS'block_loop.thisRepN'
p4527
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4528
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4529
Nsg69
Vn
sS'block_loop.thisTrialN'
p4530
I0
sg39
F0.91688866410549963
sg34
g752
(S'\x07\xdf\t\x18\x0e:\x19\x05~@'
tRp4531
sa(dp4532
S'trial_loop.thisTrialN'
p4533
I62
sg3632
S'16-skips_prawn.png'
p4534
sS'block_loop.thisIndex'
p4535
g3626
sg38
S'right'
p4536
sg58
g62
sS'trial_loop.thisN'
p4537
I62
sg33
S'42-mrkipling_lemon_slices.png'
p4538
sg63
g64
sS'trial_loop.thisIndex'
p4539
g59
(g98
S'>\x00\x00\x00'
tRp4540
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4541
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p4542
sS'block_loop.thisRepN'
p4543
I1
sg3644
g4538
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4544
I1
sg3646
S'16-skips_prawn.png'
p4545
sg55
g11
sS'block_loop.thisTrial'
p4546
Nsg69
Vn
sS'block_loop.thisTrialN'
p4547
I0
sg39
F0.95002035610013991
sg34
g752
(S'\x07\xdf\t\x18\x0e:\x1f\x04\xa3\x80'
tRp4548
sa(dp4549
S'trial_loop.thisTrialN'
p4550
I63
sg3632
g4008
sS'block_loop.thisIndex'
p4551
g3626
sg38
S'left'
p4552
sg58
g62
sS'trial_loop.thisN'
p4553
I63
sg33
g4012
sg63
g64
sS'trial_loop.thisIndex'
p4554
g59
(g98
S'?\x00\x00\x00'
tRp4555
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4556
I0
sg3641
g4016
sS'block_loop.thisRepN'
p4557
I1
sg3644
g4012
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4558
I1
sg3646
g4019
sg55
g11
sS'block_loop.thisTrial'
p4559
Nsg69
Vn
sS'block_loop.thisTrialN'
p4560
I0
sg39
F0.78344758218736388
sg34
g752
(S'\x07\xdf\t\x18\x0e:%\x04A\xd8'
tRp4561
sa(dp4562
S'trial_loop.thisTrialN'
p4563
I64
sg3632
g3670
sS'block_loop.thisIndex'
p4564
g3626
sg38
S'left'
p4565
sg58
g62
sS'trial_loop.thisN'
p4566
I64
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4567
g59
(g98
S'@\x00\x00\x00'
tRp4568
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4569
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4570
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4571
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4572
Nsg69
Vn
sS'block_loop.thisTrialN'
p4573
I0
sg39
F0.80020031087042298
sg34
g752
(S'\x07\xdf\t\x18\x0e:+\x01~\xd0'
tRp4574
sa(dp4575
S'trial_loop.thisTrialN'
p4576
I65
sg3632
g3704
sS'block_loop.thisIndex'
p4577
g3626
sg38
S'right'
p4578
sg58
g62
sS'trial_loop.thisN'
p4579
I65
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4580
g59
(g98
S'A\x00\x00\x00'
tRp4581
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4582
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4583
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4584
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4585
Nsg69
Vn
sS'block_loop.thisTrialN'
p4586
I0
sg39
F0.93352706791119999
sg34
g752
(S'\x07\xdf\t\x18\x0e:0\x0e8\xa0'
tRp4587
sa(dp4588
S'trial_loop.thisTrialN'
p4589
I66
sg3632
S'42-mrkipling_lemon_slices.png'
p4590
sS'block_loop.thisIndex'
p4591
g3626
sg38
S'left'
p4592
sg58
g62
sS'trial_loop.thisN'
p4593
I66
sg33
g4538
sg63
g64
sS'trial_loop.thisIndex'
p4594
g59
(g98
S'B\x00\x00\x00'
tRp4595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4596
I0
sg3641
S'16-skips_prawn.png'
p4597
sS'block_loop.thisRepN'
p4598
I1
sg3644
g4538
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4599
I1
sg3646
g4545
sg55
g11
sS'block_loop.thisTrial'
p4600
Nsg69
Vn
sS'block_loop.thisTrialN'
p4601
I0
sg39
F1.3333294369731448
sg34
g752
(S'\x07\xdf\t\x18\x0e:6\r\xd6\xf8'
tRp4602
sa(dp4603
S'trial_loop.thisTrialN'
p4604
I67
sg3632
g4288
sS'block_loop.thisIndex'
p4605
g3626
sg38
S'right'
p4606
sg58
g62
sS'trial_loop.thisN'
p4607
I67
sg33
g4298
sg63
g64
sS'trial_loop.thisIndex'
p4608
g59
(g98
S'C\x00\x00\x00'
tRp4609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4610
I0
sg3641
g4296
sS'block_loop.thisRepN'
p4611
I1
sg3644
g4298
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4612
I1
sg3646
g4292
sg55
g11
sS'block_loop.thisTrial'
p4613
Nsg69
Vn
sS'block_loop.thisTrialN'
p4614
I0
sg39
F2.5500708757244865
sg34
g752
(S'\x07\xdf\t\x18\x0e;\x01\x04&\x80'
tRp4615
sa(dp4616
S'trial_loop.thisTrialN'
p4617
I68
sg3632
S'40-sardines.png'
p4618
sS'block_loop.thisIndex'
p4619
g3626
sg38
S'right'
p4620
sg58
g62
sS'trial_loop.thisN'
p4621
I68
sg33
S'5-pineapple.png'
p4622
sg63
g64
sS'trial_loop.thisIndex'
p4623
g59
(g98
S'D\x00\x00\x00'
tRp4624
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4625
I0
sg3641
S'5-pineapple.png'
p4626
sS'block_loop.thisRepN'
p4627
I1
sg3644
g4622
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4628
I1
sg3646
S'40-sardines.png'
p4629
sg55
g11
sS'block_loop.thisTrial'
p4630
Nsg69
Vn
sS'block_loop.thisTrialN'
p4631
I0
sg39
F0.96681870069733122
sg34
g752
(S'\x07\xdf\t\x18\x0e;\x08\r\x04\x08'
tRp4632
sa(dp4633
S'trial_loop.thisTrialN'
p4634
I69
sg3632
S'7-olives.png'
p4635
sS'block_loop.thisIndex'
p4636
g3626
sg38
S'right'
p4637
sg58
g62
sS'trial_loop.thisN'
p4638
I69
sg33
g4298
sg63
g64
sS'trial_loop.thisIndex'
p4639
g59
(g98
S'E\x00\x00\x00'
tRp4640
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4641
I0
sg3641
S'22-daim.png'
p4642
sS'block_loop.thisRepN'
p4643
I1
sg3644
g4298
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4644
I1
sg3646
g4292
sg55
g11
sS'block_loop.thisTrial'
p4645
Nsg69
Vn
sS'block_loop.thisTrialN'
p4646
I0
sg39
F1.9501965475610632
sg34
g752
(S'\x07\xdf\t\x18\x0e;\x0e\r\x94\x90'
tRp4647
sa(dp4648
S'trial_loop.thisTrialN'
p4649
I70
sg3632
g3804
sS'block_loop.thisIndex'
p4650
g3626
sg38
S'right'
p4651
sg58
g62
sS'trial_loop.thisN'
p4652
I70
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p4653
g59
(g98
S'F\x00\x00\x00'
tRp4654
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4655
I0
sg3641
g3812
sS'block_loop.thisRepN'
p4656
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4657
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p4658
Nsg69
Vn
sS'block_loop.thisTrialN'
p4659
I0
sg39
F0.73344199423445389
sg34
g752
(S'\x07\xdf\t\x18\x0e;\x15\r/\x00'
tRp4660
sa(dp4661
S'trial_loop.thisTrialN'
p4662
I71
sg3632
S'5-pineapple.png'
p4663
sS'block_loop.thisIndex'
p4664
g3626
sg38
S'left'
p4665
sg58
g62
sS'trial_loop.thisN'
p4666
I71
sg33
g4622
sg63
g64
sS'trial_loop.thisIndex'
p4667
g59
(g98
S'G\x00\x00\x00'
tRp4668
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4669
I0
sg3641
S'40-sardines.png'
p4670
sS'block_loop.thisRepN'
p4671
I1
sg3644
g4622
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4672
I1
sg3646
g4629
sg55
g11
sS'block_loop.thisTrial'
p4673
Nsg69
Vn
sS'block_loop.thisTrialN'
p4674
I0
sg39
F1.3001715158279694
sg34
g752
(S'\x07\xdf\t\x18\x0e;\x1b\t\xb4`'
tRp4675
sa(dp4676
S'trial_loop.thisTrialN'
p4677
I72
sg3632
S'27-hartleys_raspberries_jelly.png'
p4678
sS'block_loop.thisIndex'
p4679
g3626
sg38
S'right'
p4680
sg58
g62
sS'trial_loop.thisN'
p4681
I72
sg33
g4019
sg63
g64
sS'trial_loop.thisIndex'
p4682
g59
(g98
S'H\x00\x00\x00'
tRp4683
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4684
I0
sg3641
S'51-mars.png'
p4685
sS'block_loop.thisRepN'
p4686
I1
sg3644
g4012
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4687
I1
sg3646
g4019
sg55
g11
sS'block_loop.thisTrial'
p4688
Nsg69
Vn
sS'block_loop.thisTrialN'
p4689
I0
sg39
F1.1668322144141712
sg34
g752
(S'\x07\xdf\t\x18\x0e;!\x0e\xc9('
tRp4690
sa(dp4691
S'trial_loop.thisTrialN'
p4692
I73
sg3632
g4534
sS'block_loop.thisIndex'
p4693
g3626
sg38
S'right'
p4694
sg58
g62
sS'trial_loop.thisN'
p4695
I73
sg33
g4545
sg63
g64
sS'trial_loop.thisIndex'
p4696
g59
(g98
S'I\x00\x00\x00'
tRp4697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4698
I0
sg3641
g4542
sS'block_loop.thisRepN'
p4699
I1
sg3644
g4538
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4700
I1
sg3646
g4545
sg55
g11
sS'block_loop.thisTrial'
p4701
Nsg69
Vn
sS'block_loop.thisTrialN'
p4702
I0
sg39
F0.99998603012863896
sg34
g752
(S'\x07\xdf\t\x18\x0e;(\x02x\xd0'
tRp4703
sa(dp4704
S'trial_loop.thisTrialN'
p4705
I74
sg3632
S'38-maltesers.png'
p4706
sS'block_loop.thisIndex'
p4707
g3626
sg38
S'left'
p4708
sg58
g62
sS'trial_loop.thisN'
p4709
I74
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4710
g59
(g98
S'J\x00\x00\x00'
tRp4711
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4712
I0
sg3641
S'6-sour_patch_kids.png'
p4713
sS'block_loop.thisRepN'
p4714
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4715
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p4716
Nsg69
Vn
sS'block_loop.thisTrialN'
p4717
I0
sg39
F1.0502493479798432
sg34
g752
(S'\x07\xdf\t\x18\x0e;.\x03\r@'
tRp4718
sa(dp4719
S'trial_loop.thisTrialN'
p4720
I75
sg3632
S'36-fig_rolls.png'
p4721
sS'block_loop.thisIndex'
p4722
g3626
sg38
S'left'
p4723
sg58
g62
sS'trial_loop.thisN'
p4724
I75
sg33
g3881
sg63
g64
sS'trial_loop.thisIndex'
p4725
g59
(g98
S'K\x00\x00\x00'
tRp4726
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4727
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p4728
sS'block_loop.thisRepN'
p4729
I1
sg3644
g3881
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4730
I1
sg3646
g3888
sg55
g11
sS'block_loop.thisTrial'
p4731
Nsg69
Vn
sS'block_loop.thisTrialN'
p4732
I0
sg39
F0.76689271251598257
sg34
g752
(S'\x07\xdf\t\x18\x0e;4\x04U`'
tRp4733
sa(dp4734
S'trial_loop.thisTrialN'
p4735
I76
sg3632
S'20-fruit_pastilles.png'
p4736
sS'block_loop.thisIndex'
p4737
g3626
sg38
S'right'
p4738
sg58
g62
sS'trial_loop.thisN'
p4739
I76
sg33
g3764
sg63
g64
sS'trial_loop.thisIndex'
p4740
g59
(g98
S'L\x00\x00\x00'
tRp4741
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4742
I0
sg3641
S'2-steamed_puddings.png'
p4743
sS'block_loop.thisRepN'
p4744
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4745
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p4746
Nsg69
Vn
sS'block_loop.thisTrialN'
p4747
I0
sg39
F0.85018993325138581
sg34
g752
(S'\x07\xdf\t\x18\x0e;:\x01S\xd8'
tRp4748
sa(dp4749
S'trial_loop.thisTrialN'
p4750
I77
sg3632
g4025
sS'block_loop.thisIndex'
p4751
g3626
sg38
S'right'
p4752
sg58
g62
sS'trial_loop.thisN'
p4753
I77
sg33
g4029
sg63
g64
sS'trial_loop.thisIndex'
p4754
g59
(g98
S'M\x00\x00\x00'
tRp4755
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4756
I0
sg3641
g4033
sS'block_loop.thisRepN'
p4757
I1
sg3644
g4029
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4758
I1
sg3646
g4036
sg55
g11
sS'block_loop.thisTrial'
p4759
Nsg69
Vn
sS'block_loop.thisTrialN'
p4760
I0
sg39
F0.88344678390421905
sg34
g752
(S'\x07\xdf\t\x18\x0f\x00\x03\x0e\xc5@'
tRp4761
sa(dp4762
S'trial_loop.thisTrialN'
p4763
I78
sg3632
g4320
sS'block_loop.thisIndex'
p4764
g3626
sg38
S'right'
p4765
sg58
g62
sS'trial_loop.thisN'
p4766
I78
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p4767
g59
(g98
S'N\x00\x00\x00'
tRp4768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4769
I0
sg3641
g4327
sS'block_loop.thisRepN'
p4770
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4771
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4772
Nsg69
Vn
sS'block_loop.thisTrialN'
p4773
I0
sg39
F0.93348743908791221
sg34
g752
(S'\x07\xdf\t\x18\x0f\x00\t\rm\x80'
tRp4774
sa(dp4775
S'trial_loop.thisTrialN'
p4776
I79
sg3632
g4618
sS'block_loop.thisIndex'
p4777
g3626
sg38
S'right'
p4778
sg58
g62
sS'trial_loop.thisN'
p4779
I79
sg33
g4629
sg63
g64
sS'trial_loop.thisIndex'
p4780
g59
(g98
S'O\x00\x00\x00'
tRp4781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4782
I0
sg3641
g4626
sS'block_loop.thisRepN'
p4783
I1
sg3644
g4622
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4784
I1
sg3646
g4629
sg55
g11
sS'block_loop.thisTrial'
p4785
Nsg69
Vn
sS'block_loop.thisTrialN'
p4786
I0
sg39
F0.91688837900437647
sg34
g752
(S'\x07\xdf\t\x18\x0f\x00\x0f\r\x0b\xd8'
tRp4787
sa(dp4788
S'trial_loop.thisTrialN'
p4789
I80
sg3632
g4736
sS'block_loop.thisIndex'
p4790
g3626
sg38
S'right'
p4791
sg58
g62
sS'trial_loop.thisN'
p4792
I80
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p4793
g59
(g98
S'P\x00\x00\x00'
tRp4794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4795
I0
sg3641
g4743
sS'block_loop.thisRepN'
p4796
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4797
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p4798
Nsg69
Vn
sS'block_loop.thisTrialN'
p4799
I0
sg39
F1.0172681884869235
sg34
g752
(S'\x07\xdf\t\x18\x0f\x00\x15\x0c1\x18'
tRp4800
sa(dp4801
S'trial_loop.thisTrialN'
p4802
I81
sg3632
g3687
sS'block_loop.thisIndex'
p4803
g3626
sg38
S'right'
p4804
sg58
g62
sS'trial_loop.thisN'
p4805
I81
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4806
g59
(g98
S'Q\x00\x00\x00'
tRp4807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4808
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4809
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4810
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p4811
Nsg69
Vn
sS'block_loop.thisTrialN'
p4812
I0
sg39
F1.3001954641840712
sg34
g752
(S'\x07\xdf\t\x18\x0f\x00\x1b\r\x00 '
tRp4813
sa(dp4814
S'trial_loop.thisTrialN'
p4815
I82
sg3632
g4068
sS'block_loop.thisIndex'
p4816
g3626
sg38
S'right'
p4817
sg58
g62
sS'trial_loop.thisN'
p4818
I82
sg33
g4072
sg63
g64
sS'trial_loop.thisIndex'
p4819
g59
(g98
S'R\x00\x00\x00'
tRp4820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4821
I0
sg3641
g4076
sS'block_loop.thisRepN'
p4822
I1
sg3644
g4072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4823
I1
sg3646
g4079
sg55
g11
sS'block_loop.thisTrial'
p4824
Nsg69
Vn
sS'block_loop.thisTrialN'
p4825
I0
sg39
F0.73344769622781314
sg34
g752
(S'\x07\xdf\t\x18\x0f\x00"\x02\xd2\xa8'
tRp4826
sa(dp4827
S'trial_loop.thisTrialN'
p4828
I83
sg3632
g4678
sS'block_loop.thisIndex'
p4829
g3626
sg38
S'right'
p4830
sg58
g62
sS'trial_loop.thisN'
p4831
I83
sg33
g4012
sg63
g64
sS'trial_loop.thisIndex'
p4832
g59
(g98
S'S\x00\x00\x00'
tRp4833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4834
I0
sg3641
g4685
sS'block_loop.thisRepN'
p4835
I1
sg3644
g4012
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4836
I1
sg3646
g4019
sg55
g11
sS'block_loop.thisTrial'
p4837
Nsg69
Vn
sS'block_loop.thisTrialN'
p4838
I0
sg39
F0.80020059597154614
sg34
g752
(S"\x07\xdf\t\x18\x0f\x00'\x0e\x9aH"
tRp4839
sa(dp4840
S'trial_loop.thisTrialN'
p4841
I84
sg3632
g4721
sS'block_loop.thisIndex'
p4842
g3626
sg38
S'left'
p4843
sg58
g62
sS'trial_loop.thisN'
p4844
I84
sg33
g3881
sg63
g64
sS'trial_loop.thisIndex'
p4845
g59
(g98
S'T\x00\x00\x00'
tRp4846
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4847
I0
sg3641
g4728
sS'block_loop.thisRepN'
p4848
I1
sg3644
g3881
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4849
I1
sg3646
g3888
sg55
g11
sS'block_loop.thisTrial'
p4850
Nsg69
Vn
sS'block_loop.thisTrialN'
p4851
I0
sg39
F0.76686990456073545
sg34
g752
(S'\x07\xdf\t\x18\x0f\x00-\x0c\x15\xc0'
tRp4852
sa(dp4853
S'trial_loop.thisTrialN'
p4854
I85
sg3632
g4590
sS'block_loop.thisIndex'
p4855
g3626
sg38
S'left'
p4856
sg58
g62
sS'trial_loop.thisN'
p4857
I85
sg33
g4538
sg63
g64
sS'trial_loop.thisIndex'
p4858
g59
(g98
S'U\x00\x00\x00'
tRp4859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4860
I0
sg3641
g4597
sS'block_loop.thisRepN'
p4861
I1
sg3644
g4538
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4862
I1
sg3646
g4545
sg55
g11
sS'block_loop.thisTrial'
p4863
Nsg69
Vn
sS'block_loop.thisTrialN'
p4864
I0
sg39
F1.1333276123368705
sg34
g752
(S'\x07\xdf\t\x18\x0f\x003\x08\xd5\xb8'
tRp4865
sa(dp4866
S'trial_loop.thisTrialN'
p4867
I86
sg3632
g4305
sS'block_loop.thisIndex'
p4868
g3626
sg38
S'left'
p4869
sg58
g62
sS'trial_loop.thisN'
p4870
I86
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p4871
g59
(g98
S'V\x00\x00\x00'
tRp4872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4873
I0
sg3641
g4312
sS'block_loop.thisRepN'
p4874
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4875
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p4876
Nsg69
Vn
sS'block_loop.thisTrialN'
p4877
I0
sg39
F1.0667862563823292
sg34
g752
(S'\x07\xdf\t\x18\x0f\x009\x0b\x8d\x08'
tRp4878
sa(dp4879
S'trial_loop.thisTrialN'
p4880
I87
sg3632
g3894
sS'block_loop.thisIndex'
p4881
g3626
sg38
S'left'
p4882
sg58
g62
sS'trial_loop.thisN'
p4883
I87
sg33
g3898
sg63
g64
sS'trial_loop.thisIndex'
p4884
g59
(g98
S'W\x00\x00\x00'
tRp4885
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4886
I0
sg3641
g3902
sS'block_loop.thisRepN'
p4887
I1
sg3644
g3898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4888
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p4889
Nsg69
Vn
sS'block_loop.thisTrialN'
p4890
I0
sg39
F4.9833809829542588
sg34
g752
(S'\x07\xdf\t\x18\x0f\x01\x03\r\x13\xa8'
tRp4891
sa(dp4892
S'trial_loop.thisTrialN'
p4893
I88
sg3632
g4025
sS'block_loop.thisIndex'
p4894
g3626
sg38
S'right'
p4895
sg58
g62
sS'trial_loop.thisN'
p4896
I88
sg33
g4029
sg63
g64
sS'trial_loop.thisIndex'
p4897
g59
(g98
S'X\x00\x00\x00'
tRp4898
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4899
I0
sg3641
g4033
sS'block_loop.thisRepN'
p4900
I1
sg3644
g4029
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4901
I1
sg3646
g4036
sg55
g11
sS'block_loop.thisTrial'
p4902
Nsg69
Vn
sS'block_loop.thisTrialN'
p4903
I0
sg39
F0.90010457447715453
sg34
g752
(S'\x07\xdf\t\x18\x0f\x01\r\rN@'
tRp4904
sa(dp4905
S'trial_loop.thisTrialN'
p4906
I89
sg3632
g3993
sS'block_loop.thisIndex'
p4907
g3626
sg38
S'right'
p4908
sg58
g62
sS'trial_loop.thisN'
p4909
I89
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4910
g59
(g98
S'Y\x00\x00\x00'
tRp4911
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4912
I0
sg3641
g4000
sS'block_loop.thisRepN'
p4913
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4914
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4915
Nsg69
Vn
sS'block_loop.thisTrialN'
p4916
I0
sg39
F0.98351526479382301
sg34
g752
(S'\x07\xdf\t\x18\x0f\x01\x13\x0c5\x00'
tRp4917
sa(dp4918
S'trial_loop.thisTrialN'
p4919
I90
sg3632
g4163
sS'block_loop.thisIndex'
p4920
g3626
sg38
S'left'
p4921
sg58
g62
sS'trial_loop.thisN'
p4922
I90
sg33
g4167
sg63
g64
sS'trial_loop.thisIndex'
p4923
g59
(g98
S'Z\x00\x00\x00'
tRp4924
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4925
I0
sg3641
g4171
sS'block_loop.thisRepN'
p4926
I1
sg3644
g4167
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4927
I1
sg3646
g4174
sg55
g11
sS'block_loop.thisTrial'
p4928
Nsg69
Vn
sS'block_loop.thisTrialN'
p4929
I0
sg39
F0.86685599170596106
sg34
g752
(S'\x07\xdf\t\x18\x0f\x01\x19\x0c\x87\x08'
tRp4930
sa(dp4931
S'trial_loop.thisTrialN'
p4932
I91
sg3632
g4320
sS'block_loop.thisIndex'
p4933
g3626
sg38
S'right'
p4934
sg58
g62
sS'trial_loop.thisN'
p4935
I91
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4936
g59
(g98
S'[\x00\x00\x00'
tRp4937
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4938
I0
sg3641
g4327
sS'block_loop.thisRepN'
p4939
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4940
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4941
Nsg69
Vn
sS'block_loop.thisTrialN'
p4942
I0
sg39
F1.5335299759244663
sg34
g752
(S'\x07\xdf\t\x18\x0f\x01\x1f\n\xf4\xb0'
tRp4943
sa(dp4944
S'trial_loop.thisTrialN'
p4945
I92
sg3632
g4163
sS'block_loop.thisIndex'
p4946
g3626
sg38
S'left'
p4947
sg58
g62
sS'trial_loop.thisN'
p4948
I92
sg33
g4167
sg63
g64
sS'trial_loop.thisIndex'
p4949
g59
(g98
S'\\\x00\x00\x00'
tRp4950
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4951
I0
sg3641
g4171
sS'block_loop.thisRepN'
p4952
I1
sg3644
g4167
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4953
I1
sg3646
g4174
sg55
g11
sS'block_loop.thisTrial'
p4954
Nsg69
Vn
sS'block_loop.thisTrialN'
p4955
I0
sg39
F0.68344039767907816
sg34
g752
(S'\x07\xdf\t\x18\x0f\x01&\x04]0'
tRp4956
sa(dp4957
S'trial_loop.thisTrialN'
p4958
I93
sg3632
g3653
sS'block_loop.thisIndex'
p4959
g3626
sg38
S'left'
p4960
sg58
g62
sS'trial_loop.thisN'
p4961
I93
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4962
g59
(g98
S']\x00\x00\x00'
tRp4963
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4964
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4965
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4966
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4967
Nsg69
Vn
sS'block_loop.thisTrialN'
p4968
I0
sg39
F1.1167744532649522
sg34
g752
(S'\x07\xdf\t\x18\x0f\x01+\x0f.\xb8'
tRp4969
sa(dp4970
S'trial_loop.thisTrialN'
p4971
I94
sg3632
g3952
sS'block_loop.thisIndex'
p4972
g3626
sg38
S'right'
p4973
sg58
g62
sS'trial_loop.thisN'
p4974
I94
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4975
g59
(g98
S'^\x00\x00\x00'
tRp4976
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4977
I0
sg3641
g3959
sS'block_loop.thisRepN'
p4978
I1
sg3644
g3774
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4979
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4980
Nsg69
Vn
sS'block_loop.thisTrialN'
p4981
I0
sg39
F1.1501068552715878
sg34
g752
(S'\x07\xdf\t\x18\x0f\x012\x02eH'
tRp4982
sa(dp4983
S'trial_loop.thisTrialN'
p4984
I95
sg3632
S'25-kitkat.png'
p4985
sS'block_loop.thisIndex'
p4986
g3626
sg38
S'right'
p4987
sg58
g62
sS'trial_loop.thisN'
p4988
I95
sg33
g4167
sg63
g64
sS'trial_loop.thisIndex'
p4989
g59
(g98
S'_\x00\x00\x00'
tRp4990
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4991
I0
sg3641
S'31-hobnobs.png'
p4992
sS'block_loop.thisRepN'
p4993
I1
sg3644
g4167
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4994
I1
sg3646
g4174
sg55
g11
sS'block_loop.thisTrial'
p4995
Nsg69
Vn
sS'block_loop.thisTrialN'
p4996
I0
sg39
F0.85017852927194326
sg34
g752
(S'\x07\xdf\t\x18\x0f\x018\x05\x1c\x98'
tRp4997
sa(dp4998
S'trial_loop.thisTrialN'
p4999
I96
sg3632
g3653
sS'block_loop.thisIndex'
p5000
g3626
sg38
S'left'
p5001
sg58
g62
sS'trial_loop.thisN'
p5002
I96
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5003
g59
(g98
S'`\x00\x00\x00'
tRp5004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5005
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5006
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5007
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5008
Nsg69
Vn
sS'block_loop.thisTrialN'
p5009
I0
sg39
F0.81677855869565974
sg34
g752
(S'\x07\xdf\t\x18\x0f\x02\x02\x03K\xc0'
tRp5010
sa(dp5011
S'trial_loop.thisTrialN'
p5012
I97
sg3632
g3687
sS'block_loop.thisIndex'
p5013
g3626
sg38
S'right'
p5014
sg58
g62
sS'trial_loop.thisN'
p5015
I97
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p5016
g59
(g98
S'a\x00\x00\x00'
tRp5017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5018
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5019
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5020
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p5021
Nsg69
Vn
sS'block_loop.thisTrialN'
p5022
I0
sg39
F1.5501264701160835
sg34
g752
(S'\x07\xdf\t\x18\x0f\x02\x08\x01\x01\xd0'
tRp5023
sa(dp5024
S'trial_loop.thisTrialN'
p5025
I98
sg3632
g4985
sS'block_loop.thisIndex'
p5026
g3626
sg38
S'right'
p5027
sg58
g62
sS'trial_loop.thisN'
p5028
I98
sg33
g4167
sg63
g64
sS'trial_loop.thisIndex'
p5029
g59
(g98
S'b\x00\x00\x00'
tRp5030
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5031
I0
sg3641
g4992
sS'block_loop.thisRepN'
p5032
I1
sg3644
g4167
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5033
I1
sg3646
g4174
sg55
g11
sS'block_loop.thisTrial'
p5034
Nsg69
Vn
sS'block_loop.thisTrialN'
p5035
I0
sg39
F1.4501078816283552
sg34
g752
(S'\x07\xdf\t\x18\x0f\x02\x0e\t\xe7('
tRp5036
sa(dp5037
S'trial_loop.thisTrialN'
p5038
I99
sg3632
g3633
sS'block_loop.thisIndex'
p5039
g3626
sg38
S'right'
p5040
sg58
g62
sS'trial_loop.thisN'
p5041
I99
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5042
g59
(g98
S'c\x00\x00\x00'
tRp5043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5044
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5045
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5046
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5047
Nsg69
Vn
sS'block_loop.thisTrialN'
p5048
I0
sg39
F0.80011563633888727
sg34
g752
(S'\x07\xdf\t\x18\x0f\x02\x15\x02\x1e\xf8'
tRp5049
sa(dp5050
S'trial_loop.thisTrialN'
p5051
I100
sg3632
g4163
sS'block_loop.thisIndex'
p5052
g3626
sg38
S'left'
p5053
sg58
g62
sS'trial_loop.thisN'
p5054
I100
sg33
g4167
sg63
g64
sS'trial_loop.thisIndex'
p5055
g59
(g98
S'd\x00\x00\x00'
tRp5056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5057
I0
sg3641
g4171
sS'block_loop.thisRepN'
p5058
I1
sg3644
g4167
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5059
I1
sg3646
g4174
sg55
g11
sS'block_loop.thisTrial'
p5060
Nsg69
Vn
sS'block_loop.thisTrialN'
p5061
I0
sg39
F1.1838897144116345
sg34
g752
(S'\x07\xdf\t\x18\x0f\x02\x1a\x0e\xdc\xb0'
tRp5062
sa(dp5063
S'trial_loop.thisTrialN'
p5064
I101
sg3632
g4618
sS'block_loop.thisIndex'
p5065
g3626
sg38
S'right'
p5066
sg58
g62
sS'trial_loop.thisN'
p5067
I101
sg33
g4622
sg63
g64
sS'trial_loop.thisIndex'
p5068
g59
(g98
S'e\x00\x00\x00'
tRp5069
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5070
I0
sg3641
g4626
sS'block_loop.thisRepN'
p5071
I1
sg3644
g4622
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5072
I1
sg3646
g4629
sg55
g11
sS'block_loop.thisTrial'
p5073
Nsg69
Vn
sS'block_loop.thisTrialN'
p5074
I0
sg39
F0.90021234206869849
sg34
g752
(S'\x07\xdf\t\x18\x0f\x02!\x02\xc6\xf0'
tRp5075
sa(dp5076
S'trial_loop.thisTrialN'
p5077
I102
sg3632
g3952
sS'block_loop.thisIndex'
p5078
g3626
sg38
S'right'
p5079
sg58
g62
sS'trial_loop.thisN'
p5080
I102
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p5081
g59
(g98
S'f\x00\x00\x00'
tRp5082
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5083
I0
sg3641
g3959
sS'block_loop.thisRepN'
p5084
I1
sg3644
g3774
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5085
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p5086
Nsg69
Vn
sS'block_loop.thisTrialN'
p5087
I0
sg39
F1.0835267257934902
sg34
g752
(S"\x07\xdf\t\x18\x0f\x02'\x01\xad\xb0"
tRp5088
sa(dp5089
S'trial_loop.thisTrialN'
p5090
I103
sg3632
g3821
sS'block_loop.thisIndex'
p5091
g3626
sg38
S'right'
p5092
sg58
g62
sS'trial_loop.thisN'
p5093
I103
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5094
g59
(g98
S'g\x00\x00\x00'
tRp5095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5096
I0
sg3641
g3829
sS'block_loop.thisRepN'
p5097
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5098
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p5099
Nsg69
Vn
sS'block_loop.thisTrialN'
p5100
I0
sg39
F0.93324624495289754
sg34
g752
(S'\x07\xdf\t\x18\x0f\x02-\x03\xadh'
tRp5101
sa(dp5102
S'trial_loop.thisTrialN'
p5103
I104
sg3632
g4305
sS'block_loop.thisIndex'
p5104
g3626
sg38
S'left'
p5105
sg58
g62
sS'trial_loop.thisN'
p5106
I104
sg33
g3798
sg63
g64
sS'trial_loop.thisIndex'
p5107
g59
(g98
S'h\x00\x00\x00'
tRp5108
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5109
I0
sg3641
g4312
sS'block_loop.thisRepN'
p5110
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5111
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p5112
Nsg69
Vn
sS'block_loop.thisTrialN'
p5113
I0
sg39
F0.9668811374795041
sg34
g752
(S'\x07\xdf\t\x18\x0f\x023\x03\r@'
tRp5114
sa(dp5115
S'trial_loop.thisTrialN'
p5116
I105
sg3632
g4467
sS'block_loop.thisIndex'
p5117
g3626
sg38
S'left'
p5118
sg58
g62
sS'trial_loop.thisN'
p5119
I105
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5120
g59
(g98
S'i\x00\x00\x00'
tRp5121
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5122
I0
sg3641
g4474
sS'block_loop.thisRepN'
p5123
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5124
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5125
Nsg69
Vn
sS'block_loop.thisTrialN'
p5126
I0
sg39
F1.0839615024488012
sg34
g752
(S'\x07\xdf\t\x18\x0f\x029\x03$\xb0'
tRp5127
sa(dp5128
S'trial_loop.thisTrialN'
p5129
I106
sg3632
g3670
sS'block_loop.thisIndex'
p5130
g3626
sg38
S'left'
p5131
sg58
g62
sS'trial_loop.thisN'
p5132
I106
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5133
g59
(g98
S'j\x00\x00\x00'
tRp5134
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5135
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5136
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5137
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5138
Nsg69
Vn
sS'block_loop.thisTrialN'
p5139
I0
sg39
F0.75021182888667681
sg34
g752
(S'\x07\xdf\t\x18\x0f\x03\x03\x04\xe9\xd0'
tRp5140
sa(dp5141
S'trial_loop.thisTrialN'
p5142
I107
sg3632
g3804
sS'block_loop.thisIndex'
p5143
g3626
sg38
S'right'
p5144
sg58
g62
sS'trial_loop.thisN'
p5145
I107
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p5146
g59
(g98
S'k\x00\x00\x00'
tRp5147
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5148
I0
sg3641
g3812
sS'block_loop.thisRepN'
p5149
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5150
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p5151
Nsg69
Vn
sS'block_loop.thisTrialN'
p5152
I0
sg39
F0.85010411831899546
sg34
g752
(S'\x07\xdf\t\x18\x0f\x03\t\x01o0'
tRp5153
sa(dp5154
S'trial_loop.thisTrialN'
p5155
I108
sg3632
g4534
sS'block_loop.thisIndex'
p5156
g3626
sg38
S'right'
p5157
sg58
g62
sS'trial_loop.thisN'
p5158
I108
sg33
g4545
sg63
g64
sS'trial_loop.thisIndex'
p5159
g59
(g98
S'l\x00\x00\x00'
tRp5160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5161
I0
sg3641
g4542
sS'block_loop.thisRepN'
p5162
I1
sg3644
g4538
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5163
I1
sg3646
g4545
sg55
g11
sS'block_loop.thisTrial'
p5164
Nsg69
Vn
sS'block_loop.thisTrialN'
p5165
I0
sg39
F0.81675090405042283
sg34
g752
(S'\x07\xdf\t\x18\x0f\x03\x0e\x0f\x1b0'
tRp5166
sa(dp5167
S'trial_loop.thisTrialN'
p5168
I109
sg3632
g4273
sS'block_loop.thisIndex'
p5169
g3626
sg38
S'left'
p5170
sg58
g62
sS'trial_loop.thisN'
p5171
I109
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p5172
g59
(g98
S'm\x00\x00\x00'
tRp5173
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5174
I0
sg3641
g4280
sS'block_loop.thisRepN'
p5175
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5176
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p5177
Nsg69
Vn
sS'block_loop.thisTrialN'
p5178
I0
sg39
F0.76677981313696364
sg34
g752
(S'\x07\xdf\t\x18\x0f\x03\x14\x0c\xd1@'
tRp5179
sa(dp5180
S'trial_loop.thisTrialN'
p5181
I110
sg3632
g3877
sS'block_loop.thisIndex'
p5182
g3626
sg38
S'right'
p5183
sg58
g62
sS'trial_loop.thisN'
p5184
I110
sg33
g3888
sg63
g64
sS'trial_loop.thisIndex'
p5185
g59
(g98
S'n\x00\x00\x00'
tRp5186
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5187
I0
sg3641
g3885
sS'block_loop.thisRepN'
p5188
I1
sg3644
g3881
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5189
I1
sg3646
g3888
sg55
g11
sS'block_loop.thisTrial'
p5190
Nsg69
Vn
sS'block_loop.thisTrialN'
p5191
I0
sg39
F0.76678608532165526
sg34
g752
(S'\x07\xdf\t\x18\x0f\x03\x1a\t\x95 '
tRp5192
sa(dp5193
S'trial_loop.thisTrialN'
p5194
I111
sg3632
g4305
sS'block_loop.thisIndex'
p5195
g3626
sg38
S'left'
p5196
sg58
g62
sS'trial_loop.thisN'
p5197
I111
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p5198
g59
(g98
S'o\x00\x00\x00'
tRp5199
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5200
I0
sg3641
g4312
sS'block_loop.thisRepN'
p5201
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5202
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p5203
Nsg69
Vn
sS'block_loop.thisTrialN'
p5204
I0
sg39
F1.2502203818730777
sg34
g752
(S'\x07\xdf\t\x18\x0f\x03 \x06\x93\x98'
tRp5205
sa(dp5206
S'trial_loop.thisTrialN'
p5207
I112
sg3632
g4706
sS'block_loop.thisIndex'
p5208
g3626
sg38
S'left'
p5209
sg58
g62
sS'trial_loop.thisN'
p5210
I112
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5211
g59
(g98
S'p\x00\x00\x00'
tRp5212
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5213
I0
sg3641
g4713
sS'block_loop.thisRepN'
p5214
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5215
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p5216
Nsg69
Vn
sS'block_loop.thisTrialN'
p5217
I0
sg39
F1.0665926738547569
sg34
g752
(S'\x07\xdf\t\x18\x0f\x03&\n\xf4\xb0'
tRp5218
sa(dp5219
S'trial_loop.thisTrialN'
p5220
I113
sg3632
g4590
sS'block_loop.thisIndex'
p5221
g3626
sg38
S'left'
p5222
sg58
g62
sS'trial_loop.thisN'
p5223
I113
sg33
g4545
sg63
g64
sS'trial_loop.thisIndex'
p5224
g59
(g98
S'q\x00\x00\x00'
tRp5225
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5226
I0
sg3641
g4597
sS'block_loop.thisRepN'
p5227
I1
sg3644
g4538
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5228
I1
sg3646
g4545
sg55
g11
sS'block_loop.thisTrial'
p5229
Nsg69
Vn
sS'block_loop.thisTrialN'
p5230
I0
sg39
F1.0167413247108925
sg34
g752
(S'\x07\xdf\t\x18\x0f\x03,\x0c{P'
tRp5231
sa(dp5232
S'trial_loop.thisTrialN'
p5233
I114
sg3632
g4635
sS'block_loop.thisIndex'
p5234
g3626
sg38
S'right'
p5235
sg58
g62
sS'trial_loop.thisN'
p5236
I114
sg33
g4298
sg63
g64
sS'trial_loop.thisIndex'
p5237
g59
(g98
S'r\x00\x00\x00'
tRp5238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5239
I0
sg3641
g4642
sS'block_loop.thisRepN'
p5240
I1
sg3644
g4298
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5241
I1
sg3646
g4292
sg55
g11
sS'block_loop.thisTrial'
p5242
Nsg69
Vn
sS'block_loop.thisTrialN'
p5243
I0
sg39
F1.3333875972602982
sg34
g752
(S'\x07\xdf\t\x18\x0f\x032\rFp'
tRp5244
sa(dp5245
S'trial_loop.thisTrialN'
p5246
I115
sg3632
g3877
sS'block_loop.thisIndex'
p5247
g3626
sg38
S'right'
p5248
sg58
g62
sS'trial_loop.thisN'
p5249
I115
sg33
g3881
sg63
g64
sS'trial_loop.thisIndex'
p5250
g59
(g98
S's\x00\x00\x00'
tRp5251
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5252
I0
sg3641
g3885
sS'block_loop.thisRepN'
p5253
I1
sg3644
g3881
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5254
I1
sg3646
g3888
sg55
g11
sS'block_loop.thisTrial'
p5255
Nsg69
Vn
sS'block_loop.thisTrialN'
p5256
I0
sg39
F1.0335237037397746
sg34
g752
(S'\x07\xdf\t\x18\x0f\x039\x03\x95\xf8'
tRp5257
sa(dp5258
S'trial_loop.thisTrialN'
p5259
I116
sg3632
g3633
sS'block_loop.thisIndex'
p5260
g3626
sg38
S'right'
p5261
sg58
g62
sS'trial_loop.thisN'
p5262
I116
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5263
g59
(g98
S't\x00\x00\x00'
tRp5264
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5265
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5266
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5267
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5268
Nsg69
Vn
sS'block_loop.thisTrialN'
p5269
I0
sg39
F1.1172243401961168
sg34
g752
(S'\x07\xdf\t\x18\x0f\x04\x03\x04\xa3\x80'
tRp5270
sa(dp5271
S'trial_loop.thisTrialN'
p5272
I117
sg3632
S'45-chewy_nougat_redo.png'
p5273
sS'block_loop.thisIndex'
p5274
g3626
sg38
S'left'
p5275
sg58
g62
sS'trial_loop.thisN'
p5276
I117
sg33
g3898
sg63
g64
sS'trial_loop.thisIndex'
p5277
g59
(g98
S'u\x00\x00\x00'
tRp5278
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5279
I0
sg3641
S'41-peanuts_redo.png'
p5280
sS'block_loop.thisRepN'
p5281
I1
sg3644
g3898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5282
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p5283
Nsg69
Vn
sS'block_loop.thisTrialN'
p5284
I0
sg39
F1.583422094292473
sg34
g752
(S'\x07\xdf\t\x18\x0f\x04\t\x06\xdd\xd0'
tRp5285
sa(dp5286
S'trial_loop.thisTrialN'
p5287
I118
sg3632
g4426
sS'block_loop.thisIndex'
p5288
g3626
sg38
S'left'
p5289
sg58
g62
sS'trial_loop.thisN'
p5290
I118
sg33
g4029
sg63
g64
sS'trial_loop.thisIndex'
p5291
g59
(g98
S'v\x00\x00\x00'
tRp5292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5293
I0
sg3641
g4433
sS'block_loop.thisRepN'
p5294
I1
sg3644
g4029
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5295
I1
sg3646
g4036
sg55
g11
sS'block_loop.thisTrial'
p5296
Nsg69
Vn
sS'block_loop.thisTrialN'
p5297
I0
sg39
F0.83341468170692679
sg34
g752
(S'\x07\xdf\t\x18\x0f\x04\x10\x00\xfd\xe8'
tRp5298
sa(dp5299
S'trial_loop.thisTrialN'
p5300
I119
sg3632
g3753
sS'block_loop.thisIndex'
p5301
g3626
sg38
S'left'
p5302
sg58
g62
sS'trial_loop.thisN'
p5303
I119
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p5304
g59
(g98
S'w\x00\x00\x00'
tRp5305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5306
I0
sg3641
g3761
sS'block_loop.thisRepN'
p5307
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5308
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p5309
Nsg69
Vn
sS'block_loop.thisTrialN'
p5310
I0
sg39
F0.78344900768206571
sg34
g752
(S'\x07\xdf\t\x18\x0f\x04\x15\x0e0\xd0'
tRp5311
sa(dp5312
S'trial_loop.thisTrialN'
p5313
I120
sg3632
S'48-twix.png'
p5314
sS'block_loop.thisIndex'
p5315
g3626
sg38
S'left'
p5316
sg58
g62
sS'trial_loop.thisN'
p5317
I120
sg33
g4072
sg63
g64
sS'trial_loop.thisIndex'
p5318
g59
(g98
S'x\x00\x00\x00'
tRp5319
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5320
I0
sg3641
S'50-polo.png'
p5321
sS'block_loop.thisRepN'
p5322
I1
sg3644
g4072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5323
I1
sg3646
g4079
sg55
g11
sS'block_loop.thisTrial'
p5324
Nsg69
Vn
sS'block_loop.thisTrialN'
p5325
I0
sg39
F1.1167781595577253
sg34
g752
(S'\x07\xdf\t\x18\x0f\x04\x1b\x0bm\xc8'
tRp5326
sa(dp5327
S'trial_loop.thisTrialN'
p5328
I121
sg3632
g4590
sS'block_loop.thisIndex'
p5329
g3626
sg38
S'left'
p5330
sg58
g62
sS'trial_loop.thisN'
p5331
I121
sg33
g4538
sg63
g64
sS'trial_loop.thisIndex'
p5332
g59
(g98
S'y\x00\x00\x00'
tRp5333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5334
I0
sg3641
g4597
sS'block_loop.thisRepN'
p5335
I1
sg3644
g4538
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5336
I1
sg3646
g4545
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vn
sS'block_loop.thisTrialN'
p5338
I0
sg39
F0.96714827566393069
sg34
g752
(S'\x07\xdf\t\x18\x0f\x04!\r\xa8\x18'
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g4635
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'right'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g4298
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g4642
sS'block_loop.thisRepN'
p5348
I1
sg3644
g4298
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g4292
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vn
sS'block_loop.thisTrialN'
p5351
I0
sg39
F1.1168500046187546
sg34
g752
(S"\x07\xdf\t\x18\x0f\x04'\r\xbf\x88"
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g4736
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'right'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g4743
sS'block_loop.thisRepN'
p5361
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vn
sS'block_loop.thisTrialN'
p5364
I0
sg39
F0.85012493057729444
sg34
g752
(S'\x07\xdf\t\x18\x0f\x04.\x00\xbb\x80'
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g3952
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'right'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g3959
sS'block_loop.thisRepN'
p5374
I1
sg3644
g3774
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vn
sS'block_loop.thisTrialN'
p5377
I0
sg39
F0.86679669102159096
sg34
g752
(S'\x07\xdf\t\x18\x0f\x043\x0e,\xe8'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g4721
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'left'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g3888
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g4728
sS'block_loop.thisRepN'
p5387
I1
sg3644
g3881
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g3888
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vn
sS'block_loop.thisTrialN'
p5390
I0
sg39
F0.86682833706072415
sg34
g752
(S'\x07\xdf\t\x18\x0f\x049\x0c\x9a\x90'
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g4288
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'left'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g4298
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g4296
sS'block_loop.thisRepN'
p5400
I1
sg3644
g4298
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g4292
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vn
sS'block_loop.thisTrialN'
p5403
I0
sg39
F0.85010240772317047
sg34
g752
(S'\x07\xdf\t\x18\x0f\x05\x03\x0bB\xd0'
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g4273
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'left'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g3815
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g4280
sS'block_loop.thisRepN'
p5413
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vn
sS'block_loop.thisTrialN'
p5416
I0
sg39
F0.68360461496195057
sg34
g752
(S'\x07\xdf\t\x18\x0f\x05\t\tq\xf8'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g3738
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'left'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g3745
sS'block_loop.thisRepN'
p5426
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vn
sS'block_loop.thisTrialN'
p5429
I0
sg39
F1.2001087369317247
sg34
g752
(S'\x07\xdf\t\x18\x0f\x05\x0f\x05\x05('
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g3993
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'right'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g4000
sS'block_loop.thisRepN'
p5439
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vn
sS'block_loop.thisTrialN'
p5442
I0
sg39
F0.983532655860472
sg34
g752
(S'\x07\xdf\t\x18\x0f\x05\x15\x08\xae\xa8'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g3770
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'left'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g3778
sS'block_loop.thisRepN'
p5452
I1
sg3644
g3774
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vn
sS'block_loop.thisTrialN'
p5455
I0
sg39
F1.3835323137427622
sg34
g752
(S'\x07\xdf\t\x18\x0f\x05\x1b\x08\xc6\x18'
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g4008
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'left'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g4019
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g4016
sS'block_loop.thisRepN'
p5465
I1
sg3644
g4012
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g4019
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vn
sS'block_loop.thisTrialN'
p5468
I0
sg39
F0.81676801001594868
sg34
g752
(S'\x07\xdf\t\x18\x0f\x05"\x00\x07\xd0'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g4706
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'left'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g3832
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g4713
sS'block_loop.thisRepN'
p5478
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vn
sS'block_loop.thisTrialN'
p5481
I0
sg39
F1.1669582283684576
sg34
g752
(S"\x07\xdf\t\x18\x0f\x05'\r\x00 "
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g4320
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'right'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g4327
sS'block_loop.thisRepN'
p5491
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vn
sS'block_loop.thisTrialN'
p5494
I0
sg39
F0.85025579122520867
sg34
g752
(S'\x07\xdf\t\x18\x0f\x05.\x00\xaf\xc8'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g3687
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'right'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5504
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vn
sS'block_loop.thisTrialN'
p5507
I0
sg39
F1.0834146817105648
sg34
g752
(S'\x07\xdf\t\x18\x0f\x053\x0e%\x18'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g4721
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'left'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g3888
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g4728
sS'block_loop.thisRepN'
p5517
I1
sg3644
g3881
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g3888
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vn
sS'block_loop.thisTrialN'
p5520
I0
sg39
F0.86687053177956841
sg34
g752
(S'\x07\xdf\t\x18\x0f\x05:\x00\xa4\x10'
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g4985
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'right'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g4167
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g4992
sS'block_loop.thisRepN'
p5530
I1
sg3644
g4167
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g4174
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vn
sS'block_loop.thisTrialN'
p5533
I0
sg39
F0.98345282801528811
sg34
g752
(S'\x07\xdf\t\x18\x0f\x06\x03\x0e\x8e\x90'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g4320
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'right'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g4327
sS'block_loop.thisRepN'
p5543
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F0.8335312873859948
sg34
g752
(S'\x07\xdf\t\x18\x0f\x06\t\x0e\xa6\x00'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g3894
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'right'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g3898
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g3902
sS'block_loop.thisRepN'
p5556
I1
sg3644
g3898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F0.96686916330145323
sg34
g752
(S'\x07\xdf\t\x18\x0f\x06\x0f\x0c\x9a\x90'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g3877
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'right'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g3888
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g3885
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3881
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g3888
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F0.81690628324940917
sg34
g752
(S'\x07\xdf\t\x18\x0f\x06\x15\x0c\xb2\x00'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g5314
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'left'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g4072
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g5321
sS'block_loop.thisRepN'
p5582
I1
sg3644
g4072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g4079
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F1.0668791988027806
sg34
g752
(S'\x07\xdf\t\x18\x0f\x06\x1b\nh\x10'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g3911
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'right'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g3918
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F0.73353094526464702
sg34
g752
(S'\x07\xdf\t\x18\x0f\x06!\x0b\xee\xb0'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g4163
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'left'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g4167
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g4171
sS'block_loop.thisRepN'
p5608
I1
sg3644
g4167
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g4174
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.91675124616813264
sg34
g752
(S"\x07\xdf\t\x18\x0f\x06'\x08t\x10"
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g3821
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'right'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g3829
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F0.84983897583151702
sg34
g752
(S'\x07\xdf\t\x18\x0f\x06-\x07\x95h'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g4305
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'left'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g4312
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F1.0006146744090074
sg34
g752
(S'\x07\xdf\t\x18\x0f\x063\x05\xc4\x90'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g4985
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'right'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g4167
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g4992
sS'block_loop.thisRepN'
p5647
I1
sg3644
g4167
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g4174
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F0.83345801682662568
sg34
g752
(S'\x07\xdf\t\x18\x0f\x069\x06Y\x00'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g5314
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'left'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g4079
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g5321
sS'block_loop.thisRepN'
p5660
I1
sg3644
g4072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g4079
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F0.71687115899476339
sg34
g752
(S'\x07\xdf\t\x18\x0f\x07\x03\x04I\xa8'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g4426
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'left'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g4029
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g4433
sS'block_loop.thisRepN'
p5673
I1
sg3644
g4029
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g4036
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.73352210718439892
sg34
g752
(S'\x07\xdf\t\x18\x0f\x07\t\x00\x94p'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g4736
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'right'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g4743
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F0.91681425314527587
sg34
g752
(S'\x07\xdf\t\x18\x0f\x07\x0e\x0c\x1d\x90'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g4008
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'left'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g4012
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g4016
sS'block_loop.thisRepN'
p5699
I1
sg3644
g4012
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g4019
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.71679019075600081
sg34
g752
(S'\x07\xdf\t\x18\x0f\x07\x14\x0b}h'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g4288
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'left'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g4298
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g4296
sS'block_loop.thisRepN'
p5712
I1
sg3644
g4298
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g4292
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F1.8172495429862465
sg34
g752
(S'\x07\xdf\t\x18\x0f\x07\x1a\x07\x89\xb0'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g3704
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'right'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F1.1668133978491824
sg34
g752
(S'\x07\xdf\t\x18\x0f\x07!\x057\xf0'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g4025
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'right'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g4029
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g4033
sS'block_loop.thisRepN'
p5738
I1
sg3644
g4029
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g4036
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F0.91686414555078954
sg34
g752
(S"\x07\xdf\t\x18\x0f\x07'\x08hX"
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g3911
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'right'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g3918
sS'block_loop.thisRepN'
p5751
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F1.916798857775575
sg34
g752
(S'\x07\xdf\t\x18\x0f\x07-\x07\x8d\x98'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g3670
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'left'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5764
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F0.86676133868968464
sg34
g752
(S'\x07\xdf\t\x18\x0f\x074\x06\xe5\xa0'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g3787
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'right'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g3795
sS'block_loop.thisRepN'
p5777
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F0.98356458700072835
sg34
g752
(S'\x07\xdf\t\x18\x0f\x07:\x05SH'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g4635
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'right'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g4298
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g4642
sS'block_loop.thisRepN'
p5790
I1
sg3644
g4298
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g4292
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F1.0501033770597132
sg34
g752
(S'\x07\xdf\t\x18\x0f\x08\x04\x05\xa98'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g4426
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'left'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g4029
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g4433
sS'block_loop.thisRepN'
p5803
I1
sg3644
g4029
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g4036
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F0.75020327590755187
sg34
g752
(S'\x07\xdf\t\x18\x0f\x08\n\x06\xf1X'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g4663
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'left'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g4622
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g4670
sS'block_loop.thisRepN'
p5816
I1
sg3644
g4622
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g4629
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F1.3668582725040324
sg34
g752
(S'\x07\xdf\t\x18\x0f\x08\x10\x03v\xb8'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g4635
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'right'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g4298
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g4642
sS'block_loop.thisRepN'
p5829
I1
sg3644
g4298
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g4292
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F0.86677616386077716
sg34
g752
(S'\x07\xdf\t\x18\x0f\x08\x16\t\xc0\x18'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g5273
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'left'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3898
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g5280
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F1.1835059705517779
sg34
g752
(S'\x07\xdf\t\x18\x0f\x08\x1c\x08)\xd8'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g3721
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'left'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F1.0502043022643193
sg34
g752
(S'\x07\xdf\t\x18\x0f\x08"\x0bZ@'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g5273
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'left'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3898
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g5280
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F1.6168337539493223
sg34
g752
(S'\x07\xdf\t\x18\x0f\x08(\x0c\xa2`'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g4273
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'left'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g4280
sS'block_loop.thisRepN'
p5881
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F0.91682451672750176
sg34
g752
(S'\x07\xdf\t\x18\x0f\x08/\x07;\x90'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g3911
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'right'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g3918
sS'block_loop.thisRepN'
p5894
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F1.2168623209145153
sg34
g752
(S'\x07\xdf\t\x18\x0f\x085\x06\x9bh'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g4467
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'left'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g4474
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F1.033527695130033
sg34
g752
(S'\x07\xdf\t\x18\x0f\x08;\nD\xe8'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g5314
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'left'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g4072
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g5321
sS'block_loop.thisRepN'
p5920
I1
sg3644
g4072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g4079
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F0.88352803725138074
sg34
g752
(S'\x07\xdf\t\x18\x0f\t\x05\x0bN\x88'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g4663
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'left'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g4622
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g4670
sS'block_loop.thisRepN'
p5933
I1
sg3644
g4622
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g4629
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F1.1834660566310049
sg34
g752
(S'\x07\xdf\t\x18\x0f\t\x0b\n5H'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g4467
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g4474
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F0.71682896427955711
sg34
g752
(S'\x07\xdf\t\x18\x0f\t\x11\re\xb0'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g4426
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'left'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g4029
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g4433
sS'block_loop.thisRepN'
p5959
I1
sg3644
g4029
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g4036
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.91675466736342059
sg34
g752
(S'\x07\xdf\t\x18\x0f\t\x17\t\xb0x'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g3894
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'right'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g3898
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g3902
sS'block_loop.thisRepN'
p5972
I1
sg3644
g3898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F1.0334740964353841
sg34
g752
(S'\x07\xdf\t\x18\x0f\t\x1d\x08\xd1\xd0'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g4678
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'right'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g4012
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g4685
sS'block_loop.thisRepN'
p5985
I1
sg3644
g4012
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g4019
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F1.0168163058624486
sg34
g752
(S'\x07\xdf\t\x18\x0f\t#\t\xdfX'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g4985
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'right'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g4167
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g4992
sS'block_loop.thisRepN'
p5998
I1
sg3644
g4167
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g4174
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F1.1834643460315419
sg34
g752
(S'\x07\xdf\t\x18\x0f\t)\n\xaax'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g4618
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'right'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g4622
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g4626
sS'block_loop.thisRepN'
p6011
I1
sg3644
g4622
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g4629
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F0.85011865838896483
sg34
g752
(S'\x07\xdf\t\x18\x0f\t/\r\xda\xe0'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g4678
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'right'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g4012
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g4685
sS'block_loop.thisRepN'
p6024
I1
sg3644
g4012
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g4019
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F1.0335160060531052
sg34
g752
(S'\x07\xdf\t\x18\x0f\t5\x0c\n\x08'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g4467
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'left'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g4474
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F1.3505437416679342
sg34
g752
(S'\x07\xdf\t\x18\x0f\t;\r\x17\x90'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g4706
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'left'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g4713
sS'block_loop.thisRepN'
p6050
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F0.9166106921438768
sg34
g752
(S'\x07\xdf\t\x18\x0f\n\x06\x03\xe00'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g4663
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'left'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g4622
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g4670
sS'block_loop.thisRepN'
p6063
I1
sg3644
g4622
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g4629
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F1.3834208398584451
sg34
g752
(S'\x07\xdf\t\x18\x0f\n\x0c\x03\x05p'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g3993
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g4000
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F0.75022408816585084
sg34
g752
(S'\x07\xdf\t\x18\x0f\n\x12\tJ\xe8'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g3770
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'left'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g3778
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3774
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F0.96673317086242605
sg34
g752
(S'\x07\xdf\t\x18\x0f\n\x18\x06\x0e\xc8'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g4706
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'left'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g4713
sS'block_loop.thisRepN'
p6102
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.76656969483883586
sg34
g752
(S'\x07\xdf\t\x18\x0f\n\x1e\x06&8'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g4736
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'right'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g4743
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F0.86674565821886063
sg34
g752
(S'\x07\xdf\t\x18\x0f\n$\x02\xe60'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g4534
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'right'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g4538
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g4542
sS'block_loop.thisRepN'
p6128
I1
sg3644
g4538
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g4545
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F1.0833166074990004
sg34
g752
(S'\x07\xdf\t\x18\x0f\n*\x01\x92X'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g4618
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'right'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g4622
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g4626
sS'block_loop.thisRepN'
p6141
I1
sg3644
g4622
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g4629
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.96687201429813285
sg34
g752
(S'\x07\xdf\t\x18\x0f\n0\x03S\x90'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g4534
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'right'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g4538
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g4542
sS'block_loop.thisRepN'
p6154
I1
sg3644
g4538
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g4545
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F0.95000239483488258
sg34
g752
(S'\x07\xdf\t\x18\x0f\n6\x03,\x80'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g5273
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'left'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g3898
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g5280
sS'block_loop.thisRepN'
p6167
I1
sg3644
g3898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F1.3168144812261744
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0b\x00\x03\tX'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g3753
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'left'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g3761
sS'block_loop.thisRepN'
p6180
I1
sg3644
g3757
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F1.0835518145431706
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0b\x06\x08\\\xa0'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g4025
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'right'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g4029
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g4033
sS'block_loop.thisRepN'
p6193
I1
sg3644
g4029
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g4036
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F0.88349838690919569
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0b\x0c\n\x1d\xd8'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g3633
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'right'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g3642
sS'block_loop.thisRepN'
p6206
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F0.95020823663799092
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0b\x12\x08\xca\x00'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g3670
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'left'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g3678
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F0.96662853936504689
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0b\x18\x08\xa2\xf0'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g3687
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'right'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g3695
sS'block_loop.thisRepN'
p6232
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F1.200549215580395
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0b\x1e\x08{\xe0'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g5314
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'left'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g4072
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g5321
sS'block_loop.thisRepN'
p6245
I1
sg3644
g4072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g4079
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F0.98338468924703193
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0b$\x0c%`'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g4721
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'left'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3881
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g4728
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3881
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g3888
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F1.4002015082878643
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0b*\x0c{P'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g4678
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'right'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g4012
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g4685
sS'block_loop.thisRepN'
p6271
I1
sg3644
g4012
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g4019
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F1.050125614816352
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0b1\x03\xbd\x08'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g3653
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'left'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g3661
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F1.0667782735981746
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0b7\x05\x05('
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g4206
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'left'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g4213
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F0.90025966857865569
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0c\x01\x06\x8b\xc8'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g4590
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'left'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g4545
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g4597
sS'block_loop.thisRepN'
p6310
I1
sg3644
g4538
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g4545
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F0.81670813913297025
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0c\x07\x05r\x88'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g4288
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'left'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g4298
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g4296
sS'block_loop.thisRepN'
p6323
I1
sg3644
g4298
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g4292
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F0.71675227252853801
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0c\r\x03(\x98'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4663
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'left'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g4629
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4670
sS'block_loop.thisRepN'
p6336
I1
sg3644
g4622
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g4629
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F1.2000984733494988
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0c\x12\x0e\xb1\xb8'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g5273
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'left'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3898
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g5280
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.1334094358790026
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0c\x19\x02\xde`'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F116.61408111877608
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'21-nakd_banana_crunch.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'right'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'1-treacle_cookies.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'1-treacle_cookies.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'21-nakd_banana_crunch.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F0.80009339858224848
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0e!\x006\xb0'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'8-liquorice_catherine_wheels.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'right'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6401
I2
sg6384
S'8-liquorice_catherine_wheels.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F0.93352450201564352
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0e&\x0c\xf4h'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'19-caramello_redo.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'left'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'19-caramello_redo.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'30-spaghetti_hoops.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6418
I2
sg6384
S'30-spaghetti_hoops.png'
p6419
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.9334535122543457
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0e,\x0cT@'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'49-yorkie.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'left'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'49-yorkie.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'35-raisins.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6435
I2
sg6384
S'35-raisins.png'
p6436
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vn
sS'block_loop.thisTrialN'
p6438
I0
sg39
F1.0668532547533687
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0e2\x0b\xf2\x98'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'41-peanuts_redo.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'right'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'45-chewy_nougat_redo.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'45-chewy_nougat_redo.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6452
I2
sg6384
S'41-peanuts_redo.png'
p6453
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vn
sS'block_loop.thisTrialN'
p6455
I0
sg39
F1.033525984534208
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0e8\ruP'
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
S'16-skips_prawn.png'
p6459
sS'block_loop.thisIndex'
p6460
g6364
sg38
S'right'
p6461
sg58
g62
sS'trial_loop.thisN'
p6462
I5
sg33
S'42-mrkipling_lemon_slices.png'
p6463
sg63
g64
sS'trial_loop.thisIndex'
p6464
g59
(g98
S'\x05\x00\x00\x00'
tRp6465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6466
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6469
I2
sg6384
S'16-skips_prawn.png'
p6470
sg55
g11
sS'block_loop.thisTrial'
p6471
Nsg69
Vn
sS'block_loop.thisTrialN'
p6472
I0
sg39
F0.78343218681402504
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0f\x02\x0e\x82\xd8'
tRp6473
sa(dp6474
S'trial_loop.thisTrialN'
p6475
I6
sg6370
S'22-daim.png'
p6476
sS'block_loop.thisIndex'
p6477
g6364
sg38
S'left'
p6478
sg58
g62
sS'trial_loop.thisN'
p6479
I6
sg33
S'22-daim.png'
p6480
sg63
g64
sS'trial_loop.thisIndex'
p6481
g59
(g98
S'\x06\x00\x00\x00'
tRp6482
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6483
I0
sg6379
S'7-olives.png'
p6484
sS'block_loop.thisRepN'
p6485
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6486
I2
sg6384
S'7-olives.png'
p6487
sg55
g11
sS'block_loop.thisTrial'
p6488
Nsg69
Vn
sS'block_loop.thisTrialN'
p6489
I0
sg39
F0.91685758826497477
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0f\x08\x0b\x81P'
tRp6490
sa(dp6491
S'trial_loop.thisTrialN'
p6492
I7
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6493
sS'block_loop.thisIndex'
p6494
g6364
sg38
S'right'
p6495
sg58
g62
sS'trial_loop.thisN'
p6496
I7
sg33
S'18-mms.png'
p6497
sg63
g64
sS'trial_loop.thisIndex'
p6498
g59
(g98
S'\x07\x00\x00\x00'
tRp6499
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6500
I0
sg6379
S'18-mms.png'
p6501
sS'block_loop.thisRepN'
p6502
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6503
I2
sg6384
S'43-mrporky_pork_crackles_redo.png'
p6504
sg55
g11
sS'block_loop.thisTrial'
p6505
Nsg69
Vn
sS'block_loop.thisTrialN'
p6506
I0
sg39
F0.76688301913236501
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0f\x0e\n\xe1('
tRp6507
sa(dp6508
S'trial_loop.thisTrialN'
p6509
I8
sg6370
S'23-crunchie_redo.png'
p6510
sS'block_loop.thisIndex'
p6511
g6364
sg38
S'left'
p6512
sg58
g62
sS'trial_loop.thisN'
p6513
I8
sg33
S'33-ambrosia_rice.png'
p6514
sg63
g64
sS'trial_loop.thisIndex'
p6515
g59
(g98
S'\x08\x00\x00\x00'
tRp6516
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6517
I0
sg6379
S'33-ambrosia_rice.png'
p6518
sS'block_loop.thisRepN'
p6519
I2
sg6382
S'23-crunchie_redo.png'
p6520
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6521
I2
sg6384
g6514
sg55
g11
sS'block_loop.thisTrial'
p6522
Nsg69
Vn
sS'block_loop.thisTrialN'
p6523
I0
sg39
F0.75021268419004628
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0f\x14\x07\xdf\xa0'
tRp6524
sa(dp6525
S'trial_loop.thisTrialN'
p6526
I9
sg6370
S'46-pistachios.png'
p6527
sS'block_loop.thisIndex'
p6528
g6364
sg38
S'left'
p6529
sg58
g62
sS'trial_loop.thisN'
p6530
I9
sg33
S'46-pistachios.png'
p6531
sg63
g64
sS'trial_loop.thisIndex'
p6532
g59
(g98
S'\t\x00\x00\x00'
tRp6533
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6534
I0
sg6379
S'29-beans.png'
p6535
sS'block_loop.thisRepN'
p6536
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6537
I2
sg6384
S'29-beans.png'
p6538
sg55
g11
sS'block_loop.thisTrial'
p6539
Nsg69
Vn
sS'block_loop.thisTrialN'
p6540
I0
sg39
F0.71677707618073327
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0f\x1a\x04e\x00'
tRp6541
sa(dp6542
S'trial_loop.thisTrialN'
p6543
I10
sg6370
S'42-mrkipling_lemon_slices.png'
p6544
sS'block_loop.thisIndex'
p6545
g6364
sg38
S'left'
p6546
sg58
g62
sS'trial_loop.thisN'
p6547
I10
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p6548
g59
(g98
S'\n\x00\x00\x00'
tRp6549
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6550
I0
sg6379
S'16-skips_prawn.png'
p6551
sS'block_loop.thisRepN'
p6552
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6553
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p6554
Nsg69
Vn
sS'block_loop.thisTrialN'
p6555
I0
sg39
F0.76676783895891276
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0f \x00\xaf\xc8'
tRp6556
sa(dp6557
S'trial_loop.thisTrialN'
p6558
I11
sg6370
S'35-raisins.png'
p6559
sS'block_loop.thisIndex'
p6560
g6364
sg38
S'right'
p6561
sg58
g62
sS'trial_loop.thisN'
p6562
I11
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6563
g59
(g98
S'\x0b\x00\x00\x00'
tRp6564
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6565
I0
sg6379
S'49-yorkie.png'
p6566
sS'block_loop.thisRepN'
p6567
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6568
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p6569
Nsg69
Vn
sS'block_loop.thisTrialN'
p6570
I0
sg39
F0.83344290655441
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0f%\x0c\xf0\x80'
tRp6571
sa(dp6572
S'trial_loop.thisTrialN'
p6573
I12
sg6370
S'44-crunch.png'
p6574
sS'block_loop.thisIndex'
p6575
g6364
sg38
S'left'
p6576
sg58
g62
sS'trial_loop.thisN'
p6577
I12
sg33
S'44-crunch.png'
p6578
sg63
g64
sS'trial_loop.thisIndex'
p6579
g59
(g98
S'\x0c\x00\x00\x00'
tRp6580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6581
I0
sg6379
S'26-walkers_smoky_bacon.png'
p6582
sS'block_loop.thisRepN'
p6583
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6584
I2
sg6384
S'26-walkers_smoky_bacon.png'
p6585
sg55
g11
sS'block_loop.thisTrial'
p6586
Nsg69
Vn
sS'block_loop.thisTrialN'
p6587
I0
sg39
F0.76689499331041588
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0f+\n\xe5\x10'
tRp6588
sa(dp6589
S'trial_loop.thisTrialN'
p6590
I13
sg6370
S'2-steamed_puddings.png'
p6591
sS'block_loop.thisIndex'
p6592
g6364
sg38
S'left'
p6593
sg58
g62
sS'trial_loop.thisN'
p6594
I13
sg33
S'2-steamed_puddings.png'
p6595
sg63
g64
sS'trial_loop.thisIndex'
p6596
g59
(g98
S'\r\x00\x00\x00'
tRp6597
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6598
I0
sg6379
S'20-fruit_pastilles.png'
p6599
sS'block_loop.thisRepN'
p6600
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6601
I2
sg6384
S'20-fruit_pastilles.png'
p6602
sg55
g11
sS'block_loop.thisTrial'
p6603
Nsg69
Vn
sS'block_loop.thisTrialN'
p6604
I0
sg39
F1.116789848634653
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0f1\x07\xe3\x88'
tRp6605
sa(dp6606
S'trial_loop.thisTrialN'
p6607
I14
sg6370
g6442
sS'block_loop.thisIndex'
p6608
g6364
sg38
S'right'
p6609
sg58
g62
sS'trial_loop.thisN'
p6610
I14
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p6611
g59
(g98
S'\x0e\x00\x00\x00'
tRp6612
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6613
I0
sg6379
g6450
sS'block_loop.thisRepN'
p6614
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6615
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6616
Nsg69
Vn
sS'block_loop.thisTrialN'
p6617
I0
sg39
F1.4001040042785462
sg34
g752
(S'\x07\xdf\t\x18\x0f\x0f7\n\x1d\xd8'
tRp6618
sa(dp6619
S'trial_loop.thisTrialN'
p6620
I15
sg6370
S'18-mms.png'
p6621
sS'block_loop.thisIndex'
p6622
g6364
sg38
S'left'
p6623
sg58
g62
sS'trial_loop.thisN'
p6624
I15
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p6625
g59
(g98
S'\x0f\x00\x00\x00'
tRp6626
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6627
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p6628
sS'block_loop.thisRepN'
p6629
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6630
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p6631
Nsg69
Vn
sS'block_loop.thisTrialN'
p6632
I0
sg39
F1.050560391475301
sg34
g752
(S'\x07\xdf\t\x18\x0f\x10\x02\x01cx'
tRp6633
sa(dp6634
S'trial_loop.thisTrialN'
p6635
I16
sg6370
S'26-walkers_smoky_bacon.png'
p6636
sS'block_loop.thisIndex'
p6637
g6364
sg38
S'right'
p6638
sg58
g62
sS'trial_loop.thisN'
p6639
I16
sg33
g6578
sg63
g64
sS'trial_loop.thisIndex'
p6640
g59
(g98
S'\x10\x00\x00\x00'
tRp6641
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6642
I0
sg6379
S'44-crunch.png'
p6643
sS'block_loop.thisRepN'
p6644
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6645
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p6646
Nsg69
Vn
sS'block_loop.thisTrialN'
p6647
I0
sg39
F0.81686266303586308
sg34
g752
(S'\x07\xdf\t\x18\x0f\x10\x08\x02\xab\x98'
tRp6648
sa(dp6649
S'trial_loop.thisTrialN'
p6650
I17
sg6370
S'29-beans.png'
p6651
sS'block_loop.thisIndex'
p6652
g6364
sg38
S'right'
p6653
sg58
g62
sS'trial_loop.thisN'
p6654
I17
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p6655
g59
(g98
S'\x11\x00\x00\x00'
tRp6656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6657
I0
sg6379
S'46-pistachios.png'
p6658
sS'block_loop.thisRepN'
p6659
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6660
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p6661
Nsg69
Vn
sS'block_loop.thisTrialN'
p6662
I0
sg39
F0.68343754668603651
sg34
g752
(S'\x07\xdf\t\x18\x0f\x10\x0e\x00a\xa8'
tRp6663
sa(dp6664
S'trial_loop.thisTrialN'
p6665
I18
sg6370
S'1-treacle_cookies.png'
p6666
sS'block_loop.thisIndex'
p6667
g6364
sg38
S'left'
p6668
sg58
g62
sS'trial_loop.thisN'
p6669
I18
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6670
g59
(g98
S'\x12\x00\x00\x00'
tRp6671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6672
I0
sg6379
S'21-nakd_banana_crunch.png'
p6673
sS'block_loop.thisRepN'
p6674
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6675
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6676
Nsg69
Vn
sS'block_loop.thisTrialN'
p6677
I0
sg39
F0.86686311919038417
sg34
g752
(S'\x07\xdf\t\x18\x0f\x10\x13\x0bq\xb0'
tRp6678
sa(dp6679
S'trial_loop.thisTrialN'
p6680
I19
sg6370
S'3-ellas_strawberries_apples.png'
p6681
sS'block_loop.thisIndex'
p6682
g6364
sg38
S'left'
p6683
sg58
g62
sS'trial_loop.thisN'
p6684
I19
sg33
S'3-ellas_strawberries_apples.png'
p6685
sg63
g64
sS'trial_loop.thisIndex'
p6686
g59
(g98
S'\x13\x00\x00\x00'
tRp6687
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6688
I0
sg6379
S'13-mccoys_steak_crisps.png'
p6689
sS'block_loop.thisRepN'
p6690
I2
sg6382
g6685
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6691
I2
sg6384
S'13-mccoys_steak_crisps.png'
p6692
sg55
g11
sS'block_loop.thisTrial'
p6693
Nsg69
Vn
sS'block_loop.thisTrialN'
p6694
I0
sg39
F0.75021724577891291
sg34
g752
(S'\x07\xdf\t\x18\x0f\x10\x19\t\xdfX'
tRp6695
sa(dp6696
S'trial_loop.thisTrialN'
p6697
I20
sg6370
g6371
sS'block_loop.thisIndex'
p6698
g6364
sg38
S'right'
p6699
sg58
g62
sS'trial_loop.thisN'
p6700
I20
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6701
g59
(g98
S'\x14\x00\x00\x00'
tRp6702
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6703
I0
sg6379
g6380
sS'block_loop.thisRepN'
p6704
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6705
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6706
Nsg69
Vn
sS'block_loop.thisTrialN'
p6707
I0
sg39
F0.98346793828750378
sg34
g752
(S'\x07\xdf\t\x18\x0f\x10\x1f\x06d\xb8'
tRp6708
sa(dp6709
S'trial_loop.thisTrialN'
p6710
I21
sg6370
S'51-mars.png'
p6711
sS'block_loop.thisIndex'
p6712
g6364
sg38
S'left'
p6713
sg58
g62
sS'trial_loop.thisN'
p6714
I21
sg33
S'51-mars.png'
p6715
sg63
g64
sS'trial_loop.thisIndex'
p6716
g59
(g98
S'\x15\x00\x00\x00'
tRp6717
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6718
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6719
sS'block_loop.thisRepN'
p6720
I2
sg6382
g6715
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6721
I2
sg6384
S'27-hartleys_raspberries_jelly.png'
p6722
sg55
g11
sS'block_loop.thisTrial'
p6723
Nsg69
Vn
sS'block_loop.thisTrialN'
p6724
I0
sg39
F0.91724817450813134
sg34
g752
(S'\x07\xdf\t\x18\x0f\x10%\x06\xb6\xc0'
tRp6725
sa(dp6726
S'trial_loop.thisTrialN'
p6727
I22
sg6370
g6591
sS'block_loop.thisIndex'
p6728
g6364
sg38
S'left'
p6729
sg58
g62
sS'trial_loop.thisN'
p6730
I22
sg33
g6595
sg63
g64
sS'trial_loop.thisIndex'
p6731
g59
(g98
S'\x16\x00\x00\x00'
tRp6732
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6733
I0
sg6379
g6599
sS'block_loop.thisRepN'
p6734
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6735
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p6736
Nsg69
Vn
sS'block_loop.thisTrialN'
p6737
I0
sg39
F0.71686460170894861
sg34
g752
(S'\x07\xdf\t\x18\x0f\x10+\x06\x16\x98'
tRp6738
sa(dp6739
S'trial_loop.thisTrialN'
p6740
I23
sg6370
S'25-kitkat.png'
p6741
sS'block_loop.thisIndex'
p6742
g6364
sg38
S'right'
p6743
sg58
g62
sS'trial_loop.thisN'
p6744
I23
sg33
S'31-hobnobs.png'
p6745
sg63
g64
sS'trial_loop.thisIndex'
p6746
g59
(g98
S'\x17\x00\x00\x00'
tRp6747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6748
I0
sg6379
S'31-hobnobs.png'
p6749
sS'block_loop.thisRepN'
p6750
I2
sg6382
g6745
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6751
I2
sg6384
S'25-kitkat.png'
p6752
sg55
g11
sS'block_loop.thisTrial'
p6753
Nsg69
Vn
sS'block_loop.thisTrialN'
p6754
I0
sg39
F0.76687047475934378
sg34
g752
(S'\x07\xdf\t\x18\x0f\x101\x02"\xe0'
tRp6755
sa(dp6756
S'trial_loop.thisTrialN'
p6757
I24
sg6370
S'48-twix.png'
p6758
sS'block_loop.thisIndex'
p6759
g6364
sg38
S'left'
p6760
sg58
g62
sS'trial_loop.thisN'
p6761
I24
sg33
S'50-polo.png'
p6762
sg63
g64
sS'trial_loop.thisIndex'
p6763
g59
(g98
S'\x18\x00\x00\x00'
tRp6764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6765
I0
sg6379
S'50-polo.png'
p6766
sS'block_loop.thisRepN'
p6767
I2
sg6382
S'48-twix.png'
p6768
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6769
I2
sg6384
g6762
sg55
g11
sS'block_loop.thisTrial'
p6770
Nsg69
Vn
sS'block_loop.thisTrialN'
p6771
I0
sg39
F0.73354234924408956
sg34
g752
(S'\x07\xdf\t\x18\x0f\x106\x0ec\x98'
tRp6772
sa(dp6773
S'trial_loop.thisTrialN'
p6774
I25
sg6370
g6408
sS'block_loop.thisIndex'
p6775
g6364
sg38
S'left'
p6776
sg58
g62
sS'trial_loop.thisN'
p6777
I25
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6778
g59
(g98
S'\x19\x00\x00\x00'
tRp6779
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6780
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6781
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6782
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6783
Nsg69
Vn
sS'block_loop.thisTrialN'
p6784
I0
sg39
F1.4168396269997174
sg34
g752
(S'\x07\xdf\t\x18\x0f\x11\x00\n\xe8\xf8'
tRp6785
sa(dp6786
S'trial_loop.thisTrialN'
p6787
I26
sg6370
S'13-mccoys_steak_crisps.png'
p6788
sS'block_loop.thisIndex'
p6789
g6364
sg38
S'right'
p6790
sg58
g62
sS'trial_loop.thisN'
p6791
I26
sg33
g6685
sg63
g64
sS'trial_loop.thisIndex'
p6792
g59
(g98
S'\x1a\x00\x00\x00'
tRp6793
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6794
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6795
sS'block_loop.thisRepN'
p6796
I2
sg6382
g6685
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6797
I2
sg6384
g6692
sg55
g11
sS'block_loop.thisTrial'
p6798
Nsg69
Vn
sS'block_loop.thisTrialN'
p6799
I0
sg39
F0.91682679752193508
sg34
g752
(S'\x07\xdf\t\x18\x0f\x11\x07\x02i0'
tRp6800
sa(dp6801
S'trial_loop.thisTrialN'
p6802
I27
sg6370
S'50-polo.png'
p6803
sS'block_loop.thisIndex'
p6804
g6364
sg38
S'right'
p6805
sg58
g62
sS'trial_loop.thisN'
p6806
I27
sg33
g6762
sg63
g64
sS'trial_loop.thisIndex'
p6807
g59
(g98
S'\x1b\x00\x00\x00'
tRp6808
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6809
I0
sg6379
S'48-twix.png'
p6810
sS'block_loop.thisRepN'
p6811
I2
sg6382
g6768
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6812
I2
sg6384
g6762
sg55
g11
sS'block_loop.thisTrial'
p6813
Nsg69
Vn
sS'block_loop.thisTrialN'
p6814
I0
sg39
F0.86688792284621741
sg34
g752
(S'\x07\xdf\t\x18\x0f\x11\r\x01\x8ep'
tRp6815
sa(dp6816
S'trial_loop.thisTrialN'
p6817
I28
sg6370
g6408
sS'block_loop.thisIndex'
p6818
g6364
sg38
S'left'
p6819
sg58
g62
sS'trial_loop.thisN'
p6820
I28
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6821
g59
(g98
S'\x1c\x00\x00\x00'
tRp6822
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6823
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6824
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6825
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6826
Nsg69
Vn
sS'block_loop.thisTrialN'
p6827
I0
sg39
F0.683474894711253
sg34
g752
(S'\x07\xdf\t\x18\x0f\x11\x13\x006\xb0'
tRp6828
sa(dp6829
S'trial_loop.thisTrialN'
p6830
I29
sg6370
S'27-hartleys_raspberries_jelly.png'
p6831
sS'block_loop.thisIndex'
p6832
g6364
sg38
S'right'
p6833
sg58
g62
sS'trial_loop.thisN'
p6834
I29
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p6835
g59
(g98
S'\x1d\x00\x00\x00'
tRp6836
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6837
I0
sg6379
S'51-mars.png'
p6838
sS'block_loop.thisRepN'
p6839
I2
sg6382
g6715
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6840
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p6841
Nsg69
Vn
sS'block_loop.thisTrialN'
p6842
I0
sg39
F0.7501012103020912
sg34
g752
(S'\x07\xdf\t\x18\x0f\x11\x18\x0b\x0c '
tRp6843
sa(dp6844
S'trial_loop.thisTrialN'
p6845
I30
sg6370
g6788
sS'block_loop.thisIndex'
p6846
g6364
sg38
S'right'
p6847
sg58
g62
sS'trial_loop.thisN'
p6848
I30
sg33
g6685
sg63
g64
sS'trial_loop.thisIndex'
p6849
g59
(g98
S'\x1e\x00\x00\x00'
tRp6850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6851
I0
sg6379
g6795
sS'block_loop.thisRepN'
p6852
I2
sg6382
g6685
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6853
I2
sg6384
g6692
sg55
g11
sS'block_loop.thisTrial'
p6854
Nsg69
Vn
sS'block_loop.thisTrialN'
p6855
I0
sg39
F1.0334487225845805
sg34
g752
(S'\x07\xdf\t\x18\x0f\x11\x1e\x07\xcc\x18'
tRp6856
sa(dp6857
S'trial_loop.thisTrialN'
p6858
I31
sg6370
S'36-fig_rolls.png'
p6859
sS'block_loop.thisIndex'
p6860
g6364
sg38
S'left'
p6861
sg58
g62
sS'trial_loop.thisN'
p6862
I31
sg33
S'36-fig_rolls.png'
p6863
sg63
g64
sS'trial_loop.thisIndex'
p6864
g59
(g98
S'\x1f\x00\x00\x00'
tRp6865
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6866
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6867
sS'block_loop.thisRepN'
p6868
I2
sg6382
g6863
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6869
I2
sg6384
S'34-hula_hoops_bbq_beef_redo.png'
p6870
sg55
g11
sS'block_loop.thisTrial'
p6871
Nsg69
Vn
sS'block_loop.thisTrialN'
p6872
I0
sg39
F0.76677895783723216
sg34
g752
(S'\x07\xdf\t\x18\x0f\x11$\x08\xd9\xa0'
tRp6873
sa(dp6874
S'trial_loop.thisTrialN'
p6875
I32
sg6370
g6408
sS'block_loop.thisIndex'
p6876
g6364
sg38
S'left'
p6877
sg58
g62
sS'trial_loop.thisN'
p6878
I32
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6879
g59
(g98
S' \x00\x00\x00'
tRp6880
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6881
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6882
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6883
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6884
Nsg69
Vn
sS'block_loop.thisTrialN'
p6885
I0
sg39
F1.2834795133239822
sg34
g752
(S'\x07\xdf\t\x18\x0f\x11*\x05\xd8\x18'
tRp6886
sa(dp6887
S'trial_loop.thisTrialN'
p6888
I33
sg6370
g6425
sS'block_loop.thisIndex'
p6889
g6364
sg38
S'left'
p6890
sg58
g62
sS'trial_loop.thisN'
p6891
I33
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6892
g59
(g98
S'!\x00\x00\x00'
tRp6893
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6894
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6895
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6896
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p6897
Nsg69
Vn
sS'block_loop.thisTrialN'
p6898
I0
sg39
F1.7505405485535448
sg34
g752
(S'\x07\xdf\t\x18\x0f\x110\nw\xb0'
tRp6899
sa(dp6900
S'trial_loop.thisTrialN'
p6901
I34
sg6370
S'45-chewy_nougat_redo.png'
p6902
sS'block_loop.thisIndex'
p6903
g6364
sg38
S'left'
p6904
sg58
g62
sS'trial_loop.thisN'
p6905
I34
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p6906
g59
(g98
S'"\x00\x00\x00'
tRp6907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6908
I0
sg6379
S'41-peanuts_redo.png'
p6909
sS'block_loop.thisRepN'
p6910
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6911
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6912
Nsg69
Vn
sS'block_loop.thisTrialN'
p6913
I0
sg39
F1.1834526569546142
sg34
g752
(S'\x07\xdf\t\x18\x0f\x117\x073\xc0'
tRp6914
sa(dp6915
S'trial_loop.thisTrialN'
p6916
I35
sg6370
S'7-olives.png'
p6917
sS'block_loop.thisIndex'
p6918
g6364
sg38
S'right'
p6919
sg58
g62
sS'trial_loop.thisN'
p6920
I35
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p6921
g59
(g98
S'#\x00\x00\x00'
tRp6922
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6923
I0
sg6379
S'22-daim.png'
p6924
sS'block_loop.thisRepN'
p6925
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6926
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p6927
Nsg69
Vn
sS'block_loop.thisTrialN'
p6928
I0
sg39
F0.88338890872182674
sg34
g752
(S'\x07\xdf\t\x18\x0f\x12\x01\n\x9e\xc0'
tRp6929
sa(dp6930
S'trial_loop.thisTrialN'
p6931
I36
sg6370
S'30-spaghetti_hoops.png'
p6932
sS'block_loop.thisIndex'
p6933
g6364
sg38
S'right'
p6934
sg58
g62
sS'trial_loop.thisN'
p6935
I36
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p6936
g59
(g98
S'$\x00\x00\x00'
tRp6937
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6938
I0
sg6379
S'19-caramello_redo.png'
p6939
sS'block_loop.thisRepN'
p6940
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6941
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6942
Nsg69
Vn
sS'block_loop.thisTrialN'
p6943
I0
sg39
F1.083515892012656
sg34
g752
(S'\x07\xdf\t\x18\x0f\x12\x07\tG\x00'
tRp6944
sa(dp6945
S'trial_loop.thisTrialN'
p6946
I37
sg6370
g6493
sS'block_loop.thisIndex'
p6947
g6364
sg38
S'right'
p6948
sg58
g62
sS'trial_loop.thisN'
p6949
I37
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p6950
g59
(g98
S'%\x00\x00\x00'
tRp6951
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6952
I0
sg6379
g6501
sS'block_loop.thisRepN'
p6953
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6954
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p6955
Nsg69
Vn
sS'block_loop.thisTrialN'
p6956
I0
sg39
F0.93351480863566394
sg34
g752
(S'\x07\xdf\t\x18\x0f\x12\r\x0b\x0c '
tRp6957
sa(dp6958
S'trial_loop.thisTrialN'
p6959
I38
sg6370
g6574
sS'block_loop.thisIndex'
p6960
g6364
sg38
S'left'
p6961
sg58
g62
sS'trial_loop.thisN'
p6962
I38
sg33
g6578
sg63
g64
sS'trial_loop.thisIndex'
p6963
g59
(g98
S'&\x00\x00\x00'
tRp6964
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6965
I0
sg6379
g6582
sS'block_loop.thisRepN'
p6966
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6967
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p6968
Nsg69
Vn
sS'block_loop.thisTrialN'
p6969
I0
sg39
F1.0838811044086469
sg34
g752
(S'\x07\xdf\t\x18\x0f\x12\x13\n\xa6\x90'
tRp6970
sa(dp6971
S'trial_loop.thisTrialN'
p6972
I39
sg6370
g6651
sS'block_loop.thisIndex'
p6973
g6364
sg38
S'right'
p6974
sg58
g62
sS'trial_loop.thisN'
p6975
I39
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p6976
g59
(g98
S"'\x00\x00\x00"
tRp6977
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6978
I0
sg6379
g6658
sS'block_loop.thisRepN'
p6979
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6980
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p6981
Nsg69
Vn
sS'block_loop.thisTrialN'
p6982
I0
sg39
F0.70011871540918946
sg34
g752
(S'\x07\xdf\t\x18\x0f\x12\x19\x0ck\xb0'
tRp6983
sa(dp6984
S'trial_loop.thisTrialN'
p6985
I40
sg6370
S'38-maltesers.png'
p6986
sS'block_loop.thisIndex'
p6987
g6364
sg38
S'left'
p6988
sg58
g62
sS'trial_loop.thisN'
p6989
I40
sg33
S'38-maltesers.png'
p6990
sg63
g64
sS'trial_loop.thisIndex'
p6991
g59
(g98
S'(\x00\x00\x00'
tRp6992
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6993
I0
sg6379
S'6-sour_patch_kids.png'
p6994
sS'block_loop.thisRepN'
p6995
I2
sg6382
g6990
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6996
I2
sg6384
S'6-sour_patch_kids.png'
p6997
sg55
g11
sS'block_loop.thisTrial'
p6998
Nsg69
Vn
sS'block_loop.thisTrialN'
p6999
I0
sg39
F1.0665228244906757
sg34
g752
(S'\x07\xdf\t\x18\x0f\x12\x1f\x089x'
tRp7000
sa(dp7001
S'trial_loop.thisTrialN'
p7002
I41
sg6370
g6666
sS'block_loop.thisIndex'
p7003
g6364
sg38
S'left'
p7004
sg58
g62
sS'trial_loop.thisN'
p7005
I41
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7006
g59
(g98
S')\x00\x00\x00'
tRp7007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7008
I0
sg6379
g6673
sS'block_loop.thisRepN'
p7009
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7010
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7011
Nsg69
Vn
sS'block_loop.thisTrialN'
p7012
I0
sg39
F0.8167708610126283
sg34
g752
(S'\x07\xdf\t\x18\x0f\x12%\t\xbc0'
tRp7013
sa(dp7014
S'trial_loop.thisTrialN'
p7015
I42
sg6370
S'6-sour_patch_kids.png'
p7016
sS'block_loop.thisIndex'
p7017
g6364
sg38
S'right'
p7018
sg58
g62
sS'trial_loop.thisN'
p7019
I42
sg33
g6990
sg63
g64
sS'trial_loop.thisIndex'
p7020
g59
(g98
S'*\x00\x00\x00'
tRp7021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7022
I0
sg6379
S'38-maltesers.png'
p7023
sS'block_loop.thisRepN'
p7024
I2
sg6382
g6990
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7025
I2
sg6384
g6997
sg55
g11
sS'block_loop.thisTrial'
p7026
Nsg69
Vn
sS'block_loop.thisTrialN'
p7027
I0
sg39
F2.0664874721624074
sg34
g752
(S'\x07\xdf\t\x18\x0f\x12+\x07r@'
tRp7028
sa(dp7029
S'trial_loop.thisTrialN'
p7030
I43
sg6370
g6591
sS'block_loop.thisIndex'
p7031
g6364
sg38
S'left'
p7032
sg58
g62
sS'trial_loop.thisN'
p7033
I43
sg33
g6595
sg63
g64
sS'trial_loop.thisIndex'
p7034
g59
(g98
S'+\x00\x00\x00'
tRp7035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7036
I0
sg6379
g6599
sS'block_loop.thisRepN'
p7037
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7038
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p7039
Nsg69
Vn
sS'block_loop.thisTrialN'
p7040
I0
sg39
F1.6499272426226526
sg34
g752
(S'\x07\xdf\t\x18\x0f\x122\x08\xf1\x10'
tRp7041
sa(dp7042
S'trial_loop.thisTrialN'
p7043
I44
sg6370
S'40-sardines.png'
p7044
sS'block_loop.thisIndex'
p7045
g6364
sg38
S'right'
p7046
sg58
g62
sS'trial_loop.thisN'
p7047
I44
sg33
S'5-pineapple.png'
p7048
sg63
g64
sS'trial_loop.thisIndex'
p7049
g59
(g98
S',\x00\x00\x00'
tRp7050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7051
I0
sg6379
S'5-pineapple.png'
p7052
sS'block_loop.thisRepN'
p7053
I2
sg6382
g7048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7054
I2
sg6384
S'40-sardines.png'
p7055
sg55
g11
sS'block_loop.thisTrial'
p7056
Nsg69
Vn
sS'block_loop.thisTrialN'
p7057
I0
sg39
F1.0668854709911102
sg34
g752
(S'\x07\xdf\t\x18\x0f\x129\x04A\xd8'
tRp7058
sa(dp7059
S'trial_loop.thisTrialN'
p7060
I45
sg6370
g6831
sS'block_loop.thisIndex'
p7061
g6364
sg38
S'right'
p7062
sg58
g62
sS'trial_loop.thisN'
p7063
I45
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p7064
g59
(g98
S'-\x00\x00\x00'
tRp7065
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7066
I0
sg6379
g6838
sS'block_loop.thisRepN'
p7067
I2
sg6382
g6715
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7068
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p7069
Nsg69
Vn
sS'block_loop.thisTrialN'
p7070
I0
sg39
F1.0835158920162939
sg34
g752
(S'\x07\xdf\t\x18\x0f\x13\x03\x05\xc4\x90'
tRp7071
sa(dp7072
S'trial_loop.thisTrialN'
p7073
I46
sg6370
g6758
sS'block_loop.thisIndex'
p7074
g6364
sg38
S'left'
p7075
sg58
g62
sS'trial_loop.thisN'
p7076
I46
sg33
g6762
sg63
g64
sS'trial_loop.thisIndex'
p7077
g59
(g98
S'.\x00\x00\x00'
tRp7078
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7079
I0
sg6379
g6766
sS'block_loop.thisRepN'
p7080
I2
sg6382
g6768
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7081
I2
sg6384
g6762
sg55
g11
sS'block_loop.thisTrial'
p7082
Nsg69
Vn
sS'block_loop.thisTrialN'
p7083
I0
sg39
F0.8168096345361846
sg34
g752
(S'\x07\xdf\t\x18\x0f\x13\t\x07\x89\xb0'
tRp7084
sa(dp7085
S'trial_loop.thisTrialN'
p7086
I47
sg6370
g6493
sS'block_loop.thisIndex'
p7087
g6364
sg38
S'right'
p7088
sg58
g62
sS'trial_loop.thisN'
p7089
I47
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p7090
g59
(g98
S'/\x00\x00\x00'
tRp7091
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7092
I0
sg6379
g6501
sS'block_loop.thisRepN'
p7093
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7094
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7095
Nsg69
Vn
sS'block_loop.thisTrialN'
p7096
I0
sg39
F1.1001839461641794
sg34
g752
(S'\x07\xdf\t\x18\x0f\x13\x0f\x05?\xc0'
tRp7097
sa(dp7098
S'trial_loop.thisTrialN'
p7099
I48
sg6370
S'10-bounty_redo.png'
p7100
sS'block_loop.thisIndex'
p7101
g6364
sg38
S'left'
p7102
sg58
g62
sS'trial_loop.thisN'
p7103
I48
sg33
S'10-bounty_redo.png'
p7104
sg63
g64
sS'trial_loop.thisIndex'
p7105
g59
(g98
S'0\x00\x00\x00'
tRp7106
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7107
I0
sg6379
S'4-corn.png'
p7108
sS'block_loop.thisRepN'
p7109
I2
sg6382
g7104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7110
I2
sg6384
S'4-corn.png'
p7111
sg55
g11
sS'block_loop.thisTrial'
p7112
Nsg69
Vn
sS'block_loop.thisTrialN'
p7113
I0
sg39
F1.0001961484194908
sg34
g752
(S'\x07\xdf\t\x18\x0f\x13\x15\x07;\x90'
tRp7114
sa(dp7115
S'trial_loop.thisTrialN'
p7116
I49
sg6370
g6803
sS'block_loop.thisIndex'
p7117
g6364
sg38
S'right'
p7118
sg58
g62
sS'trial_loop.thisN'
p7119
I49
sg33
g6768
sg63
g64
sS'trial_loop.thisIndex'
p7120
g59
(g98
S'1\x00\x00\x00'
tRp7121
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7122
I0
sg6379
g6810
sS'block_loop.thisRepN'
p7123
I2
sg6382
g6768
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7124
I2
sg6384
g6762
sg55
g11
sS'block_loop.thisTrial'
p7125
Nsg69
Vn
sS'block_loop.thisTrialN'
p7126
I0
sg39
F0.73348304855971946
sg34
g752
(S'\x07\xdf\t\x18\x0f\x13\x1b\x07\xd0\x00'
tRp7127
sa(dp7128
S'trial_loop.thisTrialN'
p7129
I50
sg6370
g6408
sS'block_loop.thisIndex'
p7130
g6364
sg38
S'left'
p7131
sg58
g62
sS'trial_loop.thisN'
p7132
I50
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p7133
g59
(g98
S'2\x00\x00\x00'
tRp7134
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7135
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7136
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7137
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7138
Nsg69
Vn
sS'block_loop.thisTrialN'
p7139
I0
sg39
F1.2168412235550932
sg34
g752
(S'\x07\xdf\t\x18\x0f\x13!\x04\x16\xe0'
tRp7140
sa(dp7141
S'trial_loop.thisTrialN'
p7142
I51
sg6370
g6527
sS'block_loop.thisIndex'
p7143
g6364
sg38
S'left'
p7144
sg58
g62
sS'trial_loop.thisN'
p7145
I51
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7146
g59
(g98
S'3\x00\x00\x00'
tRp7147
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7148
I0
sg6379
g6535
sS'block_loop.thisRepN'
p7149
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7150
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7151
Nsg69
Vn
sS'block_loop.thisTrialN'
p7152
I0
sg39
F0.66688353231074871
sg34
g752
(S"\x07\xdf\t\x18\x0f\x13'\x07\xfe\xe0"
tRp7153
sa(dp7154
S'trial_loop.thisTrialN'
p7155
I52
sg6370
S'4-corn.png'
p7156
sS'block_loop.thisIndex'
p7157
g6364
sg38
S'right'
p7158
sg58
g62
sS'trial_loop.thisN'
p7159
I52
sg33
g7104
sg63
g64
sS'trial_loop.thisIndex'
p7160
g59
(g98
S'4\x00\x00\x00'
tRp7161
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7162
I0
sg6379
S'10-bounty_redo.png'
p7163
sS'block_loop.thisRepN'
p7164
I2
sg6382
g7104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7165
I2
sg6384
g7111
sg55
g11
sS'block_loop.thisTrial'
p7166
Nsg69
Vn
sS'block_loop.thisTrialN'
p7167
I0
sg39
F0.80012304892443353
sg34
g752
(S'\x07\xdf\t\x18\x0f\x13-\x03S\x90'
tRp7168
sa(dp7169
S'trial_loop.thisTrialN'
p7170
I53
sg6370
g6559
sS'block_loop.thisIndex'
p7171
g6364
sg38
S'right'
p7172
sg58
g62
sS'trial_loop.thisN'
p7173
I53
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7174
g59
(g98
S'5\x00\x00\x00'
tRp7175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7176
I0
sg6379
g6566
sS'block_loop.thisRepN'
p7177
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7178
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7179
Nsg69
Vn
sS'block_loop.thisTrialN'
p7180
I0
sg39
F1.1500737837377528
sg34
g752
(S'\x07\xdf\t\x18\x0f\x133\x00\xcb '
tRp7181
sa(dp7182
S'trial_loop.thisTrialN'
p7183
I54
sg6370
g6574
sS'block_loop.thisIndex'
p7184
g6364
sg38
S'left'
p7185
sg58
g62
sS'trial_loop.thisN'
p7186
I54
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p7187
g59
(g98
S'6\x00\x00\x00'
tRp7188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7189
I0
sg6379
g6582
sS'block_loop.thisRepN'
p7190
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7191
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p7192
Nsg69
Vn
sS'block_loop.thisTrialN'
p7193
I0
sg39
F0.91690063827991253
sg34
g752
(S'\x07\xdf\t\x18\x0f\x139\x03\xbd\x08'
tRp7194
sa(dp7195
S'trial_loop.thisTrialN'
p7196
I55
sg6370
g6986
sS'block_loop.thisIndex'
p7197
g6364
sg38
S'left'
p7198
sg58
g62
sS'trial_loop.thisN'
p7199
I55
sg33
g6990
sg63
g64
sS'trial_loop.thisIndex'
p7200
g59
(g98
S'7\x00\x00\x00'
tRp7201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7202
I0
sg6379
g6994
sS'block_loop.thisRepN'
p7203
I2
sg6382
g6990
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7204
I2
sg6384
g6997
sg55
g11
sS'block_loop.thisTrial'
p7205
Nsg69
Vn
sS'block_loop.thisTrialN'
p7206
I0
sg39
F0.93320690123073291
sg34
g752
(S'\x07\xdf\t\x18\x0f\x14\x03\x02\xe2H'
tRp7207
sa(dp7208
S'trial_loop.thisTrialN'
p7209
I56
sg6370
g7100
sS'block_loop.thisIndex'
p7210
g6364
sg38
S'left'
p7211
sg58
g62
sS'trial_loop.thisN'
p7212
I56
sg33
g7104
sg63
g64
sS'trial_loop.thisIndex'
p7213
g59
(g98
S'8\x00\x00\x00'
tRp7214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7215
I0
sg6379
g7108
sS'block_loop.thisRepN'
p7216
I2
sg6382
g7104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7217
I2
sg6384
g7111
sg55
g11
sS'block_loop.thisTrial'
p7218
Nsg69
Vn
sS'block_loop.thisTrialN'
p7219
I0
sg39
F1.0167541541813989
sg34
g752
(S'\x07\xdf\t\x18\x0f\x14\t\x02\x80\xa0'
tRp7220
sa(dp7221
S'trial_loop.thisTrialN'
p7222
I57
sg6370
g6476
sS'block_loop.thisIndex'
p7223
g6364
sg38
S'left'
p7224
sg58
g62
sS'trial_loop.thisN'
p7225
I57
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7226
g59
(g98
S'9\x00\x00\x00'
tRp7227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7228
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7229
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7230
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7231
Nsg69
Vn
sS'block_loop.thisTrialN'
p7232
I0
sg39
F0.88354628361776122
sg34
g752
(S'\x07\xdf\t\x18\x0f\x14\x0f\x03\x11('
tRp7233
sa(dp7234
S'trial_loop.thisTrialN'
p7235
I58
sg6370
g6459
sS'block_loop.thisIndex'
p7236
g6364
sg38
S'right'
p7237
sg58
g62
sS'trial_loop.thisN'
p7238
I58
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7239
g59
(g98
S':\x00\x00\x00'
tRp7240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7241
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7242
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7243
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7244
Nsg69
Vn
sS'block_loop.thisTrialN'
p7245
I0
sg39
F0.80016096714825835
sg34
g752
(S'\x07\xdf\t\x18\x0f\x14\x15\x01\xf7\xe8'
tRp7246
sa(dp7247
S'trial_loop.thisTrialN'
p7248
I59
sg6370
g6574
sS'block_loop.thisIndex'
p7249
g6364
sg38
S'left'
p7250
sg58
g62
sS'trial_loop.thisN'
p7251
I59
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p7252
g59
(g98
S';\x00\x00\x00'
tRp7253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7254
I0
sg6379
g6582
sS'block_loop.thisRepN'
p7255
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7256
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p7257
Nsg69
Vn
sS'block_loop.thisTrialN'
p7258
I0
sg39
F0.80019717477625818
sg34
g752
(S'\x07\xdf\t\x18\x0f\x14\x1a\x0e\xb1\xb8'
tRp7259
sa(dp7260
S'trial_loop.thisTrialN'
p7261
I60
sg6370
g6681
sS'block_loop.thisIndex'
p7262
g6364
sg38
S'left'
p7263
sg58
g62
sS'trial_loop.thisN'
p7264
I60
sg33
g6692
sg63
g64
sS'trial_loop.thisIndex'
p7265
g59
(g98
S'<\x00\x00\x00'
tRp7266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7267
I0
sg6379
g6689
sS'block_loop.thisRepN'
p7268
I2
sg6382
g6685
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7269
I2
sg6384
g6692
sg55
g11
sS'block_loop.thisTrial'
p7270
Nsg69
Vn
sS'block_loop.thisTrialN'
p7271
I0
sg39
F1.050576071946125
sg34
g752
(S'\x07\xdf\t\x18\x0f\x14 \x0c-0'
tRp7272
sa(dp7273
S'trial_loop.thisTrialN'
p7274
I61
sg6370
g6544
sS'block_loop.thisIndex'
p7275
g6364
sg38
S'left'
p7276
sg58
g62
sS'trial_loop.thisN'
p7277
I61
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7278
g59
(g98
S'=\x00\x00\x00'
tRp7279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7280
I0
sg6379
g6551
sS'block_loop.thisRepN'
p7281
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7282
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7283
Nsg69
Vn
sS'block_loop.thisTrialN'
p7284
I0
sg39
F0.75010805269266712
sg34
g752
(S'\x07\xdf\t\x18\x0f\x14&\r6\xd0'
tRp7285
sa(dp7286
S'trial_loop.thisTrialN'
p7287
I62
sg6370
S'33-ambrosia_rice.png'
p7288
sS'block_loop.thisIndex'
p7289
g6364
sg38
S'right'
p7290
sg58
g62
sS'trial_loop.thisN'
p7291
I62
sg33
g6520
sg63
g64
sS'trial_loop.thisIndex'
p7292
g59
(g98
S'>\x00\x00\x00'
tRp7293
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7294
I0
sg6379
S'23-crunchie_redo.png'
p7295
sS'block_loop.thisRepN'
p7296
I2
sg6382
g6520
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7297
I2
sg6384
g6514
sg55
g11
sS'block_loop.thisTrial'
p7298
Nsg69
Vn
sS'block_loop.thisTrialN'
p7299
I0
sg39
F0.86678015525467345
sg34
g752
(S'\x07\xdf\t\x18\x0f\x14,\t\xfa\xb0'
tRp7300
sa(dp7301
S'trial_loop.thisTrialN'
p7302
I63
sg6370
g7156
sS'block_loop.thisIndex'
p7303
g6364
sg38
S'right'
p7304
sg58
g62
sS'trial_loop.thisN'
p7305
I63
sg33
g7104
sg63
g64
sS'trial_loop.thisIndex'
p7306
g59
(g98
S'?\x00\x00\x00'
tRp7307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7308
I0
sg6379
g7163
sS'block_loop.thisRepN'
p7309
I2
sg6382
g7104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7310
I2
sg6384
g7111
sg55
g11
sS'block_loop.thisTrial'
p7311
Nsg69
Vn
sS'block_loop.thisTrialN'
p7312
I0
sg39
F0.80012418931801221
sg34
g752
(S'\x07\xdf\t\x18\x0f\x142\x08hX'
tRp7313
sa(dp7314
S'trial_loop.thisTrialN'
p7315
I64
sg6370
g6544
sS'block_loop.thisIndex'
p7316
g6364
sg38
S'left'
p7317
sg58
g62
sS'trial_loop.thisN'
p7318
I64
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7319
g59
(g98
S'@\x00\x00\x00'
tRp7320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7321
I0
sg6379
g6551
sS'block_loop.thisRepN'
p7322
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7323
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7324
Nsg69
Vn
sS'block_loop.thisTrialN'
p7325
I0
sg39
F0.73344056873975205
sg34
g752
(S'\x07\xdf\t\x18\x0f\x148\x05\xdf\xe8'
tRp7326
sa(dp7327
S'trial_loop.thisTrialN'
p7328
I65
sg6370
g6651
sS'block_loop.thisIndex'
p7329
g6364
sg38
S'right'
p7330
sg58
g62
sS'trial_loop.thisN'
p7331
I65
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7332
g59
(g98
S'A\x00\x00\x00'
tRp7333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7334
I0
sg6379
g6658
sS'block_loop.thisRepN'
p7335
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7336
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7337
Nsg69
Vn
sS'block_loop.thisTrialN'
p7338
I0
sg39
F0.65011141686409246
sg34
g752
(S'\x07\xdf\t\x18\x0f\x15\x02\x02eH'
tRp7339
sa(dp7340
S'trial_loop.thisTrialN'
p7341
I66
sg6370
g6681
sS'block_loop.thisIndex'
p7342
g6364
sg38
S'left'
p7343
sg58
g62
sS'trial_loop.thisN'
p7344
I66
sg33
g6685
sg63
g64
sS'trial_loop.thisIndex'
p7345
g59
(g98
S'B\x00\x00\x00'
tRp7346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7347
I0
sg6379
g6689
sS'block_loop.thisRepN'
p7348
I2
sg6382
g6685
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7349
I2
sg6384
g6692
sg55
g11
sS'block_loop.thisTrial'
p7350
Nsg69
Vn
sS'block_loop.thisTrialN'
p7351
I0
sg39
F0.68360575535916723
sg34
g752
(S'\x07\xdf\t\x18\x0f\x15\x07\x0c\xbd\xb8'
tRp7352
sa(dp7353
S'trial_loop.thisTrialN'
p7354
I67
sg6370
g6425
sS'block_loop.thisIndex'
p7355
g6364
sg38
S'left'
p7356
sg58
g62
sS'trial_loop.thisN'
p7357
I67
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7358
g59
(g98
S'C\x00\x00\x00'
tRp7359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7360
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7361
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7362
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7363
Nsg69
Vn
sS'block_loop.thisTrialN'
p7364
I0
sg39
F0.71686773780675139
sg34
g752
(S'\x07\xdf\t\x18\x0f\x15\r\x08\x8fh'
tRp7365
sa(dp7366
S'trial_loop.thisTrialN'
p7367
I68
sg6370
g6510
sS'block_loop.thisIndex'
p7368
g6364
sg38
S'left'
p7369
sg58
g62
sS'trial_loop.thisN'
p7370
I68
sg33
g6520
sg63
g64
sS'trial_loop.thisIndex'
p7371
g59
(g98
S'D\x00\x00\x00'
tRp7372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7373
I0
sg6379
g6518
sS'block_loop.thisRepN'
p7374
I2
sg6382
g6520
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7375
I2
sg6384
g6514
sg55
g11
sS'block_loop.thisTrial'
p7376
Nsg69
Vn
sS'block_loop.thisTrialN'
p7377
I0
sg39
F0.7168717291970097
sg34
g752
(S'\x07\xdf\t\x18\x0f\x15\x13\x04\x9b\xb0'
tRp7378
sa(dp7379
S'trial_loop.thisTrialN'
p7380
I69
sg6370
g6476
sS'block_loop.thisIndex'
p7381
g6364
sg38
S'left'
p7382
sg58
g62
sS'trial_loop.thisN'
p7383
I69
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7384
g59
(g98
S'E\x00\x00\x00'
tRp7385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7386
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7387
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7388
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7389
Nsg69
Vn
sS'block_loop.thisTrialN'
p7390
I0
sg39
F0.86687110197817674
sg34
g752
(S'\x07\xdf\t\x18\x0f\x15\x19\x00\xe2\x90'
tRp7391
sa(dp7392
S'trial_loop.thisTrialN'
p7393
I70
sg6370
g6932
sS'block_loop.thisIndex'
p7394
g6364
sg38
S'right'
p7395
sg58
g62
sS'trial_loop.thisN'
p7396
I70
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7397
g59
(g98
S'F\x00\x00\x00'
tRp7398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7399
I0
sg6379
g6939
sS'block_loop.thisRepN'
p7400
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7401
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7402
Nsg69
Vn
sS'block_loop.thisTrialN'
p7403
I0
sg39
F0.71685547852757736
sg34
g752
(S'\x07\xdf\t\x18\x0f\x15\x1e\x0e\x92x'
tRp7404
sa(dp7405
S'trial_loop.thisTrialN'
p7406
I71
sg6370
g6391
sS'block_loop.thisIndex'
p7407
g6364
sg38
S'right'
p7408
sg58
g62
sS'trial_loop.thisN'
p7409
I71
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p7410
g59
(g98
S'G\x00\x00\x00'
tRp7411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7412
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7413
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7414
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7415
Nsg69
Vn
sS'block_loop.thisTrialN'
p7416
I0
sg39
F0.93352906360814814
sg34
g752
(S'\x07\xdf\t\x18\x0f\x15$\n\xd9X'
tRp7417
sa(dp7418
S'trial_loop.thisTrialN'
p7419
I72
sg6370
g6591
sS'block_loop.thisIndex'
p7420
g6364
sg38
S'left'
p7421
sg58
g62
sS'trial_loop.thisN'
p7422
I72
sg33
g6595
sg63
g64
sS'trial_loop.thisIndex'
p7423
g59
(g98
S'H\x00\x00\x00'
tRp7424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7425
I0
sg6379
g6599
sS'block_loop.thisRepN'
p7426
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7427
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p7428
Nsg69
Vn
sS'block_loop.thisTrialN'
p7429
I0
sg39
F0.78392341316430247
sg34
g752
(S'\x07\xdf\t\x18\x0f\x15*\n90'
tRp7430
sa(dp7431
S'trial_loop.thisTrialN'
p7432
I73
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p7433
sS'block_loop.thisIndex'
p7434
g6364
sg38
S'right'
p7435
sg58
g62
sS'trial_loop.thisN'
p7436
I73
sg33
g6870
sg63
g64
sS'trial_loop.thisIndex'
p7437
g59
(g98
S'I\x00\x00\x00'
tRp7438
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7439
I0
sg6379
S'36-fig_rolls.png'
p7440
sS'block_loop.thisRepN'
p7441
I2
sg6382
g6863
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7442
I2
sg6384
g6870
sg55
g11
sS'block_loop.thisTrial'
p7443
Nsg69
Vn
sS'block_loop.thisTrialN'
p7444
I0
sg39
F0.73345054721721681
sg34
g752
(S'\x07\xdf\t\x18\x0f\x150\x07v('
tRp7445
sa(dp7446
S'trial_loop.thisTrialN'
p7447
I74
sg6370
S'20-fruit_pastilles.png'
p7448
sS'block_loop.thisIndex'
p7449
g6364
sg38
S'right'
p7450
sg58
g62
sS'trial_loop.thisN'
p7451
I74
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p7452
g59
(g98
S'J\x00\x00\x00'
tRp7453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7454
I0
sg6379
S'2-steamed_puddings.png'
p7455
sS'block_loop.thisRepN'
p7456
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7457
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p7458
Nsg69
Vn
sS'block_loop.thisTrialN'
p7459
I0
sg39
F0.78350146597949788
sg34
g752
(S'\x07\xdf\t\x18\x0f\x156\x03\xfb\x88'
tRp7460
sa(dp7461
S'trial_loop.thisTrialN'
p7462
I75
sg6370
g6527
sS'block_loop.thisIndex'
p7463
g6364
sg38
S'left'
p7464
sg58
g62
sS'trial_loop.thisN'
p7465
I75
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7466
g59
(g98
S'K\x00\x00\x00'
tRp7467
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7468
I0
sg6379
g6535
sS'block_loop.thisRepN'
p7469
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7470
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7471
Nsg69
Vn
sS'block_loop.thisTrialN'
p7472
I0
sg39
F0.6501339397218544
sg34
g752
(S'\x07\xdf\t\x18\x0f\x16\x00\x018\x80'
tRp7473
sa(dp7474
S'trial_loop.thisTrialN'
p7475
I76
sg6370
g6442
sS'block_loop.thisIndex'
p7476
g6364
sg38
S'right'
p7477
sg58
g62
sS'trial_loop.thisN'
p7478
I76
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7479
g59
(g98
S'L\x00\x00\x00'
tRp7480
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7481
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7482
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7483
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7484
Nsg69
Vn
sS'block_loop.thisTrialN'
p7485
I0
sg39
F0.9333389022758638
sg34
g752
(S'\x07\xdf\t\x18\x0f\x16\x05\x0b\x90\xf0'
tRp7486
sa(dp7487
S'trial_loop.thisTrialN'
p7488
I77
sg6370
S'5-pineapple.png'
p7489
sS'block_loop.thisIndex'
p7490
g6364
sg38
S'left'
p7491
sg58
g62
sS'trial_loop.thisN'
p7492
I77
sg33
g7048
sg63
g64
sS'trial_loop.thisIndex'
p7493
g59
(g98
S'M\x00\x00\x00'
tRp7494
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7495
I0
sg6379
S'40-sardines.png'
p7496
sS'block_loop.thisRepN'
p7497
I2
sg6382
g7048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7498
I2
sg6384
g7055
sg55
g11
sS'block_loop.thisTrial'
p7499
Nsg69
Vn
sS'block_loop.thisTrialN'
p7500
I0
sg39
F1.4500922011648072
sg34
g752
(S'\x07\xdf\t\x18\x0f\x16\x0b\n\xf4\xb0'
tRp7501
sa(dp7502
S'trial_loop.thisTrialN'
p7503
I78
sg6370
g6831
sS'block_loop.thisIndex'
p7504
g6364
sg38
S'right'
p7505
sg58
g62
sS'trial_loop.thisN'
p7506
I78
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p7507
g59
(g98
S'N\x00\x00\x00'
tRp7508
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7509
I0
sg6379
g6838
sS'block_loop.thisRepN'
p7510
I2
sg6382
g6715
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7511
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p7512
Nsg69
Vn
sS'block_loop.thisTrialN'
p7513
I0
sg39
F0.6835664116370026
sg34
g752
(S'\x07\xdf\t\x18\x0f\x16\x12\x03(\x98'
tRp7514
sa(dp7515
S'trial_loop.thisTrialN'
p7516
I79
sg6370
g7448
sS'block_loop.thisIndex'
p7517
g6364
sg38
S'right'
p7518
sg58
g62
sS'trial_loop.thisN'
p7519
I79
sg33
g6595
sg63
g64
sS'trial_loop.thisIndex'
p7520
g59
(g98
S'O\x00\x00\x00'
tRp7521
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7522
I0
sg6379
g7455
sS'block_loop.thisRepN'
p7523
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7524
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p7525
Nsg69
Vn
sS'block_loop.thisTrialN'
p7526
I0
sg39
F0.71684664044732926
sg34
g752
(S'\x07\xdf\t\x18\x0f\x16\x17\r\xfe\x08'
tRp7527
sa(dp7528
S'trial_loop.thisTrialN'
p7529
I80
sg6370
g6559
sS'block_loop.thisIndex'
p7530
g6364
sg38
S'right'
p7531
sg58
g62
sS'trial_loop.thisN'
p7532
I80
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7533
g59
(g98
S'P\x00\x00\x00'
tRp7534
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7535
I0
sg6379
g6566
sS'block_loop.thisRepN'
p7536
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7537
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7538
Nsg69
Vn
sS'block_loop.thisTrialN'
p7539
I0
sg39
F0.76677696214028401
sg34
g752
(S'\x07\xdf\t\x18\x0f\x16\x1d\nD\xe8'
tRp7540
sa(dp7541
S'trial_loop.thisTrialN'
p7542
I81
sg6370
g6666
sS'block_loop.thisIndex'
p7543
g6364
sg38
S'left'
p7544
sg58
g62
sS'trial_loop.thisN'
p7545
I81
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p7546
g59
(g98
S'Q\x00\x00\x00'
tRp7547
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7548
I0
sg6379
g6673
sS'block_loop.thisRepN'
p7549
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7550
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7551
Nsg69
Vn
sS'block_loop.thisTrialN'
p7552
I0
sg39
F0.78361522065824829
sg34
g752
(S'\x07\xdf\t\x18\x0f\x16#\x07C`'
tRp7553
sa(dp7554
S'trial_loop.thisTrialN'
p7555
I82
sg6370
g7288
sS'block_loop.thisIndex'
p7556
g6364
sg38
S'right'
p7557
sg58
g62
sS'trial_loop.thisN'
p7558
I82
sg33
g6520
sg63
g64
sS'trial_loop.thisIndex'
p7559
g59
(g98
S'R\x00\x00\x00'
tRp7560
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7561
I0
sg6379
g7295
sS'block_loop.thisRepN'
p7562
I2
sg6382
g6520
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7563
I2
sg6384
g6514
sg55
g11
sS'block_loop.thisTrial'
p7564
Nsg69
Vn
sS'block_loop.thisTrialN'
p7565
I0
sg39
F0.66676065445062704
sg34
g752
(S'\x07\xdf\t\x18\x0f\x16)\x04\x80X'
tRp7566
sa(dp7567
S'trial_loop.thisTrialN'
p7568
I83
sg6370
g7044
sS'block_loop.thisIndex'
p7569
g6364
sg38
S'right'
p7570
sg58
g62
sS'trial_loop.thisN'
p7571
I83
sg33
g7048
sg63
g64
sS'trial_loop.thisIndex'
p7572
g59
(g98
S'S\x00\x00\x00'
tRp7573
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7574
I0
sg6379
g7052
sS'block_loop.thisRepN'
p7575
I2
sg6382
g7048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7576
I2
sg6384
g7055
sg55
g11
sS'block_loop.thisTrial'
p7577
Nsg69
Vn
sS'block_loop.thisTrialN'
p7578
I0
sg39
F0.8167645888242987
sg34
g752
(S'\x07\xdf\t\x18\x0f\x16.\x0f\x17H'
tRp7579
sa(dp7580
S'trial_loop.thisTrialN'
p7581
I84
sg6370
S'31-hobnobs.png'
p7582
sS'block_loop.thisIndex'
p7583
g6364
sg38
S'left'
p7584
sg58
g62
sS'trial_loop.thisN'
p7585
I84
sg33
g6745
sg63
g64
sS'trial_loop.thisIndex'
p7586
g59
(g98
S'T\x00\x00\x00'
tRp7587
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7588
I0
sg6379
S'25-kitkat.png'
p7589
sS'block_loop.thisRepN'
p7590
I2
sg6382
g6745
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7591
I2
sg6384
g6752
sg55
g11
sS'block_loop.thisTrial'
p7592
Nsg69
Vn
sS'block_loop.thisTrialN'
p7593
I0
sg39
F1.2338801920886908
sg34
g752
(S'\x07\xdf\t\x18\x0f\x164\x0c\xcdX'
tRp7594
sa(dp7595
S'trial_loop.thisTrialN'
p7596
I85
sg6370
g6859
sS'block_loop.thisIndex'
p7597
g6364
sg38
S'left'
p7598
sg58
g62
sS'trial_loop.thisN'
p7599
I85
sg33
g6863
sg63
g64
sS'trial_loop.thisIndex'
p7600
g59
(g98
S'U\x00\x00\x00'
tRp7601
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7602
I0
sg6379
g6867
sS'block_loop.thisRepN'
p7603
I2
sg6382
g6863
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7604
I2
sg6384
g6870
sg55
g11
sS'block_loop.thisTrial'
p7605
Nsg69
Vn
sS'block_loop.thisTrialN'
p7606
I0
sg39
F0.88353773063136032
sg34
g752
(S'\x07\xdf\t\x18\x0f\x16;\x01\xad\xb0'
tRp7607
sa(dp7608
S'trial_loop.thisTrialN'
p7609
I86
sg6370
g7489
sS'block_loop.thisIndex'
p7610
g6364
sg38
S'left'
p7611
sg58
g62
sS'trial_loop.thisN'
p7612
I86
sg33
g7055
sg63
g64
sS'trial_loop.thisIndex'
p7613
g59
(g98
S'V\x00\x00\x00'
tRp7614
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7615
I0
sg6379
g7496
sS'block_loop.thisRepN'
p7616
I2
sg6382
g7048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7617
I2
sg6384
g7055
sg55
g11
sS'block_loop.thisTrial'
p7618
Nsg69
Vn
sS'block_loop.thisTrialN'
p7619
I0
sg39
F1.0334344676120963
sg34
g752
(S'\x07\xdf\t\x18\x0f\x17\x05\x00Y\xd8'
tRp7620
sa(dp7621
S'trial_loop.thisTrialN'
p7622
I87
sg6370
g6788
sS'block_loop.thisIndex'
p7623
g6364
sg38
S'right'
p7624
sg58
g62
sS'trial_loop.thisN'
p7625
I87
sg33
g6685
sg63
g64
sS'trial_loop.thisIndex'
p7626
g59
(g98
S'W\x00\x00\x00'
tRp7627
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7628
I0
sg6379
g6795
sS'block_loop.thisRepN'
p7629
I2
sg6382
g6685
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7630
I2
sg6384
g6692
sg55
g11
sS'block_loop.thisTrial'
p7631
Nsg69
Vn
sS'block_loop.thisTrialN'
p7632
I0
sg39
F0.98354605553322472
sg34
g752
(S'\x07\xdf\t\x18\x0f\x17\x0b\x01cx'
tRp7633
sa(dp7634
S'trial_loop.thisTrialN'
p7635
I88
sg6370
g7489
sS'block_loop.thisIndex'
p7636
g6364
sg38
S'left'
p7637
sg58
g62
sS'trial_loop.thisN'
p7638
I88
sg33
g7048
sg63
g64
sS'trial_loop.thisIndex'
p7639
g59
(g98
S'X\x00\x00\x00'
tRp7640
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7641
I0
sg6379
g7496
sS'block_loop.thisRepN'
p7642
I2
sg6382
g7048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7643
I2
sg6384
g7055
sg55
g11
sS'block_loop.thisTrial'
p7644
Nsg69
Vn
sS'block_loop.thisTrialN'
p7645
I0
sg39
F1.2501117589854402
sg34
g752
(S'\x07\xdf\t\x18\x0f\x17\x11\x01\xb9h'
tRp7646
sa(dp7647
S'trial_loop.thisTrialN'
p7648
I89
sg6370
g6788
sS'block_loop.thisIndex'
p7649
g6364
sg38
S'right'
p7650
sg58
g62
sS'trial_loop.thisN'
p7651
I89
sg33
g6692
sg63
g64
sS'trial_loop.thisIndex'
p7652
g59
(g98
S'Y\x00\x00\x00'
tRp7653
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7654
I0
sg6379
g6795
sS'block_loop.thisRepN'
p7655
I2
sg6382
g6685
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7656
I2
sg6384
g6692
sg55
g11
sS'block_loop.thisTrial'
p7657
Nsg69
Vn
sS'block_loop.thisTrialN'
p7658
I0
sg39
F0.76688843602460111
sg34
g752
(S'\x07\xdf\t\x18\x0f\x17\x17\x05\xdc\x00'
tRp7659
sa(dp7660
S'trial_loop.thisTrialN'
p7661
I90
sg6370
g6917
sS'block_loop.thisIndex'
p7662
g6364
sg38
S'right'
p7663
sg58
g62
sS'trial_loop.thisN'
p7664
I90
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7665
g59
(g98
S'Z\x00\x00\x00'
tRp7666
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7667
I0
sg6379
g6924
sS'block_loop.thisRepN'
p7668
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7669
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7670
Nsg69
Vn
sS'block_loop.thisTrialN'
p7671
I0
sg39
F0.81677684809983475
sg34
g752
(S'\x07\xdf\t\x18\x0f\x17\x1d\x02\xdax'
tRp7672
sa(dp7673
S'trial_loop.thisTrialN'
p7674
I91
sg6370
g6932
sS'block_loop.thisIndex'
p7675
g6364
sg38
S'right'
p7676
sg58
g62
sS'trial_loop.thisN'
p7677
I91
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7678
g59
(g98
S'[\x00\x00\x00'
tRp7679
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7680
I0
sg6379
g6939
sS'block_loop.thisRepN'
p7681
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7682
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7683
Nsg69
Vn
sS'block_loop.thisTrialN'
p7684
I0
sg39
F0.78345527987039532
sg34
g752
(S'\x07\xdf\t\x18\x0f\x17#\x00\x90\x88'
tRp7685
sa(dp7686
S'trial_loop.thisTrialN'
p7687
I92
sg6370
g6544
sS'block_loop.thisIndex'
p7688
g6364
sg38
S'left'
p7689
sg58
g62
sS'trial_loop.thisN'
p7690
I92
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7691
g59
(g98
S'\\\x00\x00\x00'
tRp7692
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7693
I0
sg6379
g6551
sS'block_loop.thisRepN'
p7694
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7695
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7696
Nsg69
Vn
sS'block_loop.thisTrialN'
p7697
I0
sg39
F0.90000079827586887
sg34
g752
(S'\x07\xdf\t\x18\x0f\x17(\r\x0f\xc0'
tRp7698
sa(dp7699
S'trial_loop.thisTrialN'
p7700
I93
sg6370
g6741
sS'block_loop.thisIndex'
p7701
g6364
sg38
S'right'
p7702
sg58
g62
sS'trial_loop.thisN'
p7703
I93
sg33
g6745
sg63
g64
sS'trial_loop.thisIndex'
p7704
g59
(g98
S']\x00\x00\x00'
tRp7705
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7706
I0
sg6379
g6749
sS'block_loop.thisRepN'
p7707
I2
sg6382
g6745
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7708
I2
sg6384
g6752
sg55
g11
sS'block_loop.thisTrial'
p7709
Nsg69
Vn
sS'block_loop.thisTrialN'
p7710
I0
sg39
F1.1501809811306885
sg34
g752
(S'\x07\xdf\t\x18\x0f\x17.\x0b\xf6\x80'
tRp7711
sa(dp7712
S'trial_loop.thisTrialN'
p7713
I94
sg6370
g6391
sS'block_loop.thisIndex'
p7714
g6364
sg38
S'right'
p7715
sg58
g62
sS'trial_loop.thisN'
p7716
I94
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7717
g59
(g98
S'^\x00\x00\x00'
tRp7718
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7719
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7720
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7721
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7722
Nsg69
Vn
sS'block_loop.thisTrialN'
p7723
I0
sg39
F0.88345505179313477
sg34
g752
(S'\x07\xdf\t\x18\x0f\x174\x0e\xe8h'
tRp7724
sa(dp7725
S'trial_loop.thisTrialN'
p7726
I95
sg6370
g7156
sS'block_loop.thisIndex'
p7727
g6364
sg38
S'right'
p7728
sg58
g62
sS'trial_loop.thisN'
p7729
I95
sg33
g7111
sg63
g64
sS'trial_loop.thisIndex'
p7730
g59
(g98
S'_\x00\x00\x00'
tRp7731
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7732
I0
sg6379
g7163
sS'block_loop.thisRepN'
p7733
I2
sg6382
g7104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7734
I2
sg6384
g7111
sg55
g11
sS'block_loop.thisTrial'
p7735
Nsg69
Vn
sS'block_loop.thisTrialN'
p7736
I0
sg39
F1.4505797212186735
sg34
g752
(S'\x07\xdf\t\x18\x0f\x17:\r\x94\x90'
tRp7737
sa(dp7738
S'trial_loop.thisTrialN'
p7739
I96
sg6370
g6442
sS'block_loop.thisIndex'
p7740
g6364
sg38
S'right'
p7741
sg58
g62
sS'trial_loop.thisN'
p7742
I96
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7743
g59
(g98
S'`\x00\x00\x00'
tRp7744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7745
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7746
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7747
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7748
Nsg69
Vn
sS'block_loop.thisTrialN'
p7749
I0
sg39
F0.90023714572089375
sg34
g752
(S'\x07\xdf\t\x18\x0f\x18\x05\x05\xc8x'
tRp7750
sa(dp7751
S'trial_loop.thisTrialN'
p7752
I97
sg6370
g6591
sS'block_loop.thisIndex'
p7753
g6364
sg38
S'left'
p7754
sg58
g62
sS'trial_loop.thisN'
p7755
I97
sg33
g6595
sg63
g64
sS'trial_loop.thisIndex'
p7756
g59
(g98
S'a\x00\x00\x00'
tRp7757
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7758
I0
sg6379
g6599
sS'block_loop.thisRepN'
p7759
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7760
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p7761
Nsg69
Vn
sS'block_loop.thisTrialN'
p7762
I0
sg39
F0.78346098186011659
sg34
g752
(S'\x07\xdf\t\x18\x0f\x18\x0b\x04\xaf8'
tRp7763
sa(dp7764
S'trial_loop.thisTrialN'
p7765
I98
sg6370
g7433
sS'block_loop.thisIndex'
p7766
g6364
sg38
S'right'
p7767
sg58
g62
sS'trial_loop.thisN'
p7768
I98
sg33
g6863
sg63
g64
sS'trial_loop.thisIndex'
p7769
g59
(g98
S'b\x00\x00\x00'
tRp7770
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7771
I0
sg6379
g7440
sS'block_loop.thisRepN'
p7772
I2
sg6382
g6863
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7773
I2
sg6384
g6870
sg55
g11
sS'block_loop.thisTrial'
p7774
Nsg69
Vn
sS'block_loop.thisTrialN'
p7775
I0
sg39
F0.73344513033225667
sg34
g752
(S'\x07\xdf\t\x18\x0f\x18\x11\x01\xec0'
tRp7776
sa(dp7777
S'trial_loop.thisTrialN'
p7778
I99
sg6370
g6621
sS'block_loop.thisIndex'
p7779
g6364
sg38
S'left'
p7780
sg58
g62
sS'trial_loop.thisN'
p7781
I99
sg33
g6504
sg63
g64
sS'trial_loop.thisIndex'
p7782
g59
(g98
S'c\x00\x00\x00'
tRp7783
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7784
I0
sg6379
g6628
sS'block_loop.thisRepN'
p7785
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7786
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7787
Nsg69
Vn
sS'block_loop.thisTrialN'
p7788
I0
sg39
F1.0501906174904434
sg34
g752
(S'\x07\xdf\t\x18\x0f\x18\x16\ry8'
tRp7789
sa(dp7790
S'trial_loop.thisTrialN'
p7791
I100
sg6370
g6510
sS'block_loop.thisIndex'
p7792
g6364
sg38
S'left'
p7793
sg58
g62
sS'trial_loop.thisN'
p7794
I100
sg33
g6520
sg63
g64
sS'trial_loop.thisIndex'
p7795
g59
(g98
S'd\x00\x00\x00'
tRp7796
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7797
I0
sg6379
g6518
sS'block_loop.thisRepN'
p7798
I2
sg6382
g6520
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7799
I2
sg6384
g6514
sg55
g11
sS'block_loop.thisTrial'
p7800
Nsg69
Vn
sS'block_loop.thisTrialN'
p7801
I0
sg39
F0.80010508765553823
sg34
g752
(S'\x07\xdf\t\x18\x0f\x18\x1c\x0e\xc1X'
tRp7802
sa(dp7803
S'trial_loop.thisTrialN'
p7804
I101
sg6370
g6425
sS'block_loop.thisIndex'
p7805
g6364
sg38
S'left'
p7806
sg58
g62
sS'trial_loop.thisN'
p7807
I101
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7808
g59
(g98
S'e\x00\x00\x00'
tRp7809
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7810
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7811
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7812
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7813
Nsg69
Vn
sS'block_loop.thisTrialN'
p7814
I0
sg39
F0.6668461842891702
sg34
g752
(S'\x07\xdf\t\x18\x0f\x18"\x0c8\xe8'
tRp7815
sa(dp7816
S'trial_loop.thisTrialN'
p7817
I102
sg6370
g6651
sS'block_loop.thisIndex'
p7818
g6364
sg38
S'right'
p7819
sg58
g62
sS'trial_loop.thisN'
p7820
I102
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7821
g59
(g98
S'f\x00\x00\x00'
tRp7822
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7823
I0
sg6379
g6658
sS'block_loop.thisRepN'
p7824
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7825
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7826
Nsg69
Vn
sS'block_loop.thisTrialN'
p7827
I0
sg39
F0.68351195763898431
sg34
g752
(S'\x07\xdf\t\x18\x0f\x18(\x07\xcc\x18'
tRp7828
sa(dp7829
S'trial_loop.thisTrialN'
p7830
I103
sg6370
g6544
sS'block_loop.thisIndex'
p7831
g6364
sg38
S'left'
p7832
sg58
g62
sS'trial_loop.thisN'
p7833
I103
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7834
g59
(g98
S'g\x00\x00\x00'
tRp7835
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7836
I0
sg6379
g6551
sS'block_loop.thisRepN'
p7837
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7838
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7839
Nsg69
Vn
sS'block_loop.thisTrialN'
p7840
I0
sg39
F0.66665003586604143
sg34
g752
(S'\x07\xdf\t\x18\x0f\x18.\x03[`'
tRp7841
sa(dp7842
S'trial_loop.thisTrialN'
p7843
I104
sg6370
g6636
sS'block_loop.thisIndex'
p7844
g6364
sg38
S'right'
p7845
sg58
g62
sS'trial_loop.thisN'
p7846
I104
sg33
g6578
sg63
g64
sS'trial_loop.thisIndex'
p7847
g59
(g98
S'h\x00\x00\x00'
tRp7848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7849
I0
sg6379
g6643
sS'block_loop.thisRepN'
p7850
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7851
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p7852
Nsg69
Vn
sS'block_loop.thisTrialN'
p7853
I0
sg39
F0.81680621334089665
sg34
g752
(S'\x07\xdf\t\x18\x0f\x183\r\xf2P'
tRp7854
sa(dp7855
S'trial_loop.thisTrialN'
p7856
I105
sg6370
g6758
sS'block_loop.thisIndex'
p7857
g6364
sg38
S'left'
p7858
sg58
g62
sS'trial_loop.thisN'
p7859
I105
sg33
g6768
sg63
g64
sS'trial_loop.thisIndex'
p7860
g59
(g98
S'i\x00\x00\x00'
tRp7861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7862
I0
sg6379
g6766
sS'block_loop.thisRepN'
p7863
I2
sg6382
g6768
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7864
I2
sg6384
g6762
sg55
g11
sS'block_loop.thisTrial'
p7865
Nsg69
Vn
sS'block_loop.thisTrialN'
p7866
I0
sg39
F1.1501527562832052
sg34
g752
(S'\x07\xdf\t\x18\x0f\x189\x0b\xa8`'
tRp7867
sa(dp7868
S'trial_loop.thisTrialN'
p7869
I106
sg6370
g6636
sS'block_loop.thisIndex'
p7870
g6364
sg38
S'right'
p7871
sg58
g62
sS'trial_loop.thisN'
p7872
I106
sg33
g6578
sg63
g64
sS'trial_loop.thisIndex'
p7873
g59
(g98
S'j\x00\x00\x00'
tRp7874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7875
I0
sg6379
g6643
sS'block_loop.thisRepN'
p7876
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7877
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p7878
Nsg69
Vn
sS'block_loop.thisTrialN'
p7879
I0
sg39
F0.78330047087001731
sg34
g752
(S'\x07\xdf\t\x18\x0f\x19\x03\x0e\x9aH'
tRp7880
sa(dp7881
S'trial_loop.thisTrialN'
p7882
I107
sg6370
g6391
sS'block_loop.thisIndex'
p7883
g6364
sg38
S'right'
p7884
sg58
g62
sS'trial_loop.thisN'
p7885
I107
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7886
g59
(g98
S'k\x00\x00\x00'
tRp7887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7888
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7889
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7890
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7891
Nsg69
Vn
sS'block_loop.thisTrialN'
p7892
I0
sg39
F0.85057852380123222
sg34
g752
(S'\x07\xdf\t\x18\x0f\x19\t\x0b\xd7@'
tRp7893
sa(dp7894
S'trial_loop.thisTrialN'
p7895
I108
sg6370
g6559
sS'block_loop.thisIndex'
p7896
g6364
sg38
S'right'
p7897
sg58
g62
sS'trial_loop.thisN'
p7898
I108
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p7899
g59
(g98
S'l\x00\x00\x00'
tRp7900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7901
I0
sg6379
g6566
sS'block_loop.thisRepN'
p7902
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7903
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7904
Nsg69
Vn
sS'block_loop.thisTrialN'
p7905
I0
sg39
F0.83354212115955306
sg34
g752
(S'\x07\xdf\t\x18\x0f\x19\x0f\n\nP'
tRp7906
sa(dp7907
S'trial_loop.thisTrialN'
p7908
I109
sg6370
g6758
sS'block_loop.thisIndex'
p7909
g6364
sg38
S'left'
p7910
sg58
g62
sS'trial_loop.thisN'
p7911
I109
sg33
g6768
sg63
g64
sS'trial_loop.thisIndex'
p7912
g59
(g98
S'm\x00\x00\x00'
tRp7913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7914
I0
sg6379
g6766
sS'block_loop.thisRepN'
p7915
I2
sg6382
g6768
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7916
I2
sg6384
g6762
sg55
g11
sS'block_loop.thisTrial'
p7917
Nsg69
Vn
sS'block_loop.thisTrialN'
p7918
I0
sg39
F0.85018765245695249
sg34
g752
(S'\x07\xdf\t\x18\x0f\x19\x15\x07\xfa\xf8'
tRp7919
sa(dp7920
S'trial_loop.thisTrialN'
p7921
I110
sg6370
g6741
sS'block_loop.thisIndex'
p7922
g6364
sg38
S'right'
p7923
sg58
g62
sS'trial_loop.thisN'
p7924
I110
sg33
g6752
sg63
g64
sS'trial_loop.thisIndex'
p7925
g59
(g98
S'n\x00\x00\x00'
tRp7926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7927
I0
sg6379
g6749
sS'block_loop.thisRepN'
p7928
I2
sg6382
g6745
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7929
I2
sg6384
g6752
sg55
g11
sS'block_loop.thisTrial'
p7930
Nsg69
Vn
sS'block_loop.thisTrialN'
p7931
I0
sg39
F0.88345134550036164
sg34
g752
(S'\x07\xdf\t\x18\x0f\x19\x1b\x06* '
tRp7932
sa(dp7933
S'trial_loop.thisTrialN'
p7934
I111
sg6370
g6902
sS'block_loop.thisIndex'
p7935
g6364
sg38
S'left'
p7936
sg58
g62
sS'trial_loop.thisN'
p7937
I111
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7938
g59
(g98
S'o\x00\x00\x00'
tRp7939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7940
I0
sg6379
g6909
sS'block_loop.thisRepN'
p7941
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7942
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7943
Nsg69
Vn
sS'block_loop.thisTrialN'
p7944
I0
sg39
F1.3334206687977712
sg34
g752
(S'\x07\xdf\t\x18\x0f\x19!\x04\xd6H'
tRp7945
sa(dp7946
S'trial_loop.thisTrialN'
p7947
I112
sg6370
g6476
sS'block_loop.thisIndex'
p7948
g6364
sg38
S'left'
p7949
sg58
g62
sS'trial_loop.thisN'
p7950
I112
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7951
g59
(g98
S'p\x00\x00\x00'
tRp7952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7953
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7954
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7955
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7956
Nsg69
Vn
sS'block_loop.thisTrialN'
p7957
I0
sg39
F0.90011569335547392
sg34
g752
(S"\x07\xdf\t\x18\x0f\x19'\nh\x10"
tRp7958
sa(dp7959
S'trial_loop.thisTrialN'
p7960
I113
sg6370
g6902
sS'block_loop.thisIndex'
p7961
g6364
sg38
S'left'
p7962
sg58
g62
sS'trial_loop.thisN'
p7963
I113
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7964
g59
(g98
S'q\x00\x00\x00'
tRp7965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7966
I0
sg6379
g6909
sS'block_loop.thisRepN'
p7967
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7968
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7969
Nsg69
Vn
sS'block_loop.thisTrialN'
p7970
I0
sg39
F1.1167716022682725
sg34
g752
(S'\x07\xdf\t\x18\x0f\x19-\t\x89h'
tRp7971
sa(dp7972
S'trial_loop.thisTrialN'
p7973
I114
sg6370
g6371
sS'block_loop.thisIndex'
p7974
g6364
sg38
S'right'
p7975
sg58
g62
sS'trial_loop.thisN'
p7976
I114
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7977
g59
(g98
S'r\x00\x00\x00'
tRp7978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7979
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7980
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7981
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7982
Nsg69
Vn
sS'block_loop.thisTrialN'
p7983
I0
sg39
F0.85011837329147966
sg34
g752
(S'\x07\xdf\t\x18\x0f\x193\x0b\xc7\xa0'
tRp7984
sa(dp7985
S'trial_loop.thisTrialN'
p7986
I115
sg6370
g7100
sS'block_loop.thisIndex'
p7987
g6364
sg38
S'left'
p7988
sg58
g62
sS'trial_loop.thisN'
p7989
I115
sg33
g7104
sg63
g64
sS'trial_loop.thisIndex'
p7990
g59
(g98
S's\x00\x00\x00'
tRp7991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7992
I0
sg6379
g7108
sS'block_loop.thisRepN'
p7993
I2
sg6382
g7104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7994
I2
sg6384
g7111
sg55
g11
sS'block_loop.thisTrial'
p7995
Nsg69
Vn
sS'block_loop.thisTrialN'
p7996
I0
sg39
F1.3001013813627651
sg34
g752
(S'\x07\xdf\t\x18\x0f\x199\t\xf6\xc8'
tRp7997
sa(dp7998
S'trial_loop.thisTrialN'
p7999
I116
sg6370
g6932
sS'block_loop.thisIndex'
p8000
g6364
sg38
S'right'
p8001
sg58
g62
sS'trial_loop.thisN'
p8002
I116
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8003
g59
(g98
S't\x00\x00\x00'
tRp8004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8005
I0
sg6379
g6939
sS'block_loop.thisRepN'
p8006
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8007
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8008
Nsg69
Vn
sS'block_loop.thisTrialN'
p8009
I0
sg39
F1.5001898762311612
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1a\x03\x0f\x0b\x90'
tRp8010
sa(dp8011
S'trial_loop.thisTrialN'
p8012
I117
sg6370
g6902
sS'block_loop.thisIndex'
p8013
g6364
sg38
S'left'
p8014
sg58
g62
sS'trial_loop.thisN'
p8015
I117
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8016
g59
(g98
S'u\x00\x00\x00'
tRp8017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8018
I0
sg6379
g6909
sS'block_loop.thisRepN'
p8019
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8020
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8021
Nsg69
Vn
sS'block_loop.thisTrialN'
p8022
I0
sg39
F1.3005441408095066
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1a\n\x07\xfa\xf8'
tRp8023
sa(dp8024
S'trial_loop.thisTrialN'
p8025
I118
sg6370
g6510
sS'block_loop.thisIndex'
p8026
g6364
sg38
S'left'
p8027
sg58
g62
sS'trial_loop.thisN'
p8028
I118
sg33
g6520
sg63
g64
sS'trial_loop.thisIndex'
p8029
g59
(g98
S'v\x00\x00\x00'
tRp8030
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8031
I0
sg6379
g6518
sS'block_loop.thisRepN'
p8032
I2
sg6382
g6520
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8033
I2
sg6384
g6514
sg55
g11
sS'block_loop.thisTrial'
p8034
Nsg69
Vn
sS'block_loop.thisTrialN'
p8035
I0
sg39
F0.81676943551428849
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1a\x10\r\x0f\xc0'
tRp8036
sa(dp8037
S'trial_loop.thisTrialN'
p8038
I119
sg6370
g7156
sS'block_loop.thisIndex'
p8039
g6364
sg38
S'right'
p8040
sg58
g62
sS'trial_loop.thisN'
p8041
I119
sg33
g7104
sg63
g64
sS'trial_loop.thisIndex'
p8042
g59
(g98
S'w\x00\x00\x00'
tRp8043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8044
I0
sg6379
g7163
sS'block_loop.thisRepN'
p8045
I2
sg6382
g7104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8046
I2
sg6384
g7111
sg55
g11
sS'block_loop.thisTrial'
p8047
Nsg69
Vn
sS'block_loop.thisTrialN'
p8048
I0
sg39
F1.0501763625215972
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1a\x16\n\xc5\xd0'
tRp8049
sa(dp8050
S'trial_loop.thisTrialN'
p8051
I120
sg6370
g7288
sS'block_loop.thisIndex'
p8052
g6364
sg38
S'right'
p8053
sg58
g62
sS'trial_loop.thisN'
p8054
I120
sg33
g6520
sg63
g64
sS'trial_loop.thisIndex'
p8055
g59
(g98
S'x\x00\x00\x00'
tRp8056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8057
I0
sg6379
g7295
sS'block_loop.thisRepN'
p8058
I2
sg6382
g6520
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8059
I2
sg6384
g6514
sg55
g11
sS'block_loop.thisTrial'
p8060
Nsg69
Vn
sS'block_loop.thisTrialN'
p8061
I0
sg39
F0.81684726766252425
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1a\x1c\x0c\r\xf0'
tRp8062
sa(dp8063
S'trial_loop.thisTrialN'
p8064
I121
sg6370
g6831
sS'block_loop.thisIndex'
p8065
g6364
sg38
S'right'
p8066
sg58
g62
sS'trial_loop.thisN'
p8067
I121
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p8068
g59
(g98
S'y\x00\x00\x00'
tRp8069
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8070
I0
sg6379
g6838
sS'block_loop.thisRepN'
p8071
I2
sg6382
g6715
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8072
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p8073
Nsg69
Vn
sS'block_loop.thisTrialN'
p8074
I0
sg39
F0.76676299226528499
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1a"\t\xc4\x00'
tRp8075
sa(dp8076
S'trial_loop.thisTrialN'
p8077
I122
sg6370
g6859
sS'block_loop.thisIndex'
p8078
g6364
sg38
S'left'
p8079
sg58
g62
sS'trial_loop.thisN'
p8080
I122
sg33
g6863
sg63
g64
sS'trial_loop.thisIndex'
p8081
g59
(g98
S'z\x00\x00\x00'
tRp8082
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8083
I0
sg6379
g6867
sS'block_loop.thisRepN'
p8084
I2
sg6382
g6863
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8085
I2
sg6384
g6870
sg55
g11
sS'block_loop.thisTrial'
p8086
Nsg69
Vn
sS'block_loop.thisTrialN'
p8087
I0
sg39
F1.1835259275139833
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1a(\x06\xc6`'
tRp8088
sa(dp8089
S'trial_loop.thisTrialN'
p8090
I123
sg6370
g6681
sS'block_loop.thisIndex'
p8091
g6364
sg38
S'left'
p8092
sg58
g62
sS'trial_loop.thisN'
p8093
I123
sg33
g6685
sg63
g64
sS'trial_loop.thisIndex'
p8094
g59
(g98
S'{\x00\x00\x00'
tRp8095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8096
I0
sg6379
g6689
sS'block_loop.thisRepN'
p8097
I2
sg6382
g6685
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8098
I2
sg6384
g6692
sg55
g11
sS'block_loop.thisTrial'
p8099
Nsg69
Vn
sS'block_loop.thisTrialN'
p8100
I0
sg39
F0.91687469423413859
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1a.\t\xf2\xe0'
tRp8101
sa(dp8102
S'trial_loop.thisTrialN'
p8103
I124
sg6370
g7582
sS'block_loop.thisIndex'
p8104
g6364
sg38
S'left'
p8105
sg58
g62
sS'trial_loop.thisN'
p8106
I124
sg33
g6745
sg63
g64
sS'trial_loop.thisIndex'
p8107
g59
(g98
S'|\x00\x00\x00'
tRp8108
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8109
I0
sg6379
g7589
sS'block_loop.thisRepN'
p8110
I2
sg6382
g6745
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8111
I2
sg6384
g6752
sg55
g11
sS'block_loop.thisTrial'
p8112
Nsg69
Vn
sS'block_loop.thisTrialN'
p8113
I0
sg39
F0.75018217854812974
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1a4\t\x18 '
tRp8114
sa(dp8115
S'trial_loop.thisTrialN'
p8116
I125
sg6370
g7489
sS'block_loop.thisIndex'
p8117
g6364
sg38
S'left'
p8118
sg58
g62
sS'trial_loop.thisN'
p8119
I125
sg33
g7048
sg63
g64
sS'trial_loop.thisIndex'
p8120
g59
(g98
S'}\x00\x00\x00'
tRp8121
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8122
I0
sg6379
g7496
sS'block_loop.thisRepN'
p8123
I2
sg6382
g7048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8124
I2
sg6384
g7055
sg55
g11
sS'block_loop.thisTrial'
p8125
Nsg69
Vn
sS'block_loop.thisTrialN'
p8126
I0
sg39
F1.2001794415918994
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1a:\x05\xdc\x00'
tRp8127
sa(dp8128
S'trial_loop.thisTrialN'
p8129
I126
sg6370
g7100
sS'block_loop.thisIndex'
p8130
g6364
sg38
S'left'
p8131
sg58
g62
sS'trial_loop.thisN'
p8132
I126
sg33
g7104
sg63
g64
sS'trial_loop.thisIndex'
p8133
g59
(g98
S'~\x00\x00\x00'
tRp8134
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8135
I0
sg6379
g7108
sS'block_loop.thisRepN'
p8136
I2
sg6382
g7104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8137
I2
sg6384
g7111
sg55
g11
sS'block_loop.thisTrial'
p8138
Nsg69
Vn
sS'block_loop.thisTrialN'
p8139
I0
sg39
F1.0667754226014949
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1b\x04\t\x85\x80'
tRp8140
sa(dp8141
S'trial_loop.thisTrialN'
p8142
I127
sg6370
g6681
sS'block_loop.thisIndex'
p8143
g6364
sg38
S'left'
p8144
sg58
g62
sS'trial_loop.thisN'
p8145
I127
sg33
g6685
sg63
g64
sS'trial_loop.thisIndex'
p8146
g59
(g98
S'\x7f\x00\x00\x00'
tRp8147
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8148
I0
sg6379
g6689
sS'block_loop.thisRepN'
p8149
I2
sg6382
g6685
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8150
I2
sg6384
g6692
sg55
g11
sS'block_loop.thisTrial'
p8151
Nsg69
Vn
sS'block_loop.thisTrialN'
p8152
I0
sg39
F0.65009431089856662
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1b\n\x0b\x088'
tRp8153
sa(dp8154
S'trial_loop.thisTrialN'
p8155
I128
sg6370
g6666
sS'block_loop.thisIndex'
p8156
g6364
sg38
S'left'
p8157
sg58
g62
sS'trial_loop.thisN'
p8158
I128
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8159
g59
(g98
S'\x80\x00\x00\x00'
tRp8160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8161
I0
sg6379
g6673
sS'block_loop.thisRepN'
p8162
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8163
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8164
Nsg69
Vn
sS'block_loop.thisTrialN'
p8165
I0
sg39
F0.8001162065374956
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1b\x10\x06"P'
tRp8166
sa(dp8167
S'trial_loop.thisTrialN'
p8168
I129
sg6370
g6803
sS'block_loop.thisIndex'
p8169
g6364
sg38
S'right'
p8170
sg58
g62
sS'trial_loop.thisN'
p8171
I129
sg33
g6768
sg63
g64
sS'trial_loop.thisIndex'
p8172
g59
(g98
S'\x81\x00\x00\x00'
tRp8173
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8174
I0
sg6379
g6810
sS'block_loop.thisRepN'
p8175
I2
sg6382
g6768
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8176
I2
sg6384
g6762
sg55
g11
sS'block_loop.thisTrial'
p8177
Nsg69
Vn
sS'block_loop.thisTrialN'
p8178
I0
sg39
F1.1168782294625998
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1b\x16\x03\x99\xe0'
tRp8179
sa(dp8180
S'trial_loop.thisTrialN'
p8181
I130
sg6370
g6651
sS'block_loop.thisIndex'
p8182
g6364
sg38
S'right'
p8183
sg58
g62
sS'trial_loop.thisN'
p8184
I130
sg33
g6538
sg63
g64
sS'trial_loop.thisIndex'
p8185
g59
(g98
S'\x82\x00\x00\x00'
tRp8186
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8187
I0
sg6379
g6658
sS'block_loop.thisRepN'
p8188
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8189
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8190
Nsg69
Vn
sS'block_loop.thisTrialN'
p8191
I0
sg39
F1.2833888516979641
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1b\x1c\x05\xd8\x18'
tRp8192
sa(dp8193
S'trial_loop.thisTrialN'
p8194
I131
sg6370
g6459
sS'block_loop.thisIndex'
p8195
g6364
sg38
S'right'
p8196
sg58
g62
sS'trial_loop.thisN'
p8197
I131
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8198
g59
(g98
S'\x83\x00\x00\x00'
tRp8199
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8200
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8201
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8202
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8203
Nsg69
Vn
sS'block_loop.thisTrialN'
p8204
I0
sg39
F0.95002805378317134
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1b"\n\xb2H'
tRp8205
sa(dp8206
S'trial_loop.thisTrialN'
p8207
I132
sg6370
g7489
sS'block_loop.thisIndex'
p8208
g6364
sg38
S'left'
p8209
sg58
g62
sS'trial_loop.thisN'
p8210
I132
sg33
g7048
sg63
g64
sS'trial_loop.thisIndex'
p8211
g59
(g98
S'\x84\x00\x00\x00'
tRp8212
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8213
I0
sg6379
g7496
sS'block_loop.thisRepN'
p8214
I2
sg6382
g7048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8215
I2
sg6384
g7055
sg55
g11
sS'block_loop.thisTrial'
p8216
Nsg69
Vn
sS'block_loop.thisTrialN'
p8217
I0
sg39
F1.0168593558810244
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1b(\n\x8b8'
tRp8218
sa(dp8219
S'trial_loop.thisTrialN'
p8220
I133
sg6370
g7016
sS'block_loop.thisIndex'
p8221
g6364
sg38
S'right'
p8222
sg58
g62
sS'trial_loop.thisN'
p8223
I133
sg33
g6990
sg63
g64
sS'trial_loop.thisIndex'
p8224
g59
(g98
S'\x85\x00\x00\x00'
tRp8225
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8226
I0
sg6379
g7023
sS'block_loop.thisRepN'
p8227
I2
sg6382
g6990
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8228
I2
sg6384
g6997
sg55
g11
sS'block_loop.thisTrial'
p8229
Nsg69
Vn
sS'block_loop.thisTrialN'
p8230
I0
sg39
F0.89992923831596272
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1b.\x0bZ@'
tRp8231
sa(dp8232
S'trial_loop.thisTrialN'
p8233
I134
sg6370
g6621
sS'block_loop.thisIndex'
p8234
g6364
sg38
S'left'
p8235
sg58
g62
sS'trial_loop.thisN'
p8236
I134
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8237
g59
(g98
S'\x86\x00\x00\x00'
tRp8238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8239
I0
sg6379
g6628
sS'block_loop.thisRepN'
p8240
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8241
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8242
Nsg69
Vn
sS'block_loop.thisTrialN'
p8243
I0
sg39
F0.78357103024609387
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1b4\nA\x00'
tRp8244
sa(dp8245
S'trial_loop.thisTrialN'
p8246
I135
sg6370
g6527
sS'block_loop.thisIndex'
p8247
g6364
sg38
S'left'
p8248
sg58
g62
sS'trial_loop.thisN'
p8249
I135
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8250
g59
(g98
S'\x87\x00\x00\x00'
tRp8251
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8252
I0
sg6379
g6535
sS'block_loop.thisRepN'
p8253
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8254
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8255
Nsg69
Vn
sS'block_loop.thisTrialN'
p8256
I0
sg39
F0.80019090259156656
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1b:\x07}\xf8'
tRp8257
sa(dp8258
S'trial_loop.thisTrialN'
p8259
I136
sg6370
g7448
sS'block_loop.thisIndex'
p8260
g6364
sg38
S'right'
p8261
sg58
g62
sS'trial_loop.thisN'
p8262
I136
sg33
g6595
sg63
g64
sS'trial_loop.thisIndex'
p8263
g59
(g98
S'\x88\x00\x00\x00'
tRp8264
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8265
I0
sg6379
g7455
sS'block_loop.thisRepN'
p8266
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8267
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p8268
Nsg69
Vn
sS'block_loop.thisTrialN'
p8269
I0
sg39
F0.96688284807532909
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1c\x04\x04\xf5\x88'
tRp8270
sa(dp8271
S'trial_loop.thisTrialN'
p8272
I137
sg6370
g6917
sS'block_loop.thisIndex'
p8273
g6364
sg38
S'right'
p8274
sg58
g62
sS'trial_loop.thisN'
p8275
I137
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8276
g59
(g98
S'\x89\x00\x00\x00'
tRp8277
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8278
I0
sg6379
g6924
sS'block_loop.thisRepN'
p8279
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8280
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8281
Nsg69
Vn
sS'block_loop.thisTrialN'
p8282
I0
sg39
F1.0000541688932572
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1c\n\x04\xcex'
tRp8283
sa(dp8284
S'trial_loop.thisTrialN'
p8285
I138
sg6370
g7044
sS'block_loop.thisIndex'
p8286
g6364
sg38
S'right'
p8287
sg58
g62
sS'trial_loop.thisN'
p8288
I138
sg33
g7055
sg63
g64
sS'trial_loop.thisIndex'
p8289
g59
(g98
S'\x8a\x00\x00\x00'
tRp8290
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8291
I0
sg6379
g7052
sS'block_loop.thisRepN'
p8292
I2
sg6382
g7048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8293
I2
sg6384
g7055
sg55
g11
sS'block_loop.thisTrial'
p8294
Nsg69
Vn
sS'block_loop.thisTrialN'
p8295
I0
sg39
F0.98343116045725765
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1c\x10\x05b\xe8'
tRp8296
sa(dp8297
S'trial_loop.thisTrialN'
p8298
I139
sg6370
g6986
sS'block_loop.thisIndex'
p8299
g6364
sg38
S'left'
p8300
sg58
g62
sS'trial_loop.thisN'
p8301
I139
sg33
g6990
sg63
g64
sS'trial_loop.thisIndex'
p8302
g59
(g98
S'\x8b\x00\x00\x00'
tRp8303
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8304
I0
sg6379
g6994
sS'block_loop.thisRepN'
p8305
I2
sg6382
g6990
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8306
I2
sg6384
g6997
sg55
g11
sS'block_loop.thisTrial'
p8307
Nsg69
Vn
sS'block_loop.thisTrialN'
p8308
I0
sg39
F0.88327116264554206
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1c\x16\x05\xb4\xf0'
tRp8309
sa(dp8310
S'trial_loop.thisTrialN'
p8311
I140
sg6370
g7156
sS'block_loop.thisIndex'
p8312
g6364
sg38
S'right'
p8313
sg58
g62
sS'trial_loop.thisN'
p8314
I140
sg33
g7104
sg63
g64
sS'trial_loop.thisIndex'
p8315
g59
(g98
S'\x8c\x00\x00\x00'
tRp8316
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8317
I0
sg6379
g7163
sS'block_loop.thisRepN'
p8318
I2
sg6382
g7104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8319
I2
sg6384
g7111
sg55
g11
sS'block_loop.thisTrial'
p8320
Nsg69
Vn
sS'block_loop.thisTrialN'
p8321
I0
sg39
F1.0834297919791425
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1c\x1c\x04a\x18'
tRp8322
sa(dp8323
S'trial_loop.thisTrialN'
p8324
I141
sg6370
g6803
sS'block_loop.thisIndex'
p8325
g6364
sg38
S'right'
p8326
sg58
g62
sS'trial_loop.thisN'
p8327
I141
sg33
g6768
sg63
g64
sS'trial_loop.thisIndex'
p8328
g59
(g98
S'\x8d\x00\x00\x00'
tRp8329
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8330
I0
sg6379
g6810
sS'block_loop.thisRepN'
p8331
I2
sg6382
g6768
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8332
I2
sg6384
g6762
sg55
g11
sS'block_loop.thisTrial'
p8333
Nsg69
Vn
sS'block_loop.thisTrialN'
p8334
I0
sg39
F0.86686768078652676
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1c"\x06"P'
tRp8335
sa(dp8336
S'trial_loop.thisTrialN'
p8337
I142
sg6370
g7016
sS'block_loop.thisIndex'
p8338
g6364
sg38
S'right'
p8339
sg58
g62
sS'trial_loop.thisN'
p8340
I142
sg33
g6990
sg63
g64
sS'trial_loop.thisIndex'
p8341
g59
(g98
S'\x8e\x00\x00\x00'
tRp8342
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8343
I0
sg6379
g7023
sS'block_loop.thisRepN'
p8344
I2
sg6382
g6990
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8345
I2
sg6384
g6997
sg55
g11
sS'block_loop.thisTrial'
p8346
Nsg69
Vn
sS'block_loop.thisTrialN'
p8347
I0
sg39
F1.2164859896438429
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1c(\x04\x8f\xf8'
tRp8348
sa(dp8349
S'trial_loop.thisTrialN'
p8350
I143
sg6370
g6476
sS'block_loop.thisIndex'
p8351
g6364
sg38
S'left'
p8352
sg58
g62
sS'trial_loop.thisN'
p8353
I143
sg33
g6487
sg63
g64
sS'trial_loop.thisIndex'
p8354
g59
(g98
S'\x8f\x00\x00\x00'
tRp8355
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8356
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8357
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8358
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8359
Nsg69
Vn
sS'block_loop.thisTrialN'
p8360
I0
sg39
F1.1835304891064879
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1c.\x08t\x10'
tRp8361
sa(dp8362
S'trial_loop.thisTrialN'
p8363
I144
sg6370
g6711
sS'block_loop.thisIndex'
p8364
g6364
sg38
S'left'
p8365
sg58
g62
sS'trial_loop.thisN'
p8366
I144
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p8367
g59
(g98
S'\x90\x00\x00\x00'
tRp8368
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8369
I0
sg6379
g6719
sS'block_loop.thisRepN'
p8370
I2
sg6382
g6715
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8371
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p8372
Nsg69
Vn
sS'block_loop.thisTrialN'
p8373
I0
sg39
F0.70055748345839675
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1c4\x0b\xa4x'
tRp8374
sa(dp8375
S'trial_loop.thisTrialN'
p8376
I145
sg6370
g7582
sS'block_loop.thisIndex'
p8377
g6364
sg38
S'left'
p8378
sg58
g62
sS'trial_loop.thisN'
p8379
I145
sg33
g6745
sg63
g64
sS'trial_loop.thisIndex'
p8380
g59
(g98
S'\x91\x00\x00\x00'
tRp8381
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8382
I0
sg6379
g7589
sS'block_loop.thisRepN'
p8383
I2
sg6382
g6745
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8384
I2
sg6384
g6752
sg55
g11
sS'block_loop.thisTrial'
p8385
Nsg69
Vn
sS'block_loop.thisTrialN'
p8386
I0
sg39
F0.68353590599508607
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1c:\x07\xb0\xc0'
tRp8387
sa(dp8388
S'trial_loop.thisTrialN'
p8389
I146
sg6370
g7448
sS'block_loop.thisIndex'
p8390
g6364
sg38
S'right'
p8391
sg58
g62
sS'trial_loop.thisN'
p8392
I146
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p8393
g59
(g98
S'\x92\x00\x00\x00'
tRp8394
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8395
I0
sg6379
g7455
sS'block_loop.thisRepN'
p8396
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8397
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p8398
Nsg69
Vn
sS'block_loop.thisTrialN'
p8399
I0
sg39
F0.98350386081801844
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1d\x04\x03C\xf0'
tRp8400
sa(dp8401
S'trial_loop.thisTrialN'
p8402
I147
sg6370
g6932
sS'block_loop.thisIndex'
p8403
g6364
sg38
S'right'
p8404
sg58
g62
sS'trial_loop.thisN'
p8405
I147
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8406
g59
(g98
S'\x93\x00\x00\x00'
tRp8407
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8408
I0
sg6379
g6939
sS'block_loop.thisRepN'
p8409
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8410
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8411
Nsg69
Vn
sS'block_loop.thisTrialN'
p8412
I0
sg39
F1.0167823790288821
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1d\n\x03\x95\xf8'
tRp8413
sa(dp8414
S'trial_loop.thisTrialN'
p8415
I148
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p8416
sS'block_loop.thisIndex'
p8417
g6364
sg38
S'left'
p8418
sg58
g62
sS'trial_loop.thisN'
p8419
I148
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8420
g59
(g98
S'\x94\x00\x00\x00'
tRp8421
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8422
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p8423
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F1.0835210238037689
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1d\x10\x04e\x00'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g6666
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'left'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g6673
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F1.3838983814312087
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1d\x16\x06&8'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g7582
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'left'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6745
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g7589
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6745
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6752
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F0.71677479538266198
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1d\x1c\x0co\x98'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g6986
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'left'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6990
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g6994
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6990
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g6997
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F2.0331784483059891
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1d"\x08\xb6x'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g7100
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'left'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g7104
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g7108
sS'block_loop.thisRepN'
p8476
I2
sg6382
g7104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g7111
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F2.0000128294777824
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1d)\t\xbc0'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g8416
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'left'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g8423
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F0.90019523610317265
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1d0\nH\xd0'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6711
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'left'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6722
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6719
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6715
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F0.96722439721634146
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1d6\t/\x90'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g6636
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'right'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6578
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g6643
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.90011284236243227
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1e\x00\tG\x00'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g7433
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'right'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6863
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g7440
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6863
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g6870
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F1.1002244302871986
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1e\x06\x08-\xc0'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g6371
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'right'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.78344073980042594
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1e\x0c\n)\x90'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g6986
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'left'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6997
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g6994
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6990
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g6997
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F1.8164809148729546
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1e\x12\x07f\x88'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6391
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'right'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F0.73391012753199902
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1e\x19\x05\x18\xb0'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6859
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'left'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6863
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6867
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6863
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6870
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.75019386762505746
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1e\x1f\x01\x9e\x10'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g6636
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'right'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g6643
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.76683683302326244
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1e$\re\xb0'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g8416
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'left'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g8423
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F1.3002074383584841
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1e*\nd('
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g6741
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'right'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6745
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g6749
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6745
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g6752
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F0.8168680799244612
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1e1\x00:\x98'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g7016
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'right'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6997
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g7023
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6990
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g6997
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F0.8166428513613937
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1e6\r2\xe8'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g6371
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.68354673977228231
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1f\x00\n\xe8\xf8'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6459
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'right'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F1.133392900112085
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1f\x06\x06\xb6\xc0'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g6621
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'left'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g6628
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F0.93345579304877901
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1f\x0c\t/\x90'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g7016
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'right'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6990
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g7023
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6990
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g6997
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F0.93320975222741254
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1f\x12\x08\x8fh'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g6559
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'right'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g6566
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.96677108909352683
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1f\x18\x08-\xc0'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g6859
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'left'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6863
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g6867
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6863
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6870
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.71686317621424678
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1f\x1e\x08E0'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g7288
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'right'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6520
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g7295
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6520
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6514
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F0.98383628677402157
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1f$\x04Qx'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g6621
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'left'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g6628
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F1.1001035481203871
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1f*\x04\xa3\x80'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g6425
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'left'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F1.3168697905202862
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1f0\x06\xa38'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g6917
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'right'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g6924
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.95018656907632248
sg34
g752
(S'\x07\xdf\t\x18\x0f\x1f6\x0b\xf6\x80'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6442
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'right'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F0.93344011257795501
sg34
g752
(S'\x07\xdf\t\x18\x0f \x00\x0b\xd3X'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g6803
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'right'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6768
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g6810
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6768
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6762
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.93355985434754984
sg34
g752
(S'\x07\xdf\t\x18\x0f \x06\x0b30'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g7288
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6520
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g7295
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6520
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g6514
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F0.76679663400136633
sg34
g752
(S'\x07\xdf\t\x18\x0f \x0c\n\x93\x08'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6493
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'right'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.80022340393043123
sg34
g752
(S'\x07\xdf\t\x18\x0f \x12\x07\x91\x80'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g7582
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'left'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6745
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g7589
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6745
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g6752
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.78346269245594158
sg34
g752
(S'\x07\xdf\t\x18\x0f \x18\x05\x0c\xf8'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g8416
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'left'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g8423
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F1.000106056992081
sg34
g752
(S'\x07\xdf\t\x18\x0f \x1e\x02F\x08'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g6510
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'left'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g6518
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6520
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6514
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F0.73353835785019328
sg34
g752
(S'\x07\xdf\t\x18\x0f $\x02\xdax'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g7448
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'right'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6595
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g7455
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.73391754011754529
sg34
g752
(S'\x07\xdf\t\x18\x0f )\x0ec\x98'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g6741
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'right'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6745
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g6749
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6745
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g6752
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F0.73349046114162775
sg34
g752
(S'\x07\xdf\t\x18\x0f /\n\xe8\xf8'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g6527
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'left'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g6535
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F1.4500907756628294
sg34
g752
(S'\x07\xdf\t\x18\x0f 5\x07nX'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g6711
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'left'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g6719
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6715
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F1.3501192285912111
sg34
g752
(S'\x07\xdf\t\x18\x0f ;\x0e\xa9\xe8'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6493
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'right'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F0.86680011221687892
sg34
g752
(S'\x07\xdf\t\x18\x0f!\x06\x05r\x88'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g8416
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'left'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g8423
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F0.86705299542518333
sg34
g752
(S'\x07\xdf\t\x18\x0f!\x0c\x03\xe00'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g6902
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'left'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g6909
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F1.2668051869877672
sg34
g752
(S'\x07\xdf\t\x18\x0f!\x12\x02M\xd8'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g6758
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'left'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6768
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g6766
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6768
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6762
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.9168501756794285
sg34
g752
(S'\x07\xdf\t\x18\x0f!\x18\x06\xe9\x88'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g7433
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'right'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6870
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g7440
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6863
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g6870
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F0.90020236358759576
sg34
g752
(S'\x07\xdf\t\x18\x0f!\x1e\x06\x0e\xc8'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g7044
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'right'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g7048
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g7052
sS'block_loop.thisRepN'
p8983
I2
sg6382
g7048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g7055
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F0.86685855760151753
sg34
g752
(S'\x07\xdf\t\x18\x0f!$\x050 '
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g6459
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'right'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F1.550108223749703
sg34
g752
(S'\x07\xdf\t\x18\x0f!*\x03\x9d\xc8'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g7044
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'right'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g7048
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g7052
sS'block_loop.thisRepN'
p9009
I2
sg6382
g7048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g7055
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F0.85010440341648064
sg34
g752
(S'\x07\xdf\t\x18\x0f!0\x0c\x83 '
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6831
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'right'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6838
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6715
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F0.93356869243143592
sg34
g752
(S'\x07\xdf\t\x18\x0f!6\n\xb60'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g7433
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'right'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6870
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g7440
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6863
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g6870
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F0.66686329025469604
sg34
g752
(S'\x07\xdf\t\x18\x0f"\x00\n\x16\x08'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g6711
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'left'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g6719
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6715
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g6722
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F1.0000900914237718
sg34
g752
(S'\x07\xdf\t\x18\x0f"\x06\x05\xa5P'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6788
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'right'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6685
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6795
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6685
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6692
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F0.86676162379080779
sg34
g752
(S'\x07\xdf\t\x18\x0f"\x0c\x05\xfb@'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g6917
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'right'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g6924
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.85027489288768265
sg34
g752
(S'\x07\xdf\t\x18\x0f"\x12\x04\xa3\x80'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g6574
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'left'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g6582
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.88350266339693917
sg34
g752
(S'\x07\xdf\t\x18\x0f"\x18\x02\xd6\x90'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I60
sg56
Vr
sg57
Vn
sg42
I540
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I60
sg55
g11
sg56
Vr
sg45
F0.12
sg42
I540
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I01
sg48
I25
sg47
g677
sg51
F30.279999999999998
sg46
F0.17999999999999894
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I79864656
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\\\x8f\x82?\xb8\x1e\x85>\n\xd7\xa3=)\\\x8f>\x8f\xc2\xf5=)\\\x8f>H\xe1\xba?\xecQ8>\x00\x00\x00\x00\xecQ8>\x8f\xc2\xf5>\x8f\xc2u=)\\\x0f>\x00\x00\x00\x00\x00\x00\x00\x00\xcd\xcc\x8c?\x14\xaeG?\x00\x00\x00\x00\xcd\xccL>\n\xd7#>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\xaeG?\x00\x00\x00\x00\xecQ8>\x00\x00\x00?\x14\xae\x87?\x00\x00\x00\x00\x00\x00\x00\x00\\\x8f\x82?\x8f\xc2\xf5=H\xe1z?\x00\x00\x00\x00)\\\x0f>33\xb3?\xb8\x1e\x85>\x00\x00\x00\x00\x00\x00\x00\x00\xecQ8>'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'!\xb0j@u\x93\xf0@u\x93\xa0@\xa8\xc6K@u\x93\x18@\xfc\xa9\t@!\xb0*@\xdd$\x8a@T\xe3]@\xfc\xa9\x19@\xee|\x07@B`%@\xdb\xf9~@u\x93\x18@u\x93\x08@\xa2E\x14A\x00\x00TA/\xdd\x1c@!\xb0j@\xfe\xd4\x84@B`\x15@T\xe3\x1d@B`\x05@/\xdd|@\x87\x16!@\x96C#@1\x08\x80@!\xb0\xea@T\xe3-@\x87\x16\x01@\xe9&q@\x87\x161@T\xe3\x1d@T\xe3\xb5@\xbaI\x84@\x7fj\nAu\x93\x18@\xfc\xa9I@^\xba\xd9?T\xe3\x9d@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x98A\x00\x00PA\x00\x00@@\x00\x00\x88A\x00\x00\x04B\x00\x00\x1cB\x00\x00\x14B\x00\x00 A\x00\x00`A\x00\x00\xb0A\x00\x00\x08B\x00\x00\x00A\x00\x00\xc0A\x00\x00\x10B\x00\x00\xe0A\x00\x00\x80@\x00\x00\x00\x00\x00\x00pA\x00\x00\x0cB\x00\x00\x00B\x00\x00\xe0@\x00\x00\xb8A\x00\x00\xc8A\x00\x00@A\x00\x00\x10A\x00\x00\xa8A\x00\x00\xf8A\x00\x00\x80?\x00\x00\xa0A\x00\x00\x90A\x00\x00\xe8A\x00\x00\x18B\x00\x00\xf0A\x00\x00\x00@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xd8A\x00\x00\x80A\x00\x00\xd0A\x00\x000A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\x9a\x99\x99?ff\xa6?\xcd\xcc\xcc?33\xb3?\x00\x00\x00@\x00\x00\xc0?\x9a\x99\x99?ff\xa6?\x9a\x99\xd9?\x00\x00\xc0?\x9a\x99\x99?ff\xa6?33\xb3?ff\xe6?\x9a\x99\xd9?\x9a\x99\x99?\x9a\x99\xd9?33\xf3?\x9a\x99\xd9?33\xf3?\xcd\xcc\x8c?\xcd\xcc\x8c?\x9a\x99\x99?\xcd\xcc\xcc?\x00\x00\xc0?\x9a\x99\xd9?\x9a\x99\xd9?33\xf3?33\xf3?\x9a\x99\x99?33\xf3?\x00\x00\x80?33\xf3?\x00\x00\xc0?\x9a\x99\xd9?33\xb3?33\xf3?33\xf3?\x00\x00\x80?\xcd\xcc\xcc?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\x10\x00\x00\x00\x1b\x00\x00\x00!\x00\x00\x00\x02\x00\x00\x00\x0f\x00\x00\x00"\x00\x00\x00#\x00\x00\x00\x14\x00\x00\x00\x0b\x00\x00\x00\x18\x00\x00\x00\x07\x00\x00\x00\'\x00\x00\x00\x17\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00\x11\x00\x00\x00%\x00\x00\x00\x03\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x19\x00\x00\x00\t\x00\x00\x00\x15\x00\x00\x00\x0c\x00\x00\x00\x16\x00\x00\x00&\x00\x00\x00$\x00\x00\x00\x0e\x00\x00\x00\x1e\x00\x00\x00 \x00\x00\x00\x1a\x00\x00\x00\x13\x00\x00\x00\x04\x00\x00\x00\n\x00\x00\x00\x12\x00\x00\x00\r\x00\x00\x00\x06\x00\x00\x00\x1f\x00\x00\x00\x05\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g235
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g193
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g123
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g221
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g333
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g375
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g361
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g172
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g200
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g256
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g340
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g158
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g270
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g354
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g298
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g130
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g102
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g207
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g347
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g326
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g151
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g263
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g277
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g186
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g165
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g249
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g319
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g109
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g242
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g228
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g305
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g368
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g312
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g116
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g137
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g144
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g291
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g214
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g284
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g179
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I79864656
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\xcd\xcc\x9c@33s@ff&@fff@\x00\x00`@\x00\x00\xa0@\x00\x00`@ff\xb6@\x00\x00\x00@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\x00@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xa0@\x00\x00\x80@\x00\x00@@fff@\x00\x00\xc0?\x00\x00\xc0?\x00\x00\xc0@\x9a\x99\xa9@\xcd\xccl@\xcd\xcc\x8c@\x00\x00\xc0@33\x83@33\xa3@ff\xa6?33\xa3@\xcd\xccl@\x00\x00 @33s@\x00\x00\xc0@ff\xa6@\xcd\xcc\x8c@\x00\x00\x80@33\xb3@\xcd\xcc\xac@33\xa3@\xcd\xccl@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'\xe0eV@u\xe0M@\xd7f\xa6@\\Q%@`2\x03@\x82h\xa6?\xa2\xb8\x0b@\xb0\x9c\xd9?\x86g\x96@\xe5\xbe\x9b?\xf8\xa9\x8a?\x93\x9ay@\xd2\x04\xa0?\xb4zw?\x07\x13\x91?~u\xd7?\xbd\xf0\xce?\xb6\x01\xe0?8"\x84A\xf9\xee*AVJ\xe4?\xcb\xf0\x8e?x\xdd=A+[\xd5?\xbf\x04@?\xe6\xfd\xbf?\xfd\xab:@}z\x17@-\x07\xa0?d\xac\x8a?\xd2\x00\xa0?\xa8\x9a)@]\xf4n?9(\x82?\x96\x89\x88?\x18#\xe2?\xe3\x00\xa0?Yy\xb7?\xbeC\x84?\x13"\xaa@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'ffF@33\x83@fff@\x9a\x99\x89@33s@333@\x9a\x99y@33s@\x9a\x999@33s@ffF@ff\x86@\xcd\xcc,@\xcd\xcc,@\x00\x00`@\x9a\x999@33S@\x00\x00\x80@33S@33\x83@\x00\x00@@333@\x9a\x99\x89@33S@\xcd\xccl@33\x83@ff\x86@\x9a\x99Y@\x00\x00`@\xcd\xccL@fff@\x9a\x99Y@\x9a\x99\x89@\x9a\x999@33s@\x9a\x99Y@\x00\x00`@\x00\x00\x80@\x00\x00@@ff\x86@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x80\r\r\x03\x80O\x1f\r\x80\xb2o\r\xc0\xb5o\r O\x1f\r\x00\xb6o\r\x80z!\r`}!\r\xa0{!\r`O\x1f\r\xc0s!\r\xe0O\x1f\r\x00N\x1f\r\xc0\xe0\x1f\r\xc0\xb6o\r\x80\xb0o\r\xa0\xb5o\r\xe0N\x1f\r@I\x0c\x03\xa0\xdcm\r`\xe0\x1f\r @\x0e\x03@A\x0e\x03 A\x0e\x03\x80B\x0e\x03 B\x0e\x03`B\x0e\x03\x00C\x0e\x03\x00B\x0e\x03@B\x0e\x03\x80@\x0e\x03\x00A\x0e\x03\xc0B\x0e\x03\x80A\x0e\x03@@\x0e\x03\x80E\x0e\x03\xc0@\x0e\x03 C\x0e\x03`@\x0e\x03\xa0@\x0e\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xaa\xf1\xd6@u\x93\x18@\x10X\x9d@\x83\xc0\xca?\xc5 \xc0?\x83\xc0\xca?\x98n\x86@D\x8b\x80@\xc9v6@P\x8dw?\xdb\xf9\x8e?u\x938@\x0e-\x82?+\x87\x86?\xb6\xf3\xbd?^\xba\xd9?\xa8\xc6\xfb?\xbaI\x14@\xbaI\xac@\x87\x16\x01@+\x87\x86?\xfc\xa9\t@+\x87\xe6?\xdb\xf9\x8e?\xd3Mb?!\xb0Z@\xc9v\x16@u\x93\x08@\x83\xc0\x8a?m\xe7{?\x1dZ\xc4?u\x93\x88?9\xb4H?\x0e-\x82?\xe9&\x91?\x83\xc0\x8a?\xbcts?\xbaI\x04@\xa8\xc6\x9b?\xb6\xf3\xfd?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I79864656
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'\x00\x81\xb2\rX\x94\xb2\r\x80\x94\xb2\rP&\x0e\x03X\x94\xb2\r\x00\x81\xb2\r\xa8\x94\xb2\r\xc0%\x0e\x03\xa8\x94\xb2\r\xd0\x94\xb2\r\x98\x95\xb2\r\x80\x94\xb2\r\xd0\x94\xb2\r\xf8\x94\xb2\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'\xa8kP\x04h\xc9H\x02\xf8\x0c\xf2\x04hV\xf1\x04`^\xf1\x04\x98V\xf1\x04\xd8R\xf1\x04\xa0W\xf1\x04@T\xf1\x04hS\xf1\x04\x18[\xf1\x04\x08V\xf1\x04\xd0Z\xf1\x04\xc8_\xf1\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g755
sg82
g788
sg83
g760
sg84
g792
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g743
sg82
g797
sg83
g748
sg84
g801
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g806
sg82
g807
sg83
g811
sg84
g812
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g777
sg82
g817
sg83
g782
sg84
g821
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g806
sg82
g826
sg83
g811
sg84
g830
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g835
sg82
g836
sg83
g840
sg84
g841
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g846
sg82
g847
sg83
g851
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g766
sg82
g857
sg83
g771
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g835
sg82
g866
sg83
g840
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g846
sg82
g875
sg83
g851
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I79864656
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I79864656
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S' \xa5\xb4\r\x98e\xb4\r@\x06\x0c\x03p\xa5\xb4\r\xd8\xa6\xb4\r\xc0\r\x0c\x03\xc0\n\x0c\x03\x98e\xb4\r\x10\xb1\xb4\r\x98\xa5\xb4\r@\xb1\xb4\rxf\xb4\r\xc0\xa5\xb4\r\x98e\xb4\r\xc0\r\x0c\x03\xe0\xb0\xb4\r\xc0\r\x0c\x030\xb2\xb4\r\xd0e\xb4\r\x10\xb1\xb4\r\x80\t\x0c\x03p\xa5\xb4\r@\x0b\x0c\x03`\xb2\xb4\rx\xa7\xb4\r\x80\t\x0c\x03p\xa5\xb4\rx\xa7\xb4\r\x80\t\x0c\x03\x90\xb2\xb4\r@\x0b\x0c\x03\x98\xa5\xb4\r\xe0\xb0\xb4\r\xe0\t\x0c\x03\xd0\xb1\xb4\r\xe8\xa5\xb4\r\xc0\xa5\xb4\r\x08f\xb4\r\x98e\xb4\r\xc0\xa5\xb4\r\x90\xb2\xb4\rx\xa7\xb4\r\x08f\xb4\rp\xa5\xb4\r\xd0e\xb4\r\x08f\xb4\r \xa5\xb4\r\x08f\xb4\r\x98e\xb4\r\xe8\xa5\xb4\r\x00\xb2\xb4\r\x08f\xb4\r\x10\xb1\xb4\r\x98\xa5\xb4\r\xd0e\xb4\r\xa0\xb1\xb4\r\xd0e\xb4\r\xa0\xb1\xb4\r\xc0\xa5\xb4\r\xe0\xb0\xb4\rH\xa5\xb4\r@f\xb4\r\xc0\n\x0c\x03x\xa7\xb4\r\xe0\xb0\xb4\r\x10\xb1\xb4\r\xa0\xb1\xb4\r\x80\t\x0c\x03\x10\xa6\xb4\r\xc0\xa5\xb4\r \xa5\xb4\r\x08f\xb4\r\x10\xb1\xb4\r\x98e\xb4\r\x90\xb2\xb4\r\x00\xa7\xb4\r@\x0b\x0c\x03\xc0\n\x0c\x03\xd8\xa6\xb4\rH\xa5\xb4\r \xa5\xb4\r@\xb1\xb4\r\xa0\xb1\xb4\r \xa5\xb4\r\xd0e\xb4\r\x10\xa6\xb4\r\x98\xa5\xb4\r\x08f\xb4\r \xa5\xb4\rp\xa5\xb4\r\xc0\xa5\xb4\r\xc0\n\x0c\x03 \xa5\xb4\r\xc0\n\x0c\x03\x98e\xb4\r\x80\t\x0c\x03\xd8\xa6\xb4\r \xa5\xb4\r@\x0b\x0c\x03p\xa5\xb4\rH\xa5\xb4\rp\xb1\xb4\r\x80\t\x0c\x03\xc0\n\x0c\x03\x98\xa5\xb4\rp\xb1\xb4\r8\xa6\xb4\r\xa0\xb1\xb4\r\x10\xb1\xb4\r@\xb1\xb4\rp\xa5\xb4\r\x98e\xb4\r\xc0\n\x0c\x03p\xa5\xb4\r@\xb1\xb4\rp\xb1\xb4\r\xc0\n\x0c\x03\x00\xa7\xb4\r\xd0e\xb4\r\xa0\xb1\xb4\r\x90\xb2\xb4\r\xa0\xb1\xb4\r\x80\t\x0c\x03@\x0b\x0c\x03\xe8\xa5\xb4\r\x10\xa6\xb4\r\xd0e\xb4\r\xc0\n\x0c\x03\x10\xb1\xb4\r\x10\xa6\xb4\r@\x0b\x0c\x03\xd0e\xb4\rH\xa5\xb4\r@\x0b\x0c\x03@\xb1\xb4\r\x08f\xb4\rH\xa5\xb4\r`\xb2\xb4\rp\xb1\xb4\r\xe8\xa5\xb4\r@\xb1\xb4\r\xc0\r\x0c\x03p\xb1\xb4\r\xc0\xa5\xb4\r\x10\xa6\xb4\r\x80\t\x0c\x03\xd8\xa6\xb4\r\x98e\xb4\r \xa5\xb4\r@\x0b\x0c\x03\x98\xa5\xb4\rx\xa7\xb4\r\xd0e\xb4\r\xc0\xb2\xb4\r\xa0\xb1\xb4\r \xa5\xb4\r\xe8\xa5\xb4\rx\xa7\xb4\r\xe8\xa5\xb4\r\xc0\xb2\xb4\r\x98\xa5\xb4\r\xe0\xb0\xb4\r\x98\xa5\xb4\r\xc0\xa5\xb4\r\xd0e\xb4\r\xc0\r\x0c\x03\xe8\xa5\xb4\r\xc0\r\x0c\x03\xe8\xa5\xb4\r8\xa6\xb4\r\xc0\r\x0c\x03H\xa5\xb4\r\x10\xa6\xb4\r\x80\t\x0c\x03\xb0\xa6\xb4\r\xc0\xa5\xb4\r@\x06\x0c\x03\x80\t\x0c\x03\x98\xa5\xb4\r\xe8\xa5\xb4\r`\xb2\xb4\r@\xb1\xb4\r8\xa6\xb4\r@\xb1\xb4\r\xc0\xa5\xb4\r\x10\xa6\xb4\r\xe0\xb0\xb4\r@\x06\x0c\x03p\xb1\xb4\r@\x0b\x0c\x038\xa6\xb4\r\x10\xb1\xb4\rH\xa5\xb4\r\xa0\xb1\xb4\r\xe8f\xb4\r@\xb1\xb4\r\x10\xb1\xb4\r\xa0\xb1\xb4\r\xc0\r\x0c\x03\xb0\xa6\xb4\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'`\x00p\r@\xc3\r\x03\x80\xc6\r\x03\x80\xce\r\x03\x80\xc3\r\x03\xa0\xc0\r\x03`\xca\r\x03\xe0\xcc\r\x03\xa0\xcb\r\x03@\xc9\r\x03 \xcb\r\x03\xe0\xcf\r\x03`\xcd\r\x03\xe0\xc9\r\x03@\xca\r\x03@\xcf\r\x03@\xc8\r\x03\x80\xcf\r\x03\x80\xca\r\x03\xc0\xc9\r\x03\xe0\xca\r\x03\xa0\xc8\r\x03 \xcc\r\x03\xe0\xc8\r\x03`\xcb\r\x03\xc0\xc8\r\x03\xa0\xca\r\x03@\xcc\r\x03`\xc8\r\x03\xa0\xce\r\x03\x80\xc9\r\x03\xc0\xcb\r\x03 \xc9\r\x03@\xc6\r\x03\xe0\xcb\r\x03\x80\xcb\r\x03\x00\xce\r\x03 \xc3\r\x03 \xc8\r\x03\x80\xcc\r\x03@\xcb\r\x03\x80\xcd\r\x03\x00\xc9\r\x03\x00\xca\r\x03\xc0\xca\r\x03\x00\xcc\r\x03\xc0K\x0c\x03\xc0}p\r\x00\xdbl\r\xc0\xdal\r\x80\xd0l\r\xa0\xd2l\r\xe0\xd2l\r\xa0\xd0l\r\x00\xcb\r\x03@\xd3l\r\xe0K\x0c\x03\x80b\x14\r\x00f\x14\r`m\x14\r\xc0k\x14\r\xa0l\x14\r@\xd1l\r\x00c\x14\r k\x14\r`f\x14\r\x80g\x14\r g\x14\r`g\x14\r\x80m\x14\r`l\x14\r\xc0g\x14\r\x80l\x14\r\xa0f\x14\r@m\x14\r\x80k\x14\r@c\x14\r\xe0k\x14\r\xe0b\x14\r\x00l\x14\r\x80c\x14\r@k\x14\r@f\x14\r\xa0g\x14\r\x00g\x14\r@`\x14\r\x80f\x14\r f\x14\r\xa0c\x14\r m\x14\r `\x14\r\xe0g\x14\r@g\x14\r\xe0o\x14\r\xe0f\x14\r\xa0b\x14\r\x00\xd9l\r\xa0R\xb2\x04\xc0R\xb2\x04\x00Q\xb2\x04\x00S\xb2\x04\xe0R\xb2\x04\xe0P\xb2\x04`S\xb2\x04@S\xb2\x04\xa0S\xb2\x04\xc0S\xb2\x04 R\xb2\x04@Q\xb2\x04\xa0\xc9\r\x03\x00k\x14\r\x80T\xb2\x04 S\xb2\x04\xa0Q\xb2\x04\xa0T\xb2\x04`T\xb2\x04\xc0T\xb2\x04 Q\xb2\x04\xc0P\xb2\x04\xe0T\xb2\x04\x00U\xb2\x04`U\xb2\x04@U\xb2\x04`Q\xb2\x04\x80U\xb2\x04\xa0U\xb2\x04\xc0U\xb2\x04\xe0U\xb2\x04\x00V\xb2\x04 V\xb2\x04@V\xb2\x04`V\xb2\x04\xc0V\xb2\x04\xe0V\xb2\x04\x80R\xb2\x04 W\xb2\x04@W\xb2\x04 U\xb2\x04\x80S\xb2\x04\xa0W\xb2\x04\x80W\xb2\x04\xe0W\xb2\x04\xc0W\xb2\x04\xe0S\xb2\x04\x00X\xb2\x04 X\xb2\x04@X\xb2\x04\xa0X\xb2\x04\x80X\xb2\x04\xe0X\xb2\x04\xc0X\xb2\x04\xc0Q\xb2\x04\x00Y\xb2\x04 Y\xb2\x04\x80Y\xb2\x04\xa0Y\xb2\x04@T\xb2\x04 T\xb2\x04\x00Z\xb2\x04\xe0Y\xb2\x04@Z\xb2\x04`Z\xb2\x04\x80Z\xb2\x04`X\xb2\x04\x00W\xb2\x04\xe0Z\xb2\x04\xc0Z\xb2\x04\xa0P\xb2\x04\x00[\xb2\x04 [\xb2\x04\x80[\xb2\x04`[\xb2\x04\xc0[\xb2\x04\xa0[\xb2\x04\x00\\\xb2\x04\xe0[\xb2\x04`R\xb2\x04 \\\xb2\x04@\\\xb2\x04\xa0\\\xb2\x04\x80\\\xb2\x04\xe0Q\xb2\x04\x00]\xb2\x04 ]\xb2\x04@]\xb2\x04@R\xb2\x04`Y\xb2\x04\xa0]\xb2\x04\x80]\xb2\x04`W\xb2\x04\xc0]\xb2\x04\xe0]\xb2\x04\x00^\xb2\x04 ^\xb2\x04\x80^\xb2\x04`^\xb2\x04\xc0^\xb2\x04\xa0^\xb2\x04\x00_\xb2\x04\xe0^\xb2\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'\x16\xa0\xb9?\xaaG\xc4?\xb8\xe0\xbd?f\xbf\xbb?\xb9\xc2\xdb?\xd9\xbe\x9b?\x0b\xae\xca?\x144\x03@\xd3\x8b\xc8?2%"@\xe4\x0f\xb1?\xb5\xc1\x9b?:\xbf\x0b@\x1e\xad\xea?\xbd\x00\x8f??W\x15@\xf8\xbf\x9b?\xe7\xad\xea?\xbf\xdf\xbd?R\xf7>@\t\xd0\x0c@\xcfy\xd7?5\x12\x11@i\x96\xf9??\xc1\xfb?r\x12\x01@ Y\xd5?\xe7\x9bi@\x1f\x82w?\xeeF\x04@ g\x16@bJ\xc4?\x84i\x06@i\x89H@\x915S@\x98\xab\x9a@pz\x07@e\x8e\xe8?^\xb2\x8a?+\x14\xb1?\x94\x9ai@MG\xa4?vX\xd5?T\xc8\xfb?\x9c\xcd,@7\'\x82?Q\xf1\x8e?x\x96H?\x03\x03o?p4#@\xe7iv@l^U?\xd3\xb1j@\x0b\xad:@\xadh\xe6?\xc2V\x15@qG\xa4?\xd1\xa0\x99?\xefZ\xf5?\xeahf@\xc2\x89\x18@\xc8\xe2\xfd?\x88\x98)@\xa5\x14\x91?V[\xb5?\xf5\x8d\xe8?\xd5\x13\x11@\x8dh\x06@\xfdb\x06@\x9ci\x86?\xa0J\xa4? V\xa4?\xc1\xf1\x0e@\xdb\xfbn?\xe9z\'@\xd4\xf1\xce?\xbd\xf7\x1e@\xc3\x89\x08@\x9c~w?\xa1\x8b\xa8?\x07sf?:\x90\xa8?\xc0h\x86?Y\xb3j?\x0e\xabj?h\x1e\x82?h\xa0Y?\xb6\x92H?\xd8\xb0j?\xf7\xc4{?\xc7G\x84?\xcf\x1aQ?\xa1\xaaH?\xd76\x93?\x96\xf8n?\x81;3?B\xd3\xac?\xaa\xbfY?\xdamf?Eof?pJ\xa4?\xf3\xbe\xbb?\nK\xa4?*\xf7n?1\xc5{?\x0c\xae\n@\n]U?;sf?\\\xad\x1a@\x04\x16\x91?\xdaJ\x84?\xae\xf6n?\xaf[\xd5?JK\x84?\xf6\x11Q@\xd3\xeb]?y\xb0\xaa?\xb2\x11o?\xf3vw?\xcb\x03\xa0?\xb5y\x86?#bU?\xa5\xe1{?\x8f\x00\x00@\x07\x14\xd1?\xcas\xb7?\x85\x9a\x99?[\xbd\x8a?\xdah6@f-\x93?qH\x84?F"\xa2?\xbe\xe4\xbd?[rf?\x0cG\xe4?Y|\x97?\xe0\xcd\x1c@#j\x06@\xfb\x04\x80?\xe2\xe3\x9d?\x8f\xef\x86@\x7f\xc8{?:3b?\x0fX\xb5?\x8a\xda-@\x02&\x82?=\x13\x01@0}\xd7?$\x16Q?\xb5.b?\x98,\x82?\x8d%\x82?\x96\x02\x80?\xf8\xf5n?\xd2rf?\x1ctf?\r\xfbn?"\xb2j?\xea_U?\x0eND?gk\x86?\xf6I\x84?b\x16\x91?\x9ag\x95?\x1eff?\xa39s?\x88dU?\x18LD?\xcd\xe4]?\xe0\x12o?\x01\x90H?-@s?lu\x87@\xd7\x17\x91?\x9dXs?\x0e\xd0\x8c?jm\x86?\xc2\xb9j?4aU?\x10\x07\x80?\xcd\xb8\xfb?\xc23\x83@\x14\xdcL?\x1a)\x82?^l\x86?\xb3B4@~U\x8d@\x08\x8f\x88?1\xb2j?\x8fAs?\xe0\x877?L\xe1\x9d?-+b?\xedmf?\xea\x85w?\x03\x80\x97?\x98\xbe{?\xf9lf?\x92\xa8Y?x\xa3Y?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'PP\xf1\x04\xc8S\xf1\x04\x90h\xea\x04P`\xea\x04Hh\xea\x040k\xea\x04`e\xea\x04pa\xea\x04\xa0a\xea\x04\xe8g\xea\x04(m\xea\x04pd\xea\x04Pi\xea\x04\x10a\xea\x04\x88m\xea\x04\x90b\xea\x04Hn\xea\x048i\xea\x04\xd0d\xea\x04xh\xea\x04\xa0j\xea\x04\xf0k\xea\x04pg\xea\x04\xb0c\xea\x04@d\xea\x04\xd0a\xea\x04\x98l\xea\x04\x08o\xea\x04\xb8g\xea\x04 o\xea\x04\xf8`\xea\x04\xf8i\xea\x048o\xea\x04\x08l\xea\x040n\xea\x04\x98i\xea\x04\xd8k\xea\x04Po\xea\x04\xd8n\xea\x04\xf8c\xea\x04Pl\xea\x04\xc0n\xea\x04@a\xea\x04Xa\xea\x04\xd0g\xea\x04@j\xea\x04\xe8d\xea\x04\x00h\xea\x040b\xea\x04\x80`\xea\x04\xe0l\xea\x04\x98o\xea\x04@g\xea\x04\x80f\xea\x04\xf0n\xea\x04xn\xea\x04`n\xea\x04 i\xea\x04\xe0i\xea\x04\x90n\xea\x04He\xea\x04\xf0h\xea\x04Xj\xea\x04hl\xea\x04\x88a\xea\x04pm\xea\x04\x88j\xea\x04\xb8m\xea\x04\x10m\xea\x04\x00e\xea\x04 c\xea\x04\x10d\xea\x04\xb0i\xea\x04\xb0o\xea\x04\x98f\xea\x04\x88g\xea\x04\x80i\xea\x04\x18h\xea\x04\x80l\xea\x04\x18e\xea\x04hc\xea\x04Xd\xea\x04Hk\xea\x04\xc8l\xea\x04\xc8`\xea\x04\xd8h\xea\x040h\xea\x04`b\xea\x04Xg\xea\x04 l\xea\x04\xb8j\xea\x04\xc8o\xea\x04\xe0f\xea\x04\x08i\xea\x048l\xea\x04\x10g\xea\x04\xa8k\xea\x04\xb0\x7f\xea\x04\xa0z\xea\x04\xe8q\xea\x04\xa8x\xea\x04\xe0|\xea\x04Pv\xea\x040x\xea\x04\xd0t\xea\x04\x08s\xea\x048y\xea\x04\x90{\xea\x04@q\xea\x04\xa0}\xea\x04Xt\xea\x04\x10q\xea\x04\xf8p\xea\x04Ps\xea\x04\x80p\xea\x04\xc8s\xea\x04\xb8q\xea\x04\xd0w\xea\x04 y\xea\x04\x00{\xea\x04X}\xea\x04@t\xea\x04\xd8u\xea\x04\x90u\xea\x04 s\xea\x04Py\xea\x04\xe0p\xea\x04\x98v\xea\x04(q\xea\x04h|\xea\x04(t\xea\x04\x80y\xea\x04hs\xea\x04\x18u\xea\x04\xb0s\xea\x04\xc8\x7f\xea\x04(w\xea\x04Hx\xea\x04pz\xea\x048\x7f\xea\x04 |\xea\x04pt\xea\x04\xc8v\xea\x04\x88q\xea\x04\xa8{\xea\x04\x90~\xea\x04\xe0\x7f\xea\x04P\x7f\xea\x04\xb0v\xea\x04\xd8~\xea\x04\xc8|\xea\x04\xd8r\xea\x04\x80o\xea\x04\xa0d\xea\x04\x98`\xea\x04\x18b\xea\x04\xa8h\xea\x04\x00b\xea\x04\xc8f\xea\x04\xa8b\xea\x04\xa0m\xea\x04\x08c\xea\x04xk\xea\x04 `\xea\x04xe\xea\x04\xb8a\xea\x04\xc8i\xea\x04hf\xea\x04Hb\xea\x04\xe8j\xea\x04\xb0f\xea\x04\xb0l\xea\x04\xf8f\xea\x04\x88d\xea\x04\xd8b\xea\x04\xd0m\xea\x04\xf8l\xea\x04\xc0b\xea\x04\xe8a\xea\x04xb\xea\x04\x80c\xea\x04@m\xea\x04\x18n\xea\x04\xb0`\xea\x04\xa0g\xea\x04`h\xea\x04\xc0h\xea\x04(g\xea\x048`\xea\x04\xe0o\xea\x04h`\xea\x04\x90k\xea\x04\x98c\xea\x04\x18k\xea\x048c\xea\x04\x00k\xea\x04\xc0k\xea\x04(j\xea\x04(a\xea\x04Pc\xea\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g976
sg894
g966
sg908
g970
sg903
g974
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g919
sg894
g1017
sg908
g926
sg903
g1024
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g1053
sg894
g1049
sg908
g1060
sg903
g1057
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1070
sg894
g1066
sg908
g1077
sg903
g1074
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g1053
sg894
g1049
sg908
g1060
sg903
g1057
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g987
sg894
g1126
sg908
g994
sg903
g1133
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g976
sg894
g966
sg908
g970
sg903
g974
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g987
sg894
g1126
sg908
g994
sg903
g1133
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g1177
sg894
g1167
sg908
g1171
sg903
g1175
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1188
sg894
g1184
sg908
g1195
sg903
g1192
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1036
sg894
g1201
sg908
g1043
sg903
g1208
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1220
sg894
g1216
sg908
g1227
sg903
g1224
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g953
sg894
g1233
sg908
g960
sg903
g1240
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g1275
sg894
g1265
sg908
g1269
sg903
g1273
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g1292
sg894
g1282
sg908
g1286
sg903
g1290
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1220
sg894
g1299
sg908
g1227
sg903
g1306
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g953
sg894
g1233
sg908
g960
sg903
g1240
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1292
sg894
g1327
sg908
g1286
sg903
g1334
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g1220
sg894
g1216
sg908
g1227
sg903
g1224
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1365
sg894
g1355
sg908
g1359
sg903
g1363
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g1053
sg894
g1385
sg908
g1060
sg903
g1392
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g976
sg894
g1400
sg908
g970
sg903
g1407
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1177
sg894
g1441
sg908
g1171
sg903
g1448
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g1100
sg894
g1456
sg908
g1107
sg903
g1463
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1475
sg894
g1471
sg908
g1482
sg903
g1479
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g919
sg894
g1017
sg908
g926
sg903
g1024
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1365
sg894
g1514
sg908
g1359
sg903
g1521
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g1292
sg894
g1282
sg908
g1286
sg903
g1290
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1475
sg894
g1471
sg908
g1482
sg903
g1479
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g1188
sg894
g1568
sg908
g1195
sg903
g1575
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1475
sg894
g1471
sg908
g1482
sg903
g1479
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g899
sg894
g1596
sg908
g909
sg903
g1603
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g1475
sg894
g1471
sg908
g1482
sg903
g1479
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1177
sg894
g1167
sg908
g1171
sg903
g1175
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1070
sg894
g1650
sg908
g1077
sg903
g1657
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1475
sg894
g1665
sg908
g1482
sg903
g1672
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1036
sg894
g1201
sg908
g1043
sg903
g1208
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g1053
sg894
g1049
sg908
g1060
sg903
g1057
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1188
sg894
g1184
sg908
g1195
sg903
g1192
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g1723
sg894
g1719
sg908
g1730
sg903
g1727
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1188
sg894
g1184
sg908
g1195
sg903
g1192
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g1723
sg894
g1719
sg908
g1730
sg903
g1727
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1100
sg894
g1456
sg908
g1107
sg903
g1463
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g976
sg894
g966
sg908
g970
sg903
g974
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g919
sg894
g1017
sg908
g926
sg903
g1024
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1004
sg894
g1814
sg908
g1011
sg903
g1821
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1292
sg894
g1327
sg908
g1286
sg903
g1334
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g976
sg894
g1400
sg908
g970
sg903
g1407
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1036
sg894
g1201
sg908
g1043
sg903
g1208
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1723
sg894
g1868
sg908
g1730
sg903
g1875
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1220
sg894
g1299
sg908
g1227
sg903
g1306
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1275
sg894
g1896
sg908
g1269
sg903
g1903
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1475
sg894
g1665
sg908
g1482
sg903
g1672
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1036
sg894
g1201
sg908
g1043
sg903
g1208
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g919
sg894
g1017
sg908
g926
sg903
g1024
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1365
sg894
g1355
sg908
g1359
sg903
g1363
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1252
sg894
g2002
sg908
g1259
sg903
g2009
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g976
sg894
g966
sg908
g970
sg903
g974
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g899
sg894
g1596
sg908
g909
sg903
g1603
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g1070
sg894
g1650
sg908
g1077
sg903
g1657
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1723
sg894
g1868
sg908
g1730
sg903
g1875
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g899
sg894
g1596
sg908
g909
sg903
g1603
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1188
sg894
g1568
sg908
g1195
sg903
g1575
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g1275
sg894
g1265
sg908
g1269
sg903
g1273
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g1053
sg894
g1385
sg908
g1060
sg903
g1392
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1475
sg894
g1471
sg908
g1482
sg903
g1479
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g953
sg894
g1233
sg908
g960
sg903
g1240
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1004
sg894
g1814
sg908
g1011
sg903
g1821
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g899
sg894
g1596
sg908
g909
sg903
g1603
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1220
sg894
g1299
sg908
g1227
sg903
g1306
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g976
sg894
g1400
sg908
g970
sg903
g1407
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g953
sg894
g1233
sg908
g960
sg903
g1240
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g942
sg894
g2316
sg908
g936
sg903
g2323
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g1365
sg894
g1355
sg908
g1359
sg903
g1363
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1220
sg894
g1299
sg908
g1227
sg903
g1306
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1004
sg894
g1814
sg908
g1011
sg903
g1821
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g1053
sg894
g1385
sg908
g1060
sg903
g1392
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1365
sg894
g1514
sg908
g1359
sg903
g1521
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1292
sg894
g1327
sg908
g1286
sg903
g1334
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1723
sg894
g1719
sg908
g1730
sg903
g1727
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1070
sg894
g1066
sg908
g1077
sg903
g1074
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g919
sg894
g1017
sg908
g926
sg903
g1024
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g1004
sg894
g1814
sg908
g1011
sg903
g1821
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g953
sg894
g1233
sg908
g960
sg903
g1240
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1070
sg894
g1066
sg908
g1077
sg903
g1074
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1365
sg894
g1514
sg908
g1359
sg903
g1521
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1004
sg894
g1814
sg908
g1011
sg903
g1821
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g987
sg894
g1126
sg908
g994
sg903
g1133
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1188
sg894
g1568
sg908
g1195
sg903
g1575
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1723
sg894
g1719
sg908
g1730
sg903
g1727
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1365
sg894
g1514
sg908
g1359
sg903
g1521
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1723
sg894
g1719
sg908
g1730
sg903
g1727
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1220
sg894
g1216
sg908
g1227
sg903
g1224
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g1252
sg894
g2002
sg908
g1259
sg903
g2009
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1177
sg894
g1167
sg908
g1171
sg903
g1175
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1275
sg894
g1896
sg908
g1269
sg903
g1903
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1188
sg894
g1568
sg908
g1195
sg903
g1575
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1275
sg894
g1896
sg908
g1269
sg903
g1903
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1252
sg894
g2002
sg908
g1259
sg903
g2009
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1188
sg894
g1184
sg908
g1195
sg903
g1192
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g1070
sg894
g1650
sg908
g1077
sg903
g1657
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1475
sg894
g1665
sg908
g1482
sg903
g1672
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g942
sg894
g2316
sg908
g936
sg903
g2323
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1275
sg894
g1265
sg908
g1269
sg903
g1273
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1365
sg894
g1514
sg908
g1359
sg903
g1521
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g1177
sg894
g1441
sg908
g1171
sg903
g1448
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g1070
sg894
g1650
sg908
g1077
sg903
g1657
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1365
sg894
g1355
sg908
g1359
sg903
g1363
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g1100
sg894
g1456
sg908
g1107
sg903
g1463
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1275
sg894
g1265
sg908
g1269
sg903
g1273
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g1220
sg894
g1216
sg908
g1227
sg903
g1224
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g976
sg894
g1400
sg908
g970
sg903
g1407
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g1053
sg894
g1049
sg908
g1060
sg903
g1057
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g1292
sg894
g1327
sg908
g1286
sg903
g1334
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1188
sg894
g1568
sg908
g1195
sg903
g1575
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1475
sg894
g1665
sg908
g1482
sg903
g1672
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1723
sg894
g1868
sg908
g1730
sg903
g1875
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g899
sg894
g1596
sg908
g909
sg903
g1603
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g1177
sg894
g1441
sg908
g1171
sg903
g1448
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1292
sg894
g1282
sg908
g1286
sg903
g1290
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1177
sg894
g1167
sg908
g1171
sg903
g1175
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1475
sg894
g1665
sg908
g1482
sg903
g1672
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1053
sg894
g1385
sg908
g1060
sg903
g1392
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g976
sg894
g1400
sg908
g970
sg903
g1407
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1053
sg894
g1049
sg908
g1060
sg903
g1057
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1100
sg894
g1456
sg908
g1107
sg903
g1463
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g1188
sg894
g1184
sg908
g1195
sg903
g1192
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g987
sg894
g1126
sg908
g994
sg903
g1133
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g1177
sg894
g1441
sg908
g1171
sg903
g1448
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g987
sg894
g1126
sg908
g994
sg903
g1133
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1177
sg894
g1441
sg908
g1171
sg903
g1448
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1292
sg894
g1282
sg908
g1286
sg903
g1290
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g1275
sg894
g1265
sg908
g1269
sg903
g1273
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1220
sg894
g1299
sg908
g1227
sg903
g1306
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g942
sg894
g2316
sg908
g936
sg903
g2323
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1220
sg894
g1216
sg908
g1227
sg903
g1224
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1053
sg894
g1385
sg908
g1060
sg903
g1392
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1177
sg894
g1167
sg908
g1171
sg903
g1175
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1275
sg894
g1896
sg908
g1269
sg903
g1903
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g1070
sg894
g1066
sg908
g1077
sg903
g1074
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g1292
sg894
g1282
sg908
g1286
sg903
g1290
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1070
sg894
g1650
sg908
g1077
sg903
g1657
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g1100
sg894
g1456
sg908
g1107
sg903
g1463
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g1275
sg894
g1896
sg908
g1269
sg903
g1903
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g976
sg894
g966
sg908
g970
sg903
g974
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g942
sg894
g2316
sg908
g936
sg903
g2323
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g1365
sg894
g1355
sg908
g1359
sg903
g1363
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1252
sg894
g2002
sg908
g1259
sg903
g2009
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1292
sg894
g1327
sg908
g1286
sg903
g1334
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g942
sg894
g2316
sg908
g936
sg903
g2323
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1723
sg894
g1868
sg908
g1730
sg903
g1875
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g1252
sg894
g2002
sg908
g1259
sg903
g2009
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1070
sg894
g1066
sg908
g1077
sg903
g1074
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g1036
sg894
g1201
sg908
g1043
sg903
g1208
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g1723
sg894
g1868
sg908
g1730
sg903
g1875
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I79864656
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'\x98\x8c\x1c\x13\xd0\x8c\x1c\x13p\xa7\x1c\x13\xa8\xe9\x1c\x13h\xe8\x1c\x13\x90\xe8\x1c\x13\x98\x8c\x1c\x13\xa0\xa7\x1c\x13\xd0\xa7\x1c\x13@^\xb2\x04\xb8\xe8\x1c\x13\xe0\xe8\x1c\x13h\xe8\x1c\x13\x98\x8c\x1c\x13\xd0\x8c\x1c\x13\x08\xe9\x1c\x13\x00\xa8\x1c\x13\xd0\x8c\x1c\x13\xd0\xa7\x1c\x13\xa0\xa7\x1c\x13\xd0\xa7\x1c\x13\xe0\xe8\x1c\x13\x98\x8c\x1c\x13p\xa7\x1c\x13`_\xb2\x040\xa8\x1c\x13\xb0\x8d\x1c\x13\xf8\xe9\x1c\x13\xa0_\xb2\x04@^\xb2\x04\xa0\xa7\x1c\x13\xa0_\xb2\x04\x90\xe8\x1c\x13`_\xb2\x04\x90\xe8\x1c\x130\xe9\x1c\x13p\xa7\x1c\x13\xa0_\xb2\x04@\xe8\x1c\x13\xd0\x8c\x1c\x13x\x8d\x1c\x13h\xe8\x1c\x13@\xe8\x1c\x13\xb8\xe8\x1c\x13H\xea\x1c\x13@^\xb2\x04\x90\xe8\x1c\x13\xb8\xe8\x1c\x13\x98\x8c\x1c\x13@\xe8\x1c\x13\x90\xe8\x1c\x13\xd0\xa7\x1c\x13\xe0\xe8\x1c\x13\xa0_\xb2\x040\xa8\x1c\x13\xd0\xa7\x1c\x13\xb8\xe8\x1c\x13\xc0\xa8\x1c\x13@^\xb2\x04\xb8\xe8\x1c\x13@\xe8\x1c\x13\x98\x8c\x1c\x13\x08\x8d\x1c\x13`_\xb2\x04p\xa7\x1c\x13h\xe8\x1c\x13\x08\x8d\x1c\x13\xc0_\xb2\x04X\xe9\x1c\x13\xc0_\xb2\x04\xb8\xe8\x1c\x13X\xe9\x1c\x13\xe8\x8d\x1c\x13p\xea\x1c\x13\xe0\xe8\x1c\x13\x08\xe9\x1c\x13\xf0\xa8\x1c\x130\xa8\x1c\x13\x80_\xb2\x04\x98\xea\x1c\x13\xa0\xa7\x1c\x13\xa8\xe9\x1c\x13\xa0_\xb2\x04`_\xb2\x04\x08\xe9\x1c\x13\x08\x8d\x1c\x13@^\xb2\x04\x00\xa8\x1c\x130\xa8\x1c\x13p\xa7\x1c\x130\xe9\x1c\x13\x90\xe8\x1c\x130\xe9\x1c\x13\xd0\x8c\x1c\x13\xd0\xa7\x1c\x130\xe9\x1c\x13\xd0\x8c\x1c\x13@\xe8\x1c\x130\xe9\x1c\x13\x98\x8c\x1c\x130\xe9\x1c\x13X\xe9\x1c\x13\xd0\xa7\x1c\x13\xe0\xe8\x1c\x13x\x8d\x1c\x13h\xe8\x1c\x13p\xa7\x1c\x13\xb8\xe8\x1c\x13p\xea\x1c\x13\xb8\xe8\x1c\x13\xb0\x8d\x1c\x13@^\xb2\x04\xe0\xe8\x1c\x13p\xea\x1c\x13\xc0_\xb2\x04\x08\xe9\x1c\x13\x98\x8c\x1c\x13\x00\xa8\x1c\x130\xa8\x1c\x13\xa0\xa7\x1c\x13\xa0_\xb2\x04\x08\x8d\x1c\x13\xc0_\xb2\x04\xa0\xa7\x1c\x13\xd0\xa7\x1c\x13\xb0\x8d\x1c\x13\xc0_\xb2\x04\xd0\xe9\x1c\x13@\x8d\x1c\x13p\xa7\x1c\x13\xd0\xa7\x1c\x13\xe8\x8d\x1c\x13P\xa9\x1c\x13\x80_\xb2\x04@\xe8\x1c\x13\xb0\x8d\x1c\x130\xe9\x1c\x13\x90\xe8\x1c\x13\x00\xa8\x1c\x13\xb0\x8d\x1c\x13\xa0_\xb2\x04\xd0\x8c\x1c\x130\xe9\x1c\x13\xe0\xe8\x1c\x13@^\xb2\x040\xe9\x1c\x13\xe0_\xb2\x040\xa8\x1c\x13\xa0\xa7\x1c\x13`_\xb2\x04\xc0_\xb2\x04h\xe8\x1c\x130\xa8\x1c\x13\xd0\x8c\x1c\x13p\xa7\x1c\x13@^\xb2\x04\xc0_\xb2\x040\xa8\x1c\x13X\xe9\x1c\x13\xc0_\xb2\x04\x00\xa8\x1c\x13\x90\xe8\x1c\x13\x00\xa8\x1c\x13\xb8\xe8\x1c\x13\xd0\x8c\x1c\x13h\xe8\x1c\x13\xa0_\xb2\x04X\xe9\x1c\x13h\xe8\x1c\x130\xa8\x1c\x13\x00\xa8\x1c\x13`_\xb2\x040\xe9\x1c\x13X\xe9\x1c\x13`_\xb2\x04h\xe8\x1c\x13\xe0\xe8\x1c\x13X\xe9\x1c\x13\x90\xa8\x1c\x13\xd0\xa7\x1c\x13\xe0\xe8\x1c\x13\xa0\xa7\x1c\x13\x08\x8d\x1c\x13X\xe9\x1c\x13\x08\x8d\x1c\x13\x00\xa8\x1c\x13\xa0\xa7\x1c\x130\xa8\x1c\x13@\x8d\x1c\x13p\xa7\x1c\x13\xa8\xe9\x1c\x13\xa0_\xb2\x04\x08\xe9\x1c\x13`_\xb2\x04`\xa8\x1c\x13@\xe8\x1c\x13p\xea\x1c\x13\xc0_\xb2\x04\x98\xea\x1c\x13\x00\xa8\x1c\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S'\xe0\x01\x1d\x13`\x02\x1d\x13\xc0\x01\x1d\x13\xe0\x00\x1d\x13\xc0\x02\x1d\x13\x80\x02\x1d\x13\x80@\x0c\x03\xe0@\x0c\x03 I\x0c\x03\x80\x01\x1d\x13\xa0\x00\x1d\x13 \x03\x1d\x13 \x00\x1d\x13`\x00\x1d\x13@\x03\x1d\x13\x80\x03\x1d\x13@\x00\x1d\x13\xe0\x03\x1d\x13\x00\x04\x1d\x13 \x04\x1d\x13\xe0\x02\x1d\x13`\x04\x1d\x13@\x04\x1d\x13 \x02\x1d\x13\xc0\x04\x1d\x13\xa0\x04\x1d\x13\x00\x05\x1d\x13\xe0\x04\x1d\x13@\x05\x1d\x13 \x05\x1d\x13@\x01\x1d\x13`\x05\x1d\x13\x80\x05\x1d\x13\xa0\x05\x1d\x13\xc0\x05\x1d\x13\xe0\x05\x1d\x13\x00\x06\x1d\x13`\x06\x1d\x13@\x06\x1d\x13\xa0\x06\x1d\x13\xc0\x06\x1d\x13\x00\x02\x1d\x13\x80\x00\x1d\x13 \x07\x1d\x13 A\x0c\x03\x00\x01\x1d\x13\x80\x04\x1d\x13 \x06\x1d\x13\xc0\x07\x1d\x13\xe0\x07\x1d\x13\x80\x07\x1d\x13\x80\x06\x1d\x13 \x01\x1d\x13\x00\x07\x1d\x13\x80\x08\x1d\x13\x00\x03\x1d\x13\xa0\x08\x1d\x13 \x08\x1d\x13@\x07\x1d\x13\xc0\x03\x1d\x13\x00\x08\x1d\x13`\t\x1d\x13\x80\t\x1d\x13\xe0\x06\x1d\x13`\x01\x1d\x13\xa0\x01\x1d\x13\xa0\t\x1d\x13`\x07\x1d\x13\xa0\x02\x1d\x13`\xc6\r\x03\x00\xcd\r\x03\xc0\xcd\r\x03`\xc4\r\x03\xc0\xc3\r\x03\xc0\xc5\r\x03`\xc9\r\x03\xe0\xc4\r\x03@\xc5\r\x03\xa0\xc4\r\x03\xc0\xcf\r\x03\xa0\xcd\r\x03\xe0\xcd\r\x03 \xcd\r\x03\x80\xc5\r\x03 \xc6\r\x03@\xcd\r\x03`\xcf\r\x03 \xca\r\x03`A\x0c\x03 \xc4\r\x03`\x0e\r\x03\xa0\x0f\r\x03\xe0\r\r\x03 \x0e\r\x03\x80\x05\r\x03\xa0\t\r\x03`\x0f\r\x03@\x0c\r\x03\x00\x0b\r\x03`\x0b\r\x03\xa0\x0b\r\x03\x00\x0e\r\x03\x00\x0c\r\x03`\x0c\r\x03 \x0c\r\x03\xe0\x0c\r\x03\xa0\x0c\r\x03 \x0b\r\x03\xa0\x0e\r\x03\xc0\x0b\r\x03\xe0\t\r\x03\xe0\x0f\r\x03\x00\x0f\r\x03 \xcf\r\x03\x80\x0e\r\x03\x00\t\r\x03\x80\n\r\x03\x80\x0b\r\x03\xa0\r\r\x03\xc0\x0c\r\x03\xe0\x0b\r\x03`b\x14\r K\x0c\x03\x80\x0c\r\x03@{ \r\xa0w \r b\x14\r\xc0\r\r\x03@\x0b\r\x03\xe0\x0e\r\x03@\x0f\r\x03 \x0f\r\x03\x00\r\r\x03 \r\r\x03\x80\x0f\r\x03\x00\n\r\x03@\x0e\r\x03\xc0\x0f\r\x03\x80Q\xb2\x04\xc0A\x0c\x03\x00r!\r\xc0{!\r@{!\r`z!\r u!\r\xe0z!\r\xc0y!\r\xe0u!\r\x00z!\r\x80|!\r\xc0u!\r x!\r@\r\r\x03\xa0t!\r`\r\r\x03\xc0\xd2l\r\x00\xd3l\r`\xd1l\r\xa0\xdal\r\x00\xd7l\r \xd3l\r`x!\r\xe0\xcf\xaf\x04\x00L"\r\xe0D"\r\xa0K"\r\xc0G"\r\x80C"\r`C"\r`N"\r\xe0O"\r\xe0A"\r L"\r\xe0K"\r\x00B"\r\xc0D"\r\xa0D"\r\xe0B"\r\xe0F"\r\x00K"\r\x80D"\r A"\r\xe0C"\r\xa0A"\r\xc0K"\r\x00A"\r\xe0J"\r`\xdal\r\xc0\xb0o\r@\xd0l\r\xe0\xb6o\r@\xb0o\r\xc0\xb4o\r\xa0\xb6o\r\xa0\xb0o\r`\xb0o\r`\xb9o\r\xe0\xb2o\r@r \r\xa0\tp\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S"\x17\xc1\x9b?:\xeb]?\x80{\x97?4*b?\xbc Q?\r\x1fQ?\xa5\x17\x91?r*b?\x85.b?{\xec]?\xa5\x97H?3R\xf5?\xbd\\U?\x11\x95H?\x12As?>Vs?\xd2\x14\xf1?\xd8\r@?\xa9\x16\xb1?\x04As?\x1e5\x82?hd\x86?\xfd\xf5n?\xa9\xd3\x8c?b:3?\x05\x15Q?\x05\xde\x8c?j\xc5{?\xc2\xa6Y?gmf?N\xf5\x8e?v\x0c@?\xfd\x97\xa8?=\xaf\xaa?\xbc\x1cQ?S\xf6n?\xae\x06\x80?C(Q?[(\x82?\x9e\xcb;?D\x1eQ?\x97&\x82?\xbb\xcb{?\x9e\xa5Y?5\xec\x8e?\xe6l\x86?S\xf3\x8e?\x89\x8fH?\x81I\xa4?\xae:s?]\xe2\x9d?M\xb2j?\x9fc\x86?$\x867?v\x9d\xb9?\x9e\xc9;?b\x91H?^\xc6;?i]U?\x11\xca;?\xba\xbe\xdb?7\xb9j?\x894s?\x05\x90H?\xed\xd9L?\xa1\xfbn?\x8a\xaa\xaa?\\4#@n\x81w?\n\xa0\xf9?\xdb\xc2;?\x05l\xa6?\xc2Z\x95?\x16\xff\x7f?\x92n\x86?\x15SD?\x0c\xa6Y?\x92)b?\x08\xf9n?2\xb9j?\xd85\x82?\xcel\xa6?:\xc3;?\xf2\xd9L?\x96QD?\xe1\x10\x91?t\x8c\x88?\xdbw\x9f@Amf?\xa8\xc7{?F\xea]?\xb6J\xc4?\xf3\xf5.?w\xf2\x8e?\xb46\x93?M\xa5Y?f\x18Q?\x8bj\xc6?#\x9d\xb9?a\xd4L?\xb3\x89\x97?Qtf?\x01\xb1\x8a?:\xe9n?\x86\x85w?@\xbf\x8a?\xe2\r@?l\xa0Y?\x96\x16Q?\xafKD?\x18LD?9\x07\xa0?\x1c\x86\x88?\x94$\x82?r\xac\xaa?\x81J\x84?5\x01\x8f?\x93\xad\xca?\xaaZU?\x1d\x90H?\x96\xf2\x8e?\x08\x97w?\xf1\xf4\x8e?\xca\xa1Y?c\xe6]?v\xe8]?P\xa0Y?\xb6\x00/?*\x9d\x99?\xcc\xc8{?\x96\x17\xb1?\xb5\x17Q?\xe3^\x95?]\xaaY?U\xad\x8a?:\xeb]?\x91\xc3{?NbU?\xbd\x84w?\xc5 Q?\x7f\x8f\x88?\xaf\xc8;?6\xb0j?\x0c\x8fY?$\x14\x80?\x81]U?\xde\x847?\x1b\xc8;?W\xb4j?\x90\x7f7?\xa2\x9b\xe8?$Z\x95?\x9c\xb7j?\xaaY\xf5?\x12\xe4]?\xe4\xca{?\xcai\x86?R\r@?6\xf5\xae?\x0b\xe5]? }\x97?\x18m\x86?i\xf4\xce?\x03\xb5j?%\xc2\x9b?\xa3J\x84?\xe5.b?\xd1{\x97?\x1a\x827?o\xb0j?\xe1H\x84?\t'\x82?\xc2{\x97?`\xa1Y?AJ\x84?\x9e\xde\xac?\x00\xa7j?\xef\x13\xb1?\xb0\x0e@?\xd3{w?\xe9=D?\x0b\xe3]?\x1e\xaa\x8a?\xed\x84w?[3s?`\x8d\xa8?\xd3\xb1\x8a?\xf3,b?\xd9@s?\xf8tw?\x99\xab\x99?\x19\xbf{?\xce9\xb3?\x84j\x86?1\x8c\x88?kwf?\xc9\x13Q?\x14}7?\xd4\x9c\x99?\x8f\x13\x91?"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'\x18x\xea\x04\x98p\xea\x04\xf8f\xcd\x04(j\xcd\x04ho\xcd\x040h\xcd\x04pm\xcd\x04hl\xcd\x04\x80i\xcd\x04\x88d\xcd\x04\xb0o\xcd\x04\xe8a\xcd\x04\x08f\xcd\x04Hk\xcd\x04\x90n\xcd\x04\xc0n\xcd\x04Xa\xcd\x04\x88a\xcd\x048c\xcd\x04\xa0d\xcd\x04\xd8h\xcd\x04\xc0e\xcd\x04`b\xcd\x04\xb0i\xcd\x04hi\xcd\x04\x08c\xcd\x04\xd0j\xcd\x04\xc0k\xcd\x04\x10d\xcd\x04\xc8o\xcd\x04\x90k\xcd\x040n\xcd\x04\xe0i\xcd\x04\x98o\xcd\x04xn\xcd\x04 l\xcd\x04\x00k\xcd\x04\xf0n\xcd\x04\x10j\xcd\x04 o\xcd\x04\x10g\xcd\x04\xa0a\xcd\x04Po\xcd\x04\x88j\xcd\x04\x10m\xcd\x04\x98l\xcd\x04pg\xcd\x04Xj\xcd\x04\xa8n\xcd\x04(d\xcd\x04\xa8b\xcd\x04\xe0f\xcd\x04@a\xcd\x04`\x95\xe7\x04H\x9b\xe7\x04\xc8\x90\xe7\x04\x80\x9c\xe7\x04\x88\x94\xe7\x04@\x94\xe7\x04H\x98\xe7\x04\xe8\x91\xe7\x040\x92\xe7\x04\xb0\x90\xe7\x04\xa0\x97\xe7\x04\xd8[\xf1\x048Y\xf1\x04\xb8T\xf1\x04\xa0Z\xf1\x04H^\xf1\x040e\xea\x04\xc0^\xf1\x04xU\xf1\x04\x90U\xf1\x04\x90R\xf1\x04xX\xf1\x04\xf0R\xf1\x04\xf0U\xf1\x04\xa8[\xf1\x04\xc0R\xf1\x04\xe8]\xf1\x04\x18^\xf1\x04\x80\\\xf1\x04\xb0\\\xf1\x04 Y\xf1\x04P\\\xf1\x04@Q\xf1\x04\x98_\xf1\x04\x88]\xf1\x04HR\xf1\x04PY\xf1\x048\\\xf1\x04 \\\xf1\x040k\xcd\x04xh\xcd\x04\x18b\xcd\x04\x90e\xcd\x04(m\xcd\x048o\xcd\x04h`\xcd\x04Pc\xcd\x048`\xcd\x04\xf0h\xcd\x04 i\xcd\x04\x98c\xcd\x04\x88g\xcd\x04xk\xcd\x04@g\xcd\x04Pf\xcd\x04\x18e\xcd\x04\xb0l\xcd\x04\x80o\xcd\x04\x08i\xcd\x04\x18h\xcd\x04\xf8i\xcd\x04\xc8l\xcd\x04`e\xcd\x04@d\xcd\x04\x00h\xcd\x04\xb8a\xcd\x04`n\xcd\x04\xc8f\xcd\x04hf\xcd\x04\xa8k\xcd\x04\xb0`\xcd\x04\x88m\xcd\x04 `\xcd\x048i\xcd\x04\x98f\xcd\x04\x80l\xcd\x04\xb8j\xcd\x04 c\xcd\x04\xe0o\xcd\x04`k\xcd\x04\xc8i\xcd\x04\xc8c\xcd\x04(g\xcd\x04\xd0d\xcd\x04\xa8h\xcd\x048l\xcd\x04Xm\xcd\x04\x08l\xcd\x048f\xcd\x04Hn\xcd\x04\x00e\xcd\x04\xf8c\xcd\x04\xc0b\xcd\x04\xa0g\xcd\x04\xb8d\xcd\x04Hh\xcd\x04hc\xcd\x04\xe8j\xcd\x04\x98i\xcd\x04@m\xcd\x04Xd\xcd\x04P`\xcd\x04Xg\xcd\x040b\xcd\x04\xd8b\xcd\x04\x80`\xcd\x04\xc0h\xcd\x04pd\xcd\x04\x90b\xcd\x04He\xcd\x04\x98`\xcd\x04\x80c\xcd\x04(a\xcd\x04\xe0`\xcd\x04\x08o\xcd\x04\xd8e\xcd\x04\xe0l\xcd\x04\xf8`\xcd\x04\xb0f\xcd\x04pa\xcd\x04\xf8l\xcd\x04\xc8`\xcd\x04\x90h\xcd\x04xb\xcd\x04\xa0j\xcd\x04\x00b\xcd\x04\xe8d\xcd\x04\xd0a\xcd\x04\xf0b\xcd\x04\xe0c\xcd\x04\xb0c\xcd\x04 f\xcd\x04\xe8g\xcd\x04Pi\xcd\x04Hb\xcd\x04\xd0g\xcd\x04\xf0e\xcd\x04\xa8e\xcd\x04`h\xcd\x04\x80f\xcd\x04\x18k\xcd\x040e\xcd\x04\x10a\xcd\x04\xd8n\xcd\x04xe\xcd\x04\xd8k\xcd\x04pj\xcd\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3637
sg3632
g3738
sg3646
g3647
sg3641
g3745
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3881
sg3632
g3877
sg3646
g3888
sg3641
g3885
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3898
sg3632
g3894
sg3646
g3905
sg3641
g3902
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3657
sg3632
g3911
sg3646
g3664
sg3641
g3918
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3774
sg3632
g3952
sg3646
g3781
sg3641
g3959
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3637
sg3632
g3738
sg3646
g3647
sg3641
g3745
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3674
sg3632
g3993
sg3646
g3681
sg3641
g4000
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g4012
sg3632
g4008
sg3646
g4019
sg3641
g4016
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g4029
sg3632
g4025
sg3646
g4036
sg3641
g4033
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g3881
sg3632
g3877
sg3646
g3888
sg3641
g3885
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3898
sg3632
g3894
sg3646
g3905
sg3641
g3902
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g4072
sg3632
g4068
sg3646
g4079
sg3641
g4076
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g4072
sg3632
g4068
sg3646
g4079
sg3641
g4076
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g4012
sg3632
g4008
sg3646
g4019
sg3641
g4016
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g4167
sg3632
g4163
sg3646
g4174
sg3641
g4171
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3674
sg3632
g3993
sg3646
g3681
sg3641
g4000
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g4072
sg3632
g4068
sg3646
g4079
sg3641
g4076
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3697
sg3632
g4206
sg3646
g3691
sg3641
g4213
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3657
sg3632
g3911
sg3646
g3664
sg3641
g3918
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3697
sg3632
g4206
sg3646
g3691
sg3641
g4213
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3808
sg3632
g4273
sg3646
g3815
sg3641
g4280
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g4298
sg3632
g4288
sg3646
g4292
sg3641
g4296
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g3791
sg3632
g4305
sg3646
g3798
sg3641
g4312
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g3725
sg3632
g4320
sg3646
g3732
sg3641
g4327
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3637
sg3632
g3738
sg3646
g3647
sg3641
g3745
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g3697
sg3632
g4206
sg3646
g3691
sg3641
g4213
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3774
sg3632
g3952
sg3646
g3781
sg3641
g3959
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g4072
sg3632
g4068
sg3646
g4079
sg3641
g4076
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g4029
sg3632
g4426
sg3646
g4036
sg3641
g4433
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3808
sg3632
g4273
sg3646
g3815
sg3641
g4280
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g3708
sg3632
g4467
sg3646
g3715
sg3641
g4474
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g3697
sg3632
g4206
sg3646
g3691
sg3641
g4213
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g3637
sg3632
g3738
sg3646
g3647
sg3641
g3745
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g4538
sg3632
g4534
sg3646
g4545
sg3641
g4542
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g4012
sg3632
g4008
sg3646
g4019
sg3641
g4016
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g4538
sg3632
g4590
sg3646
g4545
sg3641
g4597
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g4298
sg3632
g4288
sg3646
g4292
sg3641
g4296
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g4622
sg3632
g4618
sg3646
g4629
sg3641
g4626
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g4298
sg3632
g4635
sg3646
g4292
sg3641
g4642
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g4622
sg3632
g4663
sg3646
g4629
sg3641
g4670
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g4012
sg3632
g4678
sg3646
g4019
sg3641
g4685
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g4538
sg3632
g4534
sg3646
g4545
sg3641
g4542
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3825
sg3632
g4706
sg3646
g3832
sg3641
g4713
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g3881
sg3632
g4721
sg3646
g3888
sg3641
g4728
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3757
sg3632
g4736
sg3646
g3764
sg3641
g4743
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g4029
sg3632
g4025
sg3646
g4036
sg3641
g4033
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g3725
sg3632
g4320
sg3646
g3732
sg3641
g4327
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g4622
sg3632
g4618
sg3646
g4629
sg3641
g4626
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g3757
sg3632
g4736
sg3646
g3764
sg3641
g4743
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g4072
sg3632
g4068
sg3646
g4079
sg3641
g4076
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g4012
sg3632
g4678
sg3646
g4019
sg3641
g4685
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3881
sg3632
g4721
sg3646
g3888
sg3641
g4728
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g4538
sg3632
g4590
sg3646
g4545
sg3641
g4597
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3791
sg3632
g4305
sg3646
g3798
sg3641
g4312
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g3898
sg3632
g3894
sg3646
g3905
sg3641
g3902
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g4029
sg3632
g4025
sg3646
g4036
sg3641
g4033
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3674
sg3632
g3993
sg3646
g3681
sg3641
g4000
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g4167
sg3632
g4163
sg3646
g4174
sg3641
g4171
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3725
sg3632
g4320
sg3646
g3732
sg3641
g4327
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g4167
sg3632
g4163
sg3646
g4174
sg3641
g4171
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g3774
sg3632
g3952
sg3646
g3781
sg3641
g3959
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g4167
sg3632
g4985
sg3646
g4174
sg3641
g4992
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g4167
sg3632
g4985
sg3646
g4174
sg3641
g4992
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g4167
sg3632
g4163
sg3646
g4174
sg3641
g4171
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g4622
sg3632
g4618
sg3646
g4629
sg3641
g4626
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g3774
sg3632
g3952
sg3646
g3781
sg3641
g3959
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g3791
sg3632
g4305
sg3646
g3798
sg3641
g4312
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g3708
sg3632
g4467
sg3646
g3715
sg3641
g4474
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g4538
sg3632
g4534
sg3646
g4545
sg3641
g4542
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3808
sg3632
g4273
sg3646
g3815
sg3641
g4280
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3881
sg3632
g3877
sg3646
g3888
sg3641
g3885
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3791
sg3632
g4305
sg3646
g3798
sg3641
g4312
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3825
sg3632
g4706
sg3646
g3832
sg3641
g4713
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g4538
sg3632
g4590
sg3646
g4545
sg3641
g4597
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g4298
sg3632
g4635
sg3646
g4292
sg3641
g4642
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3881
sg3632
g3877
sg3646
g3888
sg3641
g3885
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g3898
sg3632
g5273
sg3646
g3905
sg3641
g5280
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g4029
sg3632
g4426
sg3646
g4036
sg3641
g4433
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g4072
sg3632
g5314
sg3646
g4079
sg3641
g5321
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g4538
sg3632
g4590
sg3646
g4545
sg3641
g4597
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g4298
sg3632
g4635
sg3646
g4292
sg3641
g4642
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g3757
sg3632
g4736
sg3646
g3764
sg3641
g4743
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g3774
sg3632
g3952
sg3646
g3781
sg3641
g3959
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g3881
sg3632
g4721
sg3646
g3888
sg3641
g4728
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g4298
sg3632
g4288
sg3646
g4292
sg3641
g4296
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3808
sg3632
g4273
sg3646
g3815
sg3641
g4280
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g3637
sg3632
g3738
sg3646
g3647
sg3641
g3745
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g3674
sg3632
g3993
sg3646
g3681
sg3641
g4000
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g4012
sg3632
g4008
sg3646
g4019
sg3641
g4016
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3825
sg3632
g4706
sg3646
g3832
sg3641
g4713
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g3725
sg3632
g4320
sg3646
g3732
sg3641
g4327
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3881
sg3632
g4721
sg3646
g3888
sg3641
g4728
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g4167
sg3632
g4985
sg3646
g4174
sg3641
g4992
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3725
sg3632
g4320
sg3646
g3732
sg3641
g4327
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g3898
sg3632
g3894
sg3646
g3905
sg3641
g3902
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3881
sg3632
g3877
sg3646
g3888
sg3641
g3885
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g4072
sg3632
g5314
sg3646
g4079
sg3641
g5321
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3657
sg3632
g3911
sg3646
g3664
sg3641
g3918
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g4167
sg3632
g4163
sg3646
g4174
sg3641
g4171
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3791
sg3632
g4305
sg3646
g3798
sg3641
g4312
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g4167
sg3632
g4985
sg3646
g4174
sg3641
g4992
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g4072
sg3632
g5314
sg3646
g4079
sg3641
g5321
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g4029
sg3632
g4426
sg3646
g4036
sg3641
g4433
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3757
sg3632
g4736
sg3646
g3764
sg3641
g4743
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g4012
sg3632
g4008
sg3646
g4019
sg3641
g4016
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g4298
sg3632
g4288
sg3646
g4292
sg3641
g4296
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g4029
sg3632
g4025
sg3646
g4036
sg3641
g4033
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g3657
sg3632
g3911
sg3646
g3664
sg3641
g3918
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g4298
sg3632
g4635
sg3646
g4292
sg3641
g4642
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g4029
sg3632
g4426
sg3646
g4036
sg3641
g4433
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g4622
sg3632
g4663
sg3646
g4629
sg3641
g4670
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g4298
sg3632
g4635
sg3646
g4292
sg3641
g4642
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3898
sg3632
g5273
sg3646
g3905
sg3641
g5280
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3898
sg3632
g5273
sg3646
g3905
sg3641
g5280
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g3808
sg3632
g4273
sg3646
g3815
sg3641
g4280
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g3657
sg3632
g3911
sg3646
g3664
sg3641
g3918
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3708
sg3632
g4467
sg3646
g3715
sg3641
g4474
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g4072
sg3632
g5314
sg3646
g4079
sg3641
g5321
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g4622
sg3632
g4663
sg3646
g4629
sg3641
g4670
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3708
sg3632
g4467
sg3646
g3715
sg3641
g4474
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g4029
sg3632
g4426
sg3646
g4036
sg3641
g4433
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g3898
sg3632
g3894
sg3646
g3905
sg3641
g3902
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g4012
sg3632
g4678
sg3646
g4019
sg3641
g4685
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g4167
sg3632
g4985
sg3646
g4174
sg3641
g4992
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g4622
sg3632
g4618
sg3646
g4629
sg3641
g4626
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g4012
sg3632
g4678
sg3646
g4019
sg3641
g4685
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3708
sg3632
g4467
sg3646
g3715
sg3641
g4474
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g3825
sg3632
g4706
sg3646
g3832
sg3641
g4713
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g4622
sg3632
g4663
sg3646
g4629
sg3641
g4670
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3674
sg3632
g3993
sg3646
g3681
sg3641
g4000
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g3825
sg3632
g4706
sg3646
g3832
sg3641
g4713
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3757
sg3632
g4736
sg3646
g3764
sg3641
g4743
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g4538
sg3632
g4534
sg3646
g4545
sg3641
g4542
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g4622
sg3632
g4618
sg3646
g4629
sg3641
g4626
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g4538
sg3632
g4534
sg3646
g4545
sg3641
g4542
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g3898
sg3632
g5273
sg3646
g3905
sg3641
g5280
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g4029
sg3632
g4025
sg3646
g4036
sg3641
g4033
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g4072
sg3632
g5314
sg3646
g4079
sg3641
g5321
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3881
sg3632
g4721
sg3646
g3888
sg3641
g4728
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g4012
sg3632
g4678
sg3646
g4019
sg3641
g4685
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3697
sg3632
g4206
sg3646
g3691
sg3641
g4213
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g4538
sg3632
g4590
sg3646
g4545
sg3641
g4597
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g4298
sg3632
g4288
sg3646
g4292
sg3641
g4296
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g4622
sg3632
g4663
sg3646
g4629
sg3641
g4670
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3898
sg3632
g5273
sg3646
g3905
sg3641
g5280
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I79864656
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S' ,`\x13\xd8#a\x13P,`\x13p0a\x13\x80,`\x13\x10$a\x13\xa0\r\x0c\x03\xa0\x06\x0c\x03p-`\x13\x980a\x13\x10$a\x13p0a\x13\xc00a\x13\xe0,`\x13\x80,`\x13\xa0\x06\x0c\x03\xc00a\x13\x980a\x13 ,`\x13H$a\x13 ,`\x13\x00\x0c\x0c\x03\xe0,`\x13\xe80a\x13`\x07\x0c\x03P,`\x13H$a\x13`\x07\x0c\x03P,`\x13\x00\x0c\x0c\x03H$a\x13\x101a\x13P,`\x13p0a\x13\x002a\x13\xa0\r\x0c\x03@-`\x13\xa0\x06\x0c\x03\xc00a\x13\x980a\x1381a\x13 ,`\x1381a\x13\xe0,`\x13`1a\x13\x00\x0c\x0c\x03`\x07\x0c\x03\xa0\x06\x0c\x03\x881a\x13`\x0c\x0c\x03@-`\x13\x980a\x13\x881a\x13p0a\x13\xa0-`\x1381a\x13\x881a\x13\xa0\r\x0c\x03\x10$a\x13\xa0-`\x13\x00.`\x13(2a\x13\xb0,`\x13\x881a\x13(2a\x13\x980a\x13H$a\x13p0a\x13\xb0,`\x13\xa0\r\x0c\x03P,`\x13\x80$a\x13\xe0,`\x13(%a\x13\xd0-`\x13\x980a\x13\x80,`\x13`1a\x13\x00\x0c\x0c\x03\xe0,`\x13p0a\x13\x10-`\x13\xb0,`\x13`1a\x13\xe80a\x13\x101a\x13\xc82a\x13H$a\x13`1a\x13\x00.`\x13\xa0\r\x0c\x03P,`\x13\x10$a\x13\xe80a\x13\xd8#a\x13 \x0c\x0c\x03\x80,`\x13\xe0,`\x13\x101a\x13\xb8$a\x13\xb0,`\x13p0a\x13\x980a\x13\x10$a\x13\xc00a\x13`\x0c\x0c\x03\xc00a\x13\xd8#a\x13\xd81a\x13`\x0c\x0c\x03\xa02a\x13\x80,`\x13\xa0\r\x0c\x03\x80,`\x13 ,`\x13\x881a\x13P,`\x13\x80,`\x13\xb0,`\x13\x881a\x13\xb0,`\x13\x00\x0c\x0c\x03\x101a\x13H$a\x13\xe80a\x13`1a\x13\x881a\x13H$a\x13 ,`\x13`\x0c\x0c\x03x2a\x13\x10$a\x13`1a\x1381a\x13\xa0\x06\x0c\x03\x980a\x13\xe0,`\x13\xa0\r\x0c\x03\xc82a\x1381a\x13\x881a\x13`\x0c\x0c\x0381a\x13P2a\x13\x00\x0c\x0c\x03\xe80a\x13\xd0-`\x13P,`\x13\xd8#a\x13\x10-`\x13\xe80a\x1381a\x13\x881a\x13\xd8#a\x13\xf0$a\x13\xc00a\x13\x101a\x13 ,`\x130.`\x13\xd8#a\x13\x101a\x13\xa0-`\x13\xd8#a\x13\xe80a\x130.`\x13 ,`\x13\x10$a\x13\xa0\x06\x0c\x0381a\x13p0a\x13\x101a\x13\xb0,`\x13\xa0\x06\x0c\x03p0a\x13\xa0\r\x0c\x03\x80,`\x13`\x0c\x0c\x03\xb0,`\x13\xa0\x06\x0c\x03\xe80a\x13\x80$a\x13p-`\x13\xe0,`\x13\xe80a\x13\x980a\x13\x00\x0c\x0c\x03\xa0\x06\x0c\x03\xd8#a\x13\x80,`\x13`\x0c\x0c\x03(%a\x13`1a\x13\x10$a\x13`1a\x13\x00\x0c\x0c\x03(%a\x13\x00\x0c\x0c\x03H$a\x13\xa0\r\x0c\x03\xa0-`\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x80\xfba\x13`\xfaa\x13\x80\xfca\x13@\xfca\x13\xa0\xfba\x13\xe0\xf9a\x13\xc0\xfca\x13\xe0\xfca\x13\x00\xfba\x13\x00\xfda\x13@\xfba\x13\xe0\xfba\x13 \xfda\x13\xa0\xfaa\x13`\xfca\x13\x80\xfaa\x13 \xfca\x13\x00\xfca\x13@\xfea\x13`\xfea\x13\xe0\xfaa\x13`\xfda\x13\xa0\xfca\x13\x00\xfea\x13\xa0\xfda\x13\xe0\xfea\x13@\xffa\x13 \xfea\x13`\xfba\x13\x00\xffa\x13\xc0\xfda\x13\xc0\xfba\x13\xe0\xffa\x13\xa0\xffa\x13\x80\xfea\x13\x80\xffa\x13\xc0\xfaa\x13@\xfda\x13\xc0\xfea\x13\x00\xfaa\x13 \xffa\x13 \xfba\x13\xe0\xfda\x13@\xfaa\x13`\xffa\x13\xc0\xffa\x13\xa0\xfea\x13\x00\xc5\r\x03 2v\x13 0v\x13\x001v\x13\x802v\x13@2v\x13\xc02v\x13\xa02v\x13\x002v\x13\xe02v\x13\x003v\x13 3v\x13\x803v\x13`3v\x13\xc01v\x13\xa03v\x13\x004v\x13 4v\x13@1v\x13`4v\x13@4v\x13\xa04v\x13\xc04v\x13\xe01v\x13\x005v\x13 5v\x13\x801v\x13\xa00v\x13@5v\x13\x80\xfda\x13\xc05v\x13\xe05v\x13`5v\x13`0v\x13\x800v\x13 1v\x13\xa05v\x13\xe03v\x13\xc06v\x13\xc00v\x13\x805v\x13 7v\x13@7v\x13@0v\x13\xa06v\x13\xa07v\x13\xc07v\x13@6v\x13\x007v\x13`6v\x13\xe00v\x13\x807v\x13\xc03v\x13`1v\x13\xa08v\x13\xc08v\x13\x009v\x13 9v\x13\x806v\x13 8v\x13@8v\x13\xa09v\x13\xc09v\x13`8v\x13\x008v\x13 :v\x13@:v\x13\xe09v\x13\xe06v\x13\xe08v\x13\x808v\x13\xc0:v\x13`9v\x13\xe07v\x13\xa01v\x13\xe0:v\x13\x80;v\x13\xa0;v\x13`2v\x13\x80:v\x13`7v\x13 <v\x13\xc0;v\x13`:v\x13\x804v\x13\xa0<v\x13\xc0<v\x13\x80<v\x13\xe0<v\x13\x00:v\x13\x00=v\x13\x809v\x13\x80=v\x13@;v\x13\xa0=v\x13 =v\x13\x006v\x13 >v\x13 6v\x13`;v\x13@9v\x13\xa0>v\x13\xc0>v\x13\x00>v\x13\xe0=v\x13@3v\x13\xe04v\x13`<v\x13@>v\x13@=v\x13\xe0>v\x13\xe0;v\x13\xe0?v\x13\x00?v\x13@?v\x13 ?v\x13`=v\x13`?v\x13 ;v\x13\xa0:v\x13\x80>v\x13\x00<v\x13`>v\x13\xc0?v\x13\x00;v\x13\xa0?v\x13\x80?v\x13\xc0=v\x13\xc0\x01\xa1\x13@\x02\xa1\x13\xa0\x01\xa1\x13`\x02\xa1\x13\xa0\x02\xa1\x13 \x00\xa1\x13\x80\x02\xa1\x13\x00\x03\xa1\x13\xe0\x02\xa1\x13@\x03\xa1\x13 \x03\xa1\x13`\x00\xa1\x13`\x03\xa1\x13\x80\x03\xa1\x13\xe0\x03\xa1\x13\xc0\x03\xa1\x13\x80\x00\xa1\x13\x00\x04\xa1\x13`\x04\xa1\x13@\x04\xa1\x13@\x01\xa1\x13\x80\x04\xa1\x13\xa0\x04\xa1\x13\x00\x05\xa1\x13\xe0\x04\xa1\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S"\xec\xd2L?v\xfbn?\xcf\xf6n?\xa6\x8e\x88?\x94J\x84?\x03\x8fH?.\xb7j?rRD?\xf0\r@?\xb4~7?\xe6JD?\x84\\U?;SD?\xf8\xf2\x8e?\x9c6\xb3?\xc3x\x86?\xe9\x1dQ?\xc3\xf5.?\xbe\xea]?=\x0e@?\x8e\xc4{?\xc7\xd0j?p\x847?\xa0QD?n\xc9;?\x00[\xb5?)\xb5j?^\xec]?6\xf8.?\xa2\x06@?\x0cH\x84?\xa0KD?\x0fI\xa4?\xb6\x11\xe0?`{\x97?\xc7%b?\xa6\xb0\x8a?\xd4\xfan?\x9e\xbc\x8a?\xfb:3?\xd2\x83\x88?\xe5\x17Q?UA\x04@\xd10\xd3?\xb4\x8f\x88?\xa6\xb0\x8a?p\x1aQ?\xd4\xd2\x8c?m\x06\x80?\x8c\xc5;?t\xc1\x9b?\xe1\xb8*?\xdd\xd4L?\x9e5\x93?\x00\xbaj?\xa6\xe6n?\x00%\x82?\x170b?Y\xd7L?\xb9\xd9L?Gy\x86?\x15\x07@?N\xe5]?\xf0\xd4L?\xc3\xc2;?\xb4m&?\xc9\x00/?\xa5\x847?\xe8\x847?D\xeb]?\xd7\x837?\xc3\xfbn?4\xafH?j\xc3;?\x8d\x93H?.o&?L\xefn?\x9f\x9c\xb9?5\xfe.?C\x837?\x7fKD?\x02\x9bH?\xd4\xb0*?|\x17Q?\xc9\xef\x9d?\x87/b?\x95G\x84?\xad\xc9{?\xaa\x03\xa0?\xcdRD?J\x18Q?\x86\x90H?tff?!9\x93?\x1c*b?\x99\xac\xb9?\xf1uf?\xe6\x90H?\x0f\xc3;?\xa5l\x86?\xb0\xd3L?n\xb6*?\xa4\xfa.?\x94\xa9*?6\x1aQ?58\x93?a\x86H?\x84\xbfY?\x04cU?\xe6\xa5Y?\xde)b?\x87\xad\xaa?\xfbmf?_\xf2\x8e?\\\xa1Y?\xb9i\xa6?9\x06\xc0?;x\xa6?\xcd\x17Q?.l\x86?\xe7\x1cQ?\x94JD?\xc7}\x97?M\xb8j?\xf0\x0b@?{\x9f\x99?\x19\x8c\x88?\x95l&?j\xd4L?\xde\xf5\x8e?\x16F\xa4?\n5s?s(\x82?\xc3af?\x1c\x98H?P\xd9L?\xa2\x85w?\xc6\x01\x80?%\xc2{?\x0f\x1eb?\xd4\xad\x8a?\n\xeb]?\xd0\xb5\x9b?\xed}\x97?\xbcW3?6\xfc.?\xe9\xc6{?\xed%\x82?\xd1\xb0\x8a?\x95#\xb1?\x8e~7?\x98\x1f\x02@6\x00\x00@2sf?\x05\x9cw?\xccmf?'\xd4\x8c?\x93\x8fH?r\x82\xe8?\x89\xe1;?\xb5\x0c@?kOD?3m\xa6?D\x1eQ?\x82\x0fQ?\xeb\xfc.?\x05\x13\x91?\xf5\xf6n?\xd6\xe6n?O~w?X\x847?\xb2\xdc{?1\xd0\x8c?0\x8f\xa8?m?s?\xee\xf5n?\xc7\xfdn?\xc9LD?q\xdbL?\x03\x91H?z\x03\x80?+\xc9;?\x05\xe2;?\x08\xc6;?\x93\x9c\xb9?\xb5\xd0\xac?\x9d\xe6]?/\xf7]?\xac&\xa2?\xb1\xb6j?\xa9sf?q\xea]?\xf2i\xc6?q\xa0Y?\\\xfen?\x8d\xb7*?\xf4\x02\x80?\x17\xe4]?\x9e\xabY?;-b?"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'@\x9d\xe7\x04`\x98\xe7\x04\x90X\xcb\x04H^\xcb\x04\x08\\\xcb\x04H[\xcb\x04\xb0_\xcb\x04\xe8W\xcb\x04 Y\xcb\x04\x98P\xcb\x04\x98_\xcb\x048\x10\x82\x04\x90\x18\x82\x04\xd0\x11\x82\x04\x98\x19\x82\x04\xf8\x10\x82\x04\xc8\x16\x82\x04\x80\x10\x82\x04H\x12\x82\x04P\x10\x82\x04\xe8\x17\x82\x04\xb8\x11\x82\x048\x13\x82\x04X\x14\x82\x04\xa8\x15\x82\x04\xb0\x19\x82\x04(\x11\x82\x04@\x11\x82\x04\x08\x16\x82\x04\xe0\x10\x82\x04 \x16\x82\x04\xc8\x13\x82\x04\x08\x13\x82\x048\x19\x82\x04\xa0\x11\x82\x04p\x17\x82\x04h\x19\x82\x04\x98\x13\x82\x04\x90\x12\x82\x04P\x16\x82\x04`\x18\x82\x04\xc8\x10\x82\x04\xc0\x18\x82\x04\x08\x19\x82\x040\x12\x82\x04\x10\x1d\x82\x04\x98\x1c\x82\x04\x88\x17\x82\x04\xc0\x15\x82\x04\xb0\x10\x82\x04 \x19\x82\x048\x16\x82\x04\xb0\x13\x82\x04 \x10\x82\x04\x18\x18\x82\x04\x00\x18\x82\x04\x10\x11\x82\x04\xc0\x1e\x82\x04\x00\x1b\x82\x04 \x1c\x82\x04(\x17\x82\x04\xd0\x1a\x82\x04\x18\x12\x82\x04H\x18\x82\x04\x90\x15\x82\x04\x88\x1a\x82\x04\xd8\x15\x82\x04\xf8\x19\x82\x04\xd0\x17\x82\x04\x80\x13\x82\x04\xe0\x19\x82\x04(\x1d\x82\x04(\x1a\x82\x04\xf8\x13\x82\x04h\x1c\x82\x04\x00\x12\x82\x04\xd8\x18\x82\x04\x18\x1e\x82\x04\xa0\x17\x82\x04\xc8\x19\x82\x04\x80\x16\x82\x04@\x1a\x82\x04\xf0\x1b\x82\x04X\x1a\x82\x04x\x1b\x82\x04\xb8\x1d\x82\x04 \x13\x82\x04@\x17\x82\x048\x1f\x82\x04\xf0\x15\x82\x04x\x18\x82\x04\xb8\x17\x82\x04\x80\x1c\x82\x04P\x1f\x82\x04\x98\x16\x82\x04\xe8\x1a\x82\x04h\x10\x82\x04p\x1a\x82\x04\x98\x10\x82\x04X\x1d\x82\x04\x08\x1f\x82\x04\x08\x1c\x82\x04P\x19\x82\x04P\x1c\x82\x04\xf8\x1c\x82\x04X\x11\x82\x04p\x11\x82\x04x\x1e\x82\x04x\x15\x82\x04\xd8\x1e\x82\x04`\x12\x82\x04\xb0\x16\x82\x04\x80\x1f\x82\x04\xe8\x1d\x82\x04h\x13\x82\x04\xa0\x1d\x82\x04\xb0\x1c\x82\x04 \x1f\x82\x04\xa0\x1a\x82\x04h\x1f\x82\x040\x18\x82\x04\x18\x1b\x82\x04\xa8\x1e\x82\x04\x10\x17\x82\x04\x80\x19\x82\x04X\x17\x82\x040\x1e\x82\x04\x10\x1a\x82\x04\xe0\x16\x82\x04H\x1b\x82\x04\x88\x11\x82\x04\xa8\x1b\x82\x04\xc0\x1b\x82\x04@\x1d\x82\x04\xc8\x1f\x82\x04`\x1e\x82\x04P\x13\x82\x04p\x1d\x82\x04\xf8\x16\x82\x04\x90\x1e\x82\x04`\x1b\x82\x04\xe0\x1c\x82\x04\xb0\x1f\x82\x04\x00\x1e\x82\x04\xe0\x1f\x82\x04\xf0\x1e\x82\x04\xa8\x18\x82\x04\xe8\x11\x82\x04\x98\x1f\x82\x04\xd8\x1b\x82\x04H\x1e\x82\x04\xf0\x18\x82\x048\x1c\x82\x04\xd0\x1d\x82\x04\xc8\x1c\x82\x040\x1b\x82\x04pQ\xcb\x04\x00[\xcb\x04 V\xcb\x04\x98S\xcb\x04hS\xcb\x04\x08S\xcb\x04\xa0Q\xcb\x04\x88Q\xcb\x04\x18[\xcb\x04\xb0S\xcb\x04\xf0X\xcb\x04\xe8T\xcb\x04HX\xcb\x04xX\xcb\x04@W\xcb\x04\x10T\xcb\x04HU\xcb\x04\xf8P\xcb\x048P\xcb\x04\x80V\xcb\x04xU\xcb\x04\x88Z\xcb\x04(T\xcb\x04\x08Y\xcb\x04PY\xcb\x04\xa0W\xcb\x04\xc8P\xcb\x04PS\xcb\x040R\xcb\x04\x10Z\xcb\x04\x18R\xcb\x04\x90R\xcb\x04\x88T\xcb\x04\x98Y\xcb\x04\x10Q\xcb\x04\x00^\xcb\x04(Q\xcb\x04XW\xcb\x04\x00R\xcb\x04PP\xcb\x040[\xcb\x04\x88]\xcb\x04\x10]\xcb\x04h\\\xcb\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6520
sg6370
g6510
sg6384
g6514
sg6379
g6518
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6463
sg6370
g6544
sg6384
g6470
sg6379
g6551
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6429
sg6370
g6559
sg6384
g6436
sg6379
g6566
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6578
sg6370
g6574
sg6384
g6585
sg6379
g6582
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6595
sg6370
g6591
sg6384
g6602
sg6379
g6599
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6497
sg6370
g6621
sg6384
g6504
sg6379
g6628
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6578
sg6370
g6636
sg6384
g6585
sg6379
g6643
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6531
sg6370
g6651
sg6384
g6538
sg6379
g6658
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6375
sg6370
g6666
sg6384
g6385
sg6379
g6673
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6685
sg6370
g6681
sg6384
g6692
sg6379
g6689
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6715
sg6370
g6711
sg6384
g6722
sg6379
g6719
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6595
sg6370
g6591
sg6384
g6602
sg6379
g6599
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6745
sg6370
g6741
sg6384
g6752
sg6379
g6749
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6768
sg6370
g6758
sg6384
g6762
sg6379
g6766
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6685
sg6370
g6788
sg6384
g6692
sg6379
g6795
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6768
sg6370
g6803
sg6384
g6762
sg6379
g6810
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6715
sg6370
g6831
sg6384
g6722
sg6379
g6838
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6685
sg6370
g6788
sg6384
g6692
sg6379
g6795
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6863
sg6370
g6859
sg6384
g6870
sg6379
g6867
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6446
sg6370
g6902
sg6384
g6453
sg6379
g6909
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6480
sg6370
g6917
sg6384
g6487
sg6379
g6924
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6412
sg6370
g6932
sg6384
g6419
sg6379
g6939
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6578
sg6370
g6574
sg6384
g6585
sg6379
g6582
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6531
sg6370
g6651
sg6384
g6538
sg6379
g6658
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6990
sg6370
g6986
sg6384
g6997
sg6379
g6994
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6375
sg6370
g6666
sg6384
g6385
sg6379
g6673
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6990
sg6370
g7016
sg6384
g6997
sg6379
g7023
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6595
sg6370
g6591
sg6384
g6602
sg6379
g6599
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g7048
sg6370
g7044
sg6384
g7055
sg6379
g7052
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6715
sg6370
g6831
sg6384
g6722
sg6379
g6838
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6768
sg6370
g6758
sg6384
g6762
sg6379
g6766
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g7104
sg6370
g7100
sg6384
g7111
sg6379
g7108
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6768
sg6370
g6803
sg6384
g6762
sg6379
g6810
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g7104
sg6370
g7156
sg6384
g7111
sg6379
g7163
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6429
sg6370
g6559
sg6384
g6436
sg6379
g6566
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6578
sg6370
g6574
sg6384
g6585
sg6379
g6582
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6990
sg6370
g6986
sg6384
g6997
sg6379
g6994
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g7104
sg6370
g7100
sg6384
g7111
sg6379
g7108
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6578
sg6370
g6574
sg6384
g6585
sg6379
g6582
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6685
sg6370
g6681
sg6384
g6692
sg6379
g6689
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6463
sg6370
g6544
sg6384
g6470
sg6379
g6551
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6520
sg6370
g7288
sg6384
g6514
sg6379
g7295
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g7104
sg6370
g7156
sg6384
g7111
sg6379
g7163
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6463
sg6370
g6544
sg6384
g6470
sg6379
g6551
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6531
sg6370
g6651
sg6384
g6538
sg6379
g6658
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6685
sg6370
g6681
sg6384
g6692
sg6379
g6689
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6520
sg6370
g6510
sg6384
g6514
sg6379
g6518
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6412
sg6370
g6932
sg6384
g6419
sg6379
g6939
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6595
sg6370
g6591
sg6384
g6602
sg6379
g6599
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6863
sg6370
g7433
sg6384
g6870
sg6379
g7440
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6595
sg6370
g7448
sg6384
g6602
sg6379
g7455
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g7048
sg6370
g7489
sg6384
g7055
sg6379
g7496
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6715
sg6370
g6831
sg6384
g6722
sg6379
g6838
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g6595
sg6370
g7448
sg6384
g6602
sg6379
g7455
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6429
sg6370
g6559
sg6384
g6436
sg6379
g6566
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6375
sg6370
g6666
sg6384
g6385
sg6379
g6673
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6520
sg6370
g7288
sg6384
g6514
sg6379
g7295
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g7048
sg6370
g7044
sg6384
g7055
sg6379
g7052
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6745
sg6370
g7582
sg6384
g6752
sg6379
g7589
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6863
sg6370
g6859
sg6384
g6870
sg6379
g6867
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g7048
sg6370
g7489
sg6384
g7055
sg6379
g7496
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6685
sg6370
g6788
sg6384
g6692
sg6379
g6795
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g7048
sg6370
g7489
sg6384
g7055
sg6379
g7496
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6685
sg6370
g6788
sg6384
g6692
sg6379
g6795
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6480
sg6370
g6917
sg6384
g6487
sg6379
g6924
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6412
sg6370
g6932
sg6384
g6419
sg6379
g6939
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6463
sg6370
g6544
sg6384
g6470
sg6379
g6551
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6745
sg6370
g6741
sg6384
g6752
sg6379
g6749
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g7104
sg6370
g7156
sg6384
g7111
sg6379
g7163
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6595
sg6370
g6591
sg6384
g6602
sg6379
g6599
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6863
sg6370
g7433
sg6384
g6870
sg6379
g7440
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6497
sg6370
g6621
sg6384
g6504
sg6379
g6628
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6520
sg6370
g6510
sg6384
g6514
sg6379
g6518
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6531
sg6370
g6651
sg6384
g6538
sg6379
g6658
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6463
sg6370
g6544
sg6384
g6470
sg6379
g6551
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6578
sg6370
g6636
sg6384
g6585
sg6379
g6643
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6768
sg6370
g6758
sg6384
g6762
sg6379
g6766
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6578
sg6370
g6636
sg6384
g6585
sg6379
g6643
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6429
sg6370
g6559
sg6384
g6436
sg6379
g6566
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6768
sg6370
g6758
sg6384
g6762
sg6379
g6766
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6745
sg6370
g6741
sg6384
g6752
sg6379
g6749
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6446
sg6370
g6902
sg6384
g6453
sg6379
g6909
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6446
sg6370
g6902
sg6384
g6453
sg6379
g6909
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g7104
sg6370
g7100
sg6384
g7111
sg6379
g7108
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6412
sg6370
g6932
sg6384
g6419
sg6379
g6939
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6446
sg6370
g6902
sg6384
g6453
sg6379
g6909
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6520
sg6370
g6510
sg6384
g6514
sg6379
g6518
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g7104
sg6370
g7156
sg6384
g7111
sg6379
g7163
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6520
sg6370
g7288
sg6384
g6514
sg6379
g7295
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6715
sg6370
g6831
sg6384
g6722
sg6379
g6838
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6863
sg6370
g6859
sg6384
g6870
sg6379
g6867
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6685
sg6370
g6681
sg6384
g6692
sg6379
g6689
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6745
sg6370
g7582
sg6384
g6752
sg6379
g7589
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g7048
sg6370
g7489
sg6384
g7055
sg6379
g7496
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g7104
sg6370
g7100
sg6384
g7111
sg6379
g7108
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6685
sg6370
g6681
sg6384
g6692
sg6379
g6689
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6375
sg6370
g6666
sg6384
g6385
sg6379
g6673
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6768
sg6370
g6803
sg6384
g6762
sg6379
g6810
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6531
sg6370
g6651
sg6384
g6538
sg6379
g6658
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g7048
sg6370
g7489
sg6384
g7055
sg6379
g7496
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6990
sg6370
g7016
sg6384
g6997
sg6379
g7023
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6497
sg6370
g6621
sg6384
g6504
sg6379
g6628
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6595
sg6370
g7448
sg6384
g6602
sg6379
g7455
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6480
sg6370
g6917
sg6384
g6487
sg6379
g6924
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g7048
sg6370
g7044
sg6384
g7055
sg6379
g7052
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6990
sg6370
g6986
sg6384
g6997
sg6379
g6994
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g7104
sg6370
g7156
sg6384
g7111
sg6379
g7163
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6768
sg6370
g6803
sg6384
g6762
sg6379
g6810
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6990
sg6370
g7016
sg6384
g6997
sg6379
g7023
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6715
sg6370
g6711
sg6384
g6722
sg6379
g6719
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6745
sg6370
g7582
sg6384
g6752
sg6379
g7589
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6595
sg6370
g7448
sg6384
g6602
sg6379
g7455
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6412
sg6370
g6932
sg6384
g6419
sg6379
g6939
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6395
sg6370
g8416
sg6384
g6402
sg6379
g8423
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6375
sg6370
g6666
sg6384
g6385
sg6379
g6673
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6745
sg6370
g7582
sg6384
g6752
sg6379
g7589
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6990
sg6370
g6986
sg6384
g6997
sg6379
g6994
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g7104
sg6370
g7100
sg6384
g7111
sg6379
g7108
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6395
sg6370
g8416
sg6384
g6402
sg6379
g8423
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6715
sg6370
g6711
sg6384
g6722
sg6379
g6719
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6578
sg6370
g6636
sg6384
g6585
sg6379
g6643
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6863
sg6370
g7433
sg6384
g6870
sg6379
g7440
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6990
sg6370
g6986
sg6384
g6997
sg6379
g6994
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6863
sg6370
g6859
sg6384
g6870
sg6379
g6867
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6578
sg6370
g6636
sg6384
g6585
sg6379
g6643
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6395
sg6370
g8416
sg6384
g6402
sg6379
g8423
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6745
sg6370
g6741
sg6384
g6752
sg6379
g6749
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6990
sg6370
g7016
sg6384
g6997
sg6379
g7023
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6497
sg6370
g6621
sg6384
g6504
sg6379
g6628
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6990
sg6370
g7016
sg6384
g6997
sg6379
g7023
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6429
sg6370
g6559
sg6384
g6436
sg6379
g6566
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6863
sg6370
g6859
sg6384
g6870
sg6379
g6867
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6520
sg6370
g7288
sg6384
g6514
sg6379
g7295
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6497
sg6370
g6621
sg6384
g6504
sg6379
g6628
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6480
sg6370
g6917
sg6384
g6487
sg6379
g6924
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6768
sg6370
g6803
sg6384
g6762
sg6379
g6810
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6520
sg6370
g7288
sg6384
g6514
sg6379
g7295
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6745
sg6370
g7582
sg6384
g6752
sg6379
g7589
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6395
sg6370
g8416
sg6384
g6402
sg6379
g8423
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6520
sg6370
g6510
sg6384
g6514
sg6379
g6518
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6595
sg6370
g7448
sg6384
g6602
sg6379
g7455
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6745
sg6370
g6741
sg6384
g6752
sg6379
g6749
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6715
sg6370
g6711
sg6384
g6722
sg6379
g6719
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6395
sg6370
g8416
sg6384
g6402
sg6379
g8423
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6446
sg6370
g6902
sg6384
g6453
sg6379
g6909
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6768
sg6370
g6758
sg6384
g6762
sg6379
g6766
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6863
sg6370
g7433
sg6384
g6870
sg6379
g7440
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g7048
sg6370
g7044
sg6384
g7055
sg6379
g7052
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g7048
sg6370
g7044
sg6384
g7055
sg6379
g7052
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6715
sg6370
g6831
sg6384
g6722
sg6379
g6838
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6863
sg6370
g7433
sg6384
g6870
sg6379
g7440
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6715
sg6370
g6711
sg6384
g6722
sg6379
g6719
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6685
sg6370
g6788
sg6384
g6692
sg6379
g6795
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6480
sg6370
g6917
sg6384
g6487
sg6379
g6924
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6578
sg6370
g6574
sg6384
g6585
sg6379
g6582
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.